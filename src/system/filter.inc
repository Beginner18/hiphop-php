// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"filter_has_var", T(Boolean), S(0), "type", T(Int32), NULL, NULL, S(0), "variable_name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.filter-has-var.php )\n *\n * Checks if variable of specified type exists.\n *\n * @type       int     One of INPUT_GET, INPUT_POST, INPUT_COOKIE,\n *                     INPUT_SERVER, or INPUT_ENV.\n * @variable_name\n *             string  Name of a variable to check.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"filter_id", T(Variant), S(0), "filtername", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.filter-id.php )\n *\n * Returns the filter ID belonging to a named filter.\n *\n * @filtername string  Name of a filter to get.\n *\n * @return     mixed   ID of a filter on success or FALSE if filter doesn't\n *                     exist.\n */", 
"filter_input_array", T(Variant), S(0), "type", T(Int32), NULL, NULL, S(0), "definition", T(Variant), "i:516;", "FILTER_DEFAULT", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.filter-input-array.php\n * )\n *\n * Gets external variables and optionally filters them.\n *\n * @type       int     One of INPUT_GET, INPUT_POST, INPUT_COOKIE,\n *                     INPUT_SERVER, or INPUT_ENV.\n * @definition mixed   An array defining the arguments. A valid key is a\n *                     string\n *                     \t\tcontaining a variable name and a valid value is\n *                     either a filter type, or\n *                     \t\tan array optionally specifying the filter, flags\n *                     and options. If the\n *                     \t\tvalue is an array, valid keys are filter which\n *                     specifies the filter\n *                     \t\ttype, flags which specifies any flags that apply\n *                     to the filter, and\n *                     \t\toptions which specifies any options that apply to\n *                     the filter. See the\n *                     \t\texample below for a better understanding.\n *\n *                     \t\tThis parameter can be also an integer holding a\n *                     filter constant. Then\n *                     \t\tall values in the input array are filtered by this\n *                     filter.\n *\n * @return     mixed   An array containing the values of the requested\n *                     variables on\n *                     \t  success, or FALSE on failure. An array value will\n *                     be FALSE if the filter\n *                     \t  fails, or NULL if the variable is not set. Or if\n *                     the flag\n *                     \t  FILTER_NULL_ON_FAILURE is used, it returns FALSE\n *                     if the variable is not\n *                     \t  set and NULL if the filter fails.\n */", 
"filter_input", T(Variant), S(0), "type", T(Int32), NULL, NULL, S(0), "variable_name", T(String), NULL, NULL, S(0), "filter", T(Int32), "i:516;", "FILTER_DEFAULT", S(0), "options", T(Variant), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.filter-input.php )\n *\n * Gets a specific external variable by name and optionally filters it\n *\n * @type       int     One of INPUT_GET, INPUT_POST, INPUT_COOKIE,\n *                     INPUT_SERVER, or INPUT_ENV.\n * @variable_name\n *             string  Name of a variable to get.\n * @filter     int     The ID of the filter to apply. The Types of filters\n *                     manual\n *                     \t\tpage lists the available filters.\n * @options    mixed   Associative array of options or bitwise disjunction\n *                     of flags.\n *                     \t\tIf filter accepts options, flags can be provided\n *                     in 'flags' field of\n *                     \t\tarray.\n *\n * @return     mixed   Value of the requested variable on success, FALSE if\n *                     the\n *                     \t  filter fails, or NULL if the variable_name\n *                     variable is not set. If the\n *                     \t  flag FILTER_NULL_ON_FAILURE is used, it returns\n *                     FALSE if the variable is\n *                     \t  not set and NULL if the filter fails.\n */", 
"filter_list", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.filter-list.php )\n *\n * Returns a list of all supported filters.\n *\n * @return     mixed   Returns an array of names of all supported filters,\n *                     empty\n *                     \t  array if there are no such filters. Indexes of\n *                     this array are not filter\n *                     \t  IDs, they can be obtained with filter_id() from a\n *                     name instead.\n */", 
"filter_var_array", T(Variant), S(0), "data", T(Array), NULL, NULL, S(0), "definition", T(Variant), "i:516;", "FILTER_DEFAULT", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.filter-var-array.php )\n *\n * Gets multiple variables and optionally filters them\n *\n * @data       map     An array with string keys containing the data to\n *                     filter.\n * @definition mixed   An array defining the arguments. A valid key is a\n *                     string\n *                     \t\tcontaining a variable name and a valid value is\n *                     either a filter type, or\n *                     \t\tan array optionally specifying the filter, flags\n *                     and options. If the\n *                     \t\tvalue is an array, valid keys are filter which\n *                     specifies the filter\n *                     \t\ttype, flags which specifies any flags that apply\n *                     to the filter, and\n *                     \t\toptions which specifies any options that apply to\n *                     the filter. See the\n *                     \t\texample below for a better understanding.\n *\n *                     \t\tThis parameter can be also an integer holding a\n *                     filter constant. Then\n *                     \t\tall values in the input array are filtered by this\n *                     filter.\n *\n * @return     mixed   An array containing the values of the requested\n *                     variables on\n *                     \t  success, or FALSE on failure. An array value will\n *                     be FALSE if the filter\n *                     \t  fails, or NULL if the variable is not set.\n */", 
"filter_var", T(Variant), S(0), "variable", T(Variant), NULL, NULL, S(0), "filter", T(Int32), "i:516;", "FILTER_DEFAULT", S(0), "options", T(Variant), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.filter-var.php )\n *\n * Filters a variable with a specified filter\n *\n * @variable   mixed   Value to filter.\n * @filter     int     The ID of the filter to apply. See the types of\n *                     filters on\n *                     \t\tthe PHP manual\n * @options    mixed   Associative array of options or bitwise disjunction\n *                     of flags.\n *                     \t\tIf filter accepts options, flags can be provided\n *                     in 'flags' field of\n *                     \t\tarray. For the 'callback' filter, callable type\n *                     should be passed. The\n *                     \t\tcallback must accept one argument, the value to be\n *                     filtered, and return\n *                     \t\tthe value after filtering/sanitizing it.\n *\n * @return     mixed   Returns the filtered data, or FALSE if the filter\n *                     fails.\n */", 

#elif EXT_TYPE == 1
"INPUT_POST", T(Int64),
"INPUT_GET", T(Int64),
"INPUT_COOKIE", T(Int64),
"INPUT_ENV", T(Int64),
"INPUT_SERVER", T(Int64),
"INPUT_SESSION", T(Int64),
"INPUT_REQUEST", T(Int64),
"FILTER_FLAG_NONE", T(Int64),
"FILTER_REQUIRE_SCALAR", T(Int64),
"FILTER_REQUIRE_ARRAY", T(Int64),
"FILTER_FORCE_ARRAY", T(Int64),
"FILTER_NULL_ON_FAILURE", T(Int64),
"FILTER_VALIDATE_INT", T(Int64),
"FILTER_VALIDATE_BOOLEAN", T(Int64),
"FILTER_VALIDATE_FLOAT", T(Int64),
"FILTER_VALIDATE_REGEXP", T(Int64),
"FILTER_VALIDATE_URL", T(Int64),
"FILTER_VALIDATE_EMAIL", T(Int64),
"FILTER_VALIDATE_IP", T(Int64),
"FILTER_DEFAULT", T(Int64),
"FILTER_UNSAFE_RAW", T(Int64),
"FILTER_SANITIZE_STRING", T(Int64),
"FILTER_SANITIZE_STRIPPED", T(Int64),
"FILTER_SANITIZE_ENCODED", T(Int64),
"FILTER_SANITIZE_SPECIAL_CHARS", T(Int64),
"FILTER_SANITIZE_FULL_SPECIAL_CHARS", T(Int64),
"FILTER_SANITIZE_EMAIL", T(Int64),
"FILTER_SANITIZE_URL", T(Int64),
"FILTER_SANITIZE_NUMBER_INT", T(Int64),
"FILTER_SANITIZE_NUMBER_FLOAT", T(Int64),
"FILTER_SANITIZE_MAGIC_QUOTES", T(Int64),
"FILTER_CALLBACK", T(Int64),
"FILTER_FLAG_ALLOW_OCTAL", T(Int64),
"FILTER_FLAG_ALLOW_HEX", T(Int64),
"FILTER_FLAG_STRIP_LOW", T(Int64),
"FILTER_FLAG_STRIP_HIGH", T(Int64),
"FILTER_FLAG_STRIP_BACKTICK", T(Int64),
"FILTER_FLAG_ENCODE_LOW", T(Int64),
"FILTER_FLAG_ENCODE_HIGH", T(Int64),
"FILTER_FLAG_ENCODE_AMP", T(Int64),
"FILTER_FLAG_NO_ENCODE_QUOTES", T(Int64),
"FILTER_FLAG_EMPTY_STRING_NULL", T(Int64),
"FILTER_FLAG_ALLOW_FRACTION", T(Int64),
"FILTER_FLAG_ALLOW_THOUSAND", T(Int64),
"FILTER_FLAG_ALLOW_SCIENTIFIC", T(Int64),
"FILTER_FLAG_SCHEME_REQUIRED", T(Int64),
"FILTER_FLAG_HOST_REQUIRED", T(Int64),
"FILTER_FLAG_PATH_REQUIRED", T(Int64),
"FILTER_FLAG_QUERY_REQUIRED", T(Int64),
"FILTER_FLAG_IPV4", T(Int64),
"FILTER_FLAG_IPV6", T(Int64),
"FILTER_FLAG_NO_RES_RANGE", T(Int64),
"FILTER_FLAG_NO_PRIV_RANGE", T(Int64),

#elif EXT_TYPE == 2

#elif EXT_TYPE == 3

#endif
