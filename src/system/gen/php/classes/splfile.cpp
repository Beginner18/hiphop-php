/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010- Facebook, Inc. (http://www.facebook.com)         |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/
// @generated by HipHop Compiler

#include <php/classes/splfile.h>
#include <php/classes/splfile.fws.h>

// Dependencies
#include <php/classes/iterator.h>
#include <runtime/ext/ext.h>
#include <runtime/eval/eval.h>
namespace hphp_impl_starter {}

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

/* preface starts */
extern CallInfo ci_;
/* preface finishes */
/* SRC: classes/splfile.php line 384 */
const int64 q_SplFileObject$$DROP_NEW_LINE = 1LL;
const int64 q_SplFileObject$$READ_AHEAD = 2LL;
const int64 q_SplFileObject$$SKIP_EMPTY = 6LL;
const int64 q_SplFileObject$$READ_CSV = 8LL;
IMPLEMENT_CLASS_NO_DEFAULT_SWEEP(SplFileObject)
const InstanceOfInfo c_SplFileObject::s_instanceof_table[] = {
  {0x66679538C5E6F0A1LL,1,"Traversable",(const ObjectStaticCallbacks*)2},
  {0x297ECCC7A259EDD2LL,1,"SplFileObject",&cw_SplFileObject},
  {0x191964700AF036D3LL,0,"RecursiveIterator",(const ObjectStaticCallbacks*)2},
  {0x60C47E7FE145DC43LL,1,"SeekableIterator",(const ObjectStaticCallbacks*)2},
  {0x71089C29FE923FA7LL,1,"SplFileInfo",&cw_SplFileInfo},
  {0x0636A5F84AF9D29ELL,1,"Iterator",(const ObjectStaticCallbacks*)2},
};
const int c_SplFileObject::s_instanceof_index[] = {
  15,
  -1,0,1,2,-1,-1,-1,4,
  -1,-1,-1,-1,-1,-1,5,-1,

};
ObjectData *c_SplFileObject::cloneImpl() {
  ObjectData *obj = coo_SplFileObject();
  c_SplFileObject::cloneSet(obj);
  return obj;
}
void c_SplFileObject::cloneSet(ObjectData *cl) {
  c_SplFileObject *clone = static_cast<c_SplFileObject*>(cl);
  c_SplFileInfo::cloneSet(clone);
}
CallInfo c_SplFileObject::ci_fscanf((void*)&c_SplFileObject::i_fscanf, (void*)&c_SplFileObject::ifa_fscanf, 1, 5, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_next((void*)&c_SplFileObject::i_next, (void*)&c_SplFileObject::ifa_next, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_fseek((void*)&c_SplFileObject::i_fseek, (void*)&c_SplFileObject::ifa_fseek, 2, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_key((void*)&c_SplFileObject::i_key, (void*)&c_SplFileObject::ifa_key, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_fgetss((void*)&c_SplFileObject::i_fgetss, (void*)&c_SplFileObject::ifa_fgetss, 1, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_fgetcsv((void*)&c_SplFileObject::i_fgetcsv, (void*)&c_SplFileObject::ifa_fgetcsv, 3, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_valid((void*)&c_SplFileObject::i_valid, (void*)&c_SplFileObject::ifa_valid, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_setcsvcontrol((void*)&c_SplFileObject::i_setcsvcontrol, (void*)&c_SplFileObject::ifa_setcsvcontrol, 3, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_getcsvcontrol((void*)&c_SplFileObject::i_getcsvcontrol, (void*)&c_SplFileObject::ifa_getcsvcontrol, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_setflags((void*)&c_SplFileObject::i_setflags, (void*)&c_SplFileObject::ifa_setflags, 1, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci___construct((void*)&c_SplFileObject::i___construct, (void*)&c_SplFileObject::ifa___construct, 4, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_setmaxlinelen((void*)&c_SplFileObject::i_setmaxlinelen, (void*)&c_SplFileObject::ifa_setmaxlinelen, 1, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_getmaxlinelen((void*)&c_SplFileObject::i_getmaxlinelen, (void*)&c_SplFileObject::ifa_getmaxlinelen, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_ftruncate((void*)&c_SplFileObject::i_ftruncate, (void*)&c_SplFileObject::ifa_ftruncate, 1, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_fflush((void*)&c_SplFileObject::i_fflush, (void*)&c_SplFileObject::ifa_fflush, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_eof((void*)&c_SplFileObject::i_eof, (void*)&c_SplFileObject::ifa_eof, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_fgetc((void*)&c_SplFileObject::i_fgetc, (void*)&c_SplFileObject::ifa_fgetc, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_fpassthru((void*)&c_SplFileObject::i_fpassthru, (void*)&c_SplFileObject::ifa_fpassthru, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_haschildren((void*)&c_SplFileObject::i_haschildren, (void*)&c_SplFileObject::ifa_haschildren, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_fgets((void*)&c_SplFileObject::i_fgets, (void*)&c_SplFileObject::ifa_fgets, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_seek((void*)&c_SplFileObject::i_seek, (void*)&c_SplFileObject::ifa_seek, 1, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_flock((void*)&c_SplFileObject::i_flock, (void*)&c_SplFileObject::ifa_flock, 2, 4, 0x0000000000000002LL);
CallInfo c_SplFileObject::ci_getflags((void*)&c_SplFileObject::i_getflags, (void*)&c_SplFileObject::ifa_getflags, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_getchildren((void*)&c_SplFileObject::i_getchildren, (void*)&c_SplFileObject::ifa_getchildren, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_current((void*)&c_SplFileObject::i_current, (void*)&c_SplFileObject::ifa_current, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_fwrite((void*)&c_SplFileObject::i_fwrite, (void*)&c_SplFileObject::ifa_fwrite, 2, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_ftell((void*)&c_SplFileObject::i_ftell, (void*)&c_SplFileObject::ifa_ftell, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_fstat((void*)&c_SplFileObject::i_fstat, (void*)&c_SplFileObject::ifa_fstat, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileObject::ci_rewind((void*)&c_SplFileObject::i_rewind, (void*)&c_SplFileObject::ifa_rewind, 0, 4, 0x0000000000000000LL);
Variant c_SplFileObject::i_fscanf(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_fscanf, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("SplFileObject::fscanf", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (self->t_fscanf(count, arg0, p));
  }
}
Variant c_SplFileObject::i_next(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_next, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::next", 0, 1);
  return (self->t_next(), null);
}
Variant c_SplFileObject::i_fseek(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_fseek, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("SplFileObject::fseek", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_fseek(arg0, arg1));
  }
}
Variant c_SplFileObject::i_key(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_key, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::key", 0, 1);
  return (self->t_key());
}
Variant c_SplFileObject::i_fgetss(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_fgetss, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("SplFileObject::fgetss", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_fgetss(arg0));
  }
}
Variant c_SplFileObject::i_fgetcsv(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_fgetcsv, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("SplFileObject::fgetcsv", 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_fgetcsv());
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_fgetcsv(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_fgetcsv(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_fgetcsv(arg0, arg1, arg2));
  }
}
Variant c_SplFileObject::i_valid(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_valid, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::valid", 0, 1);
  return (self->t_valid());
}
Variant c_SplFileObject::i_setcsvcontrol(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setcsvcontrol, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("SplFileObject::setCsvControl", 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_setcsvcontrol(), null);
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_setcsvcontrol(arg0), null);
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_setcsvcontrol(arg0, arg1), null);
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_setcsvcontrol(arg0, arg1, arg2), null);
  }
}
Variant c_SplFileObject::i_getcsvcontrol(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getcsvcontrol, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::getCsvControl", 0, 1);
  return (self->t_getcsvcontrol());
}
Variant c_SplFileObject::i_setflags(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setflags, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("SplFileObject::setFlags", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_setflags(arg0), null);
  }
}
Variant c_SplFileObject::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("SplFileObject::__construct", count, 1, 4, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t___construct(arg0), null);
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t___construct(arg0, arg1), null);
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t___construct(arg0, arg1, arg2), null);
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___construct(arg0, arg1, arg2, arg3), null);
  }
}
Variant c_SplFileObject::i_setmaxlinelen(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setmaxlinelen, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("SplFileObject::setMaxLineLen", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_setmaxlinelen(arg0), null);
  }
}
Variant c_SplFileObject::i_getmaxlinelen(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getmaxlinelen, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::getMaxLineLen", 0, 1);
  return (self->t_getmaxlinelen());
}
Variant c_SplFileObject::i_ftruncate(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_ftruncate, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("SplFileObject::ftruncate", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_ftruncate(arg0));
  }
}
Variant c_SplFileObject::i_fflush(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_fflush, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::fflush", 0, 1);
  return (self->t_fflush());
}
Variant c_SplFileObject::i_eof(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_eof, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::eof", 0, 1);
  return (self->t_eof());
}
Variant c_SplFileObject::i_fgetc(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_fgetc, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::fgetc", 0, 1);
  return (self->t_fgetc());
}
Variant c_SplFileObject::i_fpassthru(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_fpassthru, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::fpassthru", 0, 1);
  return (self->t_fpassthru());
}
Variant c_SplFileObject::i_haschildren(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_haschildren, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::hasChildren", 0, 1);
  return (self->t_haschildren());
}
Variant c_SplFileObject::i_fgets(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_fgets, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::fgets", 0, 1);
  return (self->t_fgets());
}
Variant c_SplFileObject::i_seek(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_seek, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("SplFileObject::seek", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_seek(arg0), null);
  }
}
Variant c_SplFileObject::i_flock(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_flock, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("SplFileObject::flock", count, 2, 2, 1);
  const_cast<Array&>(params).escalate(true);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    VRefParam arg1(vref(ad->getValueRef(pos = ad->iter_advance(pos))));
    return (self->t_flock(arg0, arg1));
  }
}
Variant c_SplFileObject::i_getflags(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getflags, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::getFlags", 0, 1);
  return (self->t_getflags());
}
Variant c_SplFileObject::i_getchildren(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getchildren, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::getChildren", 0, 1);
  return (self->t_getchildren());
}
Variant c_SplFileObject::i_current(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_current, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::current", 0, 1);
  return (self->t_current());
}
Variant c_SplFileObject::i_fwrite(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_fwrite, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("SplFileObject::fwrite", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_fwrite(arg0, arg1));
  }
}
Variant c_SplFileObject::i_ftell(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_ftell, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::ftell", 0, 1);
  return (self->t_ftell());
}
Variant c_SplFileObject::i_fstat(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_fstat, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::fstat", 0, 1);
  return (self->t_fstat());
}
Variant c_SplFileObject::i_rewind(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_rewind, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::rewind", 0, 1);
  return (self->t_rewind(), null);
}
Variant c_SplFileObject::ifa_fscanf(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_fscanf, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count < 1)) return throw_missing_arguments("SplFileObject::fscanf", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (self->t_fscanf(count, arg0, p));
}
Variant c_SplFileObject::ifa_next(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_next, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::next", 0, 1);
  return (self->t_next(), null);
}
Variant c_SplFileObject::ifa_fseek(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_fseek, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("SplFileObject::fseek", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_fseek(arg0, arg1));
}
Variant c_SplFileObject::ifa_key(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_key, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::key", 0, 1);
  return (self->t_key());
}
Variant c_SplFileObject::ifa_fgetss(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_fgetss, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("SplFileObject::fgetss", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_fgetss(arg0));
}
Variant c_SplFileObject::ifa_fgetcsv(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_fgetcsv, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("SplFileObject::fgetcsv", 3, 1);
  if (count <= 0) return (self->t_fgetcsv());
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_fgetcsv(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_fgetcsv(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_fgetcsv(arg0, arg1, arg2));
}
Variant c_SplFileObject::ifa_valid(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_valid, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::valid", 0, 1);
  return (self->t_valid());
}
Variant c_SplFileObject::ifa_setcsvcontrol(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setcsvcontrol, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("SplFileObject::setCsvControl", 3, 1);
  if (count <= 0) return (self->t_setcsvcontrol(), null);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_setcsvcontrol(arg0), null);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_setcsvcontrol(arg0, arg1), null);
  CVarRef arg2(a2);
  return (self->t_setcsvcontrol(arg0, arg1, arg2), null);
}
Variant c_SplFileObject::ifa_getcsvcontrol(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getcsvcontrol, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::getCsvControl", 0, 1);
  return (self->t_getcsvcontrol());
}
Variant c_SplFileObject::ifa_setflags(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setflags, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("SplFileObject::setFlags", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_setflags(arg0), null);
}
Variant c_SplFileObject::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("SplFileObject::__construct", count, 1, 4, 2);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t___construct(arg0), null);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t___construct(arg0, arg1), null);
  CVarRef arg2(a2);
  if (count <= 3) return (self->t___construct(arg0, arg1, arg2), null);
  CVarRef arg3(a3);
  return (self->t___construct(arg0, arg1, arg2, arg3), null);
}
Variant c_SplFileObject::ifa_setmaxlinelen(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setmaxlinelen, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("SplFileObject::setMaxLineLen", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_setmaxlinelen(arg0), null);
}
Variant c_SplFileObject::ifa_getmaxlinelen(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getmaxlinelen, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::getMaxLineLen", 0, 1);
  return (self->t_getmaxlinelen());
}
Variant c_SplFileObject::ifa_ftruncate(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_ftruncate, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("SplFileObject::ftruncate", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_ftruncate(arg0));
}
Variant c_SplFileObject::ifa_fflush(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_fflush, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::fflush", 0, 1);
  return (self->t_fflush());
}
Variant c_SplFileObject::ifa_eof(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_eof, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::eof", 0, 1);
  return (self->t_eof());
}
Variant c_SplFileObject::ifa_fgetc(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_fgetc, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::fgetc", 0, 1);
  return (self->t_fgetc());
}
Variant c_SplFileObject::ifa_fpassthru(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_fpassthru, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::fpassthru", 0, 1);
  return (self->t_fpassthru());
}
Variant c_SplFileObject::ifa_haschildren(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_haschildren, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::hasChildren", 0, 1);
  return (self->t_haschildren());
}
Variant c_SplFileObject::ifa_fgets(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_fgets, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::fgets", 0, 1);
  return (self->t_fgets());
}
Variant c_SplFileObject::ifa_seek(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_seek, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("SplFileObject::seek", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_seek(arg0), null);
}
Variant c_SplFileObject::ifa_flock(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_flock, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("SplFileObject::flock", count, 2, 2, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  return (self->t_flock(arg0, arg1));
}
Variant c_SplFileObject::ifa_getflags(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getflags, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::getFlags", 0, 1);
  return (self->t_getflags());
}
Variant c_SplFileObject::ifa_getchildren(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getchildren, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::getChildren", 0, 1);
  return (self->t_getchildren());
}
Variant c_SplFileObject::ifa_current(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_current, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::current", 0, 1);
  return (self->t_current());
}
Variant c_SplFileObject::ifa_fwrite(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_fwrite, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("SplFileObject::fwrite", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_fwrite(arg0, arg1));
}
Variant c_SplFileObject::ifa_ftell(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_ftell, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::ftell", 0, 1);
  return (self->t_ftell());
}
Variant c_SplFileObject::ifa_fstat(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_fstat, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::fstat", 0, 1);
  return (self->t_fstat());
}
Variant c_SplFileObject::ifa_rewind(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_rewind, coo_SplFileObject);
  }
  c_SplFileObject *self ATTRIBUTE_UNUSED (static_cast<c_SplFileObject*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileObject::rewind", 0, 1);
  return (self->t_rewind(), null);
}
const MethodCallInfoTable c_SplFileObject::s_call_info_table[] = {
  { 0x09637D7CA2E33F00LL, 1, 5, "fgetc", &c_SplFileObject::ci_fgetc },
  { 0x5ACCF9166CD9D043LL, 1, 9, "ftruncate", &c_SplFileObject::ci_ftruncate },
  { 0x794FAFD4412AEFC3LL, 0, 3, "eof", &c_SplFileObject::ci_eof },
  { 0x6413CB5154808C44LL, 1, 5, "valid", &c_SplFileObject::ci_valid },
  { 0x44CE4DB1CE7E9F86LL, 1, 5, "flock", &c_SplFileObject::ci_flock },
  { 0x4282E0231F600049LL, 1, 5, "fseek", &c_SplFileObject::ci_fseek },
  { 0x2FC3A6941D522E0ALL, 1, 8, "setFlags", &c_SplFileObject::ci_setflags },
  { 0x7E978C38D741664ELL, 1, 7, "fgetcsv", &c_SplFileObject::ci_fgetcsv },
  { 0x732EC1BDA8EC520FLL, 1, 11, "getChildren", &c_SplFileObject::ci_getchildren },
  { 0x3A335010F905ACD0LL, 1, 13, "setCsvControl", &c_SplFileObject::ci_setcsvcontrol },
  { 0x56EDB60C824E8C51LL, 1, 3, "key", &c_SplFileObject::ci_key },
  { 0x40044334DA397C15LL, 1, 11, "hasChildren", &c_SplFileObject::ci_haschildren },
  { 0x25F68E7910FE9CDALL, 1, 13, "getMaxLineLen", &c_SplFileObject::ci_getmaxlinelen },
  { 0x2B7CAC006AF27F9ALL, 0, 6, "fflush", &c_SplFileObject::ci_fflush },
  { 0x5B33B55D4B7E339BLL, 1, 9, "fpassthru", &c_SplFileObject::ci_fpassthru },
  { 0x5B3A4A72846B21DCLL, 1, 7, "current", &c_SplFileObject::ci_current },
  { 0x3E4E7C561D3A541ELL, 1, 6, "fgetss", &c_SplFileObject::ci_fgetss },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_SplFileObject::ci___construct },
  { 0x27E7DBA875AD17E1LL, 1, 8, "getFlags", &c_SplFileObject::ci_getflags },
  { 0x6FE9F691E4A6D962LL, 1, 13, "getCsvControl", &c_SplFileObject::ci_getcsvcontrol },
  { 0x044B276686B77923LL, 1, 6, "fscanf", &c_SplFileObject::ci_fscanf },
  { 0x05D72365192CE465LL, 1, 6, "fwrite", &c_SplFileObject::ci_fwrite },
  { 0x7EF5445C77054C67LL, 1, 4, "seek", &c_SplFileObject::ci_seek },
  { 0x1670096FDE27AF6ALL, 1, 6, "rewind", &c_SplFileObject::ci_rewind },
  { 0x1C1216F2B7C16CADLL, 1, 5, "ftell", &c_SplFileObject::ci_ftell },
  { 0x7AE1BE187F18FDF3LL, 1, 5, "fgets", &c_SplFileObject::ci_fgets },
  { 0x4CEC6AA30E43D437LL, 1, 13, "setMaxLineLen", &c_SplFileObject::ci_setmaxlinelen },
  { 0x3C6D50F3BB8102B8LL, 1, 4, "next", &c_SplFileObject::ci_next },
  { 0x0890F9052322E838LL, 0, 5, "fstat", &c_SplFileObject::ci_fstat },
  { 0, 1, 0, 0 }
};
const int c_SplFileObject::s_call_info_index[] = {
  63,
  0,-1,-1,1,3,-1,4,-1,
  -1,5,6,-1,-1,-1,7,8,
  9,10,-1,-1,-1,11,-1,-1,
  -1,-1,12,14,15,-1,16,17,
  -1,18,19,20,-1,21,-1,22,
  -1,-1,23,-1,-1,24,-1,-1,
  -1,-1,-1,25,-1,-1,-1,26,
  27,-1,-1,-1,-1,-1,-1,-1,

};
c_SplFileObject *c_SplFileObject::create(CVarRef v_filename, CVarRef v_open_mode //  = NAMVAR(s_sys_svs0d42ecf6, "r")
, CVarRef v_use_include_path //  = false_varNR
, CVarRef v_context //  = null_variant
) {
  CountableHelper h(this);
  init();
  t___construct(v_filename, v_open_mode, v_use_include_path, v_context);
  return this;
}
void c_SplFileObject::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 4)) throw_wrong_arguments("SplFileObject::__construct", count, 1, 4, 2);
  do {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) {
      (t___construct(arg0));
      break;
    }
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) {
      (t___construct(arg0, arg1));
      break;
    }
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) {
      (t___construct(arg0, arg1, arg2));
      break;
    }
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    (t___construct(arg0, arg1, arg2, arg3));
  } while (false);
}
void c_SplFileObject::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_SplFileObject::ci___construct;
  mcp.obj = this;
}
const ObjectStaticCallbacks cw_SplFileObject = {
  (ObjectData*(*)(ObjectData*))coo_SplFileObject,
  c_SplFileObject::s_call_info_table,c_SplFileObject::s_call_info_index,
  c_SplFileObject::s_instanceof_table,c_SplFileObject::s_instanceof_index,
  &c_SplFileObject::s_class_name,
  &c_SplFileObject::os_prop_table,0,&cw_SplFileInfo
};
/* SRC: classes/splfile.php line 392 */
void c_SplFileObject::t___construct(Variant v_filename, Variant v_open_mode //  = NAMSTR(s_sys_ss0d42ecf6, "r")
, Variant v_use_include_path //  = false
, Variant v_context //  = null
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::__construct);
  bool oldInCtor = gasInCtor(true);
  x_hphp_splfileobject___construct(GET_THIS_TYPED(SplFileObject), toString(v_filename), toString(v_open_mode), toBoolean(v_use_include_path), v_context);
  gasInCtor(oldInCtor);
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 410 */
Variant c_SplFileObject::t_current() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::current);
  return x_hphp_splfileobject_current(GET_THIS_TYPED(SplFileObject));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 422 */
bool c_SplFileObject::t_eof() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::eof);
  return x_hphp_splfileobject_eof(GET_THIS_TYPED(SplFileObject));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 434 */
bool c_SplFileObject::t_fflush() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::fflush);
  return x_hphp_splfileobject_fflush(GET_THIS_TYPED(SplFileObject));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 452 */
String c_SplFileObject::t_fgetc() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::fgetc);
  return x_hphp_splfileobject_fgetc(GET_THIS_TYPED(SplFileObject));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 482 */
Variant c_SplFileObject::t_fgetcsv(CVarRef v_delimiter //  = NAMVAR(s_sys_svsd332baa7, ",")
, CVarRef v_enclosure //  = NAMVAR(s_sys_svs7e5fc106, "\"")
, CVarRef v_escape //  = NAMVAR(s_sys_svsd59e789f, "\\")
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::fgetcsv);
  return x_hphp_splfileobject_fgetcsv(GET_THIS_TYPED(SplFileObject), toString(v_delimiter), toString(v_enclosure), toString(v_escape));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 497 */
String c_SplFileObject::t_fgets() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::fgets);
  return x_hphp_splfileobject_fgets(GET_THIS_TYPED(SplFileObject));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 517 */
String c_SplFileObject::t_fgetss(CVarRef v_allowable_tags) {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::fgetss);
  return x_hphp_splfileobject_fgetss(GET_THIS_TYPED(SplFileObject), toString(v_allowable_tags));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 537 */
bool c_SplFileObject::t_flock(CVarRef v_operation, VRefParam rv_wouldblock) {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::flock);
  Variant &v_wouldblock ATTRIBUTE_UNUSED = rv_wouldblock;
  return x_hphp_splfileobject_flock(GET_THIS_TYPED(SplFileObject), ref(v_wouldblock));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 555 */
int64 c_SplFileObject::t_fpassthru() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::fpassthru);
  return x_hphp_splfileobject_fpassthru(GET_THIS_TYPED(SplFileObject));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 579 */
Variant c_SplFileObject::t_fscanf(int num_args, CVarRef v_format, Array args /* = Array() */) {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::fscanf);
  int v_argc = 0;
  Array v_argv;

  {
    int tmp0((num_args));
    v_argc = tmp0;
  }
  {
    const Array &tmp0((func_get_args(num_args, Array(ArrayInit(1).set(v_format).create()),args)));
    v_argv = tmp0;
  }
  return x_hphp_splfileobject_fscanf(toInt64(v_argc), GET_THIS_TYPED(SplFileObject), toString(v_format), VarNR(v_argv));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 607 */
int64 c_SplFileObject::t_fseek(CVarRef v_offset, CVarRef v_whence) {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::fseek);
  return x_hphp_splfileobject_fseek(GET_THIS_TYPED(SplFileObject), toInt64(v_offset), toInt64(v_whence));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 621 */
Variant c_SplFileObject::t_fstat() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::fstat);
  return x_hphp_splfileobject_fstat(GET_THIS_TYPED(SplFileObject));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 635 */
int64 c_SplFileObject::t_ftell() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::ftell);
  return x_hphp_splfileobject_ftell(GET_THIS_TYPED(SplFileObject));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 655 */
bool c_SplFileObject::t_ftruncate(CVarRef v_size) {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::ftruncate);
  return x_hphp_splfileobject_ftruncate(GET_THIS_TYPED(SplFileObject), toInt64(v_size));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 673 */
int64 c_SplFileObject::t_fwrite(CVarRef v_str, CVarRef v_length) {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::fwrite);
  return x_hphp_splfileobject_fwrite(GET_THIS_TYPED(SplFileObject), toString(v_str), toInt64(v_length));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 685 */
Variant c_SplFileObject::t_getchildren() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::getChildren);
  return null;
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 699 */
Variant c_SplFileObject::t_getcsvcontrol() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::getCsvControl);
  return x_hphp_splfileobject_getcvscontrol(GET_THIS_TYPED(SplFileObject));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 711 */
int64 c_SplFileObject::t_getflags() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::getFlags);
  return x_hphp_splfileobject_getflags(GET_THIS_TYPED(SplFileObject));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 725 */
int64 c_SplFileObject::t_getmaxlinelen() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::getMaxLineLen);
  return x_hphp_splfileobject_getmaxlinelen(GET_THIS_TYPED(SplFileObject));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 738 */
bool c_SplFileObject::t_haschildren() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::hasChildren);
  return false;
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 754 */
int64 c_SplFileObject::t_key() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::key);
  return x_hphp_splfileobject_key(GET_THIS_TYPED(SplFileObject));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 766 */
void c_SplFileObject::t_next() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::next);
  x_hphp_splfileobject_next(GET_THIS_TYPED(SplFileObject));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 778 */
void c_SplFileObject::t_rewind() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::rewind);
  x_hphp_splfileobject_rewind(GET_THIS_TYPED(SplFileObject));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 792 */
void c_SplFileObject::t_seek(CVarRef v_line_pos) {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::seek);
  x_hphp_splfileobject_seek(GET_THIS_TYPED(SplFileObject), toInt64(v_line_pos));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 809 */
void c_SplFileObject::t_setcsvcontrol(CVarRef v_delimiter //  = NAMVAR(s_sys_svsd332baa7, ",")
, CVarRef v_enclosure //  = NAMVAR(s_sys_svs7e5fc106, "\"")
, CVarRef v_escape //  = NAMVAR(s_sys_svsd59e789f, "\\")
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::setCsvControl);
  x_hphp_splfileobject_setcsvcontrol(GET_THIS_TYPED(SplFileObject), toString(v_delimiter), toString(v_enclosure), toString(v_escape));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 825 */
void c_SplFileObject::t_setflags(CVarRef v_flags) {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::setFlags);
  x_hphp_splfileobject_setflags(GET_THIS_TYPED(SplFileObject), toInt64(v_flags));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 840 */
void c_SplFileObject::t_setmaxlinelen(CVarRef v_max_len) {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::setMaxLineLen);
  x_hphp_splfileobject_setmaxlinelen(GET_THIS_TYPED(SplFileObject), toInt64(v_max_len));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 852 */
bool c_SplFileObject::t_valid() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileObject, SplFileObject::valid);
  return x_hphp_splfileobject_valid(GET_THIS_TYPED(SplFileObject));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 11 */
IMPLEMENT_CLASS_NO_DEFAULT_SWEEP(SplFileInfo)
const InstanceOfInfo c_SplFileInfo::s_instanceof_table[] = {
  {0x71089C29FE923FA7LL,1,"SplFileInfo",&cw_SplFileInfo},
};
const int c_SplFileInfo::s_instanceof_index[] = {
  1,
  -1,0,
};
ObjectData *c_SplFileInfo::cloneImpl() {
  ObjectData *obj = coo_SplFileInfo();
  c_SplFileInfo::cloneSet(obj);
  return obj;
}
void c_SplFileInfo::cloneSet(ObjectData *cl) {
  c_SplFileInfo *clone = static_cast<c_SplFileInfo*>(cl);
  ObjectData::cloneSet(clone);
  clone->m_rsrc.setWithRef(m_rsrc);
}
CallInfo c_SplFileInfo::ci_getperms((void*)&c_SplFileInfo::i_getperms, (void*)&c_SplFileInfo::ifa_getperms, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_iswritable((void*)&c_SplFileInfo::i_iswritable, (void*)&c_SplFileInfo::ifa_iswritable, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_getbasename((void*)&c_SplFileInfo::i_getbasename, (void*)&c_SplFileInfo::ifa_getbasename, 1, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_getpathname((void*)&c_SplFileInfo::i_getpathname, (void*)&c_SplFileInfo::ifa_getpathname, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_getgroup((void*)&c_SplFileInfo::i_getgroup, (void*)&c_SplFileInfo::ifa_getgroup, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_setfileclass((void*)&c_SplFileInfo::i_setfileclass, (void*)&c_SplFileInfo::ifa_setfileclass, 1, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_setinfoclass((void*)&c_SplFileInfo::i_setinfoclass, (void*)&c_SplFileInfo::ifa_setinfoclass, 1, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci___tostring((void*)&c_SplFileInfo::i___tostring, (void*)&c_SplFileInfo::ifa___tostring, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_getlinktarget((void*)&c_SplFileInfo::i_getlinktarget, (void*)&c_SplFileInfo::ifa_getlinktarget, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_isreadable((void*)&c_SplFileInfo::i_isreadable, (void*)&c_SplFileInfo::ifa_isreadable, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_getrealpath((void*)&c_SplFileInfo::i_getrealpath, (void*)&c_SplFileInfo::ifa_getrealpath, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci___construct((void*)&c_SplFileInfo::i___construct, (void*)&c_SplFileInfo::ifa___construct, 1, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_getpathinfo((void*)&c_SplFileInfo::i_getpathinfo, (void*)&c_SplFileInfo::ifa_getpathinfo, 1, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_getctime((void*)&c_SplFileInfo::i_getctime, (void*)&c_SplFileInfo::ifa_getctime, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_getpath((void*)&c_SplFileInfo::i_getpath, (void*)&c_SplFileInfo::ifa_getpath, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_getinode((void*)&c_SplFileInfo::i_getinode, (void*)&c_SplFileInfo::ifa_getinode, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_islink((void*)&c_SplFileInfo::i_islink, (void*)&c_SplFileInfo::ifa_islink, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_getsize((void*)&c_SplFileInfo::i_getsize, (void*)&c_SplFileInfo::ifa_getsize, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_isfile((void*)&c_SplFileInfo::i_isfile, (void*)&c_SplFileInfo::ifa_isfile, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_getfilename((void*)&c_SplFileInfo::i_getfilename, (void*)&c_SplFileInfo::ifa_getfilename, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_getowner((void*)&c_SplFileInfo::i_getowner, (void*)&c_SplFileInfo::ifa_getowner, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_getmtime((void*)&c_SplFileInfo::i_getmtime, (void*)&c_SplFileInfo::ifa_getmtime, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_isdir((void*)&c_SplFileInfo::i_isdir, (void*)&c_SplFileInfo::ifa_isdir, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_getfileinfo((void*)&c_SplFileInfo::i_getfileinfo, (void*)&c_SplFileInfo::ifa_getfileinfo, 1, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_isexecutable((void*)&c_SplFileInfo::i_isexecutable, (void*)&c_SplFileInfo::ifa_isexecutable, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_getatime((void*)&c_SplFileInfo::i_getatime, (void*)&c_SplFileInfo::ifa_getatime, 0, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_openfile((void*)&c_SplFileInfo::i_openfile, (void*)&c_SplFileInfo::ifa_openfile, 3, 4, 0x0000000000000000LL);
CallInfo c_SplFileInfo::ci_gettype((void*)&c_SplFileInfo::i_gettype, (void*)&c_SplFileInfo::ifa_gettype, 0, 4, 0x0000000000000000LL);
Variant c_SplFileInfo::i_getperms(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getperms, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getPerms", 0, 1);
  return (self->t_getperms());
}
Variant c_SplFileInfo::i_iswritable(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_iswritable, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::isWritable", 0, 1);
  return (self->t_iswritable());
}
Variant c_SplFileInfo::i_getbasename(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getbasename, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("SplFileInfo::getBasename", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_getbasename());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getbasename(arg0));
  }
}
Variant c_SplFileInfo::i_getpathname(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getpathname, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getPathname", 0, 1);
  return (self->t_getpathname());
}
Variant c_SplFileInfo::i_getgroup(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getgroup, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getGroup", 0, 1);
  return (self->t_getgroup());
}
Variant c_SplFileInfo::i_setfileclass(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setfileclass, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("SplFileInfo::setFileClass", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_setfileclass(), null);
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_setfileclass(arg0), null);
  }
}
Variant c_SplFileInfo::i_setinfoclass(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setinfoclass, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("SplFileInfo::setInfoClass", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_setinfoclass(), null);
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_setinfoclass(arg0), null);
  }
}
Variant c_SplFileInfo::i___tostring(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___tostring, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_SplFileInfo::i_getlinktarget(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getlinktarget, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getLinkTarget", 0, 1);
  return (self->t_getlinktarget());
}
Variant c_SplFileInfo::i_isreadable(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_isreadable, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::isReadable", 0, 1);
  return (self->t_isreadable());
}
Variant c_SplFileInfo::i_getrealpath(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getrealpath, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getRealPath", 0, 1);
  return (self->t_getrealpath());
}
Variant c_SplFileInfo::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("SplFileInfo::__construct", count, 1, 1, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___construct(arg0), null);
  }
}
Variant c_SplFileInfo::i_getpathinfo(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getpathinfo, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("SplFileInfo::getPathInfo", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_getpathinfo());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getpathinfo(arg0));
  }
}
Variant c_SplFileInfo::i_getctime(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getctime, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getCTime", 0, 1);
  return (self->t_getctime());
}
Variant c_SplFileInfo::i_getpath(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getpath, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getPath", 0, 1);
  return (self->t_getpath());
}
Variant c_SplFileInfo::i_getinode(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getinode, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getInode", 0, 1);
  return (self->t_getinode());
}
Variant c_SplFileInfo::i_islink(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_islink, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::isLink", 0, 1);
  return (self->t_islink());
}
Variant c_SplFileInfo::i_getsize(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getsize, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getSize", 0, 1);
  return (self->t_getsize());
}
Variant c_SplFileInfo::i_isfile(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_isfile, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::isFile", 0, 1);
  return (self->t_isfile());
}
Variant c_SplFileInfo::i_getfilename(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getfilename, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getFilename", 0, 1);
  return (self->t_getfilename());
}
Variant c_SplFileInfo::i_getowner(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getowner, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getOwner", 0, 1);
  return (self->t_getowner());
}
Variant c_SplFileInfo::i_getmtime(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getmtime, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getMTime", 0, 1);
  return (self->t_getmtime());
}
Variant c_SplFileInfo::i_isdir(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_isdir, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::isDir", 0, 1);
  return (self->t_isdir());
}
Variant c_SplFileInfo::i_getfileinfo(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getfileinfo, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("SplFileInfo::getFileInfo", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_getfileinfo());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getfileinfo(arg0));
  }
}
Variant c_SplFileInfo::i_isexecutable(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_isexecutable, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::isExecutable", 0, 1);
  return (self->t_isexecutable());
}
Variant c_SplFileInfo::i_getatime(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getatime, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getATime", 0, 1);
  return (self->t_getatime());
}
Variant c_SplFileInfo::i_openfile(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_openfile, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("SplFileInfo::openFile", 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_openfile());
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_openfile(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_openfile(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_openfile(arg0, arg1, arg2));
  }
}
Variant c_SplFileInfo::i_gettype(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_gettype, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getType", 0, 1);
  return (self->t_gettype());
}
Variant c_SplFileInfo::ifa_getperms(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getperms, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getPerms", 0, 1);
  return (self->t_getperms());
}
Variant c_SplFileInfo::ifa_iswritable(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_iswritable, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::isWritable", 0, 1);
  return (self->t_iswritable());
}
Variant c_SplFileInfo::ifa_getbasename(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getbasename, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("SplFileInfo::getBasename", 1, 1);
  if (count <= 0) return (self->t_getbasename());
  CVarRef arg0(a0);
  return (self->t_getbasename(arg0));
}
Variant c_SplFileInfo::ifa_getpathname(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getpathname, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getPathname", 0, 1);
  return (self->t_getpathname());
}
Variant c_SplFileInfo::ifa_getgroup(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getgroup, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getGroup", 0, 1);
  return (self->t_getgroup());
}
Variant c_SplFileInfo::ifa_setfileclass(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setfileclass, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("SplFileInfo::setFileClass", 1, 1);
  if (count <= 0) return (self->t_setfileclass(), null);
  CVarRef arg0(a0);
  return (self->t_setfileclass(arg0), null);
}
Variant c_SplFileInfo::ifa_setinfoclass(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setinfoclass, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("SplFileInfo::setInfoClass", 1, 1);
  if (count <= 0) return (self->t_setinfoclass(), null);
  CVarRef arg0(a0);
  return (self->t_setinfoclass(arg0), null);
}
Variant c_SplFileInfo::ifa___tostring(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___tostring, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_SplFileInfo::ifa_getlinktarget(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getlinktarget, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getLinkTarget", 0, 1);
  return (self->t_getlinktarget());
}
Variant c_SplFileInfo::ifa_isreadable(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isreadable, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::isReadable", 0, 1);
  return (self->t_isreadable());
}
Variant c_SplFileInfo::ifa_getrealpath(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getrealpath, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getRealPath", 0, 1);
  return (self->t_getrealpath());
}
Variant c_SplFileInfo::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("SplFileInfo::__construct", count, 1, 1, 2);
  CVarRef arg0(a0);
  return (self->t___construct(arg0), null);
}
Variant c_SplFileInfo::ifa_getpathinfo(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getpathinfo, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("SplFileInfo::getPathInfo", 1, 1);
  if (count <= 0) return (self->t_getpathinfo());
  CVarRef arg0(a0);
  return (self->t_getpathinfo(arg0));
}
Variant c_SplFileInfo::ifa_getctime(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getctime, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getCTime", 0, 1);
  return (self->t_getctime());
}
Variant c_SplFileInfo::ifa_getpath(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getpath, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getPath", 0, 1);
  return (self->t_getpath());
}
Variant c_SplFileInfo::ifa_getinode(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getinode, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getInode", 0, 1);
  return (self->t_getinode());
}
Variant c_SplFileInfo::ifa_islink(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_islink, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::isLink", 0, 1);
  return (self->t_islink());
}
Variant c_SplFileInfo::ifa_getsize(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getsize, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getSize", 0, 1);
  return (self->t_getsize());
}
Variant c_SplFileInfo::ifa_isfile(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isfile, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::isFile", 0, 1);
  return (self->t_isfile());
}
Variant c_SplFileInfo::ifa_getfilename(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getfilename, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getFilename", 0, 1);
  return (self->t_getfilename());
}
Variant c_SplFileInfo::ifa_getowner(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getowner, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getOwner", 0, 1);
  return (self->t_getowner());
}
Variant c_SplFileInfo::ifa_getmtime(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getmtime, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getMTime", 0, 1);
  return (self->t_getmtime());
}
Variant c_SplFileInfo::ifa_isdir(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isdir, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::isDir", 0, 1);
  return (self->t_isdir());
}
Variant c_SplFileInfo::ifa_getfileinfo(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getfileinfo, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("SplFileInfo::getFileInfo", 1, 1);
  if (count <= 0) return (self->t_getfileinfo());
  CVarRef arg0(a0);
  return (self->t_getfileinfo(arg0));
}
Variant c_SplFileInfo::ifa_isexecutable(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isexecutable, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::isExecutable", 0, 1);
  return (self->t_isexecutable());
}
Variant c_SplFileInfo::ifa_getatime(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getatime, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getATime", 0, 1);
  return (self->t_getatime());
}
Variant c_SplFileInfo::ifa_openfile(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_openfile, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("SplFileInfo::openFile", 3, 1);
  if (count <= 0) return (self->t_openfile());
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_openfile(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_openfile(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_openfile(arg0, arg1, arg2));
}
Variant c_SplFileInfo::ifa_gettype(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_gettype, coo_SplFileInfo);
  }
  c_SplFileInfo *self ATTRIBUTE_UNUSED (static_cast<c_SplFileInfo*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("SplFileInfo::getType", 0, 1);
  return (self->t_gettype());
}
const MethodCallInfoTable c_SplFileInfo::s_call_info_table[] = {
  { 0x5676046725D241C5LL, 1, 12, "setInfoClass", &c_SplFileInfo::ci_setinfoclass },
  { 0x6B2EAD4A44934786LL, 1, 11, "getRealPath", &c_SplFileInfo::ci_getrealpath },
  { 0x1D3B08AA0AF50F06LL, 0, 7, "getType", &c_SplFileInfo::ci_gettype },
  { 0x1ADA46FCC8EFEC08LL, 1, 5, "isDir", &c_SplFileInfo::ci_isdir },
  { 0x01A800A73CD2604ALL, 1, 8, "getInode", &c_SplFileInfo::ci_getinode },
  { 0x1930CE336D39474DLL, 1, 11, "getFilename", &c_SplFileInfo::ci_getfilename },
  { 0x32ABF385AD4BE48ELL, 1, 8, "getOwner", &c_SplFileInfo::ci_getowner },
  { 0x569FC7D8E9401C4FLL, 1, 10, "isReadable", &c_SplFileInfo::ci_isreadable },
  { 0x642C2D2994B34A13LL, 1, 10, "__toString", &c_SplFileInfo::ci___tostring },
  { 0x1D5801BB72C51C58LL, 1, 6, "isLink", &c_SplFileInfo::ci_islink },
  { 0x572E108C6731E29CLL, 1, 11, "getBasename", &c_SplFileInfo::ci_getbasename },
  { 0x4C43532D60465F1DLL, 1, 6, "isFile", &c_SplFileInfo::ci_isfile },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_SplFileInfo::ci___construct },
  { 0x4BC19906B553C59FLL, 0, 8, "getATime", &c_SplFileInfo::ci_getatime },
  { 0x638F2A56B8463A63LL, 1, 10, "isWritable", &c_SplFileInfo::ci_iswritable },
  { 0x5948407CA9CC4DA5LL, 1, 12, "setFileClass", &c_SplFileInfo::ci_setfileclass },
  { 0x00DCC39EDB16AFE7LL, 1, 11, "getPathInfo", &c_SplFileInfo::ci_getpathinfo },
  { 0x0F9EDEC32565D86ALL, 1, 8, "getGroup", &c_SplFileInfo::ci_getgroup },
  { 0x6615B5496D03A6EALL, 0, 7, "getSize", &c_SplFileInfo::ci_getsize },
  { 0x0D6276BAB75513ABLL, 1, 13, "getLinkTarget", &c_SplFileInfo::ci_getlinktarget },
  { 0x5640A4755D0078AFLL, 1, 8, "getCTime", &c_SplFileInfo::ci_getctime },
  { 0x265BDC54C992EE74LL, 1, 8, "getMTime", &c_SplFileInfo::ci_getmtime },
  { 0x337DEC2D48BDFE35LL, 1, 8, "openFile", &c_SplFileInfo::ci_openfile },
  { 0x25070641C3D924F8LL, 1, 11, "getPathname", &c_SplFileInfo::ci_getpathname },
  { 0x3786834B2A0CCB7ALL, 1, 12, "isExecutable", &c_SplFileInfo::ci_isexecutable },
  { 0x4351578037A06E7DLL, 1, 8, "getPerms", &c_SplFileInfo::ci_getperms },
  { 0x04C642C6C162243FLL, 1, 7, "getPath", &c_SplFileInfo::ci_getpath },
  { 0x7D50FA42F9D4923FLL, 0, 11, "getFileInfo", &c_SplFileInfo::ci_getfileinfo },
  { 0, 1, 0, 0 }
};
const int c_SplFileInfo::s_call_info_index[] = {
  63,
  -1,-1,-1,-1,-1,0,1,-1,
  3,-1,4,-1,-1,5,6,7,
  -1,-1,-1,8,-1,-1,-1,-1,
  9,-1,-1,-1,10,11,-1,12,
  -1,-1,-1,14,-1,15,-1,16,
  -1,-1,17,19,-1,-1,-1,20,
  -1,-1,-1,-1,21,22,-1,-1,
  23,-1,24,-1,-1,25,-1,26,

};
c_SplFileInfo *c_SplFileInfo::create(CVarRef v_file_name) {
  CountableHelper h(this);
  init();
  t___construct(v_file_name);
  return this;
}
void c_SplFileInfo::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) throw_wrong_arguments("SplFileInfo::__construct", count, 1, 1, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    (t___construct(arg0));
  }
}
void c_SplFileInfo::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_SplFileInfo::ci___construct;
  mcp.obj = this;
}
const ObjectStaticCallbacks cw_SplFileInfo = {
  (ObjectData*(*)(ObjectData*))coo_SplFileInfo,
  c_SplFileInfo::s_call_info_table,c_SplFileInfo::s_call_info_index,
  c_SplFileInfo::s_instanceof_table,c_SplFileInfo::s_instanceof_index,
  &c_SplFileInfo::s_class_name,
  &c_SplFileInfo::os_prop_table,0,0
};
/* SRC: classes/splfile.php line 14 */
void c_SplFileInfo::t___construct(Variant v_file_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::__construct);
  bool oldInCtor = gasInCtor(true);
  x_hphp_splfileinfo___construct(GET_THIS_TYPED(SplFileInfo), toString(v_file_name));
  gasInCtor(oldInCtor);
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 27 */
String c_SplFileInfo::t_getpath() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::getPath);
  return x_hphp_splfileinfo_getpath(GET_THIS_TYPED(SplFileInfo));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 39 */
String c_SplFileInfo::t_getfilename() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::getFilename);
  return x_hphp_splfileinfo_getfilename(GET_THIS_TYPED(SplFileInfo));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 53 */
Object c_SplFileInfo::t_getfileinfo(CVarRef v_class_name //  = NAMVAR(s_sys_svs00000000, "")
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::getFileInfo);
  return x_hphp_splfileinfo_getfileinfo(GET_THIS_TYPED(SplFileInfo), toString(v_class_name));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 68 */
String c_SplFileInfo::t_getbasename(CVarRef v_suffix //  = NAMVAR(s_sys_svs00000000, "")
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::getBasename);
  return x_hphp_splfileinfo_getbasename(GET_THIS_TYPED(SplFileInfo), toString(v_suffix));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 80 */
String c_SplFileInfo::t_getpathname() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::getPathname);
  return x_hphp_splfileinfo_getpathname(GET_THIS_TYPED(SplFileInfo));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 95 */
Object c_SplFileInfo::t_getpathinfo(CVarRef v_class_name //  = NAMVAR(s_sys_svs00000000, "")
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::getPathInfo);
  return x_hphp_splfileinfo_getpathinfo(GET_THIS_TYPED(SplFileInfo), toString(v_class_name));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 107 */
int64 c_SplFileInfo::t_getperms() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::getPerms);
  return x_hphp_splfileinfo_getperms(GET_THIS_TYPED(SplFileInfo));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 119 */
int64 c_SplFileInfo::t_getinode() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::getInode);
  return x_hphp_splfileinfo_getinode(GET_THIS_TYPED(SplFileInfo));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 131 */
int64 c_SplFileInfo::t_getsize() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::getSize);
  return x_hphp_splfileinfo_getsize(GET_THIS_TYPED(SplFileInfo));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 143 */
int64 c_SplFileInfo::t_getowner() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::getOwner);
  return x_hphp_splfileinfo_getowner(GET_THIS_TYPED(SplFileInfo));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 155 */
int64 c_SplFileInfo::t_getgroup() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::getGroup);
  return x_hphp_splfileinfo_getgroup(GET_THIS_TYPED(SplFileInfo));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 167 */
int64 c_SplFileInfo::t_getatime() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::getATime);
  return x_hphp_splfileinfo_getatime(GET_THIS_TYPED(SplFileInfo));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 181 */
int64 c_SplFileInfo::t_getmtime() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::getMTime);
  return x_hphp_splfileinfo_getmtime(GET_THIS_TYPED(SplFileInfo));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 194 */
int64 c_SplFileInfo::t_getctime() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::getCTime);
  return x_hphp_splfileinfo_getctime(GET_THIS_TYPED(SplFileInfo));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 207 */
String c_SplFileInfo::t_gettype() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::getType);
  return x_hphp_splfileinfo_gettype(GET_THIS_TYPED(SplFileInfo));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 219 */
bool c_SplFileInfo::t_iswritable() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::isWritable);
  return x_hphp_splfileinfo_iswritable(GET_THIS_TYPED(SplFileInfo));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 231 */
bool c_SplFileInfo::t_isreadable() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::isReadable);
  return x_hphp_splfileinfo_isreadable(GET_THIS_TYPED(SplFileInfo));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 243 */
bool c_SplFileInfo::t_isexecutable() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::isExecutable);
  return x_hphp_splfileinfo_isexecutable(GET_THIS_TYPED(SplFileInfo));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 257 */
bool c_SplFileInfo::t_isfile() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::isFile);
  return x_hphp_splfileinfo_isfile(GET_THIS_TYPED(SplFileInfo));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 269 */
bool c_SplFileInfo::t_isdir() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::isDir);
  return x_hphp_splfileinfo_isdir(GET_THIS_TYPED(SplFileInfo));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 282 */
bool c_SplFileInfo::t_islink() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::isLink);
  return x_hphp_splfileinfo_islink(GET_THIS_TYPED(SplFileInfo));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 297 */
String c_SplFileInfo::t_getlinktarget() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::getLinkTarget);
  return x_hphp_splfileinfo_getlinktarget(GET_THIS_TYPED(SplFileInfo));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 310 */
Variant c_SplFileInfo::t_getrealpath() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::getRealPath);
  return x_hphp_splfileinfo_getrealpath(GET_THIS_TYPED(SplFileInfo));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 314 */
String c_SplFileInfo::t___tostring() {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::__toString);
  return x_hphp_splfileinfo___tostring(GET_THIS_TYPED(SplFileInfo));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 338 */
Object c_SplFileInfo::t_openfile(CVarRef v_mode //  = NAMVAR(s_sys_svs0d42ecf6, "r")
, CVarRef v_use_include_path //  = false_varNR
, CVarRef v_context //  = null_variant
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::openFile);
  return x_hphp_splfileinfo_openfile(GET_THIS_TYPED(SplFileInfo), toString(v_mode), toBoolean(v_use_include_path), v_context);
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 356 */
void c_SplFileInfo::t_setfileclass(CVarRef v_class_name //  = NAMVAR(s_sys_svs5d909898, "SplFileObject")
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::setFileClass);
  x_hphp_splfileinfo_setfileclass(GET_THIS_TYPED(SplFileInfo), toString(v_class_name));
}
namespace hphp_impl_splitter {}
/* SRC: classes/splfile.php line 372 */
void c_SplFileInfo::t_setinfoclass(CVarRef v_class_name //  = NAMVAR(s_sys_svs914a58e9, "SplFileInfo")
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(SplFileInfo, SplFileInfo::setInfoClass);
  x_hphp_splfileinfo_setinfoclass(GET_THIS_TYPED(SplFileInfo), toString(v_class_name));
}
namespace hphp_impl_splitter {}
ObjectData *coo_SplFileObject() {
  return NEWOBJ(c_SplFileObject)();
}
ObjectData *coo_SplFileInfo() {
  return NEWOBJ(c_SplFileInfo)();
}

// Class tables
static const int64 cpt_static_inits[] = {
  (int64)&null_variant,
  (int64)&NAMVAR(s_sys_svi4d7e8e12, 6LL),
  (int64)&NAMVAR(s_sys_svic3578135, 8LL),
  (int64)&NAMVAR(s_sys_svib794f8ce, 1LL),
  (int64)&NAMVAR(s_sys_svi90d5f98c, 2LL),
};
static const ClassPropTableEntry cpt_table_entries[] = {
  {0x26C16E62FD792BB7LL,0,0,13,65,10,GET_PROPERTY_OFFSET(c_SplFileInfo, m_rsrc),&NAMSTR(s_sys_ss25b53cd5, "\000SplFileInfo\000rsrc") },

  {0x54B2A676B563E232LL,1,1,0,100,4,0,&NAMSTR(s_sys_ssb563e232, "SKIP_EMPTY") },
  {0x23519E830A6DEC13LL,0,2,0,100,4,0,&NAMSTR(s_sys_ss0a6dec13, "READ_CSV") },
  {0x05ABC27224BDAC64LL,1,3,0,100,4,0,&NAMSTR(s_sys_ss24bdac64, "DROP_NEW_LINE") },
  {0x6ABD9DCA7D94431ELL,-3,4,0,100,4,0,&NAMSTR(s_sys_ss7d94431e, "READ_AHEAD") },

};
static const int cpt_hash_entries[] = {
  // SplFileInfo hash
  -1,-1,-1,-1,-1,-1,-1,0,
  // SplFileInfo lists
  0,-1,
  -1,
  -1,
  // SplFileObject hash
  -1,3,-1,2,1,0,-1,-1,
  // SplFileObject lists
  -1,
  -1,
  -1,
};
const ClassPropTable c_SplFileInfo::os_prop_table = {
  7,0,-1,-1,-1,-1,10,0,
  cpt_hash_entries+0,0,cpt_table_entries+0,cpt_static_inits
};
const ClassPropTable c_SplFileObject::os_prop_table = {
  -1,-1,-1,-1,7,2,1,0,
  cpt_hash_entries+20,&c_SplFileInfo::os_prop_table,cpt_table_entries+1,cpt_static_inits
};

///////////////////////////////////////////////////////////////////////////////
}
