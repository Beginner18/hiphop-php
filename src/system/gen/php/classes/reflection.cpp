/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010 Facebook, Inc. (http://www.facebook.com)          |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/
// @generated by HipHop Compiler

#include <php/classes/exception.h>
#include <php/classes/reflection.h>
#include <php/classes/stdclass.h>
#include <runtime/ext/ext.h>
#include <runtime/eval/eval.h>

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

/* preface starts */
/* preface finishes */
/* SRC: classes/reflection.php line 248 */
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_reflectionfunctionabstract
Variant c_reflectionfunctionabstract::os_getInit(const char *s, int64 hash) {
  DECLARE_SYSTEM_GLOBALS(g);
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 1:
      HASH_RETURN(0x0F2EF58F157D479FLL,
                  null, "info");
      break;
    default:
      break;
  }
  return c_ObjectData::os_getInit(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_reflectionfunctionabstract
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_reflectionfunctionabstract
Variant c_reflectionfunctionabstract::os_get(const char *s, int64 hash) {
  return c_ObjectData::os_get(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_reflectionfunctionabstract
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_reflectionfunctionabstract
Variant &c_reflectionfunctionabstract::os_lval(const char *s, int64 hash) {
  return c_ObjectData::os_lval(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_reflectionfunctionabstract
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_reflectionfunctionabstract
void c_reflectionfunctionabstract::o_getArray(Array &props) const {
  if (isInitialized(m_info)) props.set("info", m_info.isReferenced() ? ref(m_info) : m_info, 0x0F2EF58F157D479FLL, true);
  c_ObjectData::o_getArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_reflectionfunctionabstract
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionfunctionabstract
void c_reflectionfunctionabstract::o_setArray(CArrRef props) {
  c_ObjectData::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionfunctionabstract
#ifndef OMIT_JUMP_TABLE_CLASS_get_reflectionfunctionabstract
Variant c_reflectionfunctionabstract::o_get(CStrRef prop, int64 phash, bool error, const char *context, int64 hash) {
  return o_getPublic(prop, phash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_reflectionfunctionabstract
#ifndef OMIT_JUMP_TABLE_CLASS_get_PUBLIC_reflectionfunctionabstract
Variant c_reflectionfunctionabstract::o_getPublic(CStrRef s, int64 hash, bool error) {
  if (hash < 0) hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_RETURN_STRING(0x0F2EF58F157D479FLL, m_info,
                         "info", 4);
      break;
    default:
      break;
  }
  return c_ObjectData::o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PUBLIC_reflectionfunctionabstract
#ifndef OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionfunctionabstract
Variant c_reflectionfunctionabstract::o_getPrivate(CStrRef s, int64 hash, bool error) {
  return o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionfunctionabstract
#ifndef OMIT_JUMP_TABLE_CLASS_exists_reflectionfunctionabstract
bool c_reflectionfunctionabstract::o_exists(CStrRef prop, int64 phash, const char *context, int64 hash) const {
  return o_existsPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_reflectionfunctionabstract
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionfunctionabstract
bool c_reflectionfunctionabstract::o_existsPublic(CStrRef s, int64 hash) const {
  if (hash < 0) hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_EXISTS_STRING(0x0F2EF58F157D479FLL, "info", 4);
      break;
    default:
      break;
  }
  return c_ObjectData::o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionfunctionabstract
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionfunctionabstract
bool c_reflectionfunctionabstract::o_existsPrivate(CStrRef s, int64 hash) const {
  return o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionfunctionabstract
#ifndef OMIT_JUMP_TABLE_CLASS_set_reflectionfunctionabstract
Variant c_reflectionfunctionabstract::o_set(CStrRef prop, int64 phash, CVarRef v, bool forInit, const char *context, int64 hash) {
  return o_setPublic(prop, phash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_reflectionfunctionabstract
#ifndef OMIT_JUMP_TABLE_CLASS_set_PUBLIC_reflectionfunctionabstract
Variant c_reflectionfunctionabstract::o_setPublic(CStrRef s, int64 hash, CVarRef v, bool forInit) {
  if (hash < 0) hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_SET_STRING(0x0F2EF58F157D479FLL, m_info,
                      "info", 4);
      break;
    default:
      break;
  }
  return c_ObjectData::o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PUBLIC_reflectionfunctionabstract
#ifndef OMIT_JUMP_TABLE_CLASS_set_PRIVATE_reflectionfunctionabstract
Variant c_reflectionfunctionabstract::o_setPrivate(CStrRef s, int64 hash, CVarRef v, bool forInit) {
  return o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PRIVATE_reflectionfunctionabstract
#ifndef OMIT_JUMP_TABLE_CLASS_lval_reflectionfunctionabstract
Variant& c_reflectionfunctionabstract::o_lval(CStrRef prop, int64 phash, const char *context, int64 hash) {
  return o_lvalPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_reflectionfunctionabstract
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_reflectionfunctionabstract
Variant& c_reflectionfunctionabstract::o_lvalPublic(CStrRef s, int64 hash) {
  if (hash < 0) hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_RETURN_STRING(0x0F2EF58F157D479FLL, m_info,
                         "info", 4);
      break;
    default:
      break;
  }
  return c_ObjectData::o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_reflectionfunctionabstract
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_reflectionfunctionabstract
Variant& c_reflectionfunctionabstract::o_lvalPrivate(CStrRef s, int64 hash) {
  return o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_reflectionfunctionabstract
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_reflectionfunctionabstract
Variant c_reflectionfunctionabstract::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_reflectionfunctionabstract
IMPLEMENT_CLASS(reflectionfunctionabstract)
ObjectData *c_reflectionfunctionabstract::cloneImpl() {
  c_reflectionfunctionabstract *obj = NEW(c_reflectionfunctionabstract)();
  cloneSet(obj);
  return obj;
}
void c_reflectionfunctionabstract::cloneSet(c_reflectionfunctionabstract *clone) {
  clone->m_info = m_info.isReferenced() ? ref(m_info) : m_info;
  ObjectData::cloneSet(clone);
}
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionfunctionabstract
Variant c_reflectionfunctionabstract::o_invoke(MethodIndex methodIndex, const char *s, CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0x124:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfRequiredParameters", 0, 1);
        return (t_getnumberofrequiredparameters());
      }
      break;
    case 0xfe:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isUserDefined", 0, 1);
        return (t_isuserdefined());
      }
      break;
    case 0x125:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfParameters", 0, 1);
        return (t_getnumberofparameters());
      }
      break;
    case 0x103:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getEndLine", 0, 1);
        return (t_getendline());
      }
      break;
    case 0x126:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStaticVariables", 0, 1);
        return (t_getstaticvariables());
      }
      break;
    case 0x127:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getParameters", 0, 1);
        return (t_getparameters());
      }
      break;
    case 0x129:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::returnsReference", 0, 1);
        return (t_returnsreference());
      }
      break;
    case 0xbd:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getFileName", 0, 1);
        return (t_getfilename());
      }
      break;
    case 0x110:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStartLine", 0, 1);
        return (t_getstartline());
      }
      break;
    case 0x113:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    case 0x12b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getClosure", 0, 1);
        return (t_getclosure());
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 0x11e:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isInternal", 0, 1);
        return (t_isinternal());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 31) {
    case 0:
      HASH_GUARD(0x57D8DC34C9A03560LL, getnumberofparameters) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfParameters", 0, 1);
        return (t_getnumberofparameters());
      }
      break;
    case 1:
      HASH_GUARD(0x4D637DECDBFA6221LL, getnumberofrequiredparameters) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfRequiredParameters", 0, 1);
        return (t_getnumberofrequiredparameters());
      }
      break;
    case 2:
      HASH_GUARD(0x33A6C2CFBDB05EE2LL, getclosure) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getClosure", 0, 1);
        return (t_getclosure());
      }
      break;
    case 4:
      HASH_GUARD(0x6A6B8BECAE7D4164LL, isuserdefined) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isUserDefined", 0, 1);
        return (t_isuserdefined());
      }
      HASH_GUARD(0x39C1BB731CB1CB04LL, getstartline) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStartLine", 0, 1);
        return (t_getstartline());
      }
      break;
    case 5:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 8:
      HASH_GUARD(0x37FFB8F44A3329A8LL, getstaticvariables) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStaticVariables", 0, 1);
        return (t_getstaticvariables());
      }
      HASH_GUARD(0x1A3AB3B0276D2668LL, returnsreference) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::returnsReference", 0, 1);
        return (t_returnsreference());
      }
      break;
    case 13:
      HASH_GUARD(0x3E62225132C2A32DLL, getparameters) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getParameters", 0, 1);
        return (t_getparameters());
      }
      HASH_GUARD(0x1930CE336D39474DLL, getfilename) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getFileName", 0, 1);
        return (t_getfilename());
      }
      break;
    case 15:
      HASH_GUARD(0x48FDF6C5835C64CFLL, isinternal) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isInternal", 0, 1);
        return (t_isinternal());
      }
      break;
    case 16:
      HASH_GUARD(0x6C19E85007BC4570LL, getendline) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getEndLine", 0, 1);
        return (t_getendline());
      }
      break;
    case 24:
      HASH_GUARD(0x7C4F424FDA56ADF8LL, getdoccomment) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::o_invoke(methodIndex, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionfunctionabstract
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionfunctionabstract
Variant c_reflectionfunctionabstract::o_invoke_few_args(MethodIndex methodIndex, const char *s, int64 hash, int count, CVarRef a0, CVarRef a1, CVarRef a2, CVarRef a3, CVarRef a4, CVarRef a5) {
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0x124:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfRequiredParameters", 0, 1);
        return (t_getnumberofrequiredparameters());
      }
      break;
    case 0xfe:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isUserDefined", 0, 1);
        return (t_isuserdefined());
      }
      break;
    case 0x125:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfParameters", 0, 1);
        return (t_getnumberofparameters());
      }
      break;
    case 0x103:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getEndLine", 0, 1);
        return (t_getendline());
      }
      break;
    case 0x126:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStaticVariables", 0, 1);
        return (t_getstaticvariables());
      }
      break;
    case 0x127:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getParameters", 0, 1);
        return (t_getparameters());
      }
      break;
    case 0x129:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::returnsReference", 0, 1);
        return (t_returnsreference());
      }
      break;
    case 0xbd:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getFileName", 0, 1);
        return (t_getfilename());
      }
      break;
    case 0x110:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStartLine", 0, 1);
        return (t_getstartline());
      }
      break;
    case 0x113:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    case 0x12b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getClosure", 0, 1);
        return (t_getclosure());
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 0x11e:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isInternal", 0, 1);
        return (t_isinternal());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 31) {
    case 0:
      HASH_GUARD(0x57D8DC34C9A03560LL, getnumberofparameters) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfParameters", 0, 1);
        return (t_getnumberofparameters());
      }
      break;
    case 1:
      HASH_GUARD(0x4D637DECDBFA6221LL, getnumberofrequiredparameters) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfRequiredParameters", 0, 1);
        return (t_getnumberofrequiredparameters());
      }
      break;
    case 2:
      HASH_GUARD(0x33A6C2CFBDB05EE2LL, getclosure) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getClosure", 0, 1);
        return (t_getclosure());
      }
      break;
    case 4:
      HASH_GUARD(0x6A6B8BECAE7D4164LL, isuserdefined) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isUserDefined", 0, 1);
        return (t_isuserdefined());
      }
      HASH_GUARD(0x39C1BB731CB1CB04LL, getstartline) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStartLine", 0, 1);
        return (t_getstartline());
      }
      break;
    case 5:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 8:
      HASH_GUARD(0x37FFB8F44A3329A8LL, getstaticvariables) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStaticVariables", 0, 1);
        return (t_getstaticvariables());
      }
      HASH_GUARD(0x1A3AB3B0276D2668LL, returnsreference) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::returnsReference", 0, 1);
        return (t_returnsreference());
      }
      break;
    case 13:
      HASH_GUARD(0x3E62225132C2A32DLL, getparameters) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getParameters", 0, 1);
        return (t_getparameters());
      }
      HASH_GUARD(0x1930CE336D39474DLL, getfilename) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getFileName", 0, 1);
        return (t_getfilename());
      }
      break;
    case 15:
      HASH_GUARD(0x48FDF6C5835C64CFLL, isinternal) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isInternal", 0, 1);
        return (t_isinternal());
      }
      break;
    case 16:
      HASH_GUARD(0x6C19E85007BC4570LL, getendline) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getEndLine", 0, 1);
        return (t_getendline());
      }
      break;
    case 24:
      HASH_GUARD(0x7C4F424FDA56ADF8LL, getdoccomment) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::o_invoke_few_args(methodIndex, s, hash, count, a0, a1, a2, a3, a4, a5);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionfunctionabstract
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_reflectionfunctionabstract
Variant c_reflectionfunctionabstract::os_invoke(const char *c, MethodIndex methodIndex, const char *s,  CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
#ifdef FMCGEN
#else
#endif
  return c_ObjectData::os_invoke(c, methodIndex, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_reflectionfunctionabstract
Variant c_reflectionfunctionabstract::o_invoke_from_eval(const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
#ifdef FMCGEN
  MethodIndex methodIndex = methodIndexExists(s);
  switch (methodIndex.m_callIndex) {
    case 0x124:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfRequiredParameters", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getnumberofrequiredparameters());
      }
      break;
    case 0xfe:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isUserDefined", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isuserdefined());
      }
      break;
    case 0x125:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfParameters", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getnumberofparameters());
      }
      break;
    case 0x103:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getEndLine", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getendline());
      }
      break;
    case 0x126:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStaticVariables", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getstaticvariables());
      }
      break;
    case 0x127:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getParameters", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getparameters());
      }
      break;
    case 0x129:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::returnsReference", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_returnsreference());
      }
      break;
    case 0xbd:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getFileName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getfilename());
      }
      break;
    case 0x110:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStartLine", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getstartline());
      }
      break;
    case 0x113:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getDocComment", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdoccomment());
      }
      break;
    case 0x12b:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getClosure", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getclosure());
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getname());
      }
      break;
    case 0x11e:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isInternal", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isinternal());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 31) {
    case 0:
      HASH_GUARD(0x57D8DC34C9A03560LL, getnumberofparameters) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfParameters", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getnumberofparameters());
      }
      break;
    case 1:
      HASH_GUARD(0x4D637DECDBFA6221LL, getnumberofrequiredparameters) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfRequiredParameters", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getnumberofrequiredparameters());
      }
      break;
    case 2:
      HASH_GUARD(0x33A6C2CFBDB05EE2LL, getclosure) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getClosure", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getclosure());
      }
      break;
    case 4:
      HASH_GUARD(0x6A6B8BECAE7D4164LL, isuserdefined) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isUserDefined", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isuserdefined());
      }
      HASH_GUARD(0x39C1BB731CB1CB04LL, getstartline) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStartLine", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getstartline());
      }
      break;
    case 5:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getname());
      }
      break;
    case 8:
      HASH_GUARD(0x37FFB8F44A3329A8LL, getstaticvariables) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStaticVariables", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getstaticvariables());
      }
      HASH_GUARD(0x1A3AB3B0276D2668LL, returnsreference) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::returnsReference", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_returnsreference());
      }
      break;
    case 13:
      HASH_GUARD(0x3E62225132C2A32DLL, getparameters) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getParameters", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getparameters());
      }
      HASH_GUARD(0x1930CE336D39474DLL, getfilename) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getFileName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getfilename());
      }
      break;
    case 15:
      HASH_GUARD(0x48FDF6C5835C64CFLL, isinternal) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isInternal", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isinternal());
      }
      break;
    case 16:
      HASH_GUARD(0x6C19E85007BC4570LL, getendline) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getEndLine", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getendline());
      }
      break;
    case 24:
      HASH_GUARD(0x7C4F424FDA56ADF8LL, getdoccomment) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getDocComment", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdoccomment());
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::o_invoke_from_eval(s, env, caller, hash, fatal);
}
Variant c_reflectionfunctionabstract::os_invoke_from_eval(const char *c, const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
#ifdef FMCGEN
  MethodIndex methodIndex = methodIndexExists(s);
#else
#endif
  return c_ObjectData::os_invoke_from_eval(c, s, env, caller, hash, fatal);
}
struct ObjectStaticCallbacks cw_reflectionfunctionabstract = {
  c_reflectionfunctionabstract::os_getInit,
  c_reflectionfunctionabstract::os_get,
  c_reflectionfunctionabstract::os_lval,
  c_reflectionfunctionabstract::os_invoke,
  c_reflectionfunctionabstract::os_constant,
};
void c_reflectionfunctionabstract::init() {
  m_info = null;
}
/* SRC: classes/reflection.php line 261 */
Variant c_reflectionfunctionabstract::t_getname() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getName);
  return m_info.rvalAt("name", 0x5655B4FF77E35232LL, true, true);
} /* function */
/* SRC: classes/reflection.php line 276 */
Variant c_reflectionfunctionabstract::t_isinternal() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::isInternal);
  return m_info.rvalAt("internal", 0x03DB58CB8EECAAACLL, true, true);
} /* function */
/* SRC: classes/reflection.php line 280 */
Variant c_reflectionfunctionabstract::t_getclosure() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getClosure);
  return m_info.rvalAt("closure", 0x3280F0C292E92A6CLL, true, true);
} /* function */
/* SRC: classes/reflection.php line 295 */
bool c_reflectionfunctionabstract::t_isuserdefined() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::isUserDefined);
  return !(toBoolean(m_info.rvalAt("internal", 0x03DB58CB8EECAAACLL, true, true)));
} /* function */
/* SRC: classes/reflection.php line 309 */
Variant c_reflectionfunctionabstract::t_getfilename() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getFileName);
  return m_info.rvalAt("file", 0x7863294A8F33D14FLL, true, true);
} /* function */
/* SRC: classes/reflection.php line 323 */
Variant c_reflectionfunctionabstract::t_getstartline() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getStartLine);
  return m_info.rvalAt("line1", 0x3433B57D028B2C66LL, true, true);
} /* function */
/* SRC: classes/reflection.php line 338 */
Variant c_reflectionfunctionabstract::t_getendline() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getEndLine);
  return m_info.rvalAt("line2", 0x7837CC133195C8E2LL, true, true);
} /* function */
/* SRC: classes/reflection.php line 352 */
Variant c_reflectionfunctionabstract::t_getdoccomment() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getDocComment);
  return m_info.rvalAt("doc", 0x5C1091C88F8EB6EDLL, true, true);
} /* function */
/* SRC: classes/reflection.php line 367 */
Variant c_reflectionfunctionabstract::t_getstaticvariables() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getStaticVariables);
  return m_info.rvalAt("static_variables", 0x203C504C70133DB3LL, true, true);
} /* function */
/* SRC: classes/reflection.php line 382 */
Variant c_reflectionfunctionabstract::t_returnsreference() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::returnsReference);
  return m_info.rvalAt("ref", 0x05FF98D1208F545ELL, true, true);
} /* function */
/* SRC: classes/reflection.php line 397 */
Array c_reflectionfunctionabstract::t_getparameters() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getParameters);
  Array v_ret;
  Primitive v_name = 0;
  Variant v_info;
  p_reflectionparameter v_param;

  v_ret = SystemScalarArrays::ssa_[0];
  {
    LOOP_COUNTER(1);
    Variant map2 = m_info.rvalAt("params", 0x6A67A10AA9B9D7C1LL, true, true);
    for (ArrayIterPtr iter3 = map2.begin(s_class_name); !iter3->end(); iter3->next()) {
      LOOP_COUNTER_CHECK(1);
      iter3->second(v_info);
      v_name = iter3->first();
      {
        {
          p_reflectionparameter tmp4((p_reflectionparameter((NEWOBJ(c_reflectionparameter)())->create(null, null))));
          v_param = tmp4;
        }
        v_param->m_info = v_info;
        {
          p_reflectionparameter tmp5((v_param));
          v_ret.append((tmp5));
        }
      }
    }
  }
  return v_ret;
} /* function */
/* SRC: classes/reflection.php line 419 */
int c_reflectionfunctionabstract::t_getnumberofparameters() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getNumberOfParameters);
  return x_count(m_info.rvalAt("params", 0x6A67A10AA9B9D7C1LL, true, true));
} /* function */
/* SRC: classes/reflection.php line 435 */
int64 c_reflectionfunctionabstract::t_getnumberofrequiredparameters() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getNumberOfRequiredParameters);
  int64 v_count = 0;
  Array v_params;
  Primitive v_name = 0;
  Variant v_param;

  v_count = 0LL;
  {
    const Array &tmp1((t_getparameters()));
    v_params = tmp1;
  }
  {
    LOOP_COUNTER(2);
    for (ArrayIter iter4 = v_params.begin(s_class_name); !iter4.end(); ++iter4) {
      LOOP_COUNTER_CHECK(2);
      iter4.second(v_param);
      v_name = iter4.first();
      {
        if (toBoolean(v_param. BIND_CLASS_DOT o_invoke_few_args(/* isoptional */ MethodIndex(312, 1) /* isoptional */ ,  "isOptional", 0x2D6EF48BBAB22735LL, 0))) {
          {
            break;
          }
        }
        v_count++;
      }
    }
  }
  return v_count;
} /* function */
/* SRC: classes/reflection.php line 1277 */
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_reflectionobject
Variant c_reflectionobject::os_getInit(const char *s, int64 hash) {
  return c_reflectionclass::os_getInit(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_reflectionobject
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_reflectionobject
Variant c_reflectionobject::os_get(const char *s, int64 hash) {
  return c_reflectionclass::os_get(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_reflectionobject
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_reflectionobject
Variant &c_reflectionobject::os_lval(const char *s, int64 hash) {
  return c_reflectionclass::os_lval(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_reflectionobject
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_reflectionobject
void c_reflectionobject::o_getArray(Array &props) const {
  c_reflectionclass::o_getArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_reflectionobject
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionobject
void c_reflectionobject::o_setArray(CArrRef props) {
  c_reflectionclass::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionobject
#ifndef OMIT_JUMP_TABLE_CLASS_get_reflectionobject
Variant c_reflectionobject::o_get(CStrRef prop, int64 phash, bool error, const char *context, int64 hash) {
  const char *s = context;
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 1:
      HASH_GUARD(0x35A44A5E6AE2E71DLL, ReflectionClass) { return c_reflectionclass::o_getPrivate(prop, phash, error); }
      break;
    default:
      break;
  }
  return o_getPublic(prop, phash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_reflectionobject
#ifndef OMIT_JUMP_TABLE_CLASS_get_PUBLIC_reflectionobject
Variant c_reflectionobject::o_getPublic(CStrRef s, int64 hash, bool error) {
  return c_reflectionclass::o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PUBLIC_reflectionobject
#ifndef OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionobject
Variant c_reflectionobject::o_getPrivate(CStrRef s, int64 hash, bool error) {
  return o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionobject
#ifndef OMIT_JUMP_TABLE_CLASS_exists_reflectionobject
bool c_reflectionobject::o_exists(CStrRef prop, int64 phash, const char *context, int64 hash) const {
  const char *s = context;
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 1:
      HASH_GUARD(0x35A44A5E6AE2E71DLL, ReflectionClass) { return c_reflectionclass::o_existsPrivate(prop, phash); }
      break;
    default:
      break;
  }
  return o_existsPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_reflectionobject
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionobject
bool c_reflectionobject::o_existsPublic(CStrRef s, int64 hash) const {
  return c_reflectionclass::o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionobject
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionobject
bool c_reflectionobject::o_existsPrivate(CStrRef s, int64 hash) const {
  return o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionobject
#ifndef OMIT_JUMP_TABLE_CLASS_set_reflectionobject
Variant c_reflectionobject::o_set(CStrRef prop, int64 phash, CVarRef v, bool forInit, const char *context, int64 hash) {
  const char *s = context;
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 1:
      HASH_GUARD(0x35A44A5E6AE2E71DLL, ReflectionClass) { return c_reflectionclass::o_setPrivate(prop, phash, v, forInit); }
      break;
    default:
      break;
  }
  return o_setPublic(prop, phash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_reflectionobject
#ifndef OMIT_JUMP_TABLE_CLASS_set_PUBLIC_reflectionobject
Variant c_reflectionobject::o_setPublic(CStrRef s, int64 hash, CVarRef v, bool forInit) {
  return c_reflectionclass::o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PUBLIC_reflectionobject
#ifndef OMIT_JUMP_TABLE_CLASS_set_PRIVATE_reflectionobject
Variant c_reflectionobject::o_setPrivate(CStrRef s, int64 hash, CVarRef v, bool forInit) {
  return o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PRIVATE_reflectionobject
#ifndef OMIT_JUMP_TABLE_CLASS_lval_reflectionobject
Variant& c_reflectionobject::o_lval(CStrRef prop, int64 phash, const char *context, int64 hash) {
  const char *s = context;
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 1:
      HASH_GUARD(0x35A44A5E6AE2E71DLL, ReflectionClass) { return c_reflectionclass::o_lvalPrivate(prop, phash); }
      break;
    default:
      break;
  }
  return o_lvalPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_reflectionobject
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_reflectionobject
Variant& c_reflectionobject::o_lvalPublic(CStrRef s, int64 hash) {
  return c_reflectionclass::o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_reflectionobject
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_reflectionobject
Variant& c_reflectionobject::o_lvalPrivate(CStrRef s, int64 hash) {
  return o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_reflectionobject
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_reflectionobject
Variant c_reflectionobject::os_constant(const char *s) {
  return c_reflectionclass::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_reflectionobject
IMPLEMENT_CLASS(reflectionobject)
ObjectData *c_reflectionobject::cloneImpl() {
  c_reflectionobject *obj = NEW(c_reflectionobject)();
  cloneSet(obj);
  return obj;
}
void c_reflectionobject::cloneSet(c_reflectionobject *clone) {
  c_reflectionclass::cloneSet(clone);
}
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionobject
Variant c_reflectionobject::o_invoke(MethodIndex methodIndex, const char *s, CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0xfb:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 1) return throw_toomany_arguments("ReflectionClass::getMethods", 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          if (count <= 0) return (t_getmethods());
          CVarRef arg0((ad->getValue(pos)));
          return (t_getmethods(arg0));
        }
      }
      break;
    case 0xfc:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isIterateable", 0, 1);
        return (t_isiterateable());
      }
      break;
    case 0xfd:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count < 1 || count > 2) return throw_wrong_arguments("ReflectionClass::getStaticPropertyValue", count, 1, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          if (count <= 1) return (t_getstaticpropertyvalue(arg0));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (t_getstaticpropertyvalue(arg0, arg1));
        }
      }
      break;
    case 0xfe:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isUserDefined", 0, 1);
        return (t_isuserdefined());
      }
      break;
    case 0xff:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count <= 0) return (t_newinstance(count));
        return (t_newinstance(count,params.slice(0, count - 0, false)));
      }
      break;
    case 0x100:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtension", 0, 1);
        return (t_getextension());
      }
      break;
    case 0x101:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstructor", 0, 1);
        return (t_getconstructor());
      }
      break;
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 0x102:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::newInstanceArgs", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_newinstanceargs(arg0));
        }
      }
      break;
    case 0x103:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getEndLine", 0, 1);
        return (t_getendline());
      }
      break;
    case 0x105:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isInstance", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_isinstance(arg0));
        }
      }
      break;
    case 0x104:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasMethod", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_hasmethod(arg0));
        }
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::__construct", count, 1, 1, 2);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t___construct(arg0), null);
        }
      }
      break;
    case 0x106:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isFinal", 0, 1);
        return (t_isfinal());
      }
      break;
    case 0x107:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getModifiers", 0, 1);
        return (t_getmodifiers());
      }
      break;
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionObject::export", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(o_getClassName(), arg0, arg1));
        }
      }
      break;
    case 0x109:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getProperties", 0, 1);
        return (t_getproperties());
      }
      break;
    case 0x10a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasConstant", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_hasconstant(arg0));
        }
      }
      break;
    case 0x10b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getMethod", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_getmethod(arg0));
        }
      }
      break;
    case 0x10c:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtensionName", 0, 1);
        return (t_getextensionname());
      }
      break;
    case 0x10d:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getParentClass", 0, 1);
        return (t_getparentclass());
      }
      break;
    case 0xbd:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getFileName", 0, 1);
        return (t_getfilename());
      }
      break;
    case 0x10e:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::implementsInterface", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_implementsinterface(arg0));
        }
      }
      break;
    case 0x10f:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaceNames", 0, 1);
        return (t_getinterfacenames());
      }
      break;
    case 0x111:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getConstant", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_getconstant(arg0));
        }
      }
      break;
    case 0x110:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStartLine", 0, 1);
        return (t_getstartline());
      }
      break;
    case 0x112:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstants", 0, 1);
        return (t_getconstants());
      }
      break;
    case 0x113:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    case 0x114:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInterface", 0, 1);
        return (t_isinterface());
      }
      break;
    case 0x115:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isSubclassOf", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_issubclassof(arg0));
        }
      }
      break;
    case 0x116:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasProperty", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_hasproperty(arg0));
        }
      }
      break;
    case 0x118:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStaticProperties", 0, 1);
        return (t_getstaticproperties());
      }
      break;
    case 0x119:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDefaultProperties", 0, 1);
        return (t_getdefaultproperties());
      }
      break;
    case 0x11a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionClass::setStaticPropertyValue", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (t_setstaticpropertyvalue(arg0, arg1), null);
        }
      }
      break;
    case 0x11b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInstantiable", 0, 1);
        return (t_isinstantiable());
      }
      break;
    case 0x11c:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaces", 0, 1);
        return (t_getinterfaces());
      }
      break;
    case 0x11d:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isAbstract", 0, 1);
        return (t_isabstract());
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 0x11f:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getProperty", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_getproperty(arg0));
        }
      }
      break;
    case 0x11e:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInternal", 0, 1);
        return (t_isinternal());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 127) {
    case 4:
      HASH_GUARD(0x39C1BB731CB1CB04LL, getstartline) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStartLine", 0, 1);
        return (t_getstartline());
      }
      break;
    case 15:
      HASH_GUARD(0x40C7B30DCB439C8FLL, hasproperty) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasProperty", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_hasproperty(arg0));
        }
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 20:
      HASH_GUARD(0x24253EBA491D6014LL, getmodifiers) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getModifiers", 0, 1);
        return (t_getmodifiers());
      }
      break;
    case 24:
      HASH_GUARD(0x21820E7AA4733998LL, hasmethod) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasMethod", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_hasmethod(arg0));
        }
      }
      break;
    case 27:
      HASH_GUARD(0x0F1AD0A8EC4C229BLL, getdefaultproperties) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDefaultProperties", 0, 1);
        return (t_getdefaultproperties());
      }
      break;
    case 30:
      HASH_GUARD(0x1BC5F3D87676509ELL, isinterface) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInterface", 0, 1);
        return (t_isinterface());
      }
      break;
    case 34:
      HASH_GUARD(0x323D9BCB05797B22LL, getstaticproperties) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStaticProperties", 0, 1);
        return (t_getstaticproperties());
      }
      break;
    case 41:
      HASH_GUARD(0x030CE1D6142F8C29LL, isinstance) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isInstance", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_isinstance(arg0));
        }
      }
      HASH_GUARD(0x1D6B8CA358B49929LL, getextensionname) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtensionName", 0, 1);
        return (t_getextensionname());
      }
      break;
    case 42:
      HASH_GUARD(0x16BA16CE6488AAAALL, getmethods) {
        if (count > 1) return throw_toomany_arguments("ReflectionClass::getMethods", 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          if (count <= 0) return (t_getmethods());
          CVarRef arg0((ad->getValue(pos)));
          return (t_getmethods(arg0));
        }
      }
      HASH_GUARD(0x226F6E80CECD3CAALL, getconstructor) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstructor", 0, 1);
        return (t_getconstructor());
      }
      HASH_GUARD(0x24596BE6D21F7CAALL, getinterfacenames) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaceNames", 0, 1);
        return (t_getinterfacenames());
      }
      break;
    case 46:
      HASH_GUARD(0x3C882D4A895F612ELL, getstaticpropertyvalue) {
        if (count < 1 || count > 2) return throw_wrong_arguments("ReflectionClass::getStaticPropertyValue", count, 1, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          if (count <= 1) return (t_getstaticpropertyvalue(arg0));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (t_getstaticpropertyvalue(arg0, arg1));
        }
      }
      HASH_GUARD(0x06FB6A7DC3D795AELL, isfinal) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isFinal", 0, 1);
        return (t_isfinal());
      }
      break;
    case 48:
      HASH_GUARD(0x30A86FCA01FE7030LL, newinstance) {
        if (count <= 0) return (t_newinstance(count));
        return (t_newinstance(count,params.slice(0, count - 0, false)));
      }
      break;
    case 52:
      HASH_GUARD(0x3DB53E1FBD3C0734LL, getconstant) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getConstant", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_getconstant(arg0));
        }
      }
      break;
    case 54:
      HASH_GUARD(0x0D81ECE253A3B5B6LL, getmethod) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getMethod", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_getmethod(arg0));
        }
      }
      break;
    case 55:
      HASH_GUARD(0x7460D945DA32FDB7LL, isabstract) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isAbstract", 0, 1);
        return (t_isabstract());
      }
      break;
    case 59:
      HASH_GUARD(0x25D24435915E6E3BLL, getextension) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtension", 0, 1);
        return (t_getextension());
      }
      break;
    case 60:
      HASH_GUARD(0x0D8AAD6BA2BBCD3CLL, isinstantiable) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInstantiable", 0, 1);
        return (t_isinstantiable());
      }
      break;
    case 63:
      HASH_GUARD(0x54C2DC04C4A62B3FLL, hasconstant) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasConstant", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_hasconstant(arg0));
        }
      }
      break;
    case 67:
      HASH_GUARD(0x67C15E3D98C00B43LL, getinterfaces) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaces", 0, 1);
        return (t_getinterfaces());
      }
      break;
    case 68:
      HASH_GUARD(0x1EB679C3602F4B44LL, getproperties) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getProperties", 0, 1);
        return (t_getproperties());
      }
      break;
    case 71:
      HASH_GUARD(0x0FD73627FB023047LL, getproperty) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getProperty", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_getproperty(arg0));
        }
      }
      break;
    case 77:
      HASH_GUARD(0x1930CE336D39474DLL, getfilename) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getFileName", 0, 1);
        return (t_getfilename());
      }
      break;
    case 78:
      HASH_GUARD(0x7D5A57B5370B68CELL, isiterateable) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isIterateable", 0, 1);
        return (t_isiterateable());
      }
      break;
    case 79:
      HASH_GUARD(0x48FDF6C5835C64CFLL, isinternal) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInternal", 0, 1);
        return (t_isinternal());
      }
      break;
    case 85:
      HASH_GUARD(0x1CC71CB013143955LL, getconstants) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstants", 0, 1);
        return (t_getconstants());
      }
      break;
    case 95:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::__construct", count, 1, 1, 2);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t___construct(arg0), null);
        }
      }
      break;
    case 100:
      HASH_GUARD(0x6A6B8BECAE7D4164LL, isuserdefined) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isUserDefined", 0, 1);
        return (t_isuserdefined());
      }
      break;
    case 101:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 102:
      HASH_GUARD(0x2735DCC254EE5C66LL, newinstanceargs) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::newInstanceArgs", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_newinstanceargs(arg0));
        }
      }
      break;
    case 104:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        if (count != 2) return throw_wrong_arguments("ReflectionObject::export", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(o_getClassName(), arg0, arg1));
        }
      }
      break;
    case 112:
      HASH_GUARD(0x6C19E85007BC4570LL, getendline) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getEndLine", 0, 1);
        return (t_getendline());
      }
      break;
    case 113:
      HASH_GUARD(0x07ECA928E37717F1LL, setstaticpropertyvalue) {
        if (count != 2) return throw_wrong_arguments("ReflectionClass::setStaticPropertyValue", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (t_setstaticpropertyvalue(arg0, arg1), null);
        }
      }
      break;
    case 114:
      HASH_GUARD(0x74F7FEDE16957472LL, getparentclass) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getParentClass", 0, 1);
        return (t_getparentclass());
      }
      break;
    case 120:
      HASH_GUARD(0x7C4F424FDA56ADF8LL, getdoccomment) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    case 123:
      HASH_GUARD(0x28DC702215C7D6FBLL, implementsinterface) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::implementsInterface", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_implementsinterface(arg0));
        }
      }
      break;
    case 126:
      HASH_GUARD(0x373333991926C97ELL, issubclassof) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isSubclassOf", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_issubclassof(arg0));
        }
      }
      break;
    default:
      break;
  }
#endif
  return c_reflectionclass::o_invoke(methodIndex, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionobject
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionobject
Variant c_reflectionobject::o_invoke_few_args(MethodIndex methodIndex, const char *s, int64 hash, int count, CVarRef a0, CVarRef a1, CVarRef a2, CVarRef a3, CVarRef a4, CVarRef a5) {
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0xfb:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 1) return throw_toomany_arguments("ReflectionClass::getMethods", 1, 1);
        if (count <= 0) return (t_getmethods());
        return (t_getmethods(a0));
      }
      break;
    case 0xfc:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isIterateable", 0, 1);
        return (t_isiterateable());
      }
      break;
    case 0xfd:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count < 1 || count > 2) return throw_wrong_arguments("ReflectionClass::getStaticPropertyValue", count, 1, 2, 1);
        if (count <= 1) return (t_getstaticpropertyvalue(a0));
        return (t_getstaticpropertyvalue(a0, a1));
      }
      break;
    case 0xfe:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isUserDefined", 0, 1);
        return (t_isuserdefined());
      }
      break;
    case 0xff:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count <= 0) return (t_newinstance(count));
        Array params;
        if (count >= 1) params.append(a0);
        if (count >= 2) params.append(a1);
        if (count >= 3) params.append(a2);
        if (count >= 4) params.append(a3);
        if (count >= 5) params.append(a4);
        if (count >= 6) params.append(a5);
        return (t_newinstance(count,params));
      }
      break;
    case 0x100:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtension", 0, 1);
        return (t_getextension());
      }
      break;
    case 0x101:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstructor", 0, 1);
        return (t_getconstructor());
      }
      break;
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 0x102:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::newInstanceArgs", count, 1, 1, 1);
        return (t_newinstanceargs(a0));
      }
      break;
    case 0x103:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getEndLine", 0, 1);
        return (t_getendline());
      }
      break;
    case 0x105:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isInstance", count, 1, 1, 1);
        return (t_isinstance(a0));
      }
      break;
    case 0x104:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasMethod", count, 1, 1, 1);
        return (t_hasmethod(a0));
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::__construct", count, 1, 1, 2);
        return (t___construct(a0), null);
      }
      break;
    case 0x106:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isFinal", 0, 1);
        return (t_isfinal());
      }
      break;
    case 0x107:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getModifiers", 0, 1);
        return (t_getmodifiers());
      }
      break;
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionObject::export", count, 2, 2, 1);
        return (ti_export(o_getClassName(), a0, a1));
      }
      break;
    case 0x109:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getProperties", 0, 1);
        return (t_getproperties());
      }
      break;
    case 0x10a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasConstant", count, 1, 1, 1);
        return (t_hasconstant(a0));
      }
      break;
    case 0x10b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getMethod", count, 1, 1, 1);
        return (t_getmethod(a0));
      }
      break;
    case 0x10c:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtensionName", 0, 1);
        return (t_getextensionname());
      }
      break;
    case 0x10d:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getParentClass", 0, 1);
        return (t_getparentclass());
      }
      break;
    case 0xbd:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getFileName", 0, 1);
        return (t_getfilename());
      }
      break;
    case 0x10e:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::implementsInterface", count, 1, 1, 1);
        return (t_implementsinterface(a0));
      }
      break;
    case 0x10f:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaceNames", 0, 1);
        return (t_getinterfacenames());
      }
      break;
    case 0x111:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getConstant", count, 1, 1, 1);
        return (t_getconstant(a0));
      }
      break;
    case 0x110:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStartLine", 0, 1);
        return (t_getstartline());
      }
      break;
    case 0x112:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstants", 0, 1);
        return (t_getconstants());
      }
      break;
    case 0x113:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    case 0x114:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInterface", 0, 1);
        return (t_isinterface());
      }
      break;
    case 0x115:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isSubclassOf", count, 1, 1, 1);
        return (t_issubclassof(a0));
      }
      break;
    case 0x116:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasProperty", count, 1, 1, 1);
        return (t_hasproperty(a0));
      }
      break;
    case 0x118:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStaticProperties", 0, 1);
        return (t_getstaticproperties());
      }
      break;
    case 0x119:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDefaultProperties", 0, 1);
        return (t_getdefaultproperties());
      }
      break;
    case 0x11a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionClass::setStaticPropertyValue", count, 2, 2, 1);
        return (t_setstaticpropertyvalue(a0, a1), null);
      }
      break;
    case 0x11b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInstantiable", 0, 1);
        return (t_isinstantiable());
      }
      break;
    case 0x11c:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaces", 0, 1);
        return (t_getinterfaces());
      }
      break;
    case 0x11d:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isAbstract", 0, 1);
        return (t_isabstract());
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 0x11f:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getProperty", count, 1, 1, 1);
        return (t_getproperty(a0));
      }
      break;
    case 0x11e:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInternal", 0, 1);
        return (t_isinternal());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 127) {
    case 4:
      HASH_GUARD(0x39C1BB731CB1CB04LL, getstartline) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStartLine", 0, 1);
        return (t_getstartline());
      }
      break;
    case 15:
      HASH_GUARD(0x40C7B30DCB439C8FLL, hasproperty) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasProperty", count, 1, 1, 1);
        return (t_hasproperty(a0));
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 20:
      HASH_GUARD(0x24253EBA491D6014LL, getmodifiers) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getModifiers", 0, 1);
        return (t_getmodifiers());
      }
      break;
    case 24:
      HASH_GUARD(0x21820E7AA4733998LL, hasmethod) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasMethod", count, 1, 1, 1);
        return (t_hasmethod(a0));
      }
      break;
    case 27:
      HASH_GUARD(0x0F1AD0A8EC4C229BLL, getdefaultproperties) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDefaultProperties", 0, 1);
        return (t_getdefaultproperties());
      }
      break;
    case 30:
      HASH_GUARD(0x1BC5F3D87676509ELL, isinterface) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInterface", 0, 1);
        return (t_isinterface());
      }
      break;
    case 34:
      HASH_GUARD(0x323D9BCB05797B22LL, getstaticproperties) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStaticProperties", 0, 1);
        return (t_getstaticproperties());
      }
      break;
    case 41:
      HASH_GUARD(0x030CE1D6142F8C29LL, isinstance) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isInstance", count, 1, 1, 1);
        return (t_isinstance(a0));
      }
      HASH_GUARD(0x1D6B8CA358B49929LL, getextensionname) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtensionName", 0, 1);
        return (t_getextensionname());
      }
      break;
    case 42:
      HASH_GUARD(0x16BA16CE6488AAAALL, getmethods) {
        if (count > 1) return throw_toomany_arguments("ReflectionClass::getMethods", 1, 1);
        if (count <= 0) return (t_getmethods());
        return (t_getmethods(a0));
      }
      HASH_GUARD(0x226F6E80CECD3CAALL, getconstructor) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstructor", 0, 1);
        return (t_getconstructor());
      }
      HASH_GUARD(0x24596BE6D21F7CAALL, getinterfacenames) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaceNames", 0, 1);
        return (t_getinterfacenames());
      }
      break;
    case 46:
      HASH_GUARD(0x3C882D4A895F612ELL, getstaticpropertyvalue) {
        if (count < 1 || count > 2) return throw_wrong_arguments("ReflectionClass::getStaticPropertyValue", count, 1, 2, 1);
        if (count <= 1) return (t_getstaticpropertyvalue(a0));
        return (t_getstaticpropertyvalue(a0, a1));
      }
      HASH_GUARD(0x06FB6A7DC3D795AELL, isfinal) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isFinal", 0, 1);
        return (t_isfinal());
      }
      break;
    case 48:
      HASH_GUARD(0x30A86FCA01FE7030LL, newinstance) {
        if (count <= 0) return (t_newinstance(count));
        Array params;
        if (count >= 1) params.append(a0);
        if (count >= 2) params.append(a1);
        if (count >= 3) params.append(a2);
        if (count >= 4) params.append(a3);
        if (count >= 5) params.append(a4);
        if (count >= 6) params.append(a5);
        return (t_newinstance(count,params));
      }
      break;
    case 52:
      HASH_GUARD(0x3DB53E1FBD3C0734LL, getconstant) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getConstant", count, 1, 1, 1);
        return (t_getconstant(a0));
      }
      break;
    case 54:
      HASH_GUARD(0x0D81ECE253A3B5B6LL, getmethod) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getMethod", count, 1, 1, 1);
        return (t_getmethod(a0));
      }
      break;
    case 55:
      HASH_GUARD(0x7460D945DA32FDB7LL, isabstract) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isAbstract", 0, 1);
        return (t_isabstract());
      }
      break;
    case 59:
      HASH_GUARD(0x25D24435915E6E3BLL, getextension) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtension", 0, 1);
        return (t_getextension());
      }
      break;
    case 60:
      HASH_GUARD(0x0D8AAD6BA2BBCD3CLL, isinstantiable) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInstantiable", 0, 1);
        return (t_isinstantiable());
      }
      break;
    case 63:
      HASH_GUARD(0x54C2DC04C4A62B3FLL, hasconstant) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasConstant", count, 1, 1, 1);
        return (t_hasconstant(a0));
      }
      break;
    case 67:
      HASH_GUARD(0x67C15E3D98C00B43LL, getinterfaces) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaces", 0, 1);
        return (t_getinterfaces());
      }
      break;
    case 68:
      HASH_GUARD(0x1EB679C3602F4B44LL, getproperties) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getProperties", 0, 1);
        return (t_getproperties());
      }
      break;
    case 71:
      HASH_GUARD(0x0FD73627FB023047LL, getproperty) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getProperty", count, 1, 1, 1);
        return (t_getproperty(a0));
      }
      break;
    case 77:
      HASH_GUARD(0x1930CE336D39474DLL, getfilename) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getFileName", 0, 1);
        return (t_getfilename());
      }
      break;
    case 78:
      HASH_GUARD(0x7D5A57B5370B68CELL, isiterateable) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isIterateable", 0, 1);
        return (t_isiterateable());
      }
      break;
    case 79:
      HASH_GUARD(0x48FDF6C5835C64CFLL, isinternal) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInternal", 0, 1);
        return (t_isinternal());
      }
      break;
    case 85:
      HASH_GUARD(0x1CC71CB013143955LL, getconstants) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstants", 0, 1);
        return (t_getconstants());
      }
      break;
    case 95:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::__construct", count, 1, 1, 2);
        return (t___construct(a0), null);
      }
      break;
    case 100:
      HASH_GUARD(0x6A6B8BECAE7D4164LL, isuserdefined) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isUserDefined", 0, 1);
        return (t_isuserdefined());
      }
      break;
    case 101:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 102:
      HASH_GUARD(0x2735DCC254EE5C66LL, newinstanceargs) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::newInstanceArgs", count, 1, 1, 1);
        return (t_newinstanceargs(a0));
      }
      break;
    case 104:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        if (count != 2) return throw_wrong_arguments("ReflectionObject::export", count, 2, 2, 1);
        return (ti_export(o_getClassName(), a0, a1));
      }
      break;
    case 112:
      HASH_GUARD(0x6C19E85007BC4570LL, getendline) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getEndLine", 0, 1);
        return (t_getendline());
      }
      break;
    case 113:
      HASH_GUARD(0x07ECA928E37717F1LL, setstaticpropertyvalue) {
        if (count != 2) return throw_wrong_arguments("ReflectionClass::setStaticPropertyValue", count, 2, 2, 1);
        return (t_setstaticpropertyvalue(a0, a1), null);
      }
      break;
    case 114:
      HASH_GUARD(0x74F7FEDE16957472LL, getparentclass) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getParentClass", 0, 1);
        return (t_getparentclass());
      }
      break;
    case 120:
      HASH_GUARD(0x7C4F424FDA56ADF8LL, getdoccomment) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    case 123:
      HASH_GUARD(0x28DC702215C7D6FBLL, implementsinterface) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::implementsInterface", count, 1, 1, 1);
        return (t_implementsinterface(a0));
      }
      break;
    case 126:
      HASH_GUARD(0x373333991926C97ELL, issubclassof) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isSubclassOf", count, 1, 1, 1);
        return (t_issubclassof(a0));
      }
      break;
    default:
      break;
  }
#endif
  return c_reflectionclass::o_invoke_few_args(methodIndex, s, hash, count, a0, a1, a2, a3, a4, a5);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionobject
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_reflectionobject
Variant c_reflectionobject::os_invoke(const char *c, MethodIndex methodIndex, const char *s,  CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionObject::export", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(c, arg0, arg1));
        }
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 0:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        if (count != 2) return throw_wrong_arguments("ReflectionObject::export", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(c, arg0, arg1));
        }
      }
      break;
    default:
      break;
  }
#endif
  return c_reflectionclass::os_invoke(c, methodIndex, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_reflectionobject
Variant c_reflectionobject::o_invoke_from_eval(const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
#ifdef FMCGEN
  MethodIndex methodIndex = methodIndexExists(s);
  switch (methodIndex.m_callIndex) {
    case 0xfb:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 1) return throw_toomany_arguments("ReflectionClass::getMethods", 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 0) return (t_getmethods());
        else return (t_getmethods(a0));
      }
      break;
    case 0xfc:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isIterateable", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isiterateable());
      }
      break;
    case 0xfd:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count < 1 || count > 2) return throw_wrong_arguments("ReflectionClass::getStaticPropertyValue", count, 1, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 1) return (t_getstaticpropertyvalue(a0));
        else return (t_getstaticpropertyvalue(a0, a1));
      }
      break;
    case 0xfe:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isUserDefined", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isuserdefined());
      }
      break;
    case 0xff:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        Array vargs;
        for (; it != params.end(); ++it) {
          vargs.append((*it)->eval(env));
        }
        if (count <= 0) return (t_newinstance(count));
        return (t_newinstance(count,vargs));
      }
      break;
    case 0x100:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtension", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getextension());
      }
      break;
    case 0x101:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstructor", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getconstructor());
      }
      break;
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::__toString", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___tostring());
      }
      break;
    case 0x102:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::newInstanceArgs", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_newinstanceargs(a0));
      }
      break;
    case 0x103:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getEndLine", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getendline());
      }
      break;
    case 0x105:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isInstance", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isinstance(a0));
      }
      break;
    case 0x104:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasMethod", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_hasmethod(a0));
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::__construct", count, 1, 1, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___construct(a0), null);
      }
      break;
    case 0x106:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isFinal", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isfinal());
      }
      break;
    case 0x107:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getModifiers", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getmodifiers());
      }
      break;
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionObject::export", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(o_getClassName(), a0, a1));
      }
      break;
    case 0x109:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getProperties", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getproperties());
      }
      break;
    case 0x10a:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasConstant", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_hasconstant(a0));
      }
      break;
    case 0x10b:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getMethod", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getmethod(a0));
      }
      break;
    case 0x10c:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtensionName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getextensionname());
      }
      break;
    case 0x10d:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getParentClass", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getparentclass());
      }
      break;
    case 0xbd:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getFileName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getfilename());
      }
      break;
    case 0x10e:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::implementsInterface", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_implementsinterface(a0));
      }
      break;
    case 0x10f:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaceNames", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getinterfacenames());
      }
      break;
    case 0x111:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getConstant", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getconstant(a0));
      }
      break;
    case 0x110:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStartLine", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getstartline());
      }
      break;
    case 0x112:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstants", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getconstants());
      }
      break;
    case 0x113:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDocComment", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdoccomment());
      }
      break;
    case 0x114:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInterface", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isinterface());
      }
      break;
    case 0x115:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isSubclassOf", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_issubclassof(a0));
      }
      break;
    case 0x116:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasProperty", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_hasproperty(a0));
      }
      break;
    case 0x118:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStaticProperties", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getstaticproperties());
      }
      break;
    case 0x119:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDefaultProperties", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdefaultproperties());
      }
      break;
    case 0x11a:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionClass::setStaticPropertyValue", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_setstaticpropertyvalue(a0, a1), null);
      }
      break;
    case 0x11b:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInstantiable", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isinstantiable());
      }
      break;
    case 0x11c:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaces", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getinterfaces());
      }
      break;
    case 0x11d:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isAbstract", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isabstract());
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getname());
      }
      break;
    case 0x11f:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getProperty", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getproperty(a0));
      }
      break;
    case 0x11e:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInternal", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isinternal());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 127) {
    case 4:
      HASH_GUARD(0x39C1BB731CB1CB04LL, getstartline) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStartLine", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getstartline());
      }
      break;
    case 15:
      HASH_GUARD(0x40C7B30DCB439C8FLL, hasproperty) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasProperty", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_hasproperty(a0));
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::__toString", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___tostring());
      }
      break;
    case 20:
      HASH_GUARD(0x24253EBA491D6014LL, getmodifiers) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getModifiers", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getmodifiers());
      }
      break;
    case 24:
      HASH_GUARD(0x21820E7AA4733998LL, hasmethod) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasMethod", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_hasmethod(a0));
      }
      break;
    case 27:
      HASH_GUARD(0x0F1AD0A8EC4C229BLL, getdefaultproperties) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDefaultProperties", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdefaultproperties());
      }
      break;
    case 30:
      HASH_GUARD(0x1BC5F3D87676509ELL, isinterface) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInterface", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isinterface());
      }
      break;
    case 34:
      HASH_GUARD(0x323D9BCB05797B22LL, getstaticproperties) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStaticProperties", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getstaticproperties());
      }
      break;
    case 41:
      HASH_GUARD(0x030CE1D6142F8C29LL, isinstance) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isInstance", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isinstance(a0));
      }
      HASH_GUARD(0x1D6B8CA358B49929LL, getextensionname) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtensionName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getextensionname());
      }
      break;
    case 42:
      HASH_GUARD(0x16BA16CE6488AAAALL, getmethods) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 1) return throw_toomany_arguments("ReflectionClass::getMethods", 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 0) return (t_getmethods());
        else return (t_getmethods(a0));
      }
      HASH_GUARD(0x226F6E80CECD3CAALL, getconstructor) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstructor", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getconstructor());
      }
      HASH_GUARD(0x24596BE6D21F7CAALL, getinterfacenames) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaceNames", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getinterfacenames());
      }
      break;
    case 46:
      HASH_GUARD(0x3C882D4A895F612ELL, getstaticpropertyvalue) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count < 1 || count > 2) return throw_wrong_arguments("ReflectionClass::getStaticPropertyValue", count, 1, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 1) return (t_getstaticpropertyvalue(a0));
        else return (t_getstaticpropertyvalue(a0, a1));
      }
      HASH_GUARD(0x06FB6A7DC3D795AELL, isfinal) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isFinal", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isfinal());
      }
      break;
    case 48:
      HASH_GUARD(0x30A86FCA01FE7030LL, newinstance) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        Array vargs;
        for (; it != params.end(); ++it) {
          vargs.append((*it)->eval(env));
        }
        if (count <= 0) return (t_newinstance(count));
        return (t_newinstance(count,vargs));
      }
      break;
    case 52:
      HASH_GUARD(0x3DB53E1FBD3C0734LL, getconstant) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getConstant", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getconstant(a0));
      }
      break;
    case 54:
      HASH_GUARD(0x0D81ECE253A3B5B6LL, getmethod) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getMethod", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getmethod(a0));
      }
      break;
    case 55:
      HASH_GUARD(0x7460D945DA32FDB7LL, isabstract) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isAbstract", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isabstract());
      }
      break;
    case 59:
      HASH_GUARD(0x25D24435915E6E3BLL, getextension) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtension", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getextension());
      }
      break;
    case 60:
      HASH_GUARD(0x0D8AAD6BA2BBCD3CLL, isinstantiable) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInstantiable", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isinstantiable());
      }
      break;
    case 63:
      HASH_GUARD(0x54C2DC04C4A62B3FLL, hasconstant) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasConstant", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_hasconstant(a0));
      }
      break;
    case 67:
      HASH_GUARD(0x67C15E3D98C00B43LL, getinterfaces) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaces", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getinterfaces());
      }
      break;
    case 68:
      HASH_GUARD(0x1EB679C3602F4B44LL, getproperties) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getProperties", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getproperties());
      }
      break;
    case 71:
      HASH_GUARD(0x0FD73627FB023047LL, getproperty) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getProperty", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getproperty(a0));
      }
      break;
    case 77:
      HASH_GUARD(0x1930CE336D39474DLL, getfilename) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getFileName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getfilename());
      }
      break;
    case 78:
      HASH_GUARD(0x7D5A57B5370B68CELL, isiterateable) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isIterateable", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isiterateable());
      }
      break;
    case 79:
      HASH_GUARD(0x48FDF6C5835C64CFLL, isinternal) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInternal", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isinternal());
      }
      break;
    case 85:
      HASH_GUARD(0x1CC71CB013143955LL, getconstants) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstants", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getconstants());
      }
      break;
    case 95:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::__construct", count, 1, 1, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___construct(a0), null);
      }
      break;
    case 100:
      HASH_GUARD(0x6A6B8BECAE7D4164LL, isuserdefined) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isUserDefined", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isuserdefined());
      }
      break;
    case 101:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getname());
      }
      break;
    case 102:
      HASH_GUARD(0x2735DCC254EE5C66LL, newinstanceargs) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::newInstanceArgs", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_newinstanceargs(a0));
      }
      break;
    case 104:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionObject::export", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(o_getClassName(), a0, a1));
      }
      break;
    case 112:
      HASH_GUARD(0x6C19E85007BC4570LL, getendline) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getEndLine", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getendline());
      }
      break;
    case 113:
      HASH_GUARD(0x07ECA928E37717F1LL, setstaticpropertyvalue) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionClass::setStaticPropertyValue", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_setstaticpropertyvalue(a0, a1), null);
      }
      break;
    case 114:
      HASH_GUARD(0x74F7FEDE16957472LL, getparentclass) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getParentClass", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getparentclass());
      }
      break;
    case 120:
      HASH_GUARD(0x7C4F424FDA56ADF8LL, getdoccomment) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDocComment", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdoccomment());
      }
      break;
    case 123:
      HASH_GUARD(0x28DC702215C7D6FBLL, implementsinterface) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::implementsInterface", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_implementsinterface(a0));
      }
      break;
    case 126:
      HASH_GUARD(0x373333991926C97ELL, issubclassof) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isSubclassOf", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_issubclassof(a0));
      }
      break;
    default:
      break;
  }
#endif
  return c_reflectionclass::o_invoke_from_eval(s, env, caller, hash, fatal);
}
Variant c_reflectionobject::os_invoke_from_eval(const char *c, const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
#ifdef FMCGEN
  MethodIndex methodIndex = methodIndexExists(s);
  switch (methodIndex.m_callIndex) {
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionObject::export", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(c, a0, a1));
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 0:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionObject::export", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(c, a0, a1));
      }
      break;
    default:
      break;
  }
#endif
  return c_reflectionclass::os_invoke_from_eval(c, s, env, caller, hash, fatal);
}
struct ObjectStaticCallbacks cw_reflectionobject = {
  c_reflectionobject::os_getInit,
  c_reflectionobject::os_get,
  c_reflectionobject::os_lval,
  c_reflectionobject::os_invoke,
  c_reflectionobject::os_constant,
};
void c_reflectionobject::init() {
  c_reflectionclass::init();
}
/* SRC: classes/reflection.php line 1294 */
Variant c_reflectionobject::ti_export(const char* cls, Variant v_obj, CVarRef v_ret) {
  STATIC_METHOD_INJECTION_BUILTIN(ReflectionObject, ReflectionObject::export);
  String v_str;

  {
    p_reflectionobject tmp1 = NEWOBJ(c_reflectionobject)();
    (tmp1->create(v_obj));
    v_obj = tmp1;
  }
  v_str = (toString(v_obj));
  if (toBoolean(v_ret)) {
    {
      return v_str;
    }
  }
  print(v_str);
  return null;
} /* function */
/* SRC: classes/reflection.php line 27 */
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_reflectionexception
Variant c_reflectionexception::os_getInit(const char *s, int64 hash) {
  return c_exception::os_getInit(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_reflectionexception
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_reflectionexception
Variant c_reflectionexception::os_get(const char *s, int64 hash) {
  return c_exception::os_get(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_reflectionexception
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_reflectionexception
Variant &c_reflectionexception::os_lval(const char *s, int64 hash) {
  return c_exception::os_lval(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_reflectionexception
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_reflectionexception
void c_reflectionexception::o_getArray(Array &props) const {
  c_exception::o_getArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_reflectionexception
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionexception
void c_reflectionexception::o_setArray(CArrRef props) {
  c_exception::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionexception
#ifndef OMIT_JUMP_TABLE_CLASS_get_reflectionexception
Variant c_reflectionexception::o_get(CStrRef prop, int64 phash, bool error, const char *context, int64 hash) {
  return o_getPublic(prop, phash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_reflectionexception
#ifndef OMIT_JUMP_TABLE_CLASS_get_PUBLIC_reflectionexception
Variant c_reflectionexception::o_getPublic(CStrRef s, int64 hash, bool error) {
  return c_exception::o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PUBLIC_reflectionexception
#ifndef OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionexception
Variant c_reflectionexception::o_getPrivate(CStrRef s, int64 hash, bool error) {
  return o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionexception
#ifndef OMIT_JUMP_TABLE_CLASS_exists_reflectionexception
bool c_reflectionexception::o_exists(CStrRef prop, int64 phash, const char *context, int64 hash) const {
  return o_existsPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_reflectionexception
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionexception
bool c_reflectionexception::o_existsPublic(CStrRef s, int64 hash) const {
  return c_exception::o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionexception
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionexception
bool c_reflectionexception::o_existsPrivate(CStrRef s, int64 hash) const {
  return o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionexception
#ifndef OMIT_JUMP_TABLE_CLASS_set_reflectionexception
Variant c_reflectionexception::o_set(CStrRef prop, int64 phash, CVarRef v, bool forInit, const char *context, int64 hash) {
  return o_setPublic(prop, phash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_reflectionexception
#ifndef OMIT_JUMP_TABLE_CLASS_set_PUBLIC_reflectionexception
Variant c_reflectionexception::o_setPublic(CStrRef s, int64 hash, CVarRef v, bool forInit) {
  return c_exception::o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PUBLIC_reflectionexception
#ifndef OMIT_JUMP_TABLE_CLASS_set_PRIVATE_reflectionexception
Variant c_reflectionexception::o_setPrivate(CStrRef s, int64 hash, CVarRef v, bool forInit) {
  return o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PRIVATE_reflectionexception
#ifndef OMIT_JUMP_TABLE_CLASS_lval_reflectionexception
Variant& c_reflectionexception::o_lval(CStrRef prop, int64 phash, const char *context, int64 hash) {
  return o_lvalPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_reflectionexception
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_reflectionexception
Variant& c_reflectionexception::o_lvalPublic(CStrRef s, int64 hash) {
  return c_exception::o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_reflectionexception
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_reflectionexception
Variant& c_reflectionexception::o_lvalPrivate(CStrRef s, int64 hash) {
  return o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_reflectionexception
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_reflectionexception
Variant c_reflectionexception::os_constant(const char *s) {
  return c_exception::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_reflectionexception
IMPLEMENT_CLASS(reflectionexception)
ObjectData *c_reflectionexception::cloneImpl() {
  c_reflectionexception *obj = NEW(c_reflectionexception)();
  cloneSet(obj);
  return obj;
}
void c_reflectionexception::cloneSet(c_reflectionexception *clone) {
  c_exception::cloneSet(clone);
}
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionexception
Variant c_reflectionexception::o_invoke(MethodIndex methodIndex, const char *s, CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0x19:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("Exception::getMessage", 0, 1);
        return (t_getmessage());
      }
      break;
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("Exception::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 2) return throw_toomany_arguments("Exception::__construct", 2, 2);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          if (count <= 0) return (t___construct(), null);
          CVarRef arg0((ad->getValue(pos)));
          if (count == 1) return (t___construct(arg0), null);
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (t___construct(arg0, arg1), null);
        }
      }
      break;
    case 0x1b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("Exception::getCode", 0, 1);
        return (t_getcode());
      }
      break;
    case 0x1c:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("Exception::getLine", 0, 1);
        return (t_getline());
      }
      break;
    case 0x1d:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("Exception::__init__", 0, 1);
        return (t___init__(), null);
      }
      break;
    case 0x1e:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("Exception::getFile", 0, 1);
        return (t_getfile());
      }
      break;
    case 0x1f:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("Exception::getTraceAsString", 0, 1);
        return (t_gettraceasstring());
      }
      break;
    case 0x20:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("Exception::getTrace", 0, 1);
        return (t_gettrace());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 31) {
    case 0:
      HASH_GUARD(0x625661A755F425C0LL, __init__) {
        if (count > 0) return throw_toomany_arguments("Exception::__init__", 0, 1);
        return (t___init__(), null);
      }
      break;
    case 3:
      HASH_GUARD(0x31D981FD9D2728E3LL, getline) {
        if (count > 0) return throw_toomany_arguments("Exception::getLine", 0, 1);
        return (t_getline());
      }
      break;
    case 10:
      HASH_GUARD(0x03CA4360169ECC8ALL, gettraceasstring) {
        if (count > 0) return throw_toomany_arguments("Exception::getTraceAsString", 0, 1);
        return (t_gettraceasstring());
      }
      break;
    case 15:
      HASH_GUARD(0x5C108B351DC3D04FLL, getcode) {
        if (count > 0) return throw_toomany_arguments("Exception::getCode", 0, 1);
        return (t_getcode());
      }
      break;
    case 18:
      HASH_GUARD(0x71859D7313E682D2LL, getmessage) {
        if (count > 0) return throw_toomany_arguments("Exception::getMessage", 0, 1);
        return (t_getmessage());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        if (count > 0) return throw_toomany_arguments("Exception::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 26:
      HASH_GUARD(0x6800B2B4C4EC4CBALL, gettrace) {
        if (count > 0) return throw_toomany_arguments("Exception::getTrace", 0, 1);
        return (t_gettrace());
      }
      break;
    case 30:
      HASH_GUARD(0x3CE90CB8F0C9579ELL, getfile) {
        if (count > 0) return throw_toomany_arguments("Exception::getFile", 0, 1);
        return (t_getfile());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count > 2) return throw_toomany_arguments("Exception::__construct", 2, 2);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          if (count <= 0) return (t___construct(), null);
          CVarRef arg0((ad->getValue(pos)));
          if (count == 1) return (t___construct(arg0), null);
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (t___construct(arg0, arg1), null);
        }
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::o_invoke(methodIndex, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionexception
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionexception
Variant c_reflectionexception::o_invoke_few_args(MethodIndex methodIndex, const char *s, int64 hash, int count, CVarRef a0, CVarRef a1, CVarRef a2, CVarRef a3, CVarRef a4, CVarRef a5) {
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0x19:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("Exception::getMessage", 0, 1);
        return (t_getmessage());
      }
      break;
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("Exception::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 2) return throw_toomany_arguments("Exception::__construct", 2, 2);
        if (count <= 0) return (t___construct(), null);
        if (count == 1) return (t___construct(a0), null);
        return (t___construct(a0, a1), null);
      }
      break;
    case 0x1b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("Exception::getCode", 0, 1);
        return (t_getcode());
      }
      break;
    case 0x1c:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("Exception::getLine", 0, 1);
        return (t_getline());
      }
      break;
    case 0x1d:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("Exception::__init__", 0, 1);
        return (t___init__(), null);
      }
      break;
    case 0x1e:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("Exception::getFile", 0, 1);
        return (t_getfile());
      }
      break;
    case 0x1f:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("Exception::getTraceAsString", 0, 1);
        return (t_gettraceasstring());
      }
      break;
    case 0x20:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("Exception::getTrace", 0, 1);
        return (t_gettrace());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 31) {
    case 0:
      HASH_GUARD(0x625661A755F425C0LL, __init__) {
        if (count > 0) return throw_toomany_arguments("Exception::__init__", 0, 1);
        return (t___init__(), null);
      }
      break;
    case 3:
      HASH_GUARD(0x31D981FD9D2728E3LL, getline) {
        if (count > 0) return throw_toomany_arguments("Exception::getLine", 0, 1);
        return (t_getline());
      }
      break;
    case 10:
      HASH_GUARD(0x03CA4360169ECC8ALL, gettraceasstring) {
        if (count > 0) return throw_toomany_arguments("Exception::getTraceAsString", 0, 1);
        return (t_gettraceasstring());
      }
      break;
    case 15:
      HASH_GUARD(0x5C108B351DC3D04FLL, getcode) {
        if (count > 0) return throw_toomany_arguments("Exception::getCode", 0, 1);
        return (t_getcode());
      }
      break;
    case 18:
      HASH_GUARD(0x71859D7313E682D2LL, getmessage) {
        if (count > 0) return throw_toomany_arguments("Exception::getMessage", 0, 1);
        return (t_getmessage());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        if (count > 0) return throw_toomany_arguments("Exception::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 26:
      HASH_GUARD(0x6800B2B4C4EC4CBALL, gettrace) {
        if (count > 0) return throw_toomany_arguments("Exception::getTrace", 0, 1);
        return (t_gettrace());
      }
      break;
    case 30:
      HASH_GUARD(0x3CE90CB8F0C9579ELL, getfile) {
        if (count > 0) return throw_toomany_arguments("Exception::getFile", 0, 1);
        return (t_getfile());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count > 2) return throw_toomany_arguments("Exception::__construct", 2, 2);
        if (count <= 0) return (t___construct(), null);
        if (count == 1) return (t___construct(a0), null);
        return (t___construct(a0, a1), null);
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::o_invoke_few_args(methodIndex, s, hash, count, a0, a1, a2, a3, a4, a5);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionexception
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_reflectionexception
Variant c_reflectionexception::os_invoke(const char *c, MethodIndex methodIndex, const char *s,  CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
#ifdef FMCGEN
#else
#endif
  return c_ObjectData::os_invoke(c, methodIndex, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_reflectionexception
Variant c_reflectionexception::o_invoke_from_eval(const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
#ifdef FMCGEN
  MethodIndex methodIndex = methodIndexExists(s);
  switch (methodIndex.m_callIndex) {
    case 0x19:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("Exception::getMessage", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getmessage());
      }
      break;
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("Exception::__toString", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___tostring());
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 2) return throw_toomany_arguments("Exception::__construct", 2, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 0) return (t___construct(), null);
        else if (count == 1) return (t___construct(a0), null);
        else return (t___construct(a0, a1), null);
      }
      break;
    case 0x1b:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("Exception::getCode", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getcode());
      }
      break;
    case 0x1c:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("Exception::getLine", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getline());
      }
      break;
    case 0x1d:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("Exception::__init__", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___init__(), null);
      }
      break;
    case 0x1e:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("Exception::getFile", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getfile());
      }
      break;
    case 0x1f:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("Exception::getTraceAsString", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_gettraceasstring());
      }
      break;
    case 0x20:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("Exception::getTrace", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_gettrace());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 31) {
    case 0:
      HASH_GUARD(0x625661A755F425C0LL, __init__) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("Exception::__init__", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___init__(), null);
      }
      break;
    case 3:
      HASH_GUARD(0x31D981FD9D2728E3LL, getline) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("Exception::getLine", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getline());
      }
      break;
    case 10:
      HASH_GUARD(0x03CA4360169ECC8ALL, gettraceasstring) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("Exception::getTraceAsString", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_gettraceasstring());
      }
      break;
    case 15:
      HASH_GUARD(0x5C108B351DC3D04FLL, getcode) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("Exception::getCode", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getcode());
      }
      break;
    case 18:
      HASH_GUARD(0x71859D7313E682D2LL, getmessage) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("Exception::getMessage", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getmessage());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("Exception::__toString", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___tostring());
      }
      break;
    case 26:
      HASH_GUARD(0x6800B2B4C4EC4CBALL, gettrace) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("Exception::getTrace", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_gettrace());
      }
      break;
    case 30:
      HASH_GUARD(0x3CE90CB8F0C9579ELL, getfile) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("Exception::getFile", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getfile());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 2) return throw_toomany_arguments("Exception::__construct", 2, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 0) return (t___construct(), null);
        else if (count == 1) return (t___construct(a0), null);
        else return (t___construct(a0, a1), null);
      }
      break;
    default:
      break;
  }
#endif
  return c_exception::o_invoke_from_eval(s, env, caller, hash, fatal);
}
Variant c_reflectionexception::os_invoke_from_eval(const char *c, const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
#ifdef FMCGEN
  MethodIndex methodIndex = methodIndexExists(s);
#else
#endif
  return c_exception::os_invoke_from_eval(c, s, env, caller, hash, fatal);
}
struct ObjectStaticCallbacks cw_reflectionexception = {
  c_reflectionexception::os_getInit,
  c_reflectionexception::os_get,
  c_reflectionexception::os_lval,
  c_reflectionexception::os_invoke,
  c_reflectionexception::os_constant,
};
void c_reflectionexception::init() {
  c_exception::init();
}
/* SRC: classes/reflection.php line 538 */
const int64 q_reflectionclass_IS_IMPLICIT_ABSTRACT = 16LL;
const int64 q_reflectionclass_IS_EXPLICIT_ABSTRACT = 32LL;
const int64 q_reflectionclass_IS_FINAL = 64LL;
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_reflectionclass
Variant c_reflectionclass::os_getInit(const char *s, int64 hash) {
  DECLARE_SYSTEM_GLOBALS(g);
  if (hash < 0) hash = hash_string(s);
  switch (hash & 3) {
    case 2:
      HASH_RETURN(0x5655B4FF77E35232LL,
                  null, "name");
      break;
    case 3:
      HASH_RETURN(0x0F2EF58F157D479FLL,
                  null, "info");
      break;
    default:
      break;
  }
  return c_ObjectData::os_getInit(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_reflectionclass
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_reflectionclass
Variant c_reflectionclass::os_get(const char *s, int64 hash) {
  return c_ObjectData::os_get(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_reflectionclass
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_reflectionclass
Variant &c_reflectionclass::os_lval(const char *s, int64 hash) {
  return c_ObjectData::os_lval(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_reflectionclass
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_reflectionclass
void c_reflectionclass::o_getArray(Array &props) const {
  if (isInitialized(m_name)) props.set("name", m_name.isReferenced() ? ref(m_name) : m_name, 0x5655B4FF77E35232LL, true);
  if (isInitialized(m_info)) props.set(String("\000ReflectionClass\000info", 21, AttachLiteral), m_info.isReferenced() ? ref(m_info) : m_info, 0x0349DE35883AE221LL, true);
  c_ObjectData::o_getArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_reflectionclass
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionclass
void c_reflectionclass::o_setArray(CArrRef props) {
  props->load(String("\000ReflectionClass\000info", 21, AttachLiteral), m_info);
  c_ObjectData::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionclass
#ifndef OMIT_JUMP_TABLE_CLASS_get_reflectionclass
Variant c_reflectionclass::o_get(CStrRef prop, int64 phash, bool error, const char *context, int64 hash) {
  const char *s = context;
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 1:
      HASH_GUARD(0x35A44A5E6AE2E71DLL, ReflectionClass) { return o_getPrivate(prop, phash, error); }
      break;
    default:
      break;
  }
  return o_getPublic(prop, phash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_reflectionclass
#ifndef OMIT_JUMP_TABLE_CLASS_get_PUBLIC_reflectionclass
Variant c_reflectionclass::o_getPublic(CStrRef s, int64 hash, bool error) {
  if (hash < 0) hash = s->hash();
  switch (hash & 1) {
    case 0:
      HASH_RETURN_STRING(0x5655B4FF77E35232LL, m_name,
                         "name", 4);
      break;
    default:
      break;
  }
  return c_ObjectData::o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PUBLIC_reflectionclass
#ifndef OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionclass
Variant c_reflectionclass::o_getPrivate(CStrRef s, int64 hash, bool error) {
  if (hash < 0) hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_RETURN_STRING(0x0F2EF58F157D479FLL, m_info,
                         "info", 4);
      break;
    default:
      break;
  }
  return o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionclass
#ifndef OMIT_JUMP_TABLE_CLASS_exists_reflectionclass
bool c_reflectionclass::o_exists(CStrRef prop, int64 phash, const char *context, int64 hash) const {
  const char *s = context;
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 1:
      HASH_GUARD(0x35A44A5E6AE2E71DLL, ReflectionClass) { return o_existsPrivate(prop, phash); }
      break;
    default:
      break;
  }
  return o_existsPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_reflectionclass
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionclass
bool c_reflectionclass::o_existsPublic(CStrRef s, int64 hash) const {
  if (hash < 0) hash = s->hash();
  switch (hash & 1) {
    case 0:
      HASH_EXISTS_STRING(0x5655B4FF77E35232LL, "name", 4);
      break;
    default:
      break;
  }
  return c_ObjectData::o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionclass
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionclass
bool c_reflectionclass::o_existsPrivate(CStrRef s, int64 hash) const {
  if (hash < 0) hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_EXISTS_STRING(0x0F2EF58F157D479FLL, "info", 4);
      break;
    default:
      break;
  }
  return o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionclass
#ifndef OMIT_JUMP_TABLE_CLASS_set_reflectionclass
Variant c_reflectionclass::o_set(CStrRef prop, int64 phash, CVarRef v, bool forInit, const char *context, int64 hash) {
  const char *s = context;
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 1:
      HASH_GUARD(0x35A44A5E6AE2E71DLL, ReflectionClass) { return o_setPrivate(prop, phash, v, forInit); }
      break;
    default:
      break;
  }
  return o_setPublic(prop, phash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_reflectionclass
#ifndef OMIT_JUMP_TABLE_CLASS_set_PUBLIC_reflectionclass
Variant c_reflectionclass::o_setPublic(CStrRef s, int64 hash, CVarRef v, bool forInit) {
  if (hash < 0) hash = s->hash();
  switch (hash & 1) {
    case 0:
      HASH_SET_STRING(0x5655B4FF77E35232LL, m_name,
                      "name", 4);
      break;
    default:
      break;
  }
  return c_ObjectData::o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PUBLIC_reflectionclass
#ifndef OMIT_JUMP_TABLE_CLASS_set_PRIVATE_reflectionclass
Variant c_reflectionclass::o_setPrivate(CStrRef s, int64 hash, CVarRef v, bool forInit) {
  if (hash < 0) hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_SET_STRING(0x0F2EF58F157D479FLL, m_info,
                      "info", 4);
      break;
    default:
      break;
  }
  return o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PRIVATE_reflectionclass
#ifndef OMIT_JUMP_TABLE_CLASS_lval_reflectionclass
Variant& c_reflectionclass::o_lval(CStrRef prop, int64 phash, const char *context, int64 hash) {
  const char *s = context;
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 1:
      HASH_GUARD(0x35A44A5E6AE2E71DLL, ReflectionClass) { return o_lvalPrivate(prop, phash); }
      break;
    default:
      break;
  }
  return o_lvalPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_reflectionclass
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_reflectionclass
Variant& c_reflectionclass::o_lvalPublic(CStrRef s, int64 hash) {
  if (hash < 0) hash = s->hash();
  switch (hash & 1) {
    case 0:
      HASH_RETURN_STRING(0x5655B4FF77E35232LL, m_name,
                         "name", 4);
      break;
    default:
      break;
  }
  return c_ObjectData::o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_reflectionclass
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_reflectionclass
Variant& c_reflectionclass::o_lvalPrivate(CStrRef s, int64 hash) {
  if (hash < 0) hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_RETURN_STRING(0x0F2EF58F157D479FLL, m_info,
                         "info", 4);
      break;
    default:
      break;
  }
  return o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_reflectionclass
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_reflectionclass
Variant c_reflectionclass::os_constant(const char *s) {
  int64 hash = hash_string(s);
  switch (hash & 7) {
    case 2:
      HASH_RETURN(0x042E299D3BE2773ALL, q_reflectionclass_IS_IMPLICIT_ABSTRACT, "IS_IMPLICIT_ABSTRACT");
      break;
    case 6:
      HASH_RETURN(0x468EF528A19B529ELL, q_reflectionclass_IS_EXPLICIT_ABSTRACT, "IS_EXPLICIT_ABSTRACT");
      HASH_RETURN(0x47AAFAC74A58AD66LL, q_reflectionclass_IS_FINAL, "IS_FINAL");
      break;
    default:
      break;
  }
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_reflectionclass
IMPLEMENT_CLASS(reflectionclass)
c_reflectionclass *c_reflectionclass::create(Variant v_name) {
  CountableHelper h(this);
  init();
  t___construct(v_name);
  return this;
}
ObjectData *c_reflectionclass::dynCreate(CArrRef params, bool construct /* = true */) {
  init();
  if (construct) {
    CountableHelper h(this);
    int count __attribute__((__unused__)) = params.size();
    if (count != 1) throw_wrong_arguments("ReflectionClass::__construct", count, 1, 1, 2);
    {
      ArrayData *ad(params.get());
      ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
      CVarRef arg0((ad->getValue(pos)));
      (t___construct(arg0));
    }
  }
  return this;
}
void c_reflectionclass::dynConstruct(CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count != 1) throw_wrong_arguments("ReflectionClass::__construct", count, 1, 1, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    (t___construct(arg0));
  }
}
void c_reflectionclass::dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  int count __attribute__((__unused__)) = params.size();
  if (count != 1) throw_wrong_arguments("ReflectionClass::__construct", count, 1, 1, 1);
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  (t___construct(a0), null);
}
ObjectData *c_reflectionclass::cloneImpl() {
  c_reflectionclass *obj = NEW(c_reflectionclass)();
  cloneSet(obj);
  return obj;
}
void c_reflectionclass::cloneSet(c_reflectionclass *clone) {
  clone->m_name = m_name.isReferenced() ? ref(m_name) : m_name;
  clone->m_info = m_info.isReferenced() ? ref(m_info) : m_info;
  ObjectData::cloneSet(clone);
}
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionclass
Variant c_reflectionclass::o_invoke(MethodIndex methodIndex, const char *s, CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0xfb:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 1) return throw_toomany_arguments("ReflectionClass::getMethods", 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          if (count <= 0) return (t_getmethods());
          CVarRef arg0((ad->getValue(pos)));
          return (t_getmethods(arg0));
        }
      }
      break;
    case 0xfc:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isIterateable", 0, 1);
        return (t_isiterateable());
      }
      break;
    case 0xfd:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count < 1 || count > 2) return throw_wrong_arguments("ReflectionClass::getStaticPropertyValue", count, 1, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          if (count <= 1) return (t_getstaticpropertyvalue(arg0));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (t_getstaticpropertyvalue(arg0, arg1));
        }
      }
      break;
    case 0xfe:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isUserDefined", 0, 1);
        return (t_isuserdefined());
      }
      break;
    case 0xff:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count <= 0) return (t_newinstance(count));
        return (t_newinstance(count,params.slice(0, count - 0, false)));
      }
      break;
    case 0x100:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtension", 0, 1);
        return (t_getextension());
      }
      break;
    case 0x101:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstructor", 0, 1);
        return (t_getconstructor());
      }
      break;
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 0x102:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::newInstanceArgs", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_newinstanceargs(arg0));
        }
      }
      break;
    case 0x103:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getEndLine", 0, 1);
        return (t_getendline());
      }
      break;
    case 0x105:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isInstance", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_isinstance(arg0));
        }
      }
      break;
    case 0x104:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasMethod", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_hasmethod(arg0));
        }
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::__construct", count, 1, 1, 2);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t___construct(arg0), null);
        }
      }
      break;
    case 0x106:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isFinal", 0, 1);
        return (t_isfinal());
      }
      break;
    case 0x107:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getModifiers", 0, 1);
        return (t_getmodifiers());
      }
      break;
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionClass::export", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(o_getClassName(), arg0, arg1));
        }
      }
      break;
    case 0x109:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getProperties", 0, 1);
        return (t_getproperties());
      }
      break;
    case 0x10a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasConstant", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_hasconstant(arg0));
        }
      }
      break;
    case 0x10b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getMethod", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_getmethod(arg0));
        }
      }
      break;
    case 0x10c:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtensionName", 0, 1);
        return (t_getextensionname());
      }
      break;
    case 0x10d:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getParentClass", 0, 1);
        return (t_getparentclass());
      }
      break;
    case 0xbd:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getFileName", 0, 1);
        return (t_getfilename());
      }
      break;
    case 0x10e:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::implementsInterface", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_implementsinterface(arg0));
        }
      }
      break;
    case 0x10f:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaceNames", 0, 1);
        return (t_getinterfacenames());
      }
      break;
    case 0x111:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getConstant", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_getconstant(arg0));
        }
      }
      break;
    case 0x110:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStartLine", 0, 1);
        return (t_getstartline());
      }
      break;
    case 0x112:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstants", 0, 1);
        return (t_getconstants());
      }
      break;
    case 0x113:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    case 0x114:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInterface", 0, 1);
        return (t_isinterface());
      }
      break;
    case 0x115:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isSubclassOf", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_issubclassof(arg0));
        }
      }
      break;
    case 0x116:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasProperty", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_hasproperty(arg0));
        }
      }
      break;
    case 0x118:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStaticProperties", 0, 1);
        return (t_getstaticproperties());
      }
      break;
    case 0x117:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionClass::test", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (t_test(arg0, arg1));
        }
      }
      break;
    case 0x119:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDefaultProperties", 0, 1);
        return (t_getdefaultproperties());
      }
      break;
    case 0x11a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionClass::setStaticPropertyValue", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (t_setstaticpropertyvalue(arg0, arg1), null);
        }
      }
      break;
    case 0x11b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInstantiable", 0, 1);
        return (t_isinstantiable());
      }
      break;
    case 0x11c:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaces", 0, 1);
        return (t_getinterfaces());
      }
      break;
    case 0xf5:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::fetch", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_fetch(arg0));
        }
      }
      break;
    case 0x11d:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isAbstract", 0, 1);
        return (t_isabstract());
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 0x11f:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getProperty", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_getproperty(arg0));
        }
      }
      break;
    case 0x11e:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInternal", 0, 1);
        return (t_isinternal());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 127) {
    case 4:
      HASH_GUARD(0x39C1BB731CB1CB04LL, getstartline) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStartLine", 0, 1);
        return (t_getstartline());
      }
      break;
    case 15:
      HASH_GUARD(0x40C7B30DCB439C8FLL, hasproperty) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasProperty", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_hasproperty(arg0));
        }
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 20:
      HASH_GUARD(0x24253EBA491D6014LL, getmodifiers) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getModifiers", 0, 1);
        return (t_getmodifiers());
      }
      break;
    case 24:
      HASH_GUARD(0x21820E7AA4733998LL, hasmethod) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasMethod", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_hasmethod(arg0));
        }
      }
      break;
    case 27:
      HASH_GUARD(0x0F1AD0A8EC4C229BLL, getdefaultproperties) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDefaultProperties", 0, 1);
        return (t_getdefaultproperties());
      }
      break;
    case 30:
      HASH_GUARD(0x1BC5F3D87676509ELL, isinterface) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInterface", 0, 1);
        return (t_isinterface());
      }
      break;
    case 34:
      HASH_GUARD(0x323D9BCB05797B22LL, getstaticproperties) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStaticProperties", 0, 1);
        return (t_getstaticproperties());
      }
      break;
    case 41:
      HASH_GUARD(0x030CE1D6142F8C29LL, isinstance) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isInstance", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_isinstance(arg0));
        }
      }
      HASH_GUARD(0x1D6B8CA358B49929LL, getextensionname) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtensionName", 0, 1);
        return (t_getextensionname());
      }
      break;
    case 42:
      HASH_GUARD(0x16BA16CE6488AAAALL, getmethods) {
        if (count > 1) return throw_toomany_arguments("ReflectionClass::getMethods", 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          if (count <= 0) return (t_getmethods());
          CVarRef arg0((ad->getValue(pos)));
          return (t_getmethods(arg0));
        }
      }
      HASH_GUARD(0x226F6E80CECD3CAALL, getconstructor) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstructor", 0, 1);
        return (t_getconstructor());
      }
      HASH_GUARD(0x24596BE6D21F7CAALL, getinterfacenames) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaceNames", 0, 1);
        return (t_getinterfacenames());
      }
      break;
    case 46:
      HASH_GUARD(0x3C882D4A895F612ELL, getstaticpropertyvalue) {
        if (count < 1 || count > 2) return throw_wrong_arguments("ReflectionClass::getStaticPropertyValue", count, 1, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          if (count <= 1) return (t_getstaticpropertyvalue(arg0));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (t_getstaticpropertyvalue(arg0, arg1));
        }
      }
      HASH_GUARD(0x06FB6A7DC3D795AELL, isfinal) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isFinal", 0, 1);
        return (t_isfinal());
      }
      break;
    case 48:
      HASH_GUARD(0x30A86FCA01FE7030LL, newinstance) {
        if (count <= 0) return (t_newinstance(count));
        return (t_newinstance(count,params.slice(0, count - 0, false)));
      }
      break;
    case 52:
      HASH_GUARD(0x3DB53E1FBD3C0734LL, getconstant) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getConstant", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_getconstant(arg0));
        }
      }
      break;
    case 54:
      HASH_GUARD(0x0D81ECE253A3B5B6LL, getmethod) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getMethod", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_getmethod(arg0));
        }
      }
      break;
    case 55:
      HASH_GUARD(0x7460D945DA32FDB7LL, isabstract) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isAbstract", 0, 1);
        return (t_isabstract());
      }
      break;
    case 59:
      HASH_GUARD(0x25D24435915E6E3BLL, getextension) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtension", 0, 1);
        return (t_getextension());
      }
      break;
    case 60:
      HASH_GUARD(0x0D8AAD6BA2BBCD3CLL, isinstantiable) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInstantiable", 0, 1);
        return (t_isinstantiable());
      }
      break;
    case 63:
      HASH_GUARD(0x54C2DC04C4A62B3FLL, hasconstant) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasConstant", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_hasconstant(arg0));
        }
      }
      break;
    case 67:
      HASH_GUARD(0x67C15E3D98C00B43LL, getinterfaces) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaces", 0, 1);
        return (t_getinterfaces());
      }
      break;
    case 68:
      HASH_GUARD(0x1EB679C3602F4B44LL, getproperties) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getProperties", 0, 1);
        return (t_getproperties());
      }
      break;
    case 71:
      HASH_GUARD(0x0FD73627FB023047LL, getproperty) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getProperty", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_getproperty(arg0));
        }
      }
      break;
    case 77:
      HASH_GUARD(0x1930CE336D39474DLL, getfilename) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getFileName", 0, 1);
        return (t_getfilename());
      }
      break;
    case 78:
      HASH_GUARD(0x7D5A57B5370B68CELL, isiterateable) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isIterateable", 0, 1);
        return (t_isiterateable());
      }
      break;
    case 79:
      HASH_GUARD(0x48FDF6C5835C64CFLL, isinternal) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInternal", 0, 1);
        return (t_isinternal());
      }
      break;
    case 85:
      HASH_GUARD(0x1CC71CB013143955LL, getconstants) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstants", 0, 1);
        return (t_getconstants());
      }
      break;
    case 95:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::__construct", count, 1, 1, 2);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t___construct(arg0), null);
        }
      }
      break;
    case 100:
      HASH_GUARD(0x6A6B8BECAE7D4164LL, isuserdefined) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isUserDefined", 0, 1);
        return (t_isuserdefined());
      }
      break;
    case 101:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 102:
      HASH_GUARD(0x2735DCC254EE5C66LL, newinstanceargs) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::newInstanceArgs", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_newinstanceargs(arg0));
        }
      }
      break;
    case 103:
      HASH_GUARD(0x37349B25A0ED29E7LL, test) {
        if (count != 2) return throw_wrong_arguments("ReflectionClass::test", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (t_test(arg0, arg1));
        }
      }
      break;
    case 104:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        if (count != 2) return throw_wrong_arguments("ReflectionClass::export", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(o_getClassName(), arg0, arg1));
        }
      }
      break;
    case 112:
      HASH_GUARD(0x6C19E85007BC4570LL, getendline) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getEndLine", 0, 1);
        return (t_getendline());
      }
      break;
    case 113:
      HASH_GUARD(0x07ECA928E37717F1LL, setstaticpropertyvalue) {
        if (count != 2) return throw_wrong_arguments("ReflectionClass::setStaticPropertyValue", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (t_setstaticpropertyvalue(arg0, arg1), null);
        }
      }
      break;
    case 114:
      HASH_GUARD(0x74F7FEDE16957472LL, getparentclass) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getParentClass", 0, 1);
        return (t_getparentclass());
      }
      break;
    case 120:
      HASH_GUARD(0x7C4F424FDA56ADF8LL, getdoccomment) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    case 123:
      HASH_GUARD(0x28DC702215C7D6FBLL, implementsinterface) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::implementsInterface", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_implementsinterface(arg0));
        }
      }
      HASH_GUARD(0x5E82B850BB90B0FBLL, fetch) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::fetch", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_fetch(arg0));
        }
      }
      break;
    case 126:
      HASH_GUARD(0x373333991926C97ELL, issubclassof) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isSubclassOf", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_issubclassof(arg0));
        }
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::o_invoke(methodIndex, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionclass
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionclass
Variant c_reflectionclass::o_invoke_few_args(MethodIndex methodIndex, const char *s, int64 hash, int count, CVarRef a0, CVarRef a1, CVarRef a2, CVarRef a3, CVarRef a4, CVarRef a5) {
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0xfb:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 1) return throw_toomany_arguments("ReflectionClass::getMethods", 1, 1);
        if (count <= 0) return (t_getmethods());
        return (t_getmethods(a0));
      }
      break;
    case 0xfc:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isIterateable", 0, 1);
        return (t_isiterateable());
      }
      break;
    case 0xfd:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count < 1 || count > 2) return throw_wrong_arguments("ReflectionClass::getStaticPropertyValue", count, 1, 2, 1);
        if (count <= 1) return (t_getstaticpropertyvalue(a0));
        return (t_getstaticpropertyvalue(a0, a1));
      }
      break;
    case 0xfe:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isUserDefined", 0, 1);
        return (t_isuserdefined());
      }
      break;
    case 0xff:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count <= 0) return (t_newinstance(count));
        Array params;
        if (count >= 1) params.append(a0);
        if (count >= 2) params.append(a1);
        if (count >= 3) params.append(a2);
        if (count >= 4) params.append(a3);
        if (count >= 5) params.append(a4);
        if (count >= 6) params.append(a5);
        return (t_newinstance(count,params));
      }
      break;
    case 0x100:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtension", 0, 1);
        return (t_getextension());
      }
      break;
    case 0x101:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstructor", 0, 1);
        return (t_getconstructor());
      }
      break;
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 0x102:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::newInstanceArgs", count, 1, 1, 1);
        return (t_newinstanceargs(a0));
      }
      break;
    case 0x103:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getEndLine", 0, 1);
        return (t_getendline());
      }
      break;
    case 0x105:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isInstance", count, 1, 1, 1);
        return (t_isinstance(a0));
      }
      break;
    case 0x104:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasMethod", count, 1, 1, 1);
        return (t_hasmethod(a0));
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::__construct", count, 1, 1, 2);
        return (t___construct(a0), null);
      }
      break;
    case 0x106:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isFinal", 0, 1);
        return (t_isfinal());
      }
      break;
    case 0x107:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getModifiers", 0, 1);
        return (t_getmodifiers());
      }
      break;
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionClass::export", count, 2, 2, 1);
        return (ti_export(o_getClassName(), a0, a1));
      }
      break;
    case 0x109:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getProperties", 0, 1);
        return (t_getproperties());
      }
      break;
    case 0x10a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasConstant", count, 1, 1, 1);
        return (t_hasconstant(a0));
      }
      break;
    case 0x10b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getMethod", count, 1, 1, 1);
        return (t_getmethod(a0));
      }
      break;
    case 0x10c:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtensionName", 0, 1);
        return (t_getextensionname());
      }
      break;
    case 0x10d:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getParentClass", 0, 1);
        return (t_getparentclass());
      }
      break;
    case 0xbd:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getFileName", 0, 1);
        return (t_getfilename());
      }
      break;
    case 0x10e:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::implementsInterface", count, 1, 1, 1);
        return (t_implementsinterface(a0));
      }
      break;
    case 0x10f:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaceNames", 0, 1);
        return (t_getinterfacenames());
      }
      break;
    case 0x111:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getConstant", count, 1, 1, 1);
        return (t_getconstant(a0));
      }
      break;
    case 0x110:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStartLine", 0, 1);
        return (t_getstartline());
      }
      break;
    case 0x112:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstants", 0, 1);
        return (t_getconstants());
      }
      break;
    case 0x113:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    case 0x114:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInterface", 0, 1);
        return (t_isinterface());
      }
      break;
    case 0x115:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isSubclassOf", count, 1, 1, 1);
        return (t_issubclassof(a0));
      }
      break;
    case 0x116:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasProperty", count, 1, 1, 1);
        return (t_hasproperty(a0));
      }
      break;
    case 0x118:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStaticProperties", 0, 1);
        return (t_getstaticproperties());
      }
      break;
    case 0x117:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionClass::test", count, 2, 2, 1);
        return (t_test(a0, a1));
      }
      break;
    case 0x119:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDefaultProperties", 0, 1);
        return (t_getdefaultproperties());
      }
      break;
    case 0x11a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionClass::setStaticPropertyValue", count, 2, 2, 1);
        return (t_setstaticpropertyvalue(a0, a1), null);
      }
      break;
    case 0x11b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInstantiable", 0, 1);
        return (t_isinstantiable());
      }
      break;
    case 0x11c:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaces", 0, 1);
        return (t_getinterfaces());
      }
      break;
    case 0xf5:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::fetch", count, 1, 1, 1);
        return (t_fetch(a0));
      }
      break;
    case 0x11d:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isAbstract", 0, 1);
        return (t_isabstract());
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 0x11f:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getProperty", count, 1, 1, 1);
        return (t_getproperty(a0));
      }
      break;
    case 0x11e:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInternal", 0, 1);
        return (t_isinternal());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 127) {
    case 4:
      HASH_GUARD(0x39C1BB731CB1CB04LL, getstartline) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStartLine", 0, 1);
        return (t_getstartline());
      }
      break;
    case 15:
      HASH_GUARD(0x40C7B30DCB439C8FLL, hasproperty) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasProperty", count, 1, 1, 1);
        return (t_hasproperty(a0));
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 20:
      HASH_GUARD(0x24253EBA491D6014LL, getmodifiers) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getModifiers", 0, 1);
        return (t_getmodifiers());
      }
      break;
    case 24:
      HASH_GUARD(0x21820E7AA4733998LL, hasmethod) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasMethod", count, 1, 1, 1);
        return (t_hasmethod(a0));
      }
      break;
    case 27:
      HASH_GUARD(0x0F1AD0A8EC4C229BLL, getdefaultproperties) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDefaultProperties", 0, 1);
        return (t_getdefaultproperties());
      }
      break;
    case 30:
      HASH_GUARD(0x1BC5F3D87676509ELL, isinterface) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInterface", 0, 1);
        return (t_isinterface());
      }
      break;
    case 34:
      HASH_GUARD(0x323D9BCB05797B22LL, getstaticproperties) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStaticProperties", 0, 1);
        return (t_getstaticproperties());
      }
      break;
    case 41:
      HASH_GUARD(0x030CE1D6142F8C29LL, isinstance) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isInstance", count, 1, 1, 1);
        return (t_isinstance(a0));
      }
      HASH_GUARD(0x1D6B8CA358B49929LL, getextensionname) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtensionName", 0, 1);
        return (t_getextensionname());
      }
      break;
    case 42:
      HASH_GUARD(0x16BA16CE6488AAAALL, getmethods) {
        if (count > 1) return throw_toomany_arguments("ReflectionClass::getMethods", 1, 1);
        if (count <= 0) return (t_getmethods());
        return (t_getmethods(a0));
      }
      HASH_GUARD(0x226F6E80CECD3CAALL, getconstructor) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstructor", 0, 1);
        return (t_getconstructor());
      }
      HASH_GUARD(0x24596BE6D21F7CAALL, getinterfacenames) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaceNames", 0, 1);
        return (t_getinterfacenames());
      }
      break;
    case 46:
      HASH_GUARD(0x3C882D4A895F612ELL, getstaticpropertyvalue) {
        if (count < 1 || count > 2) return throw_wrong_arguments("ReflectionClass::getStaticPropertyValue", count, 1, 2, 1);
        if (count <= 1) return (t_getstaticpropertyvalue(a0));
        return (t_getstaticpropertyvalue(a0, a1));
      }
      HASH_GUARD(0x06FB6A7DC3D795AELL, isfinal) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isFinal", 0, 1);
        return (t_isfinal());
      }
      break;
    case 48:
      HASH_GUARD(0x30A86FCA01FE7030LL, newinstance) {
        if (count <= 0) return (t_newinstance(count));
        Array params;
        if (count >= 1) params.append(a0);
        if (count >= 2) params.append(a1);
        if (count >= 3) params.append(a2);
        if (count >= 4) params.append(a3);
        if (count >= 5) params.append(a4);
        if (count >= 6) params.append(a5);
        return (t_newinstance(count,params));
      }
      break;
    case 52:
      HASH_GUARD(0x3DB53E1FBD3C0734LL, getconstant) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getConstant", count, 1, 1, 1);
        return (t_getconstant(a0));
      }
      break;
    case 54:
      HASH_GUARD(0x0D81ECE253A3B5B6LL, getmethod) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getMethod", count, 1, 1, 1);
        return (t_getmethod(a0));
      }
      break;
    case 55:
      HASH_GUARD(0x7460D945DA32FDB7LL, isabstract) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isAbstract", 0, 1);
        return (t_isabstract());
      }
      break;
    case 59:
      HASH_GUARD(0x25D24435915E6E3BLL, getextension) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtension", 0, 1);
        return (t_getextension());
      }
      break;
    case 60:
      HASH_GUARD(0x0D8AAD6BA2BBCD3CLL, isinstantiable) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInstantiable", 0, 1);
        return (t_isinstantiable());
      }
      break;
    case 63:
      HASH_GUARD(0x54C2DC04C4A62B3FLL, hasconstant) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasConstant", count, 1, 1, 1);
        return (t_hasconstant(a0));
      }
      break;
    case 67:
      HASH_GUARD(0x67C15E3D98C00B43LL, getinterfaces) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaces", 0, 1);
        return (t_getinterfaces());
      }
      break;
    case 68:
      HASH_GUARD(0x1EB679C3602F4B44LL, getproperties) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getProperties", 0, 1);
        return (t_getproperties());
      }
      break;
    case 71:
      HASH_GUARD(0x0FD73627FB023047LL, getproperty) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getProperty", count, 1, 1, 1);
        return (t_getproperty(a0));
      }
      break;
    case 77:
      HASH_GUARD(0x1930CE336D39474DLL, getfilename) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getFileName", 0, 1);
        return (t_getfilename());
      }
      break;
    case 78:
      HASH_GUARD(0x7D5A57B5370B68CELL, isiterateable) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isIterateable", 0, 1);
        return (t_isiterateable());
      }
      break;
    case 79:
      HASH_GUARD(0x48FDF6C5835C64CFLL, isinternal) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInternal", 0, 1);
        return (t_isinternal());
      }
      break;
    case 85:
      HASH_GUARD(0x1CC71CB013143955LL, getconstants) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstants", 0, 1);
        return (t_getconstants());
      }
      break;
    case 95:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::__construct", count, 1, 1, 2);
        return (t___construct(a0), null);
      }
      break;
    case 100:
      HASH_GUARD(0x6A6B8BECAE7D4164LL, isuserdefined) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isUserDefined", 0, 1);
        return (t_isuserdefined());
      }
      break;
    case 101:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 102:
      HASH_GUARD(0x2735DCC254EE5C66LL, newinstanceargs) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::newInstanceArgs", count, 1, 1, 1);
        return (t_newinstanceargs(a0));
      }
      break;
    case 103:
      HASH_GUARD(0x37349B25A0ED29E7LL, test) {
        if (count != 2) return throw_wrong_arguments("ReflectionClass::test", count, 2, 2, 1);
        return (t_test(a0, a1));
      }
      break;
    case 104:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        if (count != 2) return throw_wrong_arguments("ReflectionClass::export", count, 2, 2, 1);
        return (ti_export(o_getClassName(), a0, a1));
      }
      break;
    case 112:
      HASH_GUARD(0x6C19E85007BC4570LL, getendline) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getEndLine", 0, 1);
        return (t_getendline());
      }
      break;
    case 113:
      HASH_GUARD(0x07ECA928E37717F1LL, setstaticpropertyvalue) {
        if (count != 2) return throw_wrong_arguments("ReflectionClass::setStaticPropertyValue", count, 2, 2, 1);
        return (t_setstaticpropertyvalue(a0, a1), null);
      }
      break;
    case 114:
      HASH_GUARD(0x74F7FEDE16957472LL, getparentclass) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getParentClass", 0, 1);
        return (t_getparentclass());
      }
      break;
    case 120:
      HASH_GUARD(0x7C4F424FDA56ADF8LL, getdoccomment) {
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    case 123:
      HASH_GUARD(0x28DC702215C7D6FBLL, implementsinterface) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::implementsInterface", count, 1, 1, 1);
        return (t_implementsinterface(a0));
      }
      HASH_GUARD(0x5E82B850BB90B0FBLL, fetch) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::fetch", count, 1, 1, 1);
        return (t_fetch(a0));
      }
      break;
    case 126:
      HASH_GUARD(0x373333991926C97ELL, issubclassof) {
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isSubclassOf", count, 1, 1, 1);
        return (t_issubclassof(a0));
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::o_invoke_few_args(methodIndex, s, hash, count, a0, a1, a2, a3, a4, a5);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionclass
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_reflectionclass
Variant c_reflectionclass::os_invoke(const char *c, MethodIndex methodIndex, const char *s,  CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionClass::export", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(c, arg0, arg1));
        }
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 0:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        if (count != 2) return throw_wrong_arguments("ReflectionClass::export", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(c, arg0, arg1));
        }
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::os_invoke(c, methodIndex, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_reflectionclass
Variant c_reflectionclass::o_invoke_from_eval(const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
#ifdef FMCGEN
  MethodIndex methodIndex = methodIndexExists(s);
  switch (methodIndex.m_callIndex) {
    case 0xfb:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 1) return throw_toomany_arguments("ReflectionClass::getMethods", 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 0) return (t_getmethods());
        else return (t_getmethods(a0));
      }
      break;
    case 0xfc:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isIterateable", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isiterateable());
      }
      break;
    case 0xfd:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count < 1 || count > 2) return throw_wrong_arguments("ReflectionClass::getStaticPropertyValue", count, 1, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 1) return (t_getstaticpropertyvalue(a0));
        else return (t_getstaticpropertyvalue(a0, a1));
      }
      break;
    case 0xfe:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isUserDefined", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isuserdefined());
      }
      break;
    case 0xff:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        Array vargs;
        for (; it != params.end(); ++it) {
          vargs.append((*it)->eval(env));
        }
        if (count <= 0) return (t_newinstance(count));
        return (t_newinstance(count,vargs));
      }
      break;
    case 0x100:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtension", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getextension());
      }
      break;
    case 0x101:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstructor", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getconstructor());
      }
      break;
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::__toString", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___tostring());
      }
      break;
    case 0x102:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::newInstanceArgs", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_newinstanceargs(a0));
      }
      break;
    case 0x103:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getEndLine", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getendline());
      }
      break;
    case 0x105:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isInstance", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isinstance(a0));
      }
      break;
    case 0x104:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasMethod", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_hasmethod(a0));
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::__construct", count, 1, 1, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___construct(a0), null);
      }
      break;
    case 0x106:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isFinal", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isfinal());
      }
      break;
    case 0x107:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getModifiers", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getmodifiers());
      }
      break;
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionClass::export", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(o_getClassName(), a0, a1));
      }
      break;
    case 0x109:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getProperties", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getproperties());
      }
      break;
    case 0x10a:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasConstant", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_hasconstant(a0));
      }
      break;
    case 0x10b:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getMethod", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getmethod(a0));
      }
      break;
    case 0x10c:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtensionName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getextensionname());
      }
      break;
    case 0x10d:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getParentClass", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getparentclass());
      }
      break;
    case 0xbd:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getFileName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getfilename());
      }
      break;
    case 0x10e:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::implementsInterface", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_implementsinterface(a0));
      }
      break;
    case 0x10f:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaceNames", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getinterfacenames());
      }
      break;
    case 0x111:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getConstant", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getconstant(a0));
      }
      break;
    case 0x110:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStartLine", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getstartline());
      }
      break;
    case 0x112:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstants", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getconstants());
      }
      break;
    case 0x113:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDocComment", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdoccomment());
      }
      break;
    case 0x114:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInterface", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isinterface());
      }
      break;
    case 0x115:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isSubclassOf", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_issubclassof(a0));
      }
      break;
    case 0x116:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasProperty", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_hasproperty(a0));
      }
      break;
    case 0x118:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStaticProperties", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getstaticproperties());
      }
      break;
    case 0x117:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionClass::test", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_test(a0, a1));
      }
      break;
    case 0x119:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDefaultProperties", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdefaultproperties());
      }
      break;
    case 0x11a:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionClass::setStaticPropertyValue", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_setstaticpropertyvalue(a0, a1), null);
      }
      break;
    case 0x11b:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInstantiable", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isinstantiable());
      }
      break;
    case 0x11c:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaces", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getinterfaces());
      }
      break;
    case 0xf5:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::fetch", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_fetch(a0));
      }
      break;
    case 0x11d:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isAbstract", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isabstract());
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getname());
      }
      break;
    case 0x11f:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getProperty", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getproperty(a0));
      }
      break;
    case 0x11e:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInternal", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isinternal());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 127) {
    case 4:
      HASH_GUARD(0x39C1BB731CB1CB04LL, getstartline) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStartLine", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getstartline());
      }
      break;
    case 15:
      HASH_GUARD(0x40C7B30DCB439C8FLL, hasproperty) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasProperty", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_hasproperty(a0));
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::__toString", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___tostring());
      }
      break;
    case 20:
      HASH_GUARD(0x24253EBA491D6014LL, getmodifiers) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getModifiers", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getmodifiers());
      }
      break;
    case 24:
      HASH_GUARD(0x21820E7AA4733998LL, hasmethod) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasMethod", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_hasmethod(a0));
      }
      break;
    case 27:
      HASH_GUARD(0x0F1AD0A8EC4C229BLL, getdefaultproperties) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDefaultProperties", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdefaultproperties());
      }
      break;
    case 30:
      HASH_GUARD(0x1BC5F3D87676509ELL, isinterface) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInterface", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isinterface());
      }
      break;
    case 34:
      HASH_GUARD(0x323D9BCB05797B22LL, getstaticproperties) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getStaticProperties", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getstaticproperties());
      }
      break;
    case 41:
      HASH_GUARD(0x030CE1D6142F8C29LL, isinstance) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isInstance", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isinstance(a0));
      }
      HASH_GUARD(0x1D6B8CA358B49929LL, getextensionname) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtensionName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getextensionname());
      }
      break;
    case 42:
      HASH_GUARD(0x16BA16CE6488AAAALL, getmethods) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 1) return throw_toomany_arguments("ReflectionClass::getMethods", 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 0) return (t_getmethods());
        else return (t_getmethods(a0));
      }
      HASH_GUARD(0x226F6E80CECD3CAALL, getconstructor) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstructor", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getconstructor());
      }
      HASH_GUARD(0x24596BE6D21F7CAALL, getinterfacenames) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaceNames", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getinterfacenames());
      }
      break;
    case 46:
      HASH_GUARD(0x3C882D4A895F612ELL, getstaticpropertyvalue) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count < 1 || count > 2) return throw_wrong_arguments("ReflectionClass::getStaticPropertyValue", count, 1, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 1) return (t_getstaticpropertyvalue(a0));
        else return (t_getstaticpropertyvalue(a0, a1));
      }
      HASH_GUARD(0x06FB6A7DC3D795AELL, isfinal) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isFinal", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isfinal());
      }
      break;
    case 48:
      HASH_GUARD(0x30A86FCA01FE7030LL, newinstance) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        Array vargs;
        for (; it != params.end(); ++it) {
          vargs.append((*it)->eval(env));
        }
        if (count <= 0) return (t_newinstance(count));
        return (t_newinstance(count,vargs));
      }
      break;
    case 52:
      HASH_GUARD(0x3DB53E1FBD3C0734LL, getconstant) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getConstant", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getconstant(a0));
      }
      break;
    case 54:
      HASH_GUARD(0x0D81ECE253A3B5B6LL, getmethod) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getMethod", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getmethod(a0));
      }
      break;
    case 55:
      HASH_GUARD(0x7460D945DA32FDB7LL, isabstract) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isAbstract", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isabstract());
      }
      break;
    case 59:
      HASH_GUARD(0x25D24435915E6E3BLL, getextension) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtension", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getextension());
      }
      break;
    case 60:
      HASH_GUARD(0x0D8AAD6BA2BBCD3CLL, isinstantiable) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInstantiable", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isinstantiable());
      }
      break;
    case 63:
      HASH_GUARD(0x54C2DC04C4A62B3FLL, hasconstant) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::hasConstant", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_hasconstant(a0));
      }
      break;
    case 67:
      HASH_GUARD(0x67C15E3D98C00B43LL, getinterfaces) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaces", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getinterfaces());
      }
      break;
    case 68:
      HASH_GUARD(0x1EB679C3602F4B44LL, getproperties) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getProperties", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getproperties());
      }
      break;
    case 71:
      HASH_GUARD(0x0FD73627FB023047LL, getproperty) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::getProperty", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getproperty(a0));
      }
      break;
    case 77:
      HASH_GUARD(0x1930CE336D39474DLL, getfilename) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getFileName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getfilename());
      }
      break;
    case 78:
      HASH_GUARD(0x7D5A57B5370B68CELL, isiterateable) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isIterateable", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isiterateable());
      }
      break;
    case 79:
      HASH_GUARD(0x48FDF6C5835C64CFLL, isinternal) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isInternal", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isinternal());
      }
      break;
    case 85:
      HASH_GUARD(0x1CC71CB013143955LL, getconstants) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstants", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getconstants());
      }
      break;
    case 95:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::__construct", count, 1, 1, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___construct(a0), null);
      }
      break;
    case 100:
      HASH_GUARD(0x6A6B8BECAE7D4164LL, isuserdefined) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::isUserDefined", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isuserdefined());
      }
      break;
    case 101:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getname());
      }
      break;
    case 102:
      HASH_GUARD(0x2735DCC254EE5C66LL, newinstanceargs) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::newInstanceArgs", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_newinstanceargs(a0));
      }
      break;
    case 103:
      HASH_GUARD(0x37349B25A0ED29E7LL, test) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionClass::test", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_test(a0, a1));
      }
      break;
    case 104:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionClass::export", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(o_getClassName(), a0, a1));
      }
      break;
    case 112:
      HASH_GUARD(0x6C19E85007BC4570LL, getendline) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getEndLine", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getendline());
      }
      break;
    case 113:
      HASH_GUARD(0x07ECA928E37717F1LL, setstaticpropertyvalue) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionClass::setStaticPropertyValue", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_setstaticpropertyvalue(a0, a1), null);
      }
      break;
    case 114:
      HASH_GUARD(0x74F7FEDE16957472LL, getparentclass) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getParentClass", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getparentclass());
      }
      break;
    case 120:
      HASH_GUARD(0x7C4F424FDA56ADF8LL, getdoccomment) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionClass::getDocComment", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdoccomment());
      }
      break;
    case 123:
      HASH_GUARD(0x28DC702215C7D6FBLL, implementsinterface) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::implementsInterface", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_implementsinterface(a0));
      }
      HASH_GUARD(0x5E82B850BB90B0FBLL, fetch) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::fetch", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_fetch(a0));
      }
      break;
    case 126:
      HASH_GUARD(0x373333991926C97ELL, issubclassof) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionClass::isSubclassOf", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_issubclassof(a0));
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::o_invoke_from_eval(s, env, caller, hash, fatal);
}
Variant c_reflectionclass::os_invoke_from_eval(const char *c, const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
#ifdef FMCGEN
  MethodIndex methodIndex = methodIndexExists(s);
  switch (methodIndex.m_callIndex) {
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionClass::export", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(c, a0, a1));
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 0:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionClass::export", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(c, a0, a1));
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::os_invoke_from_eval(c, s, env, caller, hash, fatal);
}
struct ObjectStaticCallbacks cw_reflectionclass = {
  c_reflectionclass::os_getInit,
  c_reflectionclass::os_get,
  c_reflectionclass::os_lval,
  c_reflectionclass::os_invoke,
  c_reflectionclass::os_constant,
};
void c_reflectionclass::init() {
  m_name = null;
  m_info = null;
}
/* SRC: classes/reflection.php line 546 */
void c_reflectionclass::t___construct(Variant v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::__construct);
  bool oldInCtor = gasInCtor(true);
  if (x_is_object(v_name)) {
    {
      {
        const Variant &tmp1((x_get_class(v_name)));
        v_name = tmp1;
      }
    }
  }
  else {
    {
      if ((!(toBoolean(x_call_user_func(2, "class_exists", Array(ArrayInit(1, true).setRef(0, v_name).create())))) && !(toBoolean(x_call_user_func(2, "interface_exists", Array(ArrayInit(1, true).setRef(0, v_name).create())))))) {
        {
          {
            p_reflectionexception tmp2 = NEWOBJ(c_reflectionexception)();
            throw_exception((tmp2->create(concat3("Class ", toString(v_name), " does not exist")), tmp2));
          }
        }
      }
    }
  }
  {
    const String &tmp3((x_hphp_get_original_class_name(toString(v_name))));
    m_name = tmp3;
  }
  gasInCtor(oldInCtor);
} /* function */
/* SRC: classes/reflection.php line 559 */
Variant c_reflectionclass::t_fetch(CVarRef v_what) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::fetch);
  Variant v_name;
  p_reflectionclass v_p;
  Primitive v_interface = 0;
  Variant v__;

  if (!(toBoolean(m_info))) {
    {
      {
        const Variant &tmp1((x_call_user_func(2, "hphp_get_class_info", Array(ArrayInit(1, true).setRef(0, lval(m_name)).create()))));
        m_info = tmp1;
      }
      if (empty(m_info)) {
        {
          {
            p_reflectionexception tmp2 = NEWOBJ(c_reflectionexception)();
            throw_exception((tmp2->create(concat3("Class ", toString(v_name), " does not exist")), tmp2));
          }
        }
      }
      if (toBoolean(t_isinterface())) {
        {
          if (!(empty(m_info, "parent", 0x53DCFFF92D13045ELL, true))) {
            {
              {
                p_reflectionclass tmp3 = NEWOBJ(c_reflectionclass)();
                (tmp3->create(m_info.rvalAt("parent", 0x53DCFFF92D13045ELL, true, true)));
                v_p = tmp3;
              }
              {
                Variant tmp4((m_info.rvalAt("parent", 0x53DCFFF92D13045ELL, true, true)));
                lval(m_info.lvalAt("interfaces", 0x2C0A39FD56221A08LL, false, true)).append((tmp4));
              }
              {
                const Variant &tmp5((v_p->t_fetch("interfaces")));
                m_info.setOpEqual(277, "interfaces", (tmp5), 0x2C0A39FD56221A08LL, true);
              }
              {
                Variant tmp6((v_p->m_info.rvalAt("methods", 0x4E047FA19797C9CELL, true, true)));
                m_info.setOpEqual(277, "methods", (tmp6), 0x4E047FA19797C9CELL, true);
              }
              {
                Variant tmp7((v_p->m_info.rvalAt("constants", 0x76FE868B1D07A592LL, true, true)));
                m_info.setOpEqual(277, "constants", (tmp7), 0x76FE868B1D07A592LL, true);
              }
            }
          }
        }
      }
      else {
        {
          {
            LOOP_COUNTER(8);
            Variant map9 = m_info.rvalAt("interfaces", 0x2C0A39FD56221A08LL, true, true);
            for (ArrayIterPtr iter10 = map9.begin(s_class_name); !iter10->end(); iter10->next()) {
              LOOP_COUNTER_CHECK(8);
              iter10->second(v__);
              v_interface = iter10->first();
              {
                {
                  p_reflectionclass tmp11 = NEWOBJ(c_reflectionclass)();
                  (tmp11->create(v_interface));
                  v_p = tmp11;
                }
                {
                  const Variant &tmp12((v_p->t_fetch("methods")));
                  m_info.setOpEqual(277, "methods", (tmp12), 0x4E047FA19797C9CELL, true);
                }
                {
                  Variant tmp13((v_p->m_info.rvalAt("constants", 0x76FE868B1D07A592LL, true, true)));
                  m_info.setOpEqual(277, "constants", (tmp13), 0x76FE868B1D07A592LL, true);
                }
                {
                  Variant tmp14((v_p->m_info.rvalAt("interfaces", 0x2C0A39FD56221A08LL, true, true)));
                  m_info.setOpEqual(277, "interfaces", (tmp14), 0x2C0A39FD56221A08LL, true);
                }
              }
            }
          }
          if (!(empty(m_info, "parent", 0x53DCFFF92D13045ELL, true))) {
            {
              {
                p_reflectionclass tmp15 = NEWOBJ(c_reflectionclass)();
                (tmp15->create(m_info.rvalAt("parent", 0x53DCFFF92D13045ELL, true, true)));
                v_p = tmp15;
              }
              {
                const Variant &tmp16((v_p->t_fetch("interfaces")));
                m_info.setOpEqual(277, "interfaces", (tmp16), 0x2C0A39FD56221A08LL, true);
              }
              {
                Variant tmp17((v_p->m_info.rvalAt("properties", 0x6C09887B749653DALL, true, true)));
                m_info.setOpEqual(277, "properties", (tmp17), 0x6C09887B749653DALL, true);
              }
              {
                Variant tmp18((v_p->m_info.rvalAt("methods", 0x4E047FA19797C9CELL, true, true)));
                m_info.setOpEqual(277, "methods", (tmp18), 0x4E047FA19797C9CELL, true);
              }
              {
                Variant tmp19((v_p->m_info.rvalAt("constants", 0x76FE868B1D07A592LL, true, true)));
                m_info.setOpEqual(277, "constants", (tmp19), 0x76FE868B1D07A592LL, true);
              }
            }
          }
        }
      }
    }
  }
  return m_info.rvalAt(v_what, -1, true);
} /* function */
/* SRC: classes/reflection.php line 593 */
bool c_reflectionclass::t_test(CVarRef v_what, CVarRef v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::test);
  Variant v_v;

  {
    const Variant &tmp1((t_fetch(v_what)));
    v_v = tmp1;
  }
  return (toBoolean(v_v) && isset(v_v, v_name));
} /* function */
/* SRC: classes/reflection.php line 598 */
String c_reflectionclass::t___tostring() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::__toString);
  return toString(null);
} /* function */
/* SRC: classes/reflection.php line 617 */
Variant c_reflectionclass::ti_export(const char* cls, CVarRef v_name, CVarRef v_ret) {
  STATIC_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::export);
  p_reflectionclass v_obj;
  String v_str;

  {
    p_reflectionclass tmp1 = NEWOBJ(c_reflectionclass)();
    (tmp1->create(v_name));
    v_obj = tmp1;
  }
  v_str = (toString(v_obj));
  if (toBoolean(v_ret)) {
    {
      return v_str;
    }
  }
  print(v_str);
  return null;
} /* function */
/* SRC: classes/reflection.php line 635 */
Variant c_reflectionclass::t_getname() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getName);
  return t_fetch("name");
} /* function */
/* SRC: classes/reflection.php line 649 */
Variant c_reflectionclass::t_isinternal() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isInternal);
  return t_fetch("internal");
} /* function */
/* SRC: classes/reflection.php line 662 */
bool c_reflectionclass::t_isuserdefined() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isUserDefined);
  return !(toBoolean(t_fetch("internal")));
} /* function */
/* SRC: classes/reflection.php line 676 */
bool c_reflectionclass::t_isinstantiable() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isInstantiable);
  return !(toBoolean(t_fetch("abstract")));
} /* function */
/* SRC: classes/reflection.php line 691 */
bool c_reflectionclass::t_hasconstant(CVarRef v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::hasConstant);
  return t_test("constants", v_name);
} /* function */
/* SRC: classes/reflection.php line 705 */
bool c_reflectionclass::t_hasmethod(CVarRef v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::hasMethod);
  return t_test("methods", x_strtolower(toString(v_name)));
} /* function */
/* SRC: classes/reflection.php line 720 */
bool c_reflectionclass::t_hasproperty(CVarRef v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::hasProperty);
  return t_test("properties", v_name);
} /* function */
/* SRC: classes/reflection.php line 735 */
Variant c_reflectionclass::t_getfilename() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getFileName);
  return t_fetch("file");
} /* function */
/* SRC: classes/reflection.php line 749 */
Variant c_reflectionclass::t_getstartline() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getStartLine);
  return t_fetch("line1");
} /* function */
/* SRC: classes/reflection.php line 762 */
Variant c_reflectionclass::t_getendline() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getEndLine);
  return t_fetch("line2");
} /* function */
/* SRC: classes/reflection.php line 776 */
Variant c_reflectionclass::t_getdoccomment() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getDocComment);
  return t_fetch("doc");
} /* function */
/* SRC: classes/reflection.php line 790 */
Variant c_reflectionclass::t_getconstructor() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getConstructor);
  Variant v_name;

  if (t_hasmethod("__construct")) {
    {
      return t_getmethod("__construct");
    }
  }
  {
    bool tmp1;
    {
      const Variant &tmp2((t_fetch("name")));
      tmp1 = (t_hasmethod((v_name = tmp2)));
    }
    if (tmp1) {
      {
        return t_getmethod(v_name);
      }
    }
  }
  return null;
} /* function */
/* SRC: classes/reflection.php line 811 */
p_reflectionmethod c_reflectionclass::t_getmethod(CVarRef v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getMethod);
  String v_lname;
  Variant v_methods;
  Variant v_class;
  p_reflectionmethod v_ret;

  {
    const String &tmp1((x_strtolower(toString(v_name))));
    v_lname = tmp1;
  }
  {
    const Variant &tmp2((t_fetch("methods")));
    v_methods = tmp2;
  }
  if (!(isset(v_methods, v_lname))) {
    {
      {
        Variant tmp3((m_info.rvalAt("name", 0x5655B4FF77E35232LL, true, true)));
        v_class = tmp3;
      }
      {
        p_reflectionexception tmp4 = NEWOBJ(c_reflectionexception)();
        throw_exception((tmp4->create(concat5("Method ", toString(v_class), "::", toString(v_name), " does not exist")), tmp4));
      }
    }
  }
  {
    p_reflectionmethod tmp5((p_reflectionmethod((NEWOBJ(c_reflectionmethod)())->create(null, null))));
    v_ret = tmp5;
  }
  {
    Variant tmp6((v_methods.rvalAt(v_lname, -1, true)));
    v_ret->m_info = tmp6;
  }
  v_ret->m_name = v_lname;
  {
    Variant tmp7((m_info.rvalAt("name", 0x5655B4FF77E35232LL, true, true)));
    v_ret->m_class = tmp7;
  }
  if ((equal(v_lname, "__construct") || (!(toBoolean(x_strcasecmp(v_lname, toString(v_ret->m_class)))) && !(t_hasmethod("__construct"))))) {
    {
      v_ret->m_info.set("constructor", (true), 0x50B7EDE53A464145LL, true);
    }
  }
  return v_ret;
} /* function */
/* SRC: classes/reflection.php line 847 */
Array c_reflectionclass::t_getmethods(CVarRef v_filter //  = 65535LL
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getMethods);
  Array v_ret;
  Variant v_methods;
  Primitive v_name = 0;
  Variant v__;
  p_reflectionmethod v_m;

  v_ret = SystemScalarArrays::ssa_[0];
  {
    const Variant &tmp1((t_fetch("methods")));
    v_methods = tmp1;
  }
  {
    LOOP_COUNTER(2);
    for (ArrayIterPtr iter4 = v_methods.begin(s_class_name); !iter4->end(); iter4->next()) {
      LOOP_COUNTER_CHECK(2);
      iter4->second(v__);
      v_name = iter4->first();
      {
        {
          const p_reflectionmethod &tmp5((t_getmethod(v_name)));
          v_m = tmp5;
        }
        if (((((((toBoolean(bitwise_and(v_filter, 256LL /* reflectionmethod::IS_PUBLIC */)) && v_m->t_ispublic()) || (toBoolean(bitwise_and(v_filter, 512LL /* reflectionmethod::IS_PROTECTED */)) && v_m->t_isprotected())) || (toBoolean(bitwise_and(v_filter, 1024LL /* reflectionmethod::IS_PRIVATE */)) && v_m->t_isprivate())) || (toBoolean(bitwise_and(v_filter, 1LL /* reflectionmethod::IS_STATIC */)) && toBoolean(v_m->t_isstatic()))) || (toBoolean(bitwise_and(v_filter, 4LL /* reflectionmethod::IS_FINAL */)) && toBoolean(v_m->t_isfinal()))) || (toBoolean(bitwise_and(v_filter, 2LL /* reflectionmethod::IS_ABSTRACT */)) && toBoolean(v_m->t_isabstract())))) {
          {
            {
              p_reflectionmethod tmp6((v_m));
              v_ret.append((tmp6));
            }
          }
        }
      }
    }
  }
  return v_ret;
} /* function */
/* SRC: classes/reflection.php line 876 */
p_reflectionproperty c_reflectionclass::t_getproperty(CVarRef v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getProperty);
  Variant v_properties;
  Variant v_class;
  p_reflectionproperty v_ret;

  {
    const Variant &tmp1((t_fetch("properties")));
    v_properties = tmp1;
  }
  if (!(isset(v_properties, v_name))) {
    {
      {
        Variant tmp2((m_info.rvalAt("name", 0x5655B4FF77E35232LL, true, true)));
        v_class = tmp2;
      }
      {
        p_reflectionexception tmp3 = NEWOBJ(c_reflectionexception)();
        throw_exception((tmp3->create(concat5("Property ", toString(v_class), "::", toString(v_name), " does not exist")), tmp3));
      }
    }
  }
  {
    p_reflectionproperty tmp4((p_reflectionproperty((NEWOBJ(c_reflectionproperty)())->create(null, null))));
    v_ret = tmp4;
  }
  {
    Variant tmp5((v_properties.rvalAt(v_name, -1, true)));
    v_ret->m_info = tmp5;
  }
  v_ret->m_name = v_name;
  {
    Variant tmp6((m_info.rvalAt("name", 0x5655B4FF77E35232LL, true, true)));
    v_ret->m_class = tmp6;
  }
  return v_ret;
} /* function */
/* SRC: classes/reflection.php line 899 */
Array c_reflectionclass::t_getproperties() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getProperties);
  Array v_ret;
  Primitive v_name = 0;
  Variant v__;

  v_ret = SystemScalarArrays::ssa_[0];
  {
    LOOP_COUNTER(1);
    Variant map2 = t_fetch("properties");
    for (ArrayIterPtr iter3 = map2.begin(s_class_name); !iter3->end(); iter3->next()) {
      LOOP_COUNTER_CHECK(1);
      iter3->second(v__);
      v_name = iter3->first();
      {
        {
          const p_reflectionproperty &tmp4((t_getproperty(v_name)));
          v_ret.append((tmp4));
        }
      }
    }
  }
  return v_ret;
} /* function */
/* SRC: classes/reflection.php line 917 */
Variant c_reflectionclass::t_getconstants() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getConstants);
  return t_fetch("constants");
} /* function */
/* SRC: classes/reflection.php line 931 */
Variant c_reflectionclass::t_getconstant(CVarRef v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getConstant);
  Variant v_constants;
  Variant v_class;

  {
    const Variant &tmp1((t_fetch("constants")));
    v_constants = tmp1;
  }
  if (!(isset(v_constants, v_name))) {
    {
      {
        Variant tmp2((m_info.rvalAt("name", 0x5655B4FF77E35232LL, true, true)));
        v_class = tmp2;
      }
      {
        p_reflectionexception tmp3 = NEWOBJ(c_reflectionexception)();
        throw_exception((tmp3->create(concat5("Class constant ", toString(v_class), "::", toString(v_name), " does not exist")), tmp3));
      }
    }
  }
  return v_constants.rvalAt(v_name, -1, true);
} /* function */
/* SRC: classes/reflection.php line 951 */
Variant c_reflectionclass::t_getinterfaces() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getInterfaces);
  Variant v_ret;
  Primitive v_name = 0;
  Variant v__;
  p_reflectionclass v_cls;

  v_ret = SystemScalarArrays::ssa_[0];
  {
    LOOP_COUNTER(1);
    Variant map2 = t_fetch("interfaces");
    for (ArrayIterPtr iter3 = map2.begin(s_class_name); !iter3->end(); iter3->next()) {
      LOOP_COUNTER_CHECK(1);
      iter3->second(v__);
      v_name = iter3->first();
      {
        {
          p_reflectionclass tmp4 = NEWOBJ(c_reflectionclass)();
          (tmp4->create(v_name));
          v_cls = tmp4;
        }
        if (toBoolean(v_cls->t_isinterface())) {
          {
            {
              const Variant &tmp5((v_cls->t_getname()));
              p_reflectionclass tmp6((v_cls));
              v_ret.set(tmp5, (tmp6));
            }
          }
        }
      }
    }
  }
  return v_ret;
} /* function */
/* SRC: classes/reflection.php line 972 */
Array c_reflectionclass::t_getinterfacenames() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getInterfaceNames);
  Array v_ret;
  Primitive v_name = 0;
  Variant v__;
  p_reflectionclass v_cls;

  v_ret = SystemScalarArrays::ssa_[0];
  {
    LOOP_COUNTER(1);
    Variant map2 = t_fetch("interfaces");
    for (ArrayIterPtr iter3 = map2.begin(s_class_name); !iter3->end(); iter3->next()) {
      LOOP_COUNTER_CHECK(1);
      iter3->second(v__);
      v_name = iter3->first();
      {
        {
          p_reflectionclass tmp4 = NEWOBJ(c_reflectionclass)();
          (tmp4->create(v_name));
          v_cls = tmp4;
        }
        if (toBoolean(v_cls->t_isinterface())) {
          {
            {
              const Variant &tmp5((v_cls->t_getname()));
              v_ret.append((tmp5));
            }
          }
        }
      }
    }
  }
  return v_ret;
} /* function */
/* SRC: classes/reflection.php line 993 */
Variant c_reflectionclass::t_isinterface() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isInterface);
  return t_fetch("interface");
} /* function */
/* SRC: classes/reflection.php line 1005 */
Variant c_reflectionclass::t_isabstract() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isAbstract);
  return t_fetch("abstract");
} /* function */
/* SRC: classes/reflection.php line 1017 */
Variant c_reflectionclass::t_isfinal() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isFinal);
  return t_fetch("final");
} /* function */
/* SRC: classes/reflection.php line 1030 */
Variant c_reflectionclass::t_getmodifiers() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getModifiers);
  return t_fetch("modifiers");
} /* function */
/* SRC: classes/reflection.php line 1044 */
bool c_reflectionclass::t_isinstance(CVarRef v_obj) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isInstance);
  return x_hphp_instanceof(toObject(v_obj), toString(m_name));
} /* function */
/* SRC: classes/reflection.php line 1057 */
Object c_reflectionclass::t_newinstance(int num_args, Array args /* = Array() */) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::newInstance);
  Array v_args;

  {
    const Array &tmp1((func_get_args(num_args, Array(),args)));
    v_args = tmp1;
  }
  return x_hphp_create_object(toString(m_name), v_args);
} /* function */
/* SRC: classes/reflection.php line 1076 */
Object c_reflectionclass::t_newinstanceargs(CVarRef v_args) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::newInstanceArgs);
  {
    String tmp1((toString(m_name)));
    const Array &tmp2((toArray(x_array_values(v_args))));
    return x_hphp_create_object(tmp1, tmp2);
  }
} /* function */
/* SRC: classes/reflection.php line 1090 */
Variant c_reflectionclass::t_getparentclass() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getParentClass);
  if (empty(t_fetch("parent"))) {
    {
      return false;
    }
  }
  {
    p_reflectionclass tmp1 = NEWOBJ(c_reflectionclass)();
    return (tmp1->create(t_fetch("parent")), tmp1);
  }
} /* function */
/* SRC: classes/reflection.php line 1108 */
Variant c_reflectionclass::t_issubclassof(Variant v_cls) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isSubclassOf);
  Primitive v_name = 0;
  Variant v__;

  if (instanceOf(v_cls, "ReflectionClass")) {
    {
      {
        Variant tmp1((v_cls. BIND_CLASS_DOT o_invoke_few_args(/* fetch */ MethodIndex(245, 1) /* fetch */ ,  "fetch", 0x5E82B850BB90B0FBLL, 1, "name")));
        v_cls = tmp1;
      }
    }
  }
  {
    LOOP_COUNTER(2);
    Variant map3 = t_fetch("interfaces");
    for (ArrayIterPtr iter4 = map3.begin(s_class_name); !iter4->end(); iter4->next()) {
      LOOP_COUNTER_CHECK(2);
      iter4->second(v__);
      v_name = iter4->first();
      {
        if (equal(x_strcasecmp(toString(v_cls), toString(v_name)), 0LL)) {
          {
            return true;
          }
        }
      }
    }
  }
  if (empty(t_fetch("parent"))) {
    {
      return false;
    }
  }
  {
    bool tmp5;
    {
      String tmp6((toString(v_cls)));
      const String &tmp7((toString(t_fetch("parent"))));
      tmp5 = (equal(x_strcasecmp(tmp6, tmp7), 0LL));
    }
    if (tmp5) {
      {
        return true;
      }
    }
  }
  {
    const Object &tmp8((toObject(t_getparentclass())));
    return wrap_variant(tmp8-> BIND_CLASS_ARROW(ObjectData) o_invoke_few_args(/* issubclassof */ MethodIndex(277, 1) /* issubclassof */ ,  "isSubclassOf", 0x373333991926C97ELL, 1, v_cls));
  }
} /* function */
/* SRC: classes/reflection.php line 1136 */
Variant c_reflectionclass::t_getstaticproperties() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getStaticProperties);
  Variant v_ret;
  Variant v_prop;

  v_ret = SystemScalarArrays::ssa_[0];
  {
    LOOP_COUNTER(1);
    Variant map2 = t_getproperties();
    for (ArrayIterPtr iter3 = map2.begin(s_class_name); !iter3->end(); iter3->next()) {
      LOOP_COUNTER_CHECK(1);
      iter3->second(v_prop);
      {
        if (toBoolean(v_prop. BIND_CLASS_DOT o_invoke_few_args(/* isstatic */ MethodIndex(302, 1) /* isstatic */ ,  "isStatic", 0x7A15DC56E8CC0B19LL, 0))) {
          {
            {
              Variant tmp4((v_prop.o_get("name", 0x5655B4FF77E35232LL, true)));
              Variant tmp5((v_prop));
              v_ret.set(tmp4, (tmp5));
            }
          }
        }
      }
    }
  }
  return v_ret;
} /* function */
/* SRC: classes/reflection.php line 1157 */
Variant c_reflectionclass::t_getstaticpropertyvalue(CVarRef v_name, CVarRef v_default //  = null_variant
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getStaticPropertyValue);
  if ((t_hasproperty(v_name) && toBoolean(t_getproperty(v_name)->t_isstatic()))) {
    {
      return x_hphp_get_static_property(toString(m_name), toString(v_name));
    }
  }
  return v_default;
} /* function */
/* SRC: classes/reflection.php line 1178 */
void c_reflectionclass::t_setstaticpropertyvalue(CVarRef v_name, CVarRef v_value) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::setStaticPropertyValue);
  x_hphp_set_static_property(toString(m_name), toString(v_name), v_value);
} /* function */
/* SRC: classes/reflection.php line 1192 */
Variant c_reflectionclass::t_getdefaultproperties() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getDefaultProperties);
  Variant v_ret;
  Variant v_prop;

  v_ret = SystemScalarArrays::ssa_[0];
  {
    LOOP_COUNTER(1);
    Variant map2 = t_getproperties();
    for (ArrayIterPtr iter3 = map2.begin(s_class_name); !iter3->end(); iter3->next()) {
      LOOP_COUNTER_CHECK(1);
      iter3->second(v_prop);
      {
        if (toBoolean(v_prop. BIND_CLASS_DOT o_invoke_few_args(/* isdefault */ MethodIndex(316, 1) /* isdefault */ ,  "isDefault", 0x384A52597AB11F15LL, 0))) {
          {
            {
              Variant tmp4((v_prop.o_get("name", 0x5655B4FF77E35232LL, true)));
              Variant tmp5((v_prop));
              v_ret.set(tmp4, (tmp5));
            }
          }
        }
      }
    }
  }
  return v_ret;
} /* function */
/* SRC: classes/reflection.php line 1211 */
Variant c_reflectionclass::t_isiterateable() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isIterateable);
  return t_issubclassof("ArrayAccess");
} /* function */
/* SRC: classes/reflection.php line 1226 */
bool c_reflectionclass::t_implementsinterface(Variant v_cls) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::implementsInterface);
  Primitive v_name = 0;
  Variant v__;

  if (instanceOf(v_cls, "ReflectionClass")) {
    {
      {
        Variant tmp1((v_cls. BIND_CLASS_DOT o_invoke_few_args(/* fetch */ MethodIndex(245, 1) /* fetch */ ,  "fetch", 0x5E82B850BB90B0FBLL, 1, "name")));
        v_cls = tmp1;
      }
    }
  }
  {
    LOOP_COUNTER(2);
    Variant map3 = t_fetch("interfaces");
    for (ArrayIterPtr iter4 = map3.begin(s_class_name); !iter4->end(); iter4->next()) {
      LOOP_COUNTER_CHECK(2);
      iter4->second(v__);
      v_name = iter4->first();
      {
        if (equal(x_strcasecmp(toString(v_cls), toString(v_name)), 0LL)) {
          {
            return true;
          }
        }
      }
    }
  }
  return false;
} /* function */
/* SRC: classes/reflection.php line 1248 */
Variant c_reflectionclass::t_getextension() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getExtension);
  return t_fetch("extension");
} /* function */
/* SRC: classes/reflection.php line 1262 */
Variant c_reflectionclass::t_getextensionname() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getExtensionName);
  return wrap_variant(t_fetch("extension"). BIND_CLASS_DOT o_invoke_few_args(/* getname */ MethodIndex(139, 1) /* getname */ ,  "getName", 0x23F51CDECC198965LL, 0));
} /* function */
/* SRC: classes/reflection.php line 1803 */
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_reflectionextension
Variant c_reflectionextension::os_getInit(const char *s, int64 hash) {
  DECLARE_SYSTEM_GLOBALS(g);
  if (hash < 0) hash = hash_string(s);
  switch (hash & 3) {
    case 2:
      HASH_RETURN(0x5655B4FF77E35232LL,
                  null, "name");
      break;
    case 3:
      HASH_RETURN(0x0F2EF58F157D479FLL,
                  null, "info");
      break;
    default:
      break;
  }
  return c_ObjectData::os_getInit(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_reflectionextension
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_reflectionextension
Variant c_reflectionextension::os_get(const char *s, int64 hash) {
  return c_ObjectData::os_get(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_reflectionextension
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_reflectionextension
Variant &c_reflectionextension::os_lval(const char *s, int64 hash) {
  return c_ObjectData::os_lval(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_reflectionextension
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_reflectionextension
void c_reflectionextension::o_getArray(Array &props) const {
  if (isInitialized(m_name)) props.set(String("\000ReflectionExtension\000name", 25, AttachLiteral), m_name.isReferenced() ? ref(m_name) : m_name, 0x75D4843488CF4F87LL, true);
  if (isInitialized(m_info)) props.set(String("\000ReflectionExtension\000info", 25, AttachLiteral), m_info.isReferenced() ? ref(m_info) : m_info, 0x26E8E772446ED36ELL, true);
  c_ObjectData::o_getArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_reflectionextension
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionextension
void c_reflectionextension::o_setArray(CArrRef props) {
  props->load(String("\000ReflectionExtension\000name", 25, AttachLiteral), m_name);
  props->load(String("\000ReflectionExtension\000info", 25, AttachLiteral), m_info);
  c_ObjectData::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionextension
#ifndef OMIT_JUMP_TABLE_CLASS_get_reflectionextension
Variant c_reflectionextension::o_get(CStrRef prop, int64 phash, bool error, const char *context, int64 hash) {
  const char *s = context;
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 1:
      HASH_GUARD(0x0B61E0BFCFA06573LL, ReflectionExtension) { return o_getPrivate(prop, phash, error); }
      break;
    default:
      break;
  }
  return o_getPublic(prop, phash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_reflectionextension
#ifndef OMIT_JUMP_TABLE_CLASS_get_PUBLIC_reflectionextension
Variant c_reflectionextension::o_getPublic(CStrRef s, int64 hash, bool error) {
  return c_ObjectData::o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PUBLIC_reflectionextension
#ifndef OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionextension
Variant c_reflectionextension::o_getPrivate(CStrRef s, int64 hash, bool error) {
  if (hash < 0) hash = s->hash();
  switch (hash & 3) {
    case 2:
      HASH_RETURN_STRING(0x5655B4FF77E35232LL, m_name,
                         "name", 4);
      break;
    case 3:
      HASH_RETURN_STRING(0x0F2EF58F157D479FLL, m_info,
                         "info", 4);
      break;
    default:
      break;
  }
  return o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionextension
#ifndef OMIT_JUMP_TABLE_CLASS_exists_reflectionextension
bool c_reflectionextension::o_exists(CStrRef prop, int64 phash, const char *context, int64 hash) const {
  const char *s = context;
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 1:
      HASH_GUARD(0x0B61E0BFCFA06573LL, ReflectionExtension) { return o_existsPrivate(prop, phash); }
      break;
    default:
      break;
  }
  return o_existsPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_reflectionextension
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionextension
bool c_reflectionextension::o_existsPublic(CStrRef s, int64 hash) const {
  return c_ObjectData::o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionextension
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionextension
bool c_reflectionextension::o_existsPrivate(CStrRef s, int64 hash) const {
  if (hash < 0) hash = s->hash();
  switch (hash & 3) {
    case 2:
      HASH_EXISTS_STRING(0x5655B4FF77E35232LL, "name", 4);
      break;
    case 3:
      HASH_EXISTS_STRING(0x0F2EF58F157D479FLL, "info", 4);
      break;
    default:
      break;
  }
  return o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionextension
#ifndef OMIT_JUMP_TABLE_CLASS_set_reflectionextension
Variant c_reflectionextension::o_set(CStrRef prop, int64 phash, CVarRef v, bool forInit, const char *context, int64 hash) {
  const char *s = context;
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 1:
      HASH_GUARD(0x0B61E0BFCFA06573LL, ReflectionExtension) { return o_setPrivate(prop, phash, v, forInit); }
      break;
    default:
      break;
  }
  return o_setPublic(prop, phash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_reflectionextension
#ifndef OMIT_JUMP_TABLE_CLASS_set_PUBLIC_reflectionextension
Variant c_reflectionextension::o_setPublic(CStrRef s, int64 hash, CVarRef v, bool forInit) {
  return c_ObjectData::o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PUBLIC_reflectionextension
#ifndef OMIT_JUMP_TABLE_CLASS_set_PRIVATE_reflectionextension
Variant c_reflectionextension::o_setPrivate(CStrRef s, int64 hash, CVarRef v, bool forInit) {
  if (hash < 0) hash = s->hash();
  switch (hash & 3) {
    case 2:
      HASH_SET_STRING(0x5655B4FF77E35232LL, m_name,
                      "name", 4);
      break;
    case 3:
      HASH_SET_STRING(0x0F2EF58F157D479FLL, m_info,
                      "info", 4);
      break;
    default:
      break;
  }
  return o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PRIVATE_reflectionextension
#ifndef OMIT_JUMP_TABLE_CLASS_lval_reflectionextension
Variant& c_reflectionextension::o_lval(CStrRef prop, int64 phash, const char *context, int64 hash) {
  const char *s = context;
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 1:
      HASH_GUARD(0x0B61E0BFCFA06573LL, ReflectionExtension) { return o_lvalPrivate(prop, phash); }
      break;
    default:
      break;
  }
  return o_lvalPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_reflectionextension
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_reflectionextension
Variant& c_reflectionextension::o_lvalPublic(CStrRef s, int64 hash) {
  return c_ObjectData::o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_reflectionextension
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_reflectionextension
Variant& c_reflectionextension::o_lvalPrivate(CStrRef s, int64 hash) {
  if (hash < 0) hash = s->hash();
  switch (hash & 3) {
    case 2:
      HASH_RETURN_STRING(0x5655B4FF77E35232LL, m_name,
                         "name", 4);
      break;
    case 3:
      HASH_RETURN_STRING(0x0F2EF58F157D479FLL, m_info,
                         "info", 4);
      break;
    default:
      break;
  }
  return o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_reflectionextension
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_reflectionextension
Variant c_reflectionextension::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_reflectionextension
IMPLEMENT_CLASS(reflectionextension)
c_reflectionextension *c_reflectionextension::create(Variant v_name) {
  CountableHelper h(this);
  init();
  t___construct(v_name);
  return this;
}
ObjectData *c_reflectionextension::dynCreate(CArrRef params, bool construct /* = true */) {
  init();
  if (construct) {
    CountableHelper h(this);
    int count __attribute__((__unused__)) = params.size();
    if (count != 1) throw_wrong_arguments("ReflectionExtension::__construct", count, 1, 1, 2);
    {
      ArrayData *ad(params.get());
      ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
      CVarRef arg0((ad->getValue(pos)));
      (t___construct(arg0));
    }
  }
  return this;
}
void c_reflectionextension::dynConstruct(CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count != 1) throw_wrong_arguments("ReflectionExtension::__construct", count, 1, 1, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    (t___construct(arg0));
  }
}
void c_reflectionextension::dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  int count __attribute__((__unused__)) = params.size();
  if (count != 1) throw_wrong_arguments("ReflectionExtension::__construct", count, 1, 1, 1);
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  (t___construct(a0), null);
}
ObjectData *c_reflectionextension::cloneImpl() {
  c_reflectionextension *obj = NEW(c_reflectionextension)();
  cloneSet(obj);
  return obj;
}
void c_reflectionextension::cloneSet(c_reflectionextension *clone) {
  clone->m_name = m_name.isReferenced() ? ref(m_name) : m_name;
  clone->m_info = m_info.isReferenced() ? ref(m_info) : m_info;
  ObjectData::cloneSet(clone);
}
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionextension
Variant c_reflectionextension::o_invoke(MethodIndex methodIndex, const char *s, CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionExtension::__construct", count, 1, 1, 2);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t___construct(arg0), null);
        }
      }
      break;
    case 0x120:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getFunctions", 0, 1);
        return (t_getfunctions());
      }
      break;
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionExtension::export", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(o_getClassName(), arg0, arg1));
        }
      }
      break;
    case 0x98:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::info", 0, 1);
        return (t_info());
      }
      break;
    case 0x121:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getINIEntries", 0, 1);
        return (t_getinientries());
      }
      break;
    case 0x112:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getConstants", 0, 1);
        return (t_getconstants());
      }
      break;
    case 0x122:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getClassNames", 0, 1);
        return (t_getclassnames());
      }
      break;
    case 0xd5:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getVersion", 0, 1);
        return (t_getversion());
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 0x123:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getClasses", 0, 1);
        return (t_getclasses());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 31) {
    case 2:
      HASH_GUARD(0x0113D73FC859EDC2LL, getclasses) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getClasses", 0, 1);
        return (t_getclasses());
      }
      break;
    case 5:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 8:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        if (count != 2) return throw_wrong_arguments("ReflectionExtension::export", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(o_getClassName(), arg0, arg1));
        }
      }
      break;
    case 15:
      HASH_GUARD(0x652BDFA6E22F17AFLL, getfunctions) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getFunctions", 0, 1);
        return (t_getfunctions());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 20:
      HASH_GUARD(0x5CE2786E11341594LL, getclassnames) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getClassNames", 0, 1);
        return (t_getclassnames());
      }
      break;
    case 21:
      HASH_GUARD(0x306B5F4D1D03D335LL, getinientries) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getINIEntries", 0, 1);
        return (t_getinientries());
      }
      HASH_GUARD(0x1CC71CB013143955LL, getconstants) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getConstants", 0, 1);
        return (t_getconstants());
      }
      break;
    case 22:
      HASH_GUARD(0x7521E8833BE3D316LL, getversion) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getVersion", 0, 1);
        return (t_getversion());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count != 1) return throw_wrong_arguments("ReflectionExtension::__construct", count, 1, 1, 2);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t___construct(arg0), null);
        }
      }
      HASH_GUARD(0x0F2EF58F157D479FLL, info) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::info", 0, 1);
        return (t_info());
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::o_invoke(methodIndex, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionextension
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionextension
Variant c_reflectionextension::o_invoke_few_args(MethodIndex methodIndex, const char *s, int64 hash, int count, CVarRef a0, CVarRef a1, CVarRef a2, CVarRef a3, CVarRef a4, CVarRef a5) {
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionExtension::__construct", count, 1, 1, 2);
        return (t___construct(a0), null);
      }
      break;
    case 0x120:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getFunctions", 0, 1);
        return (t_getfunctions());
      }
      break;
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionExtension::export", count, 2, 2, 1);
        return (ti_export(o_getClassName(), a0, a1));
      }
      break;
    case 0x98:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::info", 0, 1);
        return (t_info());
      }
      break;
    case 0x121:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getINIEntries", 0, 1);
        return (t_getinientries());
      }
      break;
    case 0x112:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getConstants", 0, 1);
        return (t_getconstants());
      }
      break;
    case 0x122:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getClassNames", 0, 1);
        return (t_getclassnames());
      }
      break;
    case 0xd5:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getVersion", 0, 1);
        return (t_getversion());
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 0x123:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getClasses", 0, 1);
        return (t_getclasses());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 31) {
    case 2:
      HASH_GUARD(0x0113D73FC859EDC2LL, getclasses) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getClasses", 0, 1);
        return (t_getclasses());
      }
      break;
    case 5:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 8:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        if (count != 2) return throw_wrong_arguments("ReflectionExtension::export", count, 2, 2, 1);
        return (ti_export(o_getClassName(), a0, a1));
      }
      break;
    case 15:
      HASH_GUARD(0x652BDFA6E22F17AFLL, getfunctions) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getFunctions", 0, 1);
        return (t_getfunctions());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 20:
      HASH_GUARD(0x5CE2786E11341594LL, getclassnames) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getClassNames", 0, 1);
        return (t_getclassnames());
      }
      break;
    case 21:
      HASH_GUARD(0x306B5F4D1D03D335LL, getinientries) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getINIEntries", 0, 1);
        return (t_getinientries());
      }
      HASH_GUARD(0x1CC71CB013143955LL, getconstants) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getConstants", 0, 1);
        return (t_getconstants());
      }
      break;
    case 22:
      HASH_GUARD(0x7521E8833BE3D316LL, getversion) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getVersion", 0, 1);
        return (t_getversion());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count != 1) return throw_wrong_arguments("ReflectionExtension::__construct", count, 1, 1, 2);
        return (t___construct(a0), null);
      }
      HASH_GUARD(0x0F2EF58F157D479FLL, info) {
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::info", 0, 1);
        return (t_info());
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::o_invoke_few_args(methodIndex, s, hash, count, a0, a1, a2, a3, a4, a5);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionextension
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_reflectionextension
Variant c_reflectionextension::os_invoke(const char *c, MethodIndex methodIndex, const char *s,  CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionExtension::export", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(c, arg0, arg1));
        }
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 0:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        if (count != 2) return throw_wrong_arguments("ReflectionExtension::export", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(c, arg0, arg1));
        }
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::os_invoke(c, methodIndex, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_reflectionextension
Variant c_reflectionextension::o_invoke_from_eval(const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
#ifdef FMCGEN
  MethodIndex methodIndex = methodIndexExists(s);
  switch (methodIndex.m_callIndex) {
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::__toString", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___tostring());
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionExtension::__construct", count, 1, 1, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___construct(a0), null);
      }
      break;
    case 0x120:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getFunctions", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getfunctions());
      }
      break;
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionExtension::export", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(o_getClassName(), a0, a1));
      }
      break;
    case 0x98:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::info", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_info());
      }
      break;
    case 0x121:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getINIEntries", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getinientries());
      }
      break;
    case 0x112:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getConstants", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getconstants());
      }
      break;
    case 0x122:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getClassNames", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getclassnames());
      }
      break;
    case 0xd5:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getVersion", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getversion());
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getname());
      }
      break;
    case 0x123:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getClasses", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getclasses());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 31) {
    case 2:
      HASH_GUARD(0x0113D73FC859EDC2LL, getclasses) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getClasses", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getclasses());
      }
      break;
    case 5:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getname());
      }
      break;
    case 8:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionExtension::export", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(o_getClassName(), a0, a1));
      }
      break;
    case 15:
      HASH_GUARD(0x652BDFA6E22F17AFLL, getfunctions) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getFunctions", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getfunctions());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::__toString", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___tostring());
      }
      break;
    case 20:
      HASH_GUARD(0x5CE2786E11341594LL, getclassnames) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getClassNames", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getclassnames());
      }
      break;
    case 21:
      HASH_GUARD(0x306B5F4D1D03D335LL, getinientries) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getINIEntries", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getinientries());
      }
      HASH_GUARD(0x1CC71CB013143955LL, getconstants) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getConstants", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getconstants());
      }
      break;
    case 22:
      HASH_GUARD(0x7521E8833BE3D316LL, getversion) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::getVersion", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getversion());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionExtension::__construct", count, 1, 1, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___construct(a0), null);
      }
      HASH_GUARD(0x0F2EF58F157D479FLL, info) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionExtension::info", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_info());
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::o_invoke_from_eval(s, env, caller, hash, fatal);
}
Variant c_reflectionextension::os_invoke_from_eval(const char *c, const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
#ifdef FMCGEN
  MethodIndex methodIndex = methodIndexExists(s);
  switch (methodIndex.m_callIndex) {
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionExtension::export", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(c, a0, a1));
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 0:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionExtension::export", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(c, a0, a1));
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::os_invoke_from_eval(c, s, env, caller, hash, fatal);
}
struct ObjectStaticCallbacks cw_reflectionextension = {
  c_reflectionextension::os_getInit,
  c_reflectionextension::os_get,
  c_reflectionextension::os_lval,
  c_reflectionextension::os_invoke,
  c_reflectionextension::os_constant,
};
void c_reflectionextension::init() {
  m_name = null;
  m_info = null;
}
/* SRC: classes/reflection.php line 1807 */
void c_reflectionextension::t___construct(Variant v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::__construct);
  bool oldInCtor = gasInCtor(true);
  {
    const Array &tmp1((x_hphp_get_extension_info(toString(v_name))));
    m_info = tmp1;
  }
  gasInCtor(oldInCtor);
} /* function */
/* SRC: classes/reflection.php line 1811 */
String c_reflectionextension::t___tostring() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::__toString);
  return toString(null);
} /* function */
/* SRC: classes/reflection.php line 1830 */
Variant c_reflectionextension::ti_export(const char* cls, CVarRef v_name, CVarRef v_ret) {
  STATIC_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::export);
  p_reflectionextension v_obj;
  String v_str;

  {
    p_reflectionextension tmp1 = NEWOBJ(c_reflectionextension)();
    (tmp1->create(v_name));
    v_obj = tmp1;
  }
  v_str = (toString(v_obj));
  if (toBoolean(v_ret)) {
    {
      return v_str;
    }
  }
  print(v_str);
  return null;
} /* function */
/* SRC: classes/reflection.php line 1848 */
Variant c_reflectionextension::t_getname() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::getName);
  return m_info.rvalAt("name", 0x5655B4FF77E35232LL, true, true);
} /* function */
/* SRC: classes/reflection.php line 1861 */
Variant c_reflectionextension::t_getversion() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::getVersion);
  return m_info.rvalAt("version", 0x5AE41239FF63D86ALL, true, true);
} /* function */
/* SRC: classes/reflection.php line 1877 */
Variant c_reflectionextension::t_getfunctions() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::getFunctions);
  return m_info.rvalAt("functions", 0x7740FE6BE7015A1FLL, true, true);
} /* function */
/* SRC: classes/reflection.php line 1890 */
Variant c_reflectionextension::t_getconstants() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::getConstants);
  return m_info.rvalAt("constants", 0x76FE868B1D07A592LL, true, true);
} /* function */
/* SRC: classes/reflection.php line 1904 */
Variant c_reflectionextension::t_getinientries() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::getINIEntries);
  return m_info.rvalAt("ini", 0x1B3ED6203A6B8527LL, true, true);
} /* function */
/* SRC: classes/reflection.php line 1919 */
Variant c_reflectionextension::t_getclasses() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::getClasses);
  return m_info.rvalAt("classes", 0x3EF49BB8DAE480D5LL, true, true);
} /* function */
/* SRC: classes/reflection.php line 1934 */
Array c_reflectionextension::t_getclassnames() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::getClassNames);
  Array v_ret;
  Variant v_cls;

  v_ret = SystemScalarArrays::ssa_[0];
  {
    LOOP_COUNTER(1);
    Variant map2 = m_info.rvalAt("classes", 0x3EF49BB8DAE480D5LL, true, true);
    for (ArrayIterPtr iter3 = map2.begin(s_class_name); !iter3->end(); iter3->next()) {
      LOOP_COUNTER_CHECK(1);
      iter3->second(v_cls);
      {
        {
          Variant tmp4((v_cls. BIND_CLASS_DOT o_invoke_few_args(/* getname */ MethodIndex(139, 1) /* getname */ ,  "getName", 0x23F51CDECC198965LL, 0)));
          v_ret.append((tmp4));
        }
      }
    }
  }
  return v_ret;
} /* function */
/* SRC: classes/reflection.php line 1950 */
Variant c_reflectionextension::t_info() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::info);
  return m_info.rvalAt("info", 0x0F2EF58F157D479FLL, true, true);
} /* function */
/* SRC: classes/reflection.php line 1556 */
const int64 q_reflectionmethod_IS_STATIC = 1LL;
const int64 q_reflectionmethod_IS_PUBLIC = 256LL;
const int64 q_reflectionmethod_IS_PROTECTED = 512LL;
const int64 q_reflectionmethod_IS_PRIVATE = 1024LL;
const int64 q_reflectionmethod_IS_ABSTRACT = 2LL;
const int64 q_reflectionmethod_IS_FINAL = 4LL;
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_reflectionmethod
Variant c_reflectionmethod::os_getInit(const char *s, int64 hash) {
  DECLARE_SYSTEM_GLOBALS(g);
  if (hash < 0) hash = hash_string(s);
  switch (hash & 3) {
    case 0:
      HASH_RETURN(0x2E3A246D1F74C210LL,
                  null, "class");
      break;
    case 2:
      HASH_RETURN(0x5655B4FF77E35232LL,
                  null, "name");
      break;
    default:
      break;
  }
  return c_reflectionfunctionabstract::os_getInit(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_reflectionmethod
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_reflectionmethod
Variant c_reflectionmethod::os_get(const char *s, int64 hash) {
  return c_reflectionfunctionabstract::os_get(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_reflectionmethod
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_reflectionmethod
Variant &c_reflectionmethod::os_lval(const char *s, int64 hash) {
  return c_reflectionfunctionabstract::os_lval(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_reflectionmethod
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_reflectionmethod
void c_reflectionmethod::o_getArray(Array &props) const {
  if (isInitialized(m_name)) props.set("name", m_name.isReferenced() ? ref(m_name) : m_name, 0x5655B4FF77E35232LL, true);
  if (isInitialized(m_class)) props.set("class", m_class.isReferenced() ? ref(m_class) : m_class, 0x2E3A246D1F74C210LL, true);
  c_reflectionfunctionabstract::o_getArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_reflectionmethod
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionmethod
void c_reflectionmethod::o_setArray(CArrRef props) {
  c_reflectionfunctionabstract::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionmethod
#ifndef OMIT_JUMP_TABLE_CLASS_get_reflectionmethod
Variant c_reflectionmethod::o_get(CStrRef prop, int64 phash, bool error, const char *context, int64 hash) {
  return o_getPublic(prop, phash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_reflectionmethod
#ifndef OMIT_JUMP_TABLE_CLASS_get_PUBLIC_reflectionmethod
Variant c_reflectionmethod::o_getPublic(CStrRef s, int64 hash, bool error) {
  if (hash < 0) hash = s->hash();
  switch (hash & 3) {
    case 0:
      HASH_RETURN_STRING(0x2E3A246D1F74C210LL, m_class,
                         "class", 5);
      break;
    case 2:
      HASH_RETURN_STRING(0x5655B4FF77E35232LL, m_name,
                         "name", 4);
      break;
    default:
      break;
  }
  return c_reflectionfunctionabstract::o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PUBLIC_reflectionmethod
#ifndef OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionmethod
Variant c_reflectionmethod::o_getPrivate(CStrRef s, int64 hash, bool error) {
  return o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionmethod
#ifndef OMIT_JUMP_TABLE_CLASS_exists_reflectionmethod
bool c_reflectionmethod::o_exists(CStrRef prop, int64 phash, const char *context, int64 hash) const {
  return o_existsPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_reflectionmethod
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionmethod
bool c_reflectionmethod::o_existsPublic(CStrRef s, int64 hash) const {
  if (hash < 0) hash = s->hash();
  switch (hash & 3) {
    case 0:
      HASH_EXISTS_STRING(0x2E3A246D1F74C210LL, "class", 5);
      break;
    case 2:
      HASH_EXISTS_STRING(0x5655B4FF77E35232LL, "name", 4);
      break;
    default:
      break;
  }
  return c_reflectionfunctionabstract::o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionmethod
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionmethod
bool c_reflectionmethod::o_existsPrivate(CStrRef s, int64 hash) const {
  return o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionmethod
#ifndef OMIT_JUMP_TABLE_CLASS_set_reflectionmethod
Variant c_reflectionmethod::o_set(CStrRef prop, int64 phash, CVarRef v, bool forInit, const char *context, int64 hash) {
  return o_setPublic(prop, phash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_reflectionmethod
#ifndef OMIT_JUMP_TABLE_CLASS_set_PUBLIC_reflectionmethod
Variant c_reflectionmethod::o_setPublic(CStrRef s, int64 hash, CVarRef v, bool forInit) {
  if (hash < 0) hash = s->hash();
  switch (hash & 3) {
    case 0:
      HASH_SET_STRING(0x2E3A246D1F74C210LL, m_class,
                      "class", 5);
      break;
    case 2:
      HASH_SET_STRING(0x5655B4FF77E35232LL, m_name,
                      "name", 4);
      break;
    default:
      break;
  }
  return c_reflectionfunctionabstract::o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PUBLIC_reflectionmethod
#ifndef OMIT_JUMP_TABLE_CLASS_set_PRIVATE_reflectionmethod
Variant c_reflectionmethod::o_setPrivate(CStrRef s, int64 hash, CVarRef v, bool forInit) {
  return o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PRIVATE_reflectionmethod
#ifndef OMIT_JUMP_TABLE_CLASS_lval_reflectionmethod
Variant& c_reflectionmethod::o_lval(CStrRef prop, int64 phash, const char *context, int64 hash) {
  return o_lvalPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_reflectionmethod
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_reflectionmethod
Variant& c_reflectionmethod::o_lvalPublic(CStrRef s, int64 hash) {
  if (hash < 0) hash = s->hash();
  switch (hash & 3) {
    case 0:
      HASH_RETURN_STRING(0x2E3A246D1F74C210LL, m_class,
                         "class", 5);
      break;
    case 2:
      HASH_RETURN_STRING(0x5655B4FF77E35232LL, m_name,
                         "name", 4);
      break;
    default:
      break;
  }
  return c_reflectionfunctionabstract::o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_reflectionmethod
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_reflectionmethod
Variant& c_reflectionmethod::o_lvalPrivate(CStrRef s, int64 hash) {
  return o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_reflectionmethod
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_reflectionmethod
Variant c_reflectionmethod::os_constant(const char *s) {
  int64 hash = hash_string(s);
  switch (hash & 15) {
    case 0:
      HASH_RETURN(0x7DA78A433EE05120LL, q_reflectionmethod_IS_STATIC, "IS_STATIC");
      break;
    case 1:
      HASH_RETURN(0x163BE642CB04C741LL, q_reflectionmethod_IS_PRIVATE, "IS_PRIVATE");
      break;
    case 3:
      HASH_RETURN(0x3784532769C1EF03LL, q_reflectionmethod_IS_PUBLIC, "IS_PUBLIC");
      HASH_RETURN(0x6572B785E302A373LL, q_reflectionmethod_IS_ABSTRACT, "IS_ABSTRACT");
      break;
    case 6:
      HASH_RETURN(0x47AAFAC74A58AD66LL, q_reflectionmethod_IS_FINAL, "IS_FINAL");
      break;
    case 14:
      HASH_RETURN(0x10A614A8C272DC9ELL, q_reflectionmethod_IS_PROTECTED, "IS_PROTECTED");
      break;
    default:
      break;
  }
  return c_reflectionfunctionabstract::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_reflectionmethod
IMPLEMENT_CLASS(reflectionmethod)
c_reflectionmethod *c_reflectionmethod::create(Variant v_cls, Variant v_name) {
  CountableHelper h(this);
  init();
  t___construct(v_cls, v_name);
  return this;
}
ObjectData *c_reflectionmethod::dynCreate(CArrRef params, bool construct /* = true */) {
  init();
  if (construct) {
    CountableHelper h(this);
    int count __attribute__((__unused__)) = params.size();
    if (count != 2) throw_wrong_arguments("ReflectionMethod::__construct", count, 2, 2, 2);
    {
      ArrayData *ad(params.get());
      ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
      CVarRef arg0((ad->getValue(pos)));
      CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
      (t___construct(arg0, arg1));
    }
  }
  return this;
}
void c_reflectionmethod::dynConstruct(CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count != 2) throw_wrong_arguments("ReflectionMethod::__construct", count, 2, 2, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
    (t___construct(arg0, arg1));
  }
}
void c_reflectionmethod::dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  int count __attribute__((__unused__)) = params.size();
  if (count != 2) throw_wrong_arguments("ReflectionMethod::__construct", count, 2, 2, 1);
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  (t___construct(a0, a1), null);
}
ObjectData *c_reflectionmethod::cloneImpl() {
  c_reflectionmethod *obj = NEW(c_reflectionmethod)();
  cloneSet(obj);
  return obj;
}
void c_reflectionmethod::cloneSet(c_reflectionmethod *clone) {
  clone->m_name = m_name.isReferenced() ? ref(m_name) : m_name;
  clone->m_class = m_class.isReferenced() ? ref(m_class) : m_class;
  c_reflectionfunctionabstract::cloneSet(clone);
}
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionmethod
Variant c_reflectionmethod::o_invoke(MethodIndex methodIndex, const char *s, CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0x124:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfRequiredParameters", 0, 1);
        return (t_getnumberofrequiredparameters());
      }
      break;
    case 0x12c:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isPrivate", 0, 1);
        return (t_isprivate());
      }
      break;
    case 0xfe:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isUserDefined", 0, 1);
        return (t_isuserdefined());
      }
      break;
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 0x125:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfParameters", 0, 1);
        return (t_getnumberofparameters());
      }
      break;
    case 0x12d:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isProtected", 0, 1);
        return (t_isprotected());
      }
      break;
    case 0x12e:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isStatic", 0, 1);
        return (t_isstatic());
      }
      break;
    case 0x12f:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::getDeclaringClass", 0, 1);
        return (t_getdeclaringclass());
      }
      break;
    case 0x130:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isConstructor", 0, 1);
        return (t_isconstructor());
      }
      break;
    case 0x103:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getEndLine", 0, 1);
        return (t_getendline());
      }
      break;
    case 0x126:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStaticVariables", 0, 1);
        return (t_getstaticvariables());
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionMethod::__construct", count, 2, 2, 2);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (t___construct(arg0, arg1), null);
        }
      }
      break;
    case 0x127:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getParameters", 0, 1);
        return (t_getparameters());
      }
      break;
    case 0x106:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isFinal", 0, 1);
        return (t_isfinal());
      }
      break;
    case 0x128:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionMethod::invokeArgs", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (t_invokeargs(arg0, arg1));
        }
      }
      break;
    case 0x129:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::returnsReference", 0, 1);
        return (t_returnsreference());
      }
      break;
    case 0x107:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::getModifiers", 0, 1);
        return (t_getmodifiers());
      }
      break;
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 3) return throw_wrong_arguments("ReflectionMethod::export", count, 3, 3, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          CVarRef arg2((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(o_getClassName(), arg0, arg1, arg2));
        }
      }
      break;
    case 0x12a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count < 1) return throw_missing_arguments("ReflectionMethod::invoke", count+1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          if (count <= 1) return (t_invoke(count, arg0));
          return (t_invoke(count,arg0, params.slice(1, count - 1, false)));
        }
      }
      break;
    case 0x131:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isPublic", 0, 1);
        return (t_ispublic());
      }
      break;
    case 0xbd:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getFileName", 0, 1);
        return (t_getfilename());
      }
      break;
    case 0x132:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isDestructor", 0, 1);
        return (t_isdestructor());
      }
      break;
    case 0x110:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStartLine", 0, 1);
        return (t_getstartline());
      }
      break;
    case 0x113:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    case 0x12b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::getClosure", 0, 1);
        return (t_getclosure());
      }
      break;
    case 0x11d:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isAbstract", 0, 1);
        return (t_isabstract());
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 0x11e:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isInternal", 0, 1);
        return (t_isinternal());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 63) {
    case 2:
      HASH_GUARD(0x3FCE192CF6199942LL, invoke) {
        if (count < 1) return throw_missing_arguments("ReflectionMethod::invoke", count+1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          if (count <= 1) return (t_invoke(count, arg0));
          return (t_invoke(count,arg0, params.slice(1, count - 1, false)));
        }
      }
      break;
    case 4:
      HASH_GUARD(0x3235AF57F23103C4LL, invokeargs) {
        if (count != 2) return throw_wrong_arguments("ReflectionMethod::invokeArgs", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (t_invokeargs(arg0, arg1));
        }
      }
      HASH_GUARD(0x39C1BB731CB1CB04LL, getstartline) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStartLine", 0, 1);
        return (t_getstartline());
      }
      break;
    case 7:
      HASH_GUARD(0x51A20EA0E327F607LL, isdestructor) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isDestructor", 0, 1);
        return (t_isdestructor());
      }
      break;
    case 13:
      HASH_GUARD(0x1930CE336D39474DLL, getfilename) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getFileName", 0, 1);
        return (t_getfilename());
      }
      break;
    case 15:
      HASH_GUARD(0x48FDF6C5835C64CFLL, isinternal) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isInternal", 0, 1);
        return (t_isinternal());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 20:
      HASH_GUARD(0x24253EBA491D6014LL, getmodifiers) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::getModifiers", 0, 1);
        return (t_getmodifiers());
      }
      break;
    case 25:
      HASH_GUARD(0x7A15DC56E8CC0B19LL, isstatic) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isStatic", 0, 1);
        return (t_isstatic());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count != 2) return throw_wrong_arguments("ReflectionMethod::__construct", count, 2, 2, 2);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (t___construct(arg0, arg1), null);
        }
      }
      break;
    case 32:
      HASH_GUARD(0x57D8DC34C9A03560LL, getnumberofparameters) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfParameters", 0, 1);
        return (t_getnumberofparameters());
      }
      break;
    case 33:
      HASH_GUARD(0x4D637DECDBFA6221LL, getnumberofrequiredparameters) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfRequiredParameters", 0, 1);
        return (t_getnumberofrequiredparameters());
      }
      break;
    case 34:
      HASH_GUARD(0x33A6C2CFBDB05EE2LL, getclosure) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::getClosure", 0, 1);
        return (t_getclosure());
      }
      break;
    case 35:
      HASH_GUARD(0x6ED51288559D6063LL, getdeclaringclass) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::getDeclaringClass", 0, 1);
        return (t_getdeclaringclass());
      }
      break;
    case 36:
      HASH_GUARD(0x6A6B8BECAE7D4164LL, isuserdefined) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isUserDefined", 0, 1);
        return (t_isuserdefined());
      }
      break;
    case 37:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 40:
      HASH_GUARD(0x37FFB8F44A3329A8LL, getstaticvariables) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStaticVariables", 0, 1);
        return (t_getstaticvariables());
      }
      HASH_GUARD(0x1A3AB3B0276D2668LL, returnsreference) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::returnsReference", 0, 1);
        return (t_returnsreference());
      }
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        if (count != 3) return throw_wrong_arguments("ReflectionMethod::export", count, 3, 3, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          CVarRef arg2((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(o_getClassName(), arg0, arg1, arg2));
        }
      }
      break;
    case 42:
      HASH_GUARD(0x2D7209A590477CEALL, isprotected) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isProtected", 0, 1);
        return (t_isprotected());
      }
      break;
    case 45:
      HASH_GUARD(0x3E62225132C2A32DLL, getparameters) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getParameters", 0, 1);
        return (t_getparameters());
      }
      break;
    case 46:
      HASH_GUARD(0x06FB6A7DC3D795AELL, isfinal) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isFinal", 0, 1);
        return (t_isfinal());
      }
      break;
    case 47:
      HASH_GUARD(0x37AAE0845E2F636FLL, isprivate) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isPrivate", 0, 1);
        return (t_isprivate());
      }
      break;
    case 48:
      HASH_GUARD(0x6C19E85007BC4570LL, getendline) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getEndLine", 0, 1);
        return (t_getendline());
      }
      break;
    case 55:
      HASH_GUARD(0x7460D945DA32FDB7LL, isabstract) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isAbstract", 0, 1);
        return (t_isabstract());
      }
      break;
    case 56:
      HASH_GUARD(0x7C4F424FDA56ADF8LL, getdoccomment) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    case 58:
      HASH_GUARD(0x654B5F965C5CAC7ALL, isconstructor) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isConstructor", 0, 1);
        return (t_isconstructor());
      }
      break;
    case 60:
      HASH_GUARD(0x2820F10358723B7CLL, ispublic) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isPublic", 0, 1);
        return (t_ispublic());
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::o_invoke(methodIndex, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionmethod
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionmethod
Variant c_reflectionmethod::o_invoke_few_args(MethodIndex methodIndex, const char *s, int64 hash, int count, CVarRef a0, CVarRef a1, CVarRef a2, CVarRef a3, CVarRef a4, CVarRef a5) {
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0x124:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfRequiredParameters", 0, 1);
        return (t_getnumberofrequiredparameters());
      }
      break;
    case 0x12c:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isPrivate", 0, 1);
        return (t_isprivate());
      }
      break;
    case 0xfe:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isUserDefined", 0, 1);
        return (t_isuserdefined());
      }
      break;
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 0x125:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfParameters", 0, 1);
        return (t_getnumberofparameters());
      }
      break;
    case 0x12d:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isProtected", 0, 1);
        return (t_isprotected());
      }
      break;
    case 0x12e:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isStatic", 0, 1);
        return (t_isstatic());
      }
      break;
    case 0x12f:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::getDeclaringClass", 0, 1);
        return (t_getdeclaringclass());
      }
      break;
    case 0x130:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isConstructor", 0, 1);
        return (t_isconstructor());
      }
      break;
    case 0x103:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getEndLine", 0, 1);
        return (t_getendline());
      }
      break;
    case 0x126:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStaticVariables", 0, 1);
        return (t_getstaticvariables());
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionMethod::__construct", count, 2, 2, 2);
        return (t___construct(a0, a1), null);
      }
      break;
    case 0x127:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getParameters", 0, 1);
        return (t_getparameters());
      }
      break;
    case 0x106:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isFinal", 0, 1);
        return (t_isfinal());
      }
      break;
    case 0x128:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionMethod::invokeArgs", count, 2, 2, 1);
        return (t_invokeargs(a0, a1));
      }
      break;
    case 0x129:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::returnsReference", 0, 1);
        return (t_returnsreference());
      }
      break;
    case 0x107:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::getModifiers", 0, 1);
        return (t_getmodifiers());
      }
      break;
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 3) return throw_wrong_arguments("ReflectionMethod::export", count, 3, 3, 1);
        return (ti_export(o_getClassName(), a0, a1, a2));
      }
      break;
    case 0x12a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count < 1) return throw_missing_arguments("ReflectionMethod::invoke", count+1, 1);
        if (count <= 1) return (t_invoke(count, a0));
        Array params;
        if (count >= 2) params.append(a1);
        if (count >= 3) params.append(a2);
        if (count >= 4) params.append(a3);
        if (count >= 5) params.append(a4);
        if (count >= 6) params.append(a5);
        return (t_invoke(count,a0, params));
      }
      break;
    case 0x131:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isPublic", 0, 1);
        return (t_ispublic());
      }
      break;
    case 0xbd:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getFileName", 0, 1);
        return (t_getfilename());
      }
      break;
    case 0x132:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isDestructor", 0, 1);
        return (t_isdestructor());
      }
      break;
    case 0x110:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStartLine", 0, 1);
        return (t_getstartline());
      }
      break;
    case 0x113:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    case 0x12b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::getClosure", 0, 1);
        return (t_getclosure());
      }
      break;
    case 0x11d:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isAbstract", 0, 1);
        return (t_isabstract());
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 0x11e:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isInternal", 0, 1);
        return (t_isinternal());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 63) {
    case 2:
      HASH_GUARD(0x3FCE192CF6199942LL, invoke) {
        if (count < 1) return throw_missing_arguments("ReflectionMethod::invoke", count+1, 1);
        if (count <= 1) return (t_invoke(count, a0));
        Array params;
        if (count >= 2) params.append(a1);
        if (count >= 3) params.append(a2);
        if (count >= 4) params.append(a3);
        if (count >= 5) params.append(a4);
        if (count >= 6) params.append(a5);
        return (t_invoke(count,a0, params));
      }
      break;
    case 4:
      HASH_GUARD(0x3235AF57F23103C4LL, invokeargs) {
        if (count != 2) return throw_wrong_arguments("ReflectionMethod::invokeArgs", count, 2, 2, 1);
        return (t_invokeargs(a0, a1));
      }
      HASH_GUARD(0x39C1BB731CB1CB04LL, getstartline) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStartLine", 0, 1);
        return (t_getstartline());
      }
      break;
    case 7:
      HASH_GUARD(0x51A20EA0E327F607LL, isdestructor) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isDestructor", 0, 1);
        return (t_isdestructor());
      }
      break;
    case 13:
      HASH_GUARD(0x1930CE336D39474DLL, getfilename) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getFileName", 0, 1);
        return (t_getfilename());
      }
      break;
    case 15:
      HASH_GUARD(0x48FDF6C5835C64CFLL, isinternal) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isInternal", 0, 1);
        return (t_isinternal());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 20:
      HASH_GUARD(0x24253EBA491D6014LL, getmodifiers) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::getModifiers", 0, 1);
        return (t_getmodifiers());
      }
      break;
    case 25:
      HASH_GUARD(0x7A15DC56E8CC0B19LL, isstatic) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isStatic", 0, 1);
        return (t_isstatic());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count != 2) return throw_wrong_arguments("ReflectionMethod::__construct", count, 2, 2, 2);
        return (t___construct(a0, a1), null);
      }
      break;
    case 32:
      HASH_GUARD(0x57D8DC34C9A03560LL, getnumberofparameters) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfParameters", 0, 1);
        return (t_getnumberofparameters());
      }
      break;
    case 33:
      HASH_GUARD(0x4D637DECDBFA6221LL, getnumberofrequiredparameters) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfRequiredParameters", 0, 1);
        return (t_getnumberofrequiredparameters());
      }
      break;
    case 34:
      HASH_GUARD(0x33A6C2CFBDB05EE2LL, getclosure) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::getClosure", 0, 1);
        return (t_getclosure());
      }
      break;
    case 35:
      HASH_GUARD(0x6ED51288559D6063LL, getdeclaringclass) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::getDeclaringClass", 0, 1);
        return (t_getdeclaringclass());
      }
      break;
    case 36:
      HASH_GUARD(0x6A6B8BECAE7D4164LL, isuserdefined) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isUserDefined", 0, 1);
        return (t_isuserdefined());
      }
      break;
    case 37:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 40:
      HASH_GUARD(0x37FFB8F44A3329A8LL, getstaticvariables) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStaticVariables", 0, 1);
        return (t_getstaticvariables());
      }
      HASH_GUARD(0x1A3AB3B0276D2668LL, returnsreference) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::returnsReference", 0, 1);
        return (t_returnsreference());
      }
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        if (count != 3) return throw_wrong_arguments("ReflectionMethod::export", count, 3, 3, 1);
        return (ti_export(o_getClassName(), a0, a1, a2));
      }
      break;
    case 42:
      HASH_GUARD(0x2D7209A590477CEALL, isprotected) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isProtected", 0, 1);
        return (t_isprotected());
      }
      break;
    case 45:
      HASH_GUARD(0x3E62225132C2A32DLL, getparameters) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getParameters", 0, 1);
        return (t_getparameters());
      }
      break;
    case 46:
      HASH_GUARD(0x06FB6A7DC3D795AELL, isfinal) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isFinal", 0, 1);
        return (t_isfinal());
      }
      break;
    case 47:
      HASH_GUARD(0x37AAE0845E2F636FLL, isprivate) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isPrivate", 0, 1);
        return (t_isprivate());
      }
      break;
    case 48:
      HASH_GUARD(0x6C19E85007BC4570LL, getendline) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getEndLine", 0, 1);
        return (t_getendline());
      }
      break;
    case 55:
      HASH_GUARD(0x7460D945DA32FDB7LL, isabstract) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isAbstract", 0, 1);
        return (t_isabstract());
      }
      break;
    case 56:
      HASH_GUARD(0x7C4F424FDA56ADF8LL, getdoccomment) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    case 58:
      HASH_GUARD(0x654B5F965C5CAC7ALL, isconstructor) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isConstructor", 0, 1);
        return (t_isconstructor());
      }
      break;
    case 60:
      HASH_GUARD(0x2820F10358723B7CLL, ispublic) {
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isPublic", 0, 1);
        return (t_ispublic());
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::o_invoke_few_args(methodIndex, s, hash, count, a0, a1, a2, a3, a4, a5);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionmethod
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_reflectionmethod
Variant c_reflectionmethod::os_invoke(const char *c, MethodIndex methodIndex, const char *s,  CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 3) return throw_wrong_arguments("ReflectionMethod::export", count, 3, 3, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          CVarRef arg2((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(c, arg0, arg1, arg2));
        }
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 0:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        if (count != 3) return throw_wrong_arguments("ReflectionMethod::export", count, 3, 3, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          CVarRef arg2((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(c, arg0, arg1, arg2));
        }
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::os_invoke(c, methodIndex, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_reflectionmethod
Variant c_reflectionmethod::o_invoke_from_eval(const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
#ifdef FMCGEN
  MethodIndex methodIndex = methodIndexExists(s);
  switch (methodIndex.m_callIndex) {
    case 0x124:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfRequiredParameters", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getnumberofrequiredparameters());
      }
      break;
    case 0x12c:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isPrivate", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isprivate());
      }
      break;
    case 0xfe:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isUserDefined", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isuserdefined());
      }
      break;
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::__toString", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___tostring());
      }
      break;
    case 0x125:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfParameters", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getnumberofparameters());
      }
      break;
    case 0x12d:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isProtected", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isprotected());
      }
      break;
    case 0x12e:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isStatic", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isstatic());
      }
      break;
    case 0x12f:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::getDeclaringClass", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdeclaringclass());
      }
      break;
    case 0x130:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isConstructor", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isconstructor());
      }
      break;
    case 0x103:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getEndLine", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getendline());
      }
      break;
    case 0x126:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStaticVariables", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getstaticvariables());
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionMethod::__construct", count, 2, 2, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___construct(a0, a1), null);
      }
      break;
    case 0x127:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getParameters", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getparameters());
      }
      break;
    case 0x106:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isFinal", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isfinal());
      }
      break;
    case 0x128:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionMethod::invokeArgs", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_invokeargs(a0, a1));
      }
      break;
    case 0x129:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::returnsReference", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_returnsreference());
      }
      break;
    case 0x107:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::getModifiers", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getmodifiers());
      }
      break;
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        Variant a2;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 3) return throw_wrong_arguments("ReflectionMethod::export", count, 3, 3, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a2 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(o_getClassName(), a0, a1, a2));
      }
      break;
    case 0x12a:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count < 1) return throw_missing_arguments("ReflectionMethod::invoke", count+1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        Array vargs;
        for (; it != params.end(); ++it) {
          vargs.append((*it)->eval(env));
        }
        if (count <= 1) return (t_invoke(count, a0));
        return (t_invoke(count, a0,vargs));
      }
      break;
    case 0x131:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isPublic", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_ispublic());
      }
      break;
    case 0xbd:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getFileName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getfilename());
      }
      break;
    case 0x132:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isDestructor", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isdestructor());
      }
      break;
    case 0x110:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStartLine", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getstartline());
      }
      break;
    case 0x113:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getDocComment", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdoccomment());
      }
      break;
    case 0x12b:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::getClosure", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getclosure());
      }
      break;
    case 0x11d:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isAbstract", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isabstract());
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getname());
      }
      break;
    case 0x11e:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isInternal", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isinternal());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 63) {
    case 2:
      HASH_GUARD(0x3FCE192CF6199942LL, invoke) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count < 1) return throw_missing_arguments("ReflectionMethod::invoke", count+1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        Array vargs;
        for (; it != params.end(); ++it) {
          vargs.append((*it)->eval(env));
        }
        if (count <= 1) return (t_invoke(count, a0));
        return (t_invoke(count, a0,vargs));
      }
      break;
    case 4:
      HASH_GUARD(0x3235AF57F23103C4LL, invokeargs) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionMethod::invokeArgs", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_invokeargs(a0, a1));
      }
      HASH_GUARD(0x39C1BB731CB1CB04LL, getstartline) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStartLine", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getstartline());
      }
      break;
    case 7:
      HASH_GUARD(0x51A20EA0E327F607LL, isdestructor) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isDestructor", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isdestructor());
      }
      break;
    case 13:
      HASH_GUARD(0x1930CE336D39474DLL, getfilename) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getFileName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getfilename());
      }
      break;
    case 15:
      HASH_GUARD(0x48FDF6C5835C64CFLL, isinternal) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isInternal", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isinternal());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::__toString", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___tostring());
      }
      break;
    case 20:
      HASH_GUARD(0x24253EBA491D6014LL, getmodifiers) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::getModifiers", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getmodifiers());
      }
      break;
    case 25:
      HASH_GUARD(0x7A15DC56E8CC0B19LL, isstatic) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isStatic", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isstatic());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionMethod::__construct", count, 2, 2, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___construct(a0, a1), null);
      }
      break;
    case 32:
      HASH_GUARD(0x57D8DC34C9A03560LL, getnumberofparameters) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfParameters", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getnumberofparameters());
      }
      break;
    case 33:
      HASH_GUARD(0x4D637DECDBFA6221LL, getnumberofrequiredparameters) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfRequiredParameters", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getnumberofrequiredparameters());
      }
      break;
    case 34:
      HASH_GUARD(0x33A6C2CFBDB05EE2LL, getclosure) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::getClosure", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getclosure());
      }
      break;
    case 35:
      HASH_GUARD(0x6ED51288559D6063LL, getdeclaringclass) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::getDeclaringClass", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdeclaringclass());
      }
      break;
    case 36:
      HASH_GUARD(0x6A6B8BECAE7D4164LL, isuserdefined) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isUserDefined", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isuserdefined());
      }
      break;
    case 37:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getname());
      }
      break;
    case 40:
      HASH_GUARD(0x37FFB8F44A3329A8LL, getstaticvariables) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStaticVariables", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getstaticvariables());
      }
      HASH_GUARD(0x1A3AB3B0276D2668LL, returnsreference) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::returnsReference", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_returnsreference());
      }
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        Variant a0;
        Variant a1;
        Variant a2;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 3) return throw_wrong_arguments("ReflectionMethod::export", count, 3, 3, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a2 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(o_getClassName(), a0, a1, a2));
      }
      break;
    case 42:
      HASH_GUARD(0x2D7209A590477CEALL, isprotected) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isProtected", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isprotected());
      }
      break;
    case 45:
      HASH_GUARD(0x3E62225132C2A32DLL, getparameters) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getParameters", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getparameters());
      }
      break;
    case 46:
      HASH_GUARD(0x06FB6A7DC3D795AELL, isfinal) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isFinal", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isfinal());
      }
      break;
    case 47:
      HASH_GUARD(0x37AAE0845E2F636FLL, isprivate) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isPrivate", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isprivate());
      }
      break;
    case 48:
      HASH_GUARD(0x6C19E85007BC4570LL, getendline) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getEndLine", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getendline());
      }
      break;
    case 55:
      HASH_GUARD(0x7460D945DA32FDB7LL, isabstract) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isAbstract", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isabstract());
      }
      break;
    case 56:
      HASH_GUARD(0x7C4F424FDA56ADF8LL, getdoccomment) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getDocComment", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdoccomment());
      }
      break;
    case 58:
      HASH_GUARD(0x654B5F965C5CAC7ALL, isconstructor) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isConstructor", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isconstructor());
      }
      break;
    case 60:
      HASH_GUARD(0x2820F10358723B7CLL, ispublic) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionMethod::isPublic", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_ispublic());
      }
      break;
    default:
      break;
  }
#endif
  return c_reflectionfunctionabstract::o_invoke_from_eval(s, env, caller, hash, fatal);
}
Variant c_reflectionmethod::os_invoke_from_eval(const char *c, const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
#ifdef FMCGEN
  MethodIndex methodIndex = methodIndexExists(s);
  switch (methodIndex.m_callIndex) {
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        Variant a2;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 3) return throw_wrong_arguments("ReflectionMethod::export", count, 3, 3, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a2 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(c, a0, a1, a2));
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 0:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        Variant a0;
        Variant a1;
        Variant a2;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 3) return throw_wrong_arguments("ReflectionMethod::export", count, 3, 3, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a2 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(c, a0, a1, a2));
      }
      break;
    default:
      break;
  }
#endif
  return c_reflectionfunctionabstract::os_invoke_from_eval(c, s, env, caller, hash, fatal);
}
struct ObjectStaticCallbacks cw_reflectionmethod = {
  c_reflectionmethod::os_getInit,
  c_reflectionmethod::os_get,
  c_reflectionmethod::os_lval,
  c_reflectionmethod::os_invoke,
  c_reflectionmethod::os_constant,
};
void c_reflectionmethod::init() {
  c_reflectionfunctionabstract::init();
  m_name = null;
  m_class = null;
}
/* SRC: classes/reflection.php line 1568 */
void c_reflectionmethod::t___construct(Variant v_cls, Variant v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::__construct);
  bool oldInCtor = gasInCtor(true);
  Variant v_method;

  if ((toBoolean(v_cls) && toBoolean(v_name))) {
    {
      if (!(x_is_object(v_cls))) {
        {
          p_reflectionclass tmp1 = NEWOBJ(c_reflectionclass)();
          (tmp1->create(v_cls));
          v_cls = tmp1;
        }
      }
      {
        Variant tmp2((v_cls. BIND_CLASS_DOT o_invoke_few_args(/* getmethod */ MethodIndex(267, 1) /* getmethod */ ,  "getMethod", 0x0D81ECE253A3B5B6LL, 1, v_name)));
        v_method = tmp2;
      }
      if (toBoolean(v_method)) {
        {
          {
            Variant tmp3((v_method.o_get("info", 0x0F2EF58F157D479FLL, true)));
            m_info = tmp3;
          }
          {
            Variant tmp4((v_method.o_get("name", 0x5655B4FF77E35232LL, true)));
            m_name = tmp4;
          }
          {
            Variant tmp5((v_method.o_get("class", 0x2E3A246D1F74C210LL, true)));
            m_class = tmp5;
          }
        }
      }
    }
  }
  gasInCtor(oldInCtor);
} /* function */
/* SRC: classes/reflection.php line 1580 */
String c_reflectionmethod::t___tostring() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::__toString);
  return toString(null);
} /* function */
/* SRC: classes/reflection.php line 1601 */
Variant c_reflectionmethod::ti_export(const char* cls, Variant v_cls, CVarRef v_name, CVarRef v_ret) {
  STATIC_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::export);
  Variant v_obj;
  String v_str;

  if (!(x_is_object(v_cls))) {
    {
      p_reflectionclass tmp1 = NEWOBJ(c_reflectionclass)();
      (tmp1->create(v_cls));
      v_cls = tmp1;
    }
  }
  {
    const Variant &tmp2((v_cls.o_invoke_few_args(/* getmethod */ MethodIndex(267, 1) /* getmethod */ ,  "getMethod", 0x0D81ECE253A3B5B6LL, 1, v_name)));
    v_obj = tmp2;
  }
  v_str = (toString(v_obj));
  if (toBoolean(v_ret)) {
    {
      return v_str;
    }
  }
  print(v_str);
  return null;
} /* function */
/* SRC: classes/reflection.php line 1622 */
Variant c_reflectionmethod::t_invoke(int num_args, CVarRef v_obj, Array args /* = Array() */) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::invoke);
  Variant v_args;

  {
    const Array &tmp1((func_get_args(num_args, Array(ArrayInit(1, true).set(0, v_obj).create()),args)));
    v_args = tmp1;
  }
  x_array_shift(ref(v_args));
  {
    Variant tmp2((v_obj));
    String tmp3((toString(m_info.rvalAt("class", 0x2E3A246D1F74C210LL, true, true))));
    String tmp4((toString(m_info.rvalAt("name", 0x5655B4FF77E35232LL, true, true))));
    return x_hphp_invoke_method(tmp2, tmp3, tmp4, toArray(v_args));
  }
} /* function */
/* SRC: classes/reflection.php line 1643 */
Variant c_reflectionmethod::t_invokeargs(CVarRef v_obj, CVarRef v_args) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::invokeArgs);
  {
    Variant tmp1((v_obj));
    String tmp2((toString(m_info.rvalAt("class", 0x2E3A246D1F74C210LL, true, true))));
    String tmp3((toString(m_info.rvalAt("name", 0x5655B4FF77E35232LL, true, true))));
    const Array &tmp4((toArray(x_array_values(v_args))));
    return x_hphp_invoke_method(tmp1, tmp2, tmp3, tmp4);
  }
} /* function */
/* SRC: classes/reflection.php line 1656 */
Variant c_reflectionmethod::t_isfinal() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isFinal);
  return m_info.rvalAt("final", 0x5001EEC0D0BCC379LL, true, true);
} /* function */
/* SRC: classes/reflection.php line 1669 */
Variant c_reflectionmethod::t_isabstract() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isAbstract);
  return m_info.rvalAt("abstract", 0x1B108112FE2864C8LL, true, true);
} /* function */
/* SRC: classes/reflection.php line 1681 */
bool c_reflectionmethod::t_ispublic() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isPublic);
  return equal(m_info.rvalAt("access", 0x0192C89B84AEC2A9LL, true, true), "public");
} /* function */
/* SRC: classes/reflection.php line 1694 */
bool c_reflectionmethod::t_isprivate() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isPrivate);
  return equal(m_info.rvalAt("access", 0x0192C89B84AEC2A9LL, true, true), "private");
} /* function */
/* SRC: classes/reflection.php line 1707 */
bool c_reflectionmethod::t_isprotected() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isProtected);
  return equal(m_info.rvalAt("access", 0x0192C89B84AEC2A9LL, true, true), "protected");
} /* function */
/* SRC: classes/reflection.php line 1719 */
Variant c_reflectionmethod::t_isstatic() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isStatic);
  return m_info.rvalAt("static", 0x5DBDF95E796D376ELL, true, true);
} /* function */
/* SRC: classes/reflection.php line 1732 */
bool c_reflectionmethod::t_isconstructor() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isConstructor);
  return isset(m_info, "constructor", 0x50B7EDE53A464145LL, true);
} /* function */
/* SRC: classes/reflection.php line 1745 */
bool c_reflectionmethod::t_isdestructor() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isDestructor);
  return equal(t_getname(), "__destruct");
} /* function */
/* SRC: classes/reflection.php line 1767 */
Variant c_reflectionmethod::t_getmodifiers() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::getModifiers);
  return m_info.rvalAt("modifiers", 0x3FC2B34E9291EB83LL, true, true);
} /* function */
/* SRC: classes/reflection.php line 1771 */
Variant c_reflectionmethod::t_getclosure() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::getClosure);
  return m_info.rvalAt("closure", 0x3280F0C292E92A6CLL, true, true);
} /* function */
/* SRC: classes/reflection.php line 1785 */
Variant c_reflectionmethod::t_getdeclaringclass() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::getDeclaringClass);
  if (empty(m_info, "class", 0x2E3A246D1F74C210LL, true)) {
    {
      return null;
    }
  }
  {
    p_reflectionclass tmp1 = NEWOBJ(c_reflectionclass)();
    return (tmp1->create(m_info.rvalAt("class", 0x2E3A246D1F74C210LL, true, true)), tmp1);
  }
} /* function */
/* SRC: classes/reflection.php line 1315 */
const int64 q_reflectionproperty_IS_STATIC = 1LL;
const int64 q_reflectionproperty_IS_PUBLIC = 256LL;
const int64 q_reflectionproperty_IS_PROTECTED = 512LL;
const int64 q_reflectionproperty_IS_PRIVATE = 1024LL;
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_reflectionproperty
Variant c_reflectionproperty::os_getInit(const char *s, int64 hash) {
  DECLARE_SYSTEM_GLOBALS(g);
  if (hash < 0) hash = hash_string(s);
  switch (hash & 7) {
    case 0:
      HASH_RETURN(0x2E3A246D1F74C210LL,
                  null, "class");
      break;
    case 2:
      HASH_RETURN(0x5655B4FF77E35232LL,
                  null, "name");
      break;
    case 7:
      HASH_RETURN(0x0F2EF58F157D479FLL,
                  null, "info");
      break;
    default:
      break;
  }
  return c_ObjectData::os_getInit(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_reflectionproperty
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_reflectionproperty
Variant c_reflectionproperty::os_get(const char *s, int64 hash) {
  return c_ObjectData::os_get(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_reflectionproperty
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_reflectionproperty
Variant &c_reflectionproperty::os_lval(const char *s, int64 hash) {
  return c_ObjectData::os_lval(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_reflectionproperty
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_reflectionproperty
void c_reflectionproperty::o_getArray(Array &props) const {
  if (isInitialized(m_info)) props.set("info", m_info.isReferenced() ? ref(m_info) : m_info, 0x0F2EF58F157D479FLL, true);
  if (isInitialized(m_name)) props.set("name", m_name.isReferenced() ? ref(m_name) : m_name, 0x5655B4FF77E35232LL, true);
  if (isInitialized(m_class)) props.set("class", m_class.isReferenced() ? ref(m_class) : m_class, 0x2E3A246D1F74C210LL, true);
  c_ObjectData::o_getArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_reflectionproperty
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionproperty
void c_reflectionproperty::o_setArray(CArrRef props) {
  c_ObjectData::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionproperty
#ifndef OMIT_JUMP_TABLE_CLASS_get_reflectionproperty
Variant c_reflectionproperty::o_get(CStrRef prop, int64 phash, bool error, const char *context, int64 hash) {
  return o_getPublic(prop, phash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_reflectionproperty
#ifndef OMIT_JUMP_TABLE_CLASS_get_PUBLIC_reflectionproperty
Variant c_reflectionproperty::o_getPublic(CStrRef s, int64 hash, bool error) {
  if (hash < 0) hash = s->hash();
  switch (hash & 7) {
    case 0:
      HASH_RETURN_STRING(0x2E3A246D1F74C210LL, m_class,
                         "class", 5);
      break;
    case 2:
      HASH_RETURN_STRING(0x5655B4FF77E35232LL, m_name,
                         "name", 4);
      break;
    case 7:
      HASH_RETURN_STRING(0x0F2EF58F157D479FLL, m_info,
                         "info", 4);
      break;
    default:
      break;
  }
  return c_ObjectData::o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PUBLIC_reflectionproperty
#ifndef OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionproperty
Variant c_reflectionproperty::o_getPrivate(CStrRef s, int64 hash, bool error) {
  return o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionproperty
#ifndef OMIT_JUMP_TABLE_CLASS_exists_reflectionproperty
bool c_reflectionproperty::o_exists(CStrRef prop, int64 phash, const char *context, int64 hash) const {
  return o_existsPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_reflectionproperty
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionproperty
bool c_reflectionproperty::o_existsPublic(CStrRef s, int64 hash) const {
  if (hash < 0) hash = s->hash();
  switch (hash & 7) {
    case 0:
      HASH_EXISTS_STRING(0x2E3A246D1F74C210LL, "class", 5);
      break;
    case 2:
      HASH_EXISTS_STRING(0x5655B4FF77E35232LL, "name", 4);
      break;
    case 7:
      HASH_EXISTS_STRING(0x0F2EF58F157D479FLL, "info", 4);
      break;
    default:
      break;
  }
  return c_ObjectData::o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionproperty
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionproperty
bool c_reflectionproperty::o_existsPrivate(CStrRef s, int64 hash) const {
  return o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionproperty
#ifndef OMIT_JUMP_TABLE_CLASS_set_reflectionproperty
Variant c_reflectionproperty::o_set(CStrRef prop, int64 phash, CVarRef v, bool forInit, const char *context, int64 hash) {
  return o_setPublic(prop, phash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_reflectionproperty
#ifndef OMIT_JUMP_TABLE_CLASS_set_PUBLIC_reflectionproperty
Variant c_reflectionproperty::o_setPublic(CStrRef s, int64 hash, CVarRef v, bool forInit) {
  if (hash < 0) hash = s->hash();
  switch (hash & 7) {
    case 0:
      HASH_SET_STRING(0x2E3A246D1F74C210LL, m_class,
                      "class", 5);
      break;
    case 2:
      HASH_SET_STRING(0x5655B4FF77E35232LL, m_name,
                      "name", 4);
      break;
    case 7:
      HASH_SET_STRING(0x0F2EF58F157D479FLL, m_info,
                      "info", 4);
      break;
    default:
      break;
  }
  return c_ObjectData::o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PUBLIC_reflectionproperty
#ifndef OMIT_JUMP_TABLE_CLASS_set_PRIVATE_reflectionproperty
Variant c_reflectionproperty::o_setPrivate(CStrRef s, int64 hash, CVarRef v, bool forInit) {
  return o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PRIVATE_reflectionproperty
#ifndef OMIT_JUMP_TABLE_CLASS_lval_reflectionproperty
Variant& c_reflectionproperty::o_lval(CStrRef prop, int64 phash, const char *context, int64 hash) {
  return o_lvalPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_reflectionproperty
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_reflectionproperty
Variant& c_reflectionproperty::o_lvalPublic(CStrRef s, int64 hash) {
  if (hash < 0) hash = s->hash();
  switch (hash & 7) {
    case 0:
      HASH_RETURN_STRING(0x2E3A246D1F74C210LL, m_class,
                         "class", 5);
      break;
    case 2:
      HASH_RETURN_STRING(0x5655B4FF77E35232LL, m_name,
                         "name", 4);
      break;
    case 7:
      HASH_RETURN_STRING(0x0F2EF58F157D479FLL, m_info,
                         "info", 4);
      break;
    default:
      break;
  }
  return c_ObjectData::o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_reflectionproperty
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_reflectionproperty
Variant& c_reflectionproperty::o_lvalPrivate(CStrRef s, int64 hash) {
  return o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_reflectionproperty
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_reflectionproperty
Variant c_reflectionproperty::os_constant(const char *s) {
  int64 hash = hash_string(s);
  switch (hash & 7) {
    case 0:
      HASH_RETURN(0x7DA78A433EE05120LL, q_reflectionproperty_IS_STATIC, "IS_STATIC");
      break;
    case 1:
      HASH_RETURN(0x163BE642CB04C741LL, q_reflectionproperty_IS_PRIVATE, "IS_PRIVATE");
      break;
    case 3:
      HASH_RETURN(0x3784532769C1EF03LL, q_reflectionproperty_IS_PUBLIC, "IS_PUBLIC");
      break;
    case 6:
      HASH_RETURN(0x10A614A8C272DC9ELL, q_reflectionproperty_IS_PROTECTED, "IS_PROTECTED");
      break;
    default:
      break;
  }
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_reflectionproperty
IMPLEMENT_CLASS(reflectionproperty)
c_reflectionproperty *c_reflectionproperty::create(Variant v_cls, Variant v_name) {
  CountableHelper h(this);
  init();
  t___construct(v_cls, v_name);
  return this;
}
ObjectData *c_reflectionproperty::dynCreate(CArrRef params, bool construct /* = true */) {
  init();
  if (construct) {
    CountableHelper h(this);
    int count __attribute__((__unused__)) = params.size();
    if (count != 2) throw_wrong_arguments("ReflectionProperty::__construct", count, 2, 2, 2);
    {
      ArrayData *ad(params.get());
      ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
      CVarRef arg0((ad->getValue(pos)));
      CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
      (t___construct(arg0, arg1));
    }
  }
  return this;
}
void c_reflectionproperty::dynConstruct(CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count != 2) throw_wrong_arguments("ReflectionProperty::__construct", count, 2, 2, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
    (t___construct(arg0, arg1));
  }
}
void c_reflectionproperty::dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  int count __attribute__((__unused__)) = params.size();
  if (count != 2) throw_wrong_arguments("ReflectionProperty::__construct", count, 2, 2, 1);
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  (t___construct(a0, a1), null);
}
ObjectData *c_reflectionproperty::cloneImpl() {
  c_reflectionproperty *obj = NEW(c_reflectionproperty)();
  cloneSet(obj);
  return obj;
}
void c_reflectionproperty::cloneSet(c_reflectionproperty *clone) {
  clone->m_info = m_info.isReferenced() ? ref(m_info) : m_info;
  clone->m_name = m_name.isReferenced() ? ref(m_name) : m_name;
  clone->m_class = m_class.isReferenced() ? ref(m_class) : m_class;
  ObjectData::cloneSet(clone);
}
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionproperty
Variant c_reflectionproperty::o_invoke(MethodIndex methodIndex, const char *s, CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0x12c:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isPrivate", 0, 1);
        return (t_isprivate());
      }
      break;
    case 0x13b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 1) return throw_toomany_arguments("ReflectionProperty::getValue", 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          if (count <= 0) return (t_getvalue());
          CVarRef arg0((ad->getValue(pos)));
          return (t_getvalue(arg0));
        }
      }
      break;
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 0x12d:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isProtected", 0, 1);
        return (t_isprotected());
      }
      break;
    case 0x12e:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isStatic", 0, 1);
        return (t_isstatic());
      }
      break;
    case 0x12f:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getDeclaringClass", 0, 1);
        return (t_getdeclaringclass());
      }
      break;
    case 0x13c:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isDefault", 0, 1);
        return (t_isdefault());
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionProperty::__construct", count, 2, 2, 2);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (t___construct(arg0, arg1), null);
        }
      }
      break;
    case 0x107:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getModifiers", 0, 1);
        return (t_getmodifiers());
      }
      break;
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 3) return throw_wrong_arguments("ReflectionProperty::export", count, 3, 3, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          CVarRef arg2((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(o_getClassName(), arg0, arg1, arg2));
        }
      }
      break;
    case 0x131:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isPublic", 0, 1);
        return (t_ispublic());
      }
      break;
    case 0x13d:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::setAccessible", 0, 1);
        return (t_setaccessible(), null);
      }
      break;
    case 0x113:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    case 0x13e:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionProperty::setValue", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (t_setvalue(arg0, arg1));
        }
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getName", 0, 1);
        return (t_getname());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 31) {
    case 2:
      HASH_GUARD(0x791E9751F5B8C5A2LL, setaccessible) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::setAccessible", 0, 1);
        return (t_setaccessible(), null);
      }
      break;
    case 3:
      HASH_GUARD(0x56879BCEB40997E3LL, getvalue) {
        if (count > 1) return throw_toomany_arguments("ReflectionProperty::getValue", 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          if (count <= 0) return (t_getvalue());
          CVarRef arg0((ad->getValue(pos)));
          return (t_getvalue(arg0));
        }
      }
      HASH_GUARD(0x6ED51288559D6063LL, getdeclaringclass) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getDeclaringClass", 0, 1);
        return (t_getdeclaringclass());
      }
      break;
    case 5:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 8:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        if (count != 3) return throw_wrong_arguments("ReflectionProperty::export", count, 3, 3, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          CVarRef arg2((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(o_getClassName(), arg0, arg1, arg2));
        }
      }
      break;
    case 10:
      HASH_GUARD(0x2D7209A590477CEALL, isprotected) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isProtected", 0, 1);
        return (t_isprotected());
      }
      break;
    case 15:
      HASH_GUARD(0x37AAE0845E2F636FLL, isprivate) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isPrivate", 0, 1);
        return (t_isprivate());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 20:
      HASH_GUARD(0x24253EBA491D6014LL, getmodifiers) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getModifiers", 0, 1);
        return (t_getmodifiers());
      }
      break;
    case 21:
      HASH_GUARD(0x384A52597AB11F15LL, isdefault) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isDefault", 0, 1);
        return (t_isdefault());
      }
      HASH_GUARD(0x36FBED35008C8DB5LL, setvalue) {
        if (count != 2) return throw_wrong_arguments("ReflectionProperty::setValue", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (t_setvalue(arg0, arg1));
        }
      }
      break;
    case 24:
      HASH_GUARD(0x7C4F424FDA56ADF8LL, getdoccomment) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    case 25:
      HASH_GUARD(0x7A15DC56E8CC0B19LL, isstatic) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isStatic", 0, 1);
        return (t_isstatic());
      }
      break;
    case 28:
      HASH_GUARD(0x2820F10358723B7CLL, ispublic) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isPublic", 0, 1);
        return (t_ispublic());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count != 2) return throw_wrong_arguments("ReflectionProperty::__construct", count, 2, 2, 2);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (t___construct(arg0, arg1), null);
        }
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::o_invoke(methodIndex, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionproperty
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionproperty
Variant c_reflectionproperty::o_invoke_few_args(MethodIndex methodIndex, const char *s, int64 hash, int count, CVarRef a0, CVarRef a1, CVarRef a2, CVarRef a3, CVarRef a4, CVarRef a5) {
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0x12c:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isPrivate", 0, 1);
        return (t_isprivate());
      }
      break;
    case 0x13b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 1) return throw_toomany_arguments("ReflectionProperty::getValue", 1, 1);
        if (count <= 0) return (t_getvalue());
        return (t_getvalue(a0));
      }
      break;
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 0x12d:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isProtected", 0, 1);
        return (t_isprotected());
      }
      break;
    case 0x12e:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isStatic", 0, 1);
        return (t_isstatic());
      }
      break;
    case 0x12f:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getDeclaringClass", 0, 1);
        return (t_getdeclaringclass());
      }
      break;
    case 0x13c:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isDefault", 0, 1);
        return (t_isdefault());
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionProperty::__construct", count, 2, 2, 2);
        return (t___construct(a0, a1), null);
      }
      break;
    case 0x107:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getModifiers", 0, 1);
        return (t_getmodifiers());
      }
      break;
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 3) return throw_wrong_arguments("ReflectionProperty::export", count, 3, 3, 1);
        return (ti_export(o_getClassName(), a0, a1, a2));
      }
      break;
    case 0x131:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isPublic", 0, 1);
        return (t_ispublic());
      }
      break;
    case 0x13d:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::setAccessible", 0, 1);
        return (t_setaccessible(), null);
      }
      break;
    case 0x113:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    case 0x13e:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionProperty::setValue", count, 2, 2, 1);
        return (t_setvalue(a0, a1));
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getName", 0, 1);
        return (t_getname());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 31) {
    case 2:
      HASH_GUARD(0x791E9751F5B8C5A2LL, setaccessible) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::setAccessible", 0, 1);
        return (t_setaccessible(), null);
      }
      break;
    case 3:
      HASH_GUARD(0x56879BCEB40997E3LL, getvalue) {
        if (count > 1) return throw_toomany_arguments("ReflectionProperty::getValue", 1, 1);
        if (count <= 0) return (t_getvalue());
        return (t_getvalue(a0));
      }
      HASH_GUARD(0x6ED51288559D6063LL, getdeclaringclass) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getDeclaringClass", 0, 1);
        return (t_getdeclaringclass());
      }
      break;
    case 5:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 8:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        if (count != 3) return throw_wrong_arguments("ReflectionProperty::export", count, 3, 3, 1);
        return (ti_export(o_getClassName(), a0, a1, a2));
      }
      break;
    case 10:
      HASH_GUARD(0x2D7209A590477CEALL, isprotected) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isProtected", 0, 1);
        return (t_isprotected());
      }
      break;
    case 15:
      HASH_GUARD(0x37AAE0845E2F636FLL, isprivate) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isPrivate", 0, 1);
        return (t_isprivate());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 20:
      HASH_GUARD(0x24253EBA491D6014LL, getmodifiers) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getModifiers", 0, 1);
        return (t_getmodifiers());
      }
      break;
    case 21:
      HASH_GUARD(0x384A52597AB11F15LL, isdefault) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isDefault", 0, 1);
        return (t_isdefault());
      }
      HASH_GUARD(0x36FBED35008C8DB5LL, setvalue) {
        if (count != 2) return throw_wrong_arguments("ReflectionProperty::setValue", count, 2, 2, 1);
        return (t_setvalue(a0, a1));
      }
      break;
    case 24:
      HASH_GUARD(0x7C4F424FDA56ADF8LL, getdoccomment) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    case 25:
      HASH_GUARD(0x7A15DC56E8CC0B19LL, isstatic) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isStatic", 0, 1);
        return (t_isstatic());
      }
      break;
    case 28:
      HASH_GUARD(0x2820F10358723B7CLL, ispublic) {
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isPublic", 0, 1);
        return (t_ispublic());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count != 2) return throw_wrong_arguments("ReflectionProperty::__construct", count, 2, 2, 2);
        return (t___construct(a0, a1), null);
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::o_invoke_few_args(methodIndex, s, hash, count, a0, a1, a2, a3, a4, a5);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionproperty
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_reflectionproperty
Variant c_reflectionproperty::os_invoke(const char *c, MethodIndex methodIndex, const char *s,  CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 3) return throw_wrong_arguments("ReflectionProperty::export", count, 3, 3, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          CVarRef arg2((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(c, arg0, arg1, arg2));
        }
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 0:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        if (count != 3) return throw_wrong_arguments("ReflectionProperty::export", count, 3, 3, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          CVarRef arg2((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(c, arg0, arg1, arg2));
        }
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::os_invoke(c, methodIndex, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_reflectionproperty
Variant c_reflectionproperty::o_invoke_from_eval(const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
#ifdef FMCGEN
  MethodIndex methodIndex = methodIndexExists(s);
  switch (methodIndex.m_callIndex) {
    case 0x12c:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isPrivate", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isprivate());
      }
      break;
    case 0x13b:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 1) return throw_toomany_arguments("ReflectionProperty::getValue", 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 0) return (t_getvalue());
        else return (t_getvalue(a0));
      }
      break;
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::__toString", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___tostring());
      }
      break;
    case 0x12d:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isProtected", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isprotected());
      }
      break;
    case 0x12e:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isStatic", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isstatic());
      }
      break;
    case 0x12f:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getDeclaringClass", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdeclaringclass());
      }
      break;
    case 0x13c:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isDefault", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isdefault());
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionProperty::__construct", count, 2, 2, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___construct(a0, a1), null);
      }
      break;
    case 0x107:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getModifiers", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getmodifiers());
      }
      break;
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        Variant a2;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 3) return throw_wrong_arguments("ReflectionProperty::export", count, 3, 3, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a2 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(o_getClassName(), a0, a1, a2));
      }
      break;
    case 0x131:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isPublic", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_ispublic());
      }
      break;
    case 0x13d:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::setAccessible", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_setaccessible(), null);
      }
      break;
    case 0x113:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getDocComment", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdoccomment());
      }
      break;
    case 0x13e:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionProperty::setValue", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_setvalue(a0, a1));
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getname());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 31) {
    case 2:
      HASH_GUARD(0x791E9751F5B8C5A2LL, setaccessible) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::setAccessible", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_setaccessible(), null);
      }
      break;
    case 3:
      HASH_GUARD(0x56879BCEB40997E3LL, getvalue) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 1) return throw_toomany_arguments("ReflectionProperty::getValue", 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 0) return (t_getvalue());
        else return (t_getvalue(a0));
      }
      HASH_GUARD(0x6ED51288559D6063LL, getdeclaringclass) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getDeclaringClass", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdeclaringclass());
      }
      break;
    case 5:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getname());
      }
      break;
    case 8:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        Variant a0;
        Variant a1;
        Variant a2;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 3) return throw_wrong_arguments("ReflectionProperty::export", count, 3, 3, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a2 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(o_getClassName(), a0, a1, a2));
      }
      break;
    case 10:
      HASH_GUARD(0x2D7209A590477CEALL, isprotected) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isProtected", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isprotected());
      }
      break;
    case 15:
      HASH_GUARD(0x37AAE0845E2F636FLL, isprivate) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isPrivate", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isprivate());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::__toString", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___tostring());
      }
      break;
    case 20:
      HASH_GUARD(0x24253EBA491D6014LL, getmodifiers) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getModifiers", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getmodifiers());
      }
      break;
    case 21:
      HASH_GUARD(0x384A52597AB11F15LL, isdefault) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isDefault", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isdefault());
      }
      HASH_GUARD(0x36FBED35008C8DB5LL, setvalue) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionProperty::setValue", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_setvalue(a0, a1));
      }
      break;
    case 24:
      HASH_GUARD(0x7C4F424FDA56ADF8LL, getdoccomment) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::getDocComment", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdoccomment());
      }
      break;
    case 25:
      HASH_GUARD(0x7A15DC56E8CC0B19LL, isstatic) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isStatic", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isstatic());
      }
      break;
    case 28:
      HASH_GUARD(0x2820F10358723B7CLL, ispublic) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionProperty::isPublic", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_ispublic());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionProperty::__construct", count, 2, 2, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___construct(a0, a1), null);
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::o_invoke_from_eval(s, env, caller, hash, fatal);
}
Variant c_reflectionproperty::os_invoke_from_eval(const char *c, const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
#ifdef FMCGEN
  MethodIndex methodIndex = methodIndexExists(s);
  switch (methodIndex.m_callIndex) {
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        Variant a2;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 3) return throw_wrong_arguments("ReflectionProperty::export", count, 3, 3, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a2 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(c, a0, a1, a2));
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 0:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        Variant a0;
        Variant a1;
        Variant a2;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 3) return throw_wrong_arguments("ReflectionProperty::export", count, 3, 3, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a2 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(c, a0, a1, a2));
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::os_invoke_from_eval(c, s, env, caller, hash, fatal);
}
struct ObjectStaticCallbacks cw_reflectionproperty = {
  c_reflectionproperty::os_getInit,
  c_reflectionproperty::os_get,
  c_reflectionproperty::os_lval,
  c_reflectionproperty::os_invoke,
  c_reflectionproperty::os_constant,
};
void c_reflectionproperty::init() {
  m_info = null;
  m_name = null;
  m_class = null;
}
/* SRC: classes/reflection.php line 1325 */
void c_reflectionproperty::t___construct(Variant v_cls, Variant v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::__construct);
  bool oldInCtor = gasInCtor(true);
  Variant v_prop;

  if ((toBoolean(v_cls) && toBoolean(v_name))) {
    {
      if (!(x_is_object(v_cls))) {
        {
          p_reflectionclass tmp1 = NEWOBJ(c_reflectionclass)();
          (tmp1->create(v_cls));
          v_cls = tmp1;
        }
      }
      {
        Variant tmp2((v_cls. BIND_CLASS_DOT o_invoke_few_args(/* getproperty */ MethodIndex(287, 1) /* getproperty */ ,  "getProperty", 0x0FD73627FB023047LL, 1, v_name)));
        v_prop = tmp2;
      }
      if (toBoolean(v_prop)) {
        {
          {
            Variant tmp3((v_prop.o_get("info", 0x0F2EF58F157D479FLL, true)));
            m_info = tmp3;
          }
          {
            Variant tmp4((v_prop.o_get("name", 0x5655B4FF77E35232LL, true)));
            m_name = tmp4;
          }
          {
            Variant tmp5((v_prop.o_get("class", 0x2E3A246D1F74C210LL, true)));
            m_class = tmp5;
          }
        }
      }
    }
  }
  gasInCtor(oldInCtor);
} /* function */
/* SRC: classes/reflection.php line 1337 */
String c_reflectionproperty::t___tostring() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::__toString);
  return toString(null);
} /* function */
/* SRC: classes/reflection.php line 1353 */
Variant c_reflectionproperty::ti_export(const char* cls, Variant v_cls, CVarRef v_name, CVarRef v_ret) {
  STATIC_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::export);
  Variant v_obj;
  String v_str;

  if (!(x_is_object(v_cls))) {
    {
      p_reflectionclass tmp1 = NEWOBJ(c_reflectionclass)();
      (tmp1->create(v_cls));
      v_cls = tmp1;
    }
  }
  {
    const Variant &tmp2((v_cls.o_invoke_few_args(/* getproperty */ MethodIndex(287, 1) /* getproperty */ ,  "getProperty", 0x0FD73627FB023047LL, 1, v_name)));
    v_obj = tmp2;
  }
  v_str = (toString(v_obj));
  if (toBoolean(v_ret)) {
    {
      return v_str;
    }
  }
  print(v_str);
  return null;
} /* function */
/* SRC: classes/reflection.php line 1372 */
Variant c_reflectionproperty::t_getname() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::getName);
  return m_info.rvalAt("name", 0x5655B4FF77E35232LL, true, true);
} /* function */
/* SRC: classes/reflection.php line 1385 */
bool c_reflectionproperty::t_ispublic() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::isPublic);
  return equal(m_info.rvalAt("access", 0x0192C89B84AEC2A9LL, true, true), "public");
} /* function */
/* SRC: classes/reflection.php line 1398 */
bool c_reflectionproperty::t_isprivate() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::isPrivate);
  return equal(m_info.rvalAt("access", 0x0192C89B84AEC2A9LL, true, true), "private");
} /* function */
/* SRC: classes/reflection.php line 1411 */
bool c_reflectionproperty::t_isprotected() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::isProtected);
  return equal(m_info.rvalAt("access", 0x0192C89B84AEC2A9LL, true, true), "protected");
} /* function */
/* SRC: classes/reflection.php line 1424 */
Variant c_reflectionproperty::t_isstatic() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::isStatic);
  return m_info.rvalAt("static", 0x5DBDF95E796D376ELL, true, true);
} /* function */
/* SRC: classes/reflection.php line 1438 */
Variant c_reflectionproperty::t_isdefault() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::isDefault);
  return m_info.rvalAt("default", 0x3B47CFE99B9C0021LL, true, true);
} /* function */
/* SRC: classes/reflection.php line 1452 */
void c_reflectionproperty::t_setaccessible() {
} /* function */
/* SRC: classes/reflection.php line 1465 */
Variant c_reflectionproperty::t_getmodifiers() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::getModifiers);
  return m_info.rvalAt("modifiers", 0x3FC2B34E9291EB83LL, true, true);
} /* function */
/* SRC: classes/reflection.php line 1481 */
Variant c_reflectionproperty::t_getvalue(CVarRef v_obj //  = null_variant
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::getValue);
  if (toBoolean(t_isstatic())) {
    {
      {
        String tmp1((toString(m_info.rvalAt("class", 0x2E3A246D1F74C210LL, true, true))));
        String tmp2((toString(m_info.rvalAt("name", 0x5655B4FF77E35232LL, true, true))));
        return x_hphp_get_static_property(tmp1, tmp2);
      }
    }
  }
  if (toBoolean(v_obj)) {
    {
      {
        Object tmp3((toObject(v_obj)));
        String tmp4((toString(m_info.rvalAt("class", 0x2E3A246D1F74C210LL, true, true))));
        String tmp5((toString(m_info.rvalAt("name", 0x5655B4FF77E35232LL, true, true))));
        return x_hphp_get_property(tmp3, tmp4, tmp5);
      }
    }
  }
  return null;
} /* function */
/* SRC: classes/reflection.php line 1506 */
Variant c_reflectionproperty::t_setvalue(CVarRef v_obj, CVarRef v_value) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::setValue);
  if (toBoolean(t_isstatic())) {
    {
      {
        String tmp1((toString(m_info.rvalAt("class", 0x2E3A246D1F74C210LL, true, true))));
        String tmp2((toString(m_info.rvalAt("name", 0x5655B4FF77E35232LL, true, true))));
        return (x_hphp_set_static_property(tmp1, tmp2, v_value), null);
      }
    }
  }
  {
    Object tmp3((toObject(v_obj)));
    String tmp4((toString(m_info.rvalAt("class", 0x2E3A246D1F74C210LL, true, true))));
    String tmp5((toString(m_info.rvalAt("name", 0x5655B4FF77E35232LL, true, true))));
    x_hphp_set_property(tmp3, tmp4, tmp5, v_value);
  }
  return null;
} /* function */
/* SRC: classes/reflection.php line 1524 */
Variant c_reflectionproperty::t_getdeclaringclass() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::getDeclaringClass);
  if (empty(m_info, "class", 0x2E3A246D1F74C210LL, true)) {
    {
      return null;
    }
  }
  {
    p_reflectionclass tmp1 = NEWOBJ(c_reflectionclass)();
    return (tmp1->create(m_info.rvalAt("class", 0x2E3A246D1F74C210LL, true, true)), tmp1);
  }
} /* function */
/* SRC: classes/reflection.php line 1541 */
Variant c_reflectionproperty::t_getdoccomment() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::getDocComment);
  return m_info.rvalAt("doc", 0x5C1091C88F8EB6EDLL, true, true);
} /* function */
/* SRC: classes/reflection.php line 461 */
const int64 q_reflectionfunction_IS_DEPRECATED = 262144LL;
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_reflectionfunction
Variant c_reflectionfunction::os_getInit(const char *s, int64 hash) {
  return c_reflectionfunctionabstract::os_getInit(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_reflectionfunction
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_reflectionfunction
Variant c_reflectionfunction::os_get(const char *s, int64 hash) {
  return c_reflectionfunctionabstract::os_get(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_reflectionfunction
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_reflectionfunction
Variant &c_reflectionfunction::os_lval(const char *s, int64 hash) {
  return c_reflectionfunctionabstract::os_lval(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_reflectionfunction
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_reflectionfunction
void c_reflectionfunction::o_getArray(Array &props) const {
  c_reflectionfunctionabstract::o_getArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_reflectionfunction
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionfunction
void c_reflectionfunction::o_setArray(CArrRef props) {
  c_reflectionfunctionabstract::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionfunction
#ifndef OMIT_JUMP_TABLE_CLASS_get_reflectionfunction
Variant c_reflectionfunction::o_get(CStrRef prop, int64 phash, bool error, const char *context, int64 hash) {
  return o_getPublic(prop, phash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_reflectionfunction
#ifndef OMIT_JUMP_TABLE_CLASS_get_PUBLIC_reflectionfunction
Variant c_reflectionfunction::o_getPublic(CStrRef s, int64 hash, bool error) {
  return c_reflectionfunctionabstract::o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PUBLIC_reflectionfunction
#ifndef OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionfunction
Variant c_reflectionfunction::o_getPrivate(CStrRef s, int64 hash, bool error) {
  return o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionfunction
#ifndef OMIT_JUMP_TABLE_CLASS_exists_reflectionfunction
bool c_reflectionfunction::o_exists(CStrRef prop, int64 phash, const char *context, int64 hash) const {
  return o_existsPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_reflectionfunction
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionfunction
bool c_reflectionfunction::o_existsPublic(CStrRef s, int64 hash) const {
  return c_reflectionfunctionabstract::o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionfunction
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionfunction
bool c_reflectionfunction::o_existsPrivate(CStrRef s, int64 hash) const {
  return o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionfunction
#ifndef OMIT_JUMP_TABLE_CLASS_set_reflectionfunction
Variant c_reflectionfunction::o_set(CStrRef prop, int64 phash, CVarRef v, bool forInit, const char *context, int64 hash) {
  return o_setPublic(prop, phash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_reflectionfunction
#ifndef OMIT_JUMP_TABLE_CLASS_set_PUBLIC_reflectionfunction
Variant c_reflectionfunction::o_setPublic(CStrRef s, int64 hash, CVarRef v, bool forInit) {
  return c_reflectionfunctionabstract::o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PUBLIC_reflectionfunction
#ifndef OMIT_JUMP_TABLE_CLASS_set_PRIVATE_reflectionfunction
Variant c_reflectionfunction::o_setPrivate(CStrRef s, int64 hash, CVarRef v, bool forInit) {
  return o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PRIVATE_reflectionfunction
#ifndef OMIT_JUMP_TABLE_CLASS_lval_reflectionfunction
Variant& c_reflectionfunction::o_lval(CStrRef prop, int64 phash, const char *context, int64 hash) {
  return o_lvalPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_reflectionfunction
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_reflectionfunction
Variant& c_reflectionfunction::o_lvalPublic(CStrRef s, int64 hash) {
  return c_reflectionfunctionabstract::o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_reflectionfunction
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_reflectionfunction
Variant& c_reflectionfunction::o_lvalPrivate(CStrRef s, int64 hash) {
  return o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_reflectionfunction
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_reflectionfunction
Variant c_reflectionfunction::os_constant(const char *s) {
  int64 hash = hash_string(s);
  switch (hash & 1) {
    case 0:
      HASH_RETURN(0x25C5A7C72E7B0EF6LL, q_reflectionfunction_IS_DEPRECATED, "IS_DEPRECATED");
      break;
    default:
      break;
  }
  return c_reflectionfunctionabstract::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_reflectionfunction
IMPLEMENT_CLASS(reflectionfunction)
c_reflectionfunction *c_reflectionfunction::create(Variant v_name) {
  CountableHelper h(this);
  init();
  t___construct(v_name);
  return this;
}
ObjectData *c_reflectionfunction::dynCreate(CArrRef params, bool construct /* = true */) {
  init();
  if (construct) {
    CountableHelper h(this);
    int count __attribute__((__unused__)) = params.size();
    if (count != 1) throw_wrong_arguments("ReflectionFunction::__construct", count, 1, 1, 2);
    {
      ArrayData *ad(params.get());
      ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
      CVarRef arg0((ad->getValue(pos)));
      (t___construct(arg0));
    }
  }
  return this;
}
void c_reflectionfunction::dynConstruct(CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count != 1) throw_wrong_arguments("ReflectionFunction::__construct", count, 1, 1, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    (t___construct(arg0));
  }
}
void c_reflectionfunction::dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  int count __attribute__((__unused__)) = params.size();
  if (count != 1) throw_wrong_arguments("ReflectionFunction::__construct", count, 1, 1, 1);
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  (t___construct(a0), null);
}
ObjectData *c_reflectionfunction::cloneImpl() {
  c_reflectionfunction *obj = NEW(c_reflectionfunction)();
  cloneSet(obj);
  return obj;
}
void c_reflectionfunction::cloneSet(c_reflectionfunction *clone) {
  c_reflectionfunctionabstract::cloneSet(clone);
}
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionfunction
Variant c_reflectionfunction::o_invoke(MethodIndex methodIndex, const char *s, CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0x124:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfRequiredParameters", 0, 1);
        return (t_getnumberofrequiredparameters());
      }
      break;
    case 0xfe:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isUserDefined", 0, 1);
        return (t_isuserdefined());
      }
      break;
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunction::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 0x125:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfParameters", 0, 1);
        return (t_getnumberofparameters());
      }
      break;
    case 0x103:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getEndLine", 0, 1);
        return (t_getendline());
      }
      break;
    case 0x126:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStaticVariables", 0, 1);
        return (t_getstaticvariables());
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionFunction::__construct", count, 1, 1, 2);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t___construct(arg0), null);
        }
      }
      break;
    case 0x127:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getParameters", 0, 1);
        return (t_getparameters());
      }
      break;
    case 0x128:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionFunction::invokeArgs", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_invokeargs(arg0));
        }
      }
      break;
    case 0x129:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::returnsReference", 0, 1);
        return (t_returnsreference());
      }
      break;
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionFunction::export", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(o_getClassName(), arg0, arg1));
        }
      }
      break;
    case 0x12a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count <= 0) return (t_invoke(count));
        return (t_invoke(count,params.slice(0, count - 0, false)));
      }
      break;
    case 0xbd:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getFileName", 0, 1);
        return (t_getfilename());
      }
      break;
    case 0x110:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStartLine", 0, 1);
        return (t_getstartline());
      }
      break;
    case 0x113:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    case 0x12b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getClosure", 0, 1);
        return (t_getclosure());
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 0x11e:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isInternal", 0, 1);
        return (t_isinternal());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 63) {
    case 2:
      HASH_GUARD(0x3FCE192CF6199942LL, invoke) {
        if (count <= 0) return (t_invoke(count));
        return (t_invoke(count,params.slice(0, count - 0, false)));
      }
      break;
    case 4:
      HASH_GUARD(0x3235AF57F23103C4LL, invokeargs) {
        if (count != 1) return throw_wrong_arguments("ReflectionFunction::invokeArgs", count, 1, 1, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t_invokeargs(arg0));
        }
      }
      HASH_GUARD(0x39C1BB731CB1CB04LL, getstartline) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStartLine", 0, 1);
        return (t_getstartline());
      }
      break;
    case 13:
      HASH_GUARD(0x1930CE336D39474DLL, getfilename) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getFileName", 0, 1);
        return (t_getfilename());
      }
      break;
    case 15:
      HASH_GUARD(0x48FDF6C5835C64CFLL, isinternal) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isInternal", 0, 1);
        return (t_isinternal());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunction::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count != 1) return throw_wrong_arguments("ReflectionFunction::__construct", count, 1, 1, 2);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          return (t___construct(arg0), null);
        }
      }
      break;
    case 32:
      HASH_GUARD(0x57D8DC34C9A03560LL, getnumberofparameters) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfParameters", 0, 1);
        return (t_getnumberofparameters());
      }
      break;
    case 33:
      HASH_GUARD(0x4D637DECDBFA6221LL, getnumberofrequiredparameters) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfRequiredParameters", 0, 1);
        return (t_getnumberofrequiredparameters());
      }
      break;
    case 34:
      HASH_GUARD(0x33A6C2CFBDB05EE2LL, getclosure) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getClosure", 0, 1);
        return (t_getclosure());
      }
      break;
    case 36:
      HASH_GUARD(0x6A6B8BECAE7D4164LL, isuserdefined) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isUserDefined", 0, 1);
        return (t_isuserdefined());
      }
      break;
    case 37:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 40:
      HASH_GUARD(0x37FFB8F44A3329A8LL, getstaticvariables) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStaticVariables", 0, 1);
        return (t_getstaticvariables());
      }
      HASH_GUARD(0x1A3AB3B0276D2668LL, returnsreference) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::returnsReference", 0, 1);
        return (t_returnsreference());
      }
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        if (count != 2) return throw_wrong_arguments("ReflectionFunction::export", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(o_getClassName(), arg0, arg1));
        }
      }
      break;
    case 45:
      HASH_GUARD(0x3E62225132C2A32DLL, getparameters) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getParameters", 0, 1);
        return (t_getparameters());
      }
      break;
    case 48:
      HASH_GUARD(0x6C19E85007BC4570LL, getendline) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getEndLine", 0, 1);
        return (t_getendline());
      }
      break;
    case 56:
      HASH_GUARD(0x7C4F424FDA56ADF8LL, getdoccomment) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::o_invoke(methodIndex, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionfunction
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionfunction
Variant c_reflectionfunction::o_invoke_few_args(MethodIndex methodIndex, const char *s, int64 hash, int count, CVarRef a0, CVarRef a1, CVarRef a2, CVarRef a3, CVarRef a4, CVarRef a5) {
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0x124:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfRequiredParameters", 0, 1);
        return (t_getnumberofrequiredparameters());
      }
      break;
    case 0xfe:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isUserDefined", 0, 1);
        return (t_isuserdefined());
      }
      break;
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunction::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 0x125:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfParameters", 0, 1);
        return (t_getnumberofparameters());
      }
      break;
    case 0x103:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getEndLine", 0, 1);
        return (t_getendline());
      }
      break;
    case 0x126:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStaticVariables", 0, 1);
        return (t_getstaticvariables());
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionFunction::__construct", count, 1, 1, 2);
        return (t___construct(a0), null);
      }
      break;
    case 0x127:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getParameters", 0, 1);
        return (t_getparameters());
      }
      break;
    case 0x128:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 1) return throw_wrong_arguments("ReflectionFunction::invokeArgs", count, 1, 1, 1);
        return (t_invokeargs(a0));
      }
      break;
    case 0x129:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::returnsReference", 0, 1);
        return (t_returnsreference());
      }
      break;
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionFunction::export", count, 2, 2, 1);
        return (ti_export(o_getClassName(), a0, a1));
      }
      break;
    case 0x12a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count <= 0) return (t_invoke(count));
        Array params;
        if (count >= 1) params.append(a0);
        if (count >= 2) params.append(a1);
        if (count >= 3) params.append(a2);
        if (count >= 4) params.append(a3);
        if (count >= 5) params.append(a4);
        if (count >= 6) params.append(a5);
        return (t_invoke(count,params));
      }
      break;
    case 0xbd:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getFileName", 0, 1);
        return (t_getfilename());
      }
      break;
    case 0x110:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStartLine", 0, 1);
        return (t_getstartline());
      }
      break;
    case 0x113:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    case 0x12b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getClosure", 0, 1);
        return (t_getclosure());
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 0x11e:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isInternal", 0, 1);
        return (t_isinternal());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 63) {
    case 2:
      HASH_GUARD(0x3FCE192CF6199942LL, invoke) {
        if (count <= 0) return (t_invoke(count));
        Array params;
        if (count >= 1) params.append(a0);
        if (count >= 2) params.append(a1);
        if (count >= 3) params.append(a2);
        if (count >= 4) params.append(a3);
        if (count >= 5) params.append(a4);
        if (count >= 6) params.append(a5);
        return (t_invoke(count,params));
      }
      break;
    case 4:
      HASH_GUARD(0x3235AF57F23103C4LL, invokeargs) {
        if (count != 1) return throw_wrong_arguments("ReflectionFunction::invokeArgs", count, 1, 1, 1);
        return (t_invokeargs(a0));
      }
      HASH_GUARD(0x39C1BB731CB1CB04LL, getstartline) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStartLine", 0, 1);
        return (t_getstartline());
      }
      break;
    case 13:
      HASH_GUARD(0x1930CE336D39474DLL, getfilename) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getFileName", 0, 1);
        return (t_getfilename());
      }
      break;
    case 15:
      HASH_GUARD(0x48FDF6C5835C64CFLL, isinternal) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isInternal", 0, 1);
        return (t_isinternal());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunction::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count != 1) return throw_wrong_arguments("ReflectionFunction::__construct", count, 1, 1, 2);
        return (t___construct(a0), null);
      }
      break;
    case 32:
      HASH_GUARD(0x57D8DC34C9A03560LL, getnumberofparameters) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfParameters", 0, 1);
        return (t_getnumberofparameters());
      }
      break;
    case 33:
      HASH_GUARD(0x4D637DECDBFA6221LL, getnumberofrequiredparameters) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfRequiredParameters", 0, 1);
        return (t_getnumberofrequiredparameters());
      }
      break;
    case 34:
      HASH_GUARD(0x33A6C2CFBDB05EE2LL, getclosure) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getClosure", 0, 1);
        return (t_getclosure());
      }
      break;
    case 36:
      HASH_GUARD(0x6A6B8BECAE7D4164LL, isuserdefined) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isUserDefined", 0, 1);
        return (t_isuserdefined());
      }
      break;
    case 37:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 40:
      HASH_GUARD(0x37FFB8F44A3329A8LL, getstaticvariables) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStaticVariables", 0, 1);
        return (t_getstaticvariables());
      }
      HASH_GUARD(0x1A3AB3B0276D2668LL, returnsreference) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::returnsReference", 0, 1);
        return (t_returnsreference());
      }
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        if (count != 2) return throw_wrong_arguments("ReflectionFunction::export", count, 2, 2, 1);
        return (ti_export(o_getClassName(), a0, a1));
      }
      break;
    case 45:
      HASH_GUARD(0x3E62225132C2A32DLL, getparameters) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getParameters", 0, 1);
        return (t_getparameters());
      }
      break;
    case 48:
      HASH_GUARD(0x6C19E85007BC4570LL, getendline) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getEndLine", 0, 1);
        return (t_getendline());
      }
      break;
    case 56:
      HASH_GUARD(0x7C4F424FDA56ADF8LL, getdoccomment) {
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getDocComment", 0, 1);
        return (t_getdoccomment());
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::o_invoke_few_args(methodIndex, s, hash, count, a0, a1, a2, a3, a4, a5);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionfunction
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_reflectionfunction
Variant c_reflectionfunction::os_invoke(const char *c, MethodIndex methodIndex, const char *s,  CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionFunction::export", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(c, arg0, arg1));
        }
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 0:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        if (count != 2) return throw_wrong_arguments("ReflectionFunction::export", count, 2, 2, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(c, arg0, arg1));
        }
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::os_invoke(c, methodIndex, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_reflectionfunction
Variant c_reflectionfunction::o_invoke_from_eval(const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
#ifdef FMCGEN
  MethodIndex methodIndex = methodIndexExists(s);
  switch (methodIndex.m_callIndex) {
    case 0x124:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfRequiredParameters", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getnumberofrequiredparameters());
      }
      break;
    case 0xfe:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isUserDefined", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isuserdefined());
      }
      break;
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunction::__toString", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___tostring());
      }
      break;
    case 0x125:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfParameters", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getnumberofparameters());
      }
      break;
    case 0x103:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getEndLine", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getendline());
      }
      break;
    case 0x126:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStaticVariables", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getstaticvariables());
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionFunction::__construct", count, 1, 1, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___construct(a0), null);
      }
      break;
    case 0x127:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getParameters", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getparameters());
      }
      break;
    case 0x128:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionFunction::invokeArgs", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_invokeargs(a0));
      }
      break;
    case 0x129:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::returnsReference", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_returnsreference());
      }
      break;
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionFunction::export", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(o_getClassName(), a0, a1));
      }
      break;
    case 0x12a:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        Array vargs;
        for (; it != params.end(); ++it) {
          vargs.append((*it)->eval(env));
        }
        if (count <= 0) return (t_invoke(count));
        return (t_invoke(count,vargs));
      }
      break;
    case 0xbd:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getFileName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getfilename());
      }
      break;
    case 0x110:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStartLine", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getstartline());
      }
      break;
    case 0x113:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getDocComment", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdoccomment());
      }
      break;
    case 0x12b:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getClosure", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getclosure());
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getname());
      }
      break;
    case 0x11e:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isInternal", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isinternal());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 63) {
    case 2:
      HASH_GUARD(0x3FCE192CF6199942LL, invoke) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        Array vargs;
        for (; it != params.end(); ++it) {
          vargs.append((*it)->eval(env));
        }
        if (count <= 0) return (t_invoke(count));
        return (t_invoke(count,vargs));
      }
      break;
    case 4:
      HASH_GUARD(0x3235AF57F23103C4LL, invokeargs) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionFunction::invokeArgs", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_invokeargs(a0));
      }
      HASH_GUARD(0x39C1BB731CB1CB04LL, getstartline) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStartLine", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getstartline());
      }
      break;
    case 13:
      HASH_GUARD(0x1930CE336D39474DLL, getfilename) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getFileName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getfilename());
      }
      break;
    case 15:
      HASH_GUARD(0x48FDF6C5835C64CFLL, isinternal) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isInternal", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isinternal());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunction::__toString", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___tostring());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ReflectionFunction::__construct", count, 1, 1, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___construct(a0), null);
      }
      break;
    case 32:
      HASH_GUARD(0x57D8DC34C9A03560LL, getnumberofparameters) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfParameters", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getnumberofparameters());
      }
      break;
    case 33:
      HASH_GUARD(0x4D637DECDBFA6221LL, getnumberofrequiredparameters) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfRequiredParameters", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getnumberofrequiredparameters());
      }
      break;
    case 34:
      HASH_GUARD(0x33A6C2CFBDB05EE2LL, getclosure) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getClosure", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getclosure());
      }
      break;
    case 36:
      HASH_GUARD(0x6A6B8BECAE7D4164LL, isuserdefined) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isUserDefined", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isuserdefined());
      }
      break;
    case 37:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getname());
      }
      break;
    case 40:
      HASH_GUARD(0x37FFB8F44A3329A8LL, getstaticvariables) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStaticVariables", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getstaticvariables());
      }
      HASH_GUARD(0x1A3AB3B0276D2668LL, returnsreference) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::returnsReference", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_returnsreference());
      }
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionFunction::export", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(o_getClassName(), a0, a1));
      }
      break;
    case 45:
      HASH_GUARD(0x3E62225132C2A32DLL, getparameters) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getParameters", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getparameters());
      }
      break;
    case 48:
      HASH_GUARD(0x6C19E85007BC4570LL, getendline) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getEndLine", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getendline());
      }
      break;
    case 56:
      HASH_GUARD(0x7C4F424FDA56ADF8LL, getdoccomment) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getDocComment", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdoccomment());
      }
      break;
    default:
      break;
  }
#endif
  return c_reflectionfunctionabstract::o_invoke_from_eval(s, env, caller, hash, fatal);
}
Variant c_reflectionfunction::os_invoke_from_eval(const char *c, const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
#ifdef FMCGEN
  MethodIndex methodIndex = methodIndexExists(s);
  switch (methodIndex.m_callIndex) {
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionFunction::export", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(c, a0, a1));
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 0:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionFunction::export", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(c, a0, a1));
      }
      break;
    default:
      break;
  }
#endif
  return c_reflectionfunctionabstract::os_invoke_from_eval(c, s, env, caller, hash, fatal);
}
struct ObjectStaticCallbacks cw_reflectionfunction = {
  c_reflectionfunction::os_getInit,
  c_reflectionfunction::os_get,
  c_reflectionfunction::os_lval,
  c_reflectionfunction::os_invoke,
  c_reflectionfunction::os_constant,
};
void c_reflectionfunction::init() {
  c_reflectionfunctionabstract::init();
}
/* SRC: classes/reflection.php line 465 */
void c_reflectionfunction::t___construct(Variant v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunction, ReflectionFunction::__construct);
  bool oldInCtor = gasInCtor(true);
  {
    const Array &tmp1((x_hphp_get_function_info(toString(v_name))));
    m_info = tmp1;
  }
  if (empty(m_info)) {
    {
      {
        p_reflectionexception tmp2 = NEWOBJ(c_reflectionexception)();
        throw_exception((tmp2->create(concat3("Function ", toString(v_name), " does not exist")), tmp2));
      }
    }
  }
  gasInCtor(oldInCtor);
} /* function */
/* SRC: classes/reflection.php line 472 */
String c_reflectionfunction::t___tostring() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunction, ReflectionFunction::__toString);
  return toString(null);
} /* function */
/* SRC: classes/reflection.php line 492 */
Variant c_reflectionfunction::ti_export(const char* cls, CVarRef v_name, CVarRef v_ret) {
  STATIC_METHOD_INJECTION_BUILTIN(ReflectionFunction, ReflectionFunction::export);
  p_reflectionfunction v_obj;
  String v_str;

  {
    p_reflectionfunction tmp1 = NEWOBJ(c_reflectionfunction)();
    (tmp1->create(v_name));
    v_obj = tmp1;
  }
  v_str = (toString(v_obj));
  if (toBoolean(v_ret)) {
    {
      return v_str;
    }
  }
  print(v_str);
  return null;
} /* function */
/* SRC: classes/reflection.php line 508 */
Variant c_reflectionfunction::t_invoke(int num_args, Array args /* = Array() */) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunction, ReflectionFunction::invoke);
  Array v_args;

  {
    const Array &tmp1((func_get_args(num_args, Array(),args)));
    v_args = tmp1;
  }
  {
    String tmp2((toString(m_info.rvalAt("name", 0x5655B4FF77E35232LL, true, true))));
    return x_hphp_invoke(tmp2, v_args);
  }
} /* function */
/* SRC: classes/reflection.php line 523 */
Variant c_reflectionfunction::t_invokeargs(CVarRef v_args) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunction, ReflectionFunction::invokeArgs);
  {
    String tmp1((toString(m_info.rvalAt("name", 0x5655B4FF77E35232LL, true, true))));
    const Array &tmp2((toArray(x_array_values(v_args))));
    return x_hphp_invoke(tmp1, tmp2);
  }
} /* function */
/* SRC: classes/reflection.php line 46 */
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_reflectionparameter
Variant c_reflectionparameter::os_getInit(const char *s, int64 hash) {
  DECLARE_SYSTEM_GLOBALS(g);
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 1:
      HASH_RETURN(0x0F2EF58F157D479FLL,
                  null, "info");
      break;
    default:
      break;
  }
  return c_ObjectData::os_getInit(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_reflectionparameter
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_reflectionparameter
Variant c_reflectionparameter::os_get(const char *s, int64 hash) {
  return c_ObjectData::os_get(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_reflectionparameter
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_reflectionparameter
Variant &c_reflectionparameter::os_lval(const char *s, int64 hash) {
  return c_ObjectData::os_lval(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_reflectionparameter
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_reflectionparameter
void c_reflectionparameter::o_getArray(Array &props) const {
  if (isInitialized(m_info)) props.set("info", m_info.isReferenced() ? ref(m_info) : m_info, 0x0F2EF58F157D479FLL, true);
  c_ObjectData::o_getArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_reflectionparameter
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionparameter
void c_reflectionparameter::o_setArray(CArrRef props) {
  c_ObjectData::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionparameter
#ifndef OMIT_JUMP_TABLE_CLASS_get_reflectionparameter
Variant c_reflectionparameter::o_get(CStrRef prop, int64 phash, bool error, const char *context, int64 hash) {
  return o_getPublic(prop, phash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_reflectionparameter
#ifndef OMIT_JUMP_TABLE_CLASS_get_PUBLIC_reflectionparameter
Variant c_reflectionparameter::o_getPublic(CStrRef s, int64 hash, bool error) {
  if (hash < 0) hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_RETURN_STRING(0x0F2EF58F157D479FLL, m_info,
                         "info", 4);
      break;
    default:
      break;
  }
  return c_ObjectData::o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PUBLIC_reflectionparameter
#ifndef OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionparameter
Variant c_reflectionparameter::o_getPrivate(CStrRef s, int64 hash, bool error) {
  return o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionparameter
#ifndef OMIT_JUMP_TABLE_CLASS_exists_reflectionparameter
bool c_reflectionparameter::o_exists(CStrRef prop, int64 phash, const char *context, int64 hash) const {
  return o_existsPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_reflectionparameter
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionparameter
bool c_reflectionparameter::o_existsPublic(CStrRef s, int64 hash) const {
  if (hash < 0) hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_EXISTS_STRING(0x0F2EF58F157D479FLL, "info", 4);
      break;
    default:
      break;
  }
  return c_ObjectData::o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionparameter
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionparameter
bool c_reflectionparameter::o_existsPrivate(CStrRef s, int64 hash) const {
  return o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionparameter
#ifndef OMIT_JUMP_TABLE_CLASS_set_reflectionparameter
Variant c_reflectionparameter::o_set(CStrRef prop, int64 phash, CVarRef v, bool forInit, const char *context, int64 hash) {
  return o_setPublic(prop, phash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_reflectionparameter
#ifndef OMIT_JUMP_TABLE_CLASS_set_PUBLIC_reflectionparameter
Variant c_reflectionparameter::o_setPublic(CStrRef s, int64 hash, CVarRef v, bool forInit) {
  if (hash < 0) hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_SET_STRING(0x0F2EF58F157D479FLL, m_info,
                      "info", 4);
      break;
    default:
      break;
  }
  return c_ObjectData::o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PUBLIC_reflectionparameter
#ifndef OMIT_JUMP_TABLE_CLASS_set_PRIVATE_reflectionparameter
Variant c_reflectionparameter::o_setPrivate(CStrRef s, int64 hash, CVarRef v, bool forInit) {
  return o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PRIVATE_reflectionparameter
#ifndef OMIT_JUMP_TABLE_CLASS_lval_reflectionparameter
Variant& c_reflectionparameter::o_lval(CStrRef prop, int64 phash, const char *context, int64 hash) {
  return o_lvalPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_reflectionparameter
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_reflectionparameter
Variant& c_reflectionparameter::o_lvalPublic(CStrRef s, int64 hash) {
  if (hash < 0) hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_RETURN_STRING(0x0F2EF58F157D479FLL, m_info,
                         "info", 4);
      break;
    default:
      break;
  }
  return c_ObjectData::o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_reflectionparameter
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_reflectionparameter
Variant& c_reflectionparameter::o_lvalPrivate(CStrRef s, int64 hash) {
  return o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_reflectionparameter
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_reflectionparameter
Variant c_reflectionparameter::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_reflectionparameter
IMPLEMENT_CLASS(reflectionparameter)
c_reflectionparameter *c_reflectionparameter::create(Variant v_func, Variant v_param) {
  CountableHelper h(this);
  init();
  t___construct(v_func, v_param);
  return this;
}
ObjectData *c_reflectionparameter::dynCreate(CArrRef params, bool construct /* = true */) {
  init();
  if (construct) {
    CountableHelper h(this);
    int count __attribute__((__unused__)) = params.size();
    if (count != 2) throw_wrong_arguments("ReflectionParameter::__construct", count, 2, 2, 2);
    {
      ArrayData *ad(params.get());
      ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
      CVarRef arg0((ad->getValue(pos)));
      CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
      (t___construct(arg0, arg1));
    }
  }
  return this;
}
void c_reflectionparameter::dynConstruct(CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count != 2) throw_wrong_arguments("ReflectionParameter::__construct", count, 2, 2, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
    (t___construct(arg0, arg1));
  }
}
void c_reflectionparameter::dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  int count __attribute__((__unused__)) = params.size();
  if (count != 2) throw_wrong_arguments("ReflectionParameter::__construct", count, 2, 2, 1);
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  (t___construct(a0, a1), null);
}
ObjectData *c_reflectionparameter::cloneImpl() {
  c_reflectionparameter *obj = NEW(c_reflectionparameter)();
  cloneSet(obj);
  return obj;
}
void c_reflectionparameter::cloneSet(c_reflectionparameter *clone) {
  clone->m_info = m_info.isReferenced() ? ref(m_info) : m_info;
  ObjectData::cloneSet(clone);
}
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionparameter
Variant c_reflectionparameter::o_invoke(MethodIndex methodIndex, const char *s, CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 0x12f:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getDeclaringClass", 0, 1);
        return (t_getdeclaringclass());
      }
      break;
    case 0x133:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isDefaultValueAvailable", 0, 1);
        return (t_isdefaultvalueavailable());
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionParameter::__construct", count, 2, 2, 2);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (t___construct(arg0, arg1), null);
        }
      }
      break;
    case 0x134:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getClass", 0, 1);
        return (t_getclass());
      }
      break;
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 3) return throw_wrong_arguments("ReflectionParameter::export", count, 3, 3, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          CVarRef arg2((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(o_getClassName(), arg0, arg1, arg2));
        }
      }
      break;
    case 0x135:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::allowsNull", 0, 1);
        return (t_allowsnull());
      }
      break;
    case 0x136:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getPosition", 0, 1);
        return (t_getposition());
      }
      break;
    case 0x137:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isArray", 0, 1);
        return (t_isarray());
      }
      break;
    case 0x138:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isOptional", 0, 1);
        return (t_isoptional());
      }
      break;
    case 0x139:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getDefaultValue", 0, 1);
        return (t_getdefaultvalue());
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 0x13a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isPassedByReference", 0, 1);
        return (t_ispassedbyreference());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 31) {
    case 3:
      HASH_GUARD(0x6ED51288559D6063LL, getdeclaringclass) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getDeclaringClass", 0, 1);
        return (t_getdeclaringclass());
      }
      break;
    case 5:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 8:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        if (count != 3) return throw_wrong_arguments("ReflectionParameter::export", count, 3, 3, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          CVarRef arg2((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(o_getClassName(), arg0, arg1, arg2));
        }
      }
      HASH_GUARD(0x4044F1EEBF3BB8C8LL, getposition) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getPosition", 0, 1);
        return (t_getposition());
      }
      break;
    case 9:
      HASH_GUARD(0x4F51DA0B633E9909LL, getclass) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getClass", 0, 1);
        return (t_getclass());
      }
      HASH_GUARD(0x24ED05F4504C4C09LL, allowsnull) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::allowsNull", 0, 1);
        return (t_allowsnull());
      }
      break;
    case 12:
      HASH_GUARD(0x27C482A6C7951E0CLL, getdefaultvalue) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getDefaultValue", 0, 1);
        return (t_getdefaultvalue());
      }
      break;
    case 17:
      HASH_GUARD(0x13E3F304BDD89FB1LL, ispassedbyreference) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isPassedByReference", 0, 1);
        return (t_ispassedbyreference());
      }
      break;
    case 18:
      HASH_GUARD(0x6E34805C91257C92LL, isdefaultvalueavailable) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isDefaultValueAvailable", 0, 1);
        return (t_isdefaultvalueavailable());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 21:
      HASH_GUARD(0x2D6EF48BBAB22735LL, isoptional) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isOptional", 0, 1);
        return (t_isoptional());
      }
      break;
    case 29:
      HASH_GUARD(0x5A9CE40C0F25871DLL, isarray) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isArray", 0, 1);
        return (t_isarray());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count != 2) return throw_wrong_arguments("ReflectionParameter::__construct", count, 2, 2, 2);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (t___construct(arg0, arg1), null);
        }
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::o_invoke(methodIndex, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionparameter
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionparameter
Variant c_reflectionparameter::o_invoke_few_args(MethodIndex methodIndex, const char *s, int64 hash, int count, CVarRef a0, CVarRef a1, CVarRef a2, CVarRef a3, CVarRef a4, CVarRef a5) {
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 0x12f:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getDeclaringClass", 0, 1);
        return (t_getdeclaringclass());
      }
      break;
    case 0x133:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isDefaultValueAvailable", 0, 1);
        return (t_isdefaultvalueavailable());
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 2) return throw_wrong_arguments("ReflectionParameter::__construct", count, 2, 2, 2);
        return (t___construct(a0, a1), null);
      }
      break;
    case 0x134:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getClass", 0, 1);
        return (t_getclass());
      }
      break;
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 3) return throw_wrong_arguments("ReflectionParameter::export", count, 3, 3, 1);
        return (ti_export(o_getClassName(), a0, a1, a2));
      }
      break;
    case 0x135:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::allowsNull", 0, 1);
        return (t_allowsnull());
      }
      break;
    case 0x136:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getPosition", 0, 1);
        return (t_getposition());
      }
      break;
    case 0x137:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isArray", 0, 1);
        return (t_isarray());
      }
      break;
    case 0x138:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isOptional", 0, 1);
        return (t_isoptional());
      }
      break;
    case 0x139:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getDefaultValue", 0, 1);
        return (t_getdefaultvalue());
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 0x13a:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isPassedByReference", 0, 1);
        return (t_ispassedbyreference());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 31) {
    case 3:
      HASH_GUARD(0x6ED51288559D6063LL, getdeclaringclass) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getDeclaringClass", 0, 1);
        return (t_getdeclaringclass());
      }
      break;
    case 5:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getName", 0, 1);
        return (t_getname());
      }
      break;
    case 8:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        if (count != 3) return throw_wrong_arguments("ReflectionParameter::export", count, 3, 3, 1);
        return (ti_export(o_getClassName(), a0, a1, a2));
      }
      HASH_GUARD(0x4044F1EEBF3BB8C8LL, getposition) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getPosition", 0, 1);
        return (t_getposition());
      }
      break;
    case 9:
      HASH_GUARD(0x4F51DA0B633E9909LL, getclass) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getClass", 0, 1);
        return (t_getclass());
      }
      HASH_GUARD(0x24ED05F4504C4C09LL, allowsnull) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::allowsNull", 0, 1);
        return (t_allowsnull());
      }
      break;
    case 12:
      HASH_GUARD(0x27C482A6C7951E0CLL, getdefaultvalue) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getDefaultValue", 0, 1);
        return (t_getdefaultvalue());
      }
      break;
    case 17:
      HASH_GUARD(0x13E3F304BDD89FB1LL, ispassedbyreference) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isPassedByReference", 0, 1);
        return (t_ispassedbyreference());
      }
      break;
    case 18:
      HASH_GUARD(0x6E34805C91257C92LL, isdefaultvalueavailable) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isDefaultValueAvailable", 0, 1);
        return (t_isdefaultvalueavailable());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::__toString", 0, 1);
        return (t___tostring());
      }
      break;
    case 21:
      HASH_GUARD(0x2D6EF48BBAB22735LL, isoptional) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isOptional", 0, 1);
        return (t_isoptional());
      }
      break;
    case 29:
      HASH_GUARD(0x5A9CE40C0F25871DLL, isarray) {
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isArray", 0, 1);
        return (t_isarray());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count != 2) return throw_wrong_arguments("ReflectionParameter::__construct", count, 2, 2, 2);
        return (t___construct(a0, a1), null);
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::o_invoke_few_args(methodIndex, s, hash, count, a0, a1, a2, a3, a4, a5);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_reflectionparameter
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_reflectionparameter
Variant c_reflectionparameter::os_invoke(const char *c, MethodIndex methodIndex, const char *s,  CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
#ifdef FMCGEN
  switch (methodIndex.m_callIndex) {
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        if (count != 3) return throw_wrong_arguments("ReflectionParameter::export", count, 3, 3, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          CVarRef arg2((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(c, arg0, arg1, arg2));
        }
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 0:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        if (count != 3) return throw_wrong_arguments("ReflectionParameter::export", count, 3, 3, 1);
        {
          ArrayData *ad(params.get());
          ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
          CVarRef arg0((ad->getValue(pos)));
          CVarRef arg1((pos = ad->iter_advance(pos),ad->getValue(pos)));
          CVarRef arg2((pos = ad->iter_advance(pos),ad->getValue(pos)));
          return (ti_export(c, arg0, arg1, arg2));
        }
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::os_invoke(c, methodIndex, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_reflectionparameter
Variant c_reflectionparameter::o_invoke_from_eval(const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
#ifdef FMCGEN
  MethodIndex methodIndex = methodIndexExists(s);
  switch (methodIndex.m_callIndex) {
    case 0x1a:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::__toString", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___tostring());
      }
      break;
    case 0x12f:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getDeclaringClass", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdeclaringclass());
      }
      break;
    case 0x133:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isDefaultValueAvailable", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isdefaultvalueavailable());
      }
      break;
    case 0x6:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionParameter::__construct", count, 2, 2, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___construct(a0, a1), null);
      }
      break;
    case 0x134:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getClass", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getclass());
      }
      break;
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        Variant a2;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 3) return throw_wrong_arguments("ReflectionParameter::export", count, 3, 3, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a2 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(o_getClassName(), a0, a1, a2));
      }
      break;
    case 0x135:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::allowsNull", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_allowsnull());
      }
      break;
    case 0x136:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getPosition", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getposition());
      }
      break;
    case 0x137:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isArray", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isarray());
      }
      break;
    case 0x138:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isOptional", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isoptional());
      }
      break;
    case 0x139:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getDefaultValue", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdefaultvalue());
      }
      break;
    case 0x8b:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getname());
      }
      break;
    case 0x13a:
      if (methodIndex.m_overloadIndex == 0x1) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isPassedByReference", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_ispassedbyreference());
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 31) {
    case 3:
      HASH_GUARD(0x6ED51288559D6063LL, getdeclaringclass) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getDeclaringClass", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdeclaringclass());
      }
      break;
    case 5:
      HASH_GUARD(0x23F51CDECC198965LL, getname) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getName", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getname());
      }
      break;
    case 8:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        Variant a0;
        Variant a1;
        Variant a2;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 3) return throw_wrong_arguments("ReflectionParameter::export", count, 3, 3, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a2 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(o_getClassName(), a0, a1, a2));
      }
      HASH_GUARD(0x4044F1EEBF3BB8C8LL, getposition) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getPosition", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getposition());
      }
      break;
    case 9:
      HASH_GUARD(0x4F51DA0B633E9909LL, getclass) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getClass", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getclass());
      }
      HASH_GUARD(0x24ED05F4504C4C09LL, allowsnull) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::allowsNull", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_allowsnull());
      }
      break;
    case 12:
      HASH_GUARD(0x27C482A6C7951E0CLL, getdefaultvalue) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::getDefaultValue", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getdefaultvalue());
      }
      break;
    case 17:
      HASH_GUARD(0x13E3F304BDD89FB1LL, ispassedbyreference) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isPassedByReference", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_ispassedbyreference());
      }
      break;
    case 18:
      HASH_GUARD(0x6E34805C91257C92LL, isdefaultvalueavailable) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isDefaultValueAvailable", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isdefaultvalueavailable());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::__toString", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___tostring());
      }
      break;
    case 21:
      HASH_GUARD(0x2D6EF48BBAB22735LL, isoptional) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isOptional", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isoptional());
      }
      break;
    case 29:
      HASH_GUARD(0x5A9CE40C0F25871DLL, isarray) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ReflectionParameter::isArray", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isarray());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ReflectionParameter::__construct", count, 2, 2, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___construct(a0, a1), null);
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::o_invoke_from_eval(s, env, caller, hash, fatal);
}
Variant c_reflectionparameter::os_invoke_from_eval(const char *c, const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
#ifdef FMCGEN
  MethodIndex methodIndex = methodIndexExists(s);
  switch (methodIndex.m_callIndex) {
    case 0x108:
      if (methodIndex.m_overloadIndex == 0x1) {
        Variant a0;
        Variant a1;
        Variant a2;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 3) return throw_wrong_arguments("ReflectionParameter::export", count, 3, 3, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a2 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(c, a0, a1, a2));
      }
      break;
    default:
      break;
  }
#else
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 0:
      HASH_GUARD(0x0B5ABC58C98E70E8LL, export) {
        Variant a0;
        Variant a1;
        Variant a2;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 3) return throw_wrong_arguments("ReflectionParameter::export", count, 3, 3, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a2 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (ti_export(c, a0, a1, a2));
      }
      break;
    default:
      break;
  }
#endif
  return c_ObjectData::os_invoke_from_eval(c, s, env, caller, hash, fatal);
}
struct ObjectStaticCallbacks cw_reflectionparameter = {
  c_reflectionparameter::os_getInit,
  c_reflectionparameter::os_get,
  c_reflectionparameter::os_lval,
  c_reflectionparameter::os_invoke,
  c_reflectionparameter::os_constant,
};
void c_reflectionparameter::init() {
  m_info = null;
}
/* SRC: classes/reflection.php line 49 */
void c_reflectionparameter::t___construct(Variant v_func, Variant v_param) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::__construct);
  bool oldInCtor = gasInCtor(true);
  Variant v_params;

  if ((toBoolean(v_func) && toBoolean(v_param))) {
    {
      {
        Variant tmp1((v_func. BIND_CLASS_DOT o_invoke_few_args(/* getparameters */ MethodIndex(295, 1) /* getparameters */ ,  "getParameters", 0x3E62225132C2A32DLL, 0)));
        v_params = tmp1;
      }
      {
        Variant tmp2((v_params.rvalAt(v_param, -1, true).o_get("info", 0x0F2EF58F157D479FLL, true)));
        m_info = tmp2;
      }
    }
  }
  gasInCtor(oldInCtor);
} /* function */
/* SRC: classes/reflection.php line 56 */
String c_reflectionparameter::t___tostring() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::__toString);
  return toString(null);
} /* function */
/* SRC: classes/reflection.php line 75 */
Variant c_reflectionparameter::ti_export(const char* cls, CVarRef v_func, CVarRef v_param, CVarRef v_ret) {
  STATIC_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::export);
  p_reflectionparameter v_obj;
  String v_str;

  {
    p_reflectionparameter tmp1 = NEWOBJ(c_reflectionparameter)();
    (tmp1->create(v_func, v_param));
    v_obj = tmp1;
  }
  v_str = (toString(v_obj));
  if (toBoolean(v_ret)) {
    {
      return v_str;
    }
  }
  print(v_str);
  return null;
} /* function */
/* SRC: classes/reflection.php line 93 */
Variant c_reflectionparameter::t_getname() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::getName);
  return m_info.rvalAt("name", 0x5655B4FF77E35232LL, true, true);
} /* function */
/* SRC: classes/reflection.php line 108 */
Variant c_reflectionparameter::t_ispassedbyreference() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::isPassedByReference);
  return m_info.rvalAt("ref", 0x05FF98D1208F545ELL, true, true);
} /* function */
/* SRC: classes/reflection.php line 122 */
Variant c_reflectionparameter::t_getdeclaringclass() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::getDeclaringClass);
  if (empty(m_info, "class", 0x2E3A246D1F74C210LL, true)) {
    {
      return null;
    }
  }
  {
    p_reflectionclass tmp1 = NEWOBJ(c_reflectionclass)();
    return (tmp1->create(m_info.rvalAt("class", 0x2E3A246D1F74C210LL, true, true)), tmp1);
  }
} /* function */
/* SRC: classes/reflection.php line 139 */
Variant c_reflectionparameter::t_getclass() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::getClass);
  if (empty(m_info, "type", 0x7B5ABDA0E01EF853LL, true)) {
    {
      return null;
    }
  }
  {
    p_reflectionclass tmp1 = NEWOBJ(c_reflectionclass)();
    return (tmp1->create(m_info.rvalAt("type", 0x7B5ABDA0E01EF853LL, true, true)), tmp1);
  }
} /* function */
/* SRC: classes/reflection.php line 155 */
bool c_reflectionparameter::t_isarray() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::isArray);
  return equal(m_info.rvalAt("type", 0x7B5ABDA0E01EF853LL, true, true), "array");
} /* function */
/* SRC: classes/reflection.php line 169 */
Variant c_reflectionparameter::t_allowsnull() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::allowsNull);
  return m_info.rvalAt("nullable", 0x33C2350C87EA6C49LL, true, true);
} /* function */
/* SRC: classes/reflection.php line 182 */
bool c_reflectionparameter::t_isoptional() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::isOptional);
  return x_array_key_exists("default", m_info);
} /* function */
/* SRC: classes/reflection.php line 197 */
bool c_reflectionparameter::t_isdefaultvalueavailable() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::isDefaultValueAvailable);
  return x_array_key_exists("default", m_info);
} /* function */
/* SRC: classes/reflection.php line 212 */
Variant c_reflectionparameter::t_getdefaultvalue() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::getDefaultValue);
  Variant v_defaultValue;

  if (!(t_isoptional())) {
    {
      throw_exception(p_reflectionexception((NEWOBJ(c_reflectionexception)())->create("Parameter is not optional")));
    }
  }
  {
    Variant tmp1((m_info.rvalAt("default", 0x3B47CFE99B9C0021LL, true, true)));
    v_defaultValue = tmp1;
  }
  if (instanceOf(v_defaultValue, "stdclass")) {
    {
      x_hphp_throw_fatal_error(toString(v_defaultValue.o_get("msg", 0x071C713DEF270D72LL, true)));
    }
  }
  return v_defaultValue;
} /* function */
/* SRC: classes/reflection.php line 233 */
Variant c_reflectionparameter::t_getposition() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::getPosition);
  return m_info.rvalAt("index", 0x4B27521443880CAELL, true, true);
} /* function */
Object co_reflectionfunctionabstract(CArrRef params, bool init /* = true */) {
  return Object((NEW(c_reflectionfunctionabstract)())->dynCreate(params, init));
}
Object co_reflectionobject(CArrRef params, bool init /* = true */) {
  return Object((NEW(c_reflectionobject)())->dynCreate(params, init));
}
Object co_reflectionexception(CArrRef params, bool init /* = true */) {
  return Object((NEW(c_reflectionexception)())->dynCreate(params, init));
}
Object co_reflectionclass(CArrRef params, bool init /* = true */) {
  return Object((NEW(c_reflectionclass)())->dynCreate(params, init));
}
Object co_reflectionextension(CArrRef params, bool init /* = true */) {
  return Object((NEW(c_reflectionextension)())->dynCreate(params, init));
}
Object co_reflectionmethod(CArrRef params, bool init /* = true */) {
  return Object((NEW(c_reflectionmethod)())->dynCreate(params, init));
}
Object co_reflectionproperty(CArrRef params, bool init /* = true */) {
  return Object((NEW(c_reflectionproperty)())->dynCreate(params, init));
}
Object co_reflectionfunction(CArrRef params, bool init /* = true */) {
  return Object((NEW(c_reflectionfunction)())->dynCreate(params, init));
}
Object co_reflectionparameter(CArrRef params, bool init /* = true */) {
  return Object((NEW(c_reflectionparameter)())->dynCreate(params, init));
}
Variant pm_php$classes$reflection_php(bool incOnce /* = false */, LVariableTable* variables /* = NULL */, Globals *globals /* = get_globals() */) {
  PSEUDOMAIN_INJECTION_BUILTIN(run_init::classes/reflection.php, pm_php$classes$reflection_php);
  LVariableTable *gVariables __attribute__((__unused__)) = (LVariableTable *)g;
  return true;
} /* function */

///////////////////////////////////////////////////////////////////////////////
}
