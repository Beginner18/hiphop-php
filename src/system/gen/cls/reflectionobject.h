/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010 Facebook, Inc. (http://www.facebook.com)          |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/
// @generated by HipHop Compiler

#ifndef __GENERATED_cls_reflectionobject_h__
#define __GENERATED_cls_reflectionobject_h__

#include <cls/reflectionclass.h>

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

/* SRC: classes/reflection.php line 540 */
class c_reflectionobject : public c_reflectionclass {
  BEGIN_CLASS_MAP(ReflectionObject)
    PARENT_CLASS(ReflectionClass)
    PARENT_CLASS(Reflector)
  END_CLASS_MAP(ReflectionObject)
  DECLARE_CLASS_COMMON(reflectionobject, ReflectionObject)
  DECLARE_INVOKE_EX(reflectionobject, ReflectionObject, reflectionclass)

  // DECLARE_STATIC_PROP_OPS
  public:
#define OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_reflectionobject 1
#define OMIT_JUMP_TABLE_CLASS_STATIC_GET_reflectionobject 1
#define OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_reflectionobject 1
#define OMIT_JUMP_TABLE_CLASS_CONSTANT_reflectionobject 1

  // DECLARE_INSTANCE_PROP_OPS
  public:
#define OMIT_JUMP_TABLE_CLASS_GETARRAY_reflectionobject 1
#define OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionobject 1
  bool o_exists(CStrRef s, int64 hash, CStrRef context = null_string) const
{ return ObjectData::o_exists(s, hash, context); }
    virtual bool o_exists(CStrRef prop, int64 phash, const char *context, int64 hash) const;
#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionobject 1
  Variant o_get(CStrRef s, int64 hash, bool error = true, CStrRef context = null_string)
{ return ObjectData::o_get(s, hash, error, context); }
    virtual Variant o_get(CStrRef prop, int64 phash, bool error, const char *context, int64 hash);
#define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionobject 1
  Variant o_set(CStrRef s, int64 hash, CVarRef v, bool forInit = false, CStrRef context = null_string)
{ return ObjectData::o_set(s, hash, v, forInit, context); }
    virtual Variant o_set(CStrRef prop, int64 phash, CVarRef v, bool forInit, const char *context, int64 hash);
#define OMIT_JUMP_TABLE_CLASS_set_PRIVATE_reflectionobject 1
  Variant &o_lval(CStrRef s, int64 hash, CStrRef context = null_string)
{ return ObjectData::o_lval(s, hash, context); }
    virtual Variant &o_lval(CStrRef prop, int64 phash, const char *context, int64 hash);
#define OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_reflectionobject 1

  // DECLARE_INSTANCE_PUBLIC_PROP_OPS
  public:
#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionobject 1
#define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_reflectionobject 1
#define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_reflectionobject 1
#define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_reflectionobject 1

  // DECLARE_COMMON_INVOKE
  static Variant os_invoke(const char *c, MethodIndex methodIndex, 
                           const char *s, CArrRef ps, int64 h, bool f = true);
  virtual Variant o_invoke(MethodIndex methodIndex, const char *s,CArrRef ps, int64 h,
                           bool f = true);
  virtual Variant o_invoke_few_args(MethodIndex methodIndex, const char *s, int64 h,
                                    int count,
                                    INVOKE_FEW_ARGS_DECL_ARGS);

  public:
  DECLARE_INVOKES_FROM_EVAL
  void init();
  public: static Variant ti_export(const char* cls, Variant v_obj, CVarRef v_ret);
  public: static Variant t_export(CVarRef v_obj, CVarRef v_ret) { return ti_export("reflectionobject", v_obj, v_ret); }
};
extern struct ObjectStaticCallbacks cw_reflectionobject;

///////////////////////////////////////////////////////////////////////////////
}

#endif // __GENERATED_cls_reflectionobject_h__
