/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010- Facebook, Inc. (http://www.facebook.com)         |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/
// @generated by HipHop Compiler

#include <runtime/base/hphp_system.h>
#include <runtime/ext/ext.h>
#include <runtime/eval/eval.h>
#include <sys/literal_strings.h>

namespace hphp_impl_starter {}

using namespace std;

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////


// Class Invoke Tables
extern ObjectStaticCallbacks cw_ReflectionFunctionAbstract;
extern ObjectStaticCallbacks cw_PDOException;
extern ObjectStaticCallbacks cw_ReflectionObject;
extern ObjectStaticCallbacks cw_SplFileObject;
extern ObjectStaticCallbacks cw_UnexpectedValueException;
extern ObjectStaticCallbacks cw_stdClass;
extern ObjectStaticCallbacks cw_ReflectionException;
extern ObjectStaticCallbacks cw_OverflowException;
extern ObjectStaticCallbacks cw_SplFileInfo;
extern ObjectStaticCallbacks cw_ArrayIterator;
extern ObjectStaticCallbacks cw_IteratorIterator;
extern ObjectStaticCallbacks cw_AppendIterator;
extern ObjectStaticCallbacks cw_OutOfBoundsException;
extern ObjectStaticCallbacks cw_LogicException;
extern ObjectStaticCallbacks cw_RangeException;
extern ObjectStaticCallbacks cw_SplObjectStorage;
extern ObjectStaticCallbacks cw_InvalidArgumentException;
extern ObjectStaticCallbacks cw_ReflectionClass;
extern ObjectStaticCallbacks cw_UnderflowException;
extern ObjectStaticCallbacks cw_ReflectionExtension;
extern ObjectStaticCallbacks cw_OutOfRangeException;
extern ObjectStaticCallbacks cw_ReflectionMethod;
extern ObjectStaticCallbacks cw_BadMethodCallException;
extern ObjectStaticCallbacks cw_ReflectionProperty;
extern ObjectStaticCallbacks cw___PHP_Incomplete_Class;
extern ObjectStaticCallbacks cw_Exception;
extern ObjectStaticCallbacks cw_RuntimeException;
extern ObjectStaticCallbacks cw_ReflectionFunction;
extern ObjectStaticCallbacks cw_XhprofFrame;
extern ObjectStaticCallbacks cw_ErrorException;
extern ObjectStaticCallbacks cw_RecursiveDirectoryIterator;
extern ObjectStaticCallbacks cw_DirectoryIterator;
extern ObjectStaticCallbacks cw_DOMException;
extern ObjectStaticCallbacks cw_BadFunctionCallException;
extern ObjectStaticCallbacks cw_LengthException;
extern ObjectStaticCallbacks cw_DomainException;
extern ObjectStaticCallbacks cw_RecursiveIteratorIterator;
extern ObjectStaticCallbacks cw_MutableArrayIterator;
extern ObjectStaticCallbacks cw_Directory;
extern ObjectStaticCallbacks cw_FilterIterator;
extern ObjectStaticCallbacks cw_SoapFault;
extern ObjectStaticCallbacks cw_ReflectionParameter;
ObjectData *coo_DOMDocumentFragment() {
  return NEWOBJ(c_DOMDocumentFragment)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMDocumentFragment
Variant c_DOMDocumentFragment::os_getInit(CStrRef s) {
  return c_DOMNode::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMDocumentFragment
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMDocumentFragment
Variant c_DOMDocumentFragment::os_get(CStrRef s) {
  return c_DOMNode::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMDocumentFragment
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMDocumentFragment
Variant &c_DOMDocumentFragment::os_lval(CStrRef s) {
  return c_DOMNode::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMDocumentFragment
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DOMDocumentFragment
Variant * c_DOMDocumentFragment::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DOMDocumentFragment
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMDocumentFragment
Variant * c_DOMDocumentFragment::o_realPropPublic(CStrRef s, int flags) const {
  return c_DOMNode::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMDocumentFragment
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMDocumentFragment
Variant * c_DOMDocumentFragment::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMDocumentFragment
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMDocumentFragment
Variant c_DOMDocumentFragment::os_constant(const char *s) {
  return c_DOMNode::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMDocumentFragment
IMPLEMENT_CLASS(DOMDocumentFragment)
ObjectData *c_DOMDocumentFragment::cloneImpl() {
  ObjectData *obj = coo_DOMDocumentFragment();
  c_DOMDocumentFragment::cloneSet(obj);
  return obj;
}
void c_DOMDocumentFragment::cloneSet(ObjectData *cl) {
  c_DOMDocumentFragment *clone = static_cast<c_DOMDocumentFragment*>(cl);
  c_DOMNode::cloneSet(clone);
}
CallInfo c_DOMDocumentFragment::ci___destruct((void*)&c_DOMDocumentFragment::i___destruct, (void*)&c_DOMDocumentFragment::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMDocumentFragment::ci___construct((void*)&c_DOMDocumentFragment::i___construct, (void*)&c_DOMDocumentFragment::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMDocumentFragment::ci_appendxml((void*)&c_DOMDocumentFragment::i_appendxml, (void*)&c_DOMDocumentFragment::ifa_appendxml, 1, 4, 0x0000000000000000LL);
Variant c_DOMDocumentFragment::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_DOMDocumentFragment);
  }
  c_DOMDocumentFragment *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocumentFragment*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMDocumentFragment::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_DOMDocumentFragment);
  }
  c_DOMDocumentFragment *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocumentFragment*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DOMDocumentFragment::i_appendxml(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_appendxml, coo_DOMDocumentFragment);
  }
  c_DOMDocumentFragment *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocumentFragment*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("appendxml", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_appendxml(arg0));
  }
}
Variant c_DOMDocumentFragment::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_DOMDocumentFragment);
  }
  c_DOMDocumentFragment *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocumentFragment*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMDocumentFragment::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_DOMDocumentFragment);
  }
  c_DOMDocumentFragment *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocumentFragment*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DOMDocumentFragment::ifa_appendxml(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_appendxml, coo_DOMDocumentFragment);
  }
  c_DOMDocumentFragment *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocumentFragment*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("appendxml", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_appendxml(arg0));
}
const MethodCallInfoTable c_DOMDocumentFragment::s_call_info_table[] = {
  { 0x1E44C8E8C1920931LL, 1, 9, "appendXML", &c_DOMDocumentFragment::ci_appendxml },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_DOMDocumentFragment::ci___destruct },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_DOMDocumentFragment::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_DOMDocumentFragment::s_call_info_index[] = {
  7,
  -1,0,-1,1,-1,-1,-1,2,

};
c_DOMDocumentFragment *c_DOMDocumentFragment::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_DOMDocumentFragment::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_DOMDocumentFragment::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DOMDocumentFragment::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_DOMDocumentFragment = {
  c_DOMDocumentFragment::os_getInit,
  c_DOMDocumentFragment::os_get,
  c_DOMDocumentFragment::os_lval,
  c_DOMDocumentFragment::os_invoke,
  c_DOMDocumentFragment::os_constant,
  (ObjectData*(*)(ObjectData*))coo_DOMDocumentFragment,
  c_DOMDocumentFragment::s_call_info_table,c_DOMDocumentFragment::s_call_info_index,
  "DOMDocumentFragment",
  &cw_DOMNode
};
ObjectData *coo_DOMText() {
  return NEWOBJ(c_DOMText)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMText
Variant c_DOMText::os_getInit(CStrRef s) {
  return c_DOMCharacterData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMText
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMText
Variant c_DOMText::os_get(CStrRef s) {
  return c_DOMCharacterData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMText
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMText
Variant &c_DOMText::os_lval(CStrRef s) {
  return c_DOMCharacterData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMText
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DOMText
Variant * c_DOMText::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DOMText
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMText
Variant * c_DOMText::o_realPropPublic(CStrRef s, int flags) const {
  return c_DOMCharacterData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMText
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMText
Variant * c_DOMText::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMText
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMText
Variant c_DOMText::os_constant(const char *s) {
  return c_DOMCharacterData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMText
IMPLEMENT_CLASS(DOMText)
ObjectData *c_DOMText::cloneImpl() {
  ObjectData *obj = coo_DOMText();
  c_DOMText::cloneSet(obj);
  return obj;
}
void c_DOMText::cloneSet(ObjectData *cl) {
  c_DOMText *clone = static_cast<c_DOMText*>(cl);
  c_DOMCharacterData::cloneSet(clone);
}
CallInfo c_DOMText::ci___destruct((void*)&c_DOMText::i___destruct, (void*)&c_DOMText::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMText::ci___set((void*)&c_DOMText::i___set, (void*)&c_DOMText::ifa___set, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMText::ci___construct((void*)&c_DOMText::i___construct, (void*)&c_DOMText::ifa___construct, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMText::ci___get((void*)&c_DOMText::i___get, (void*)&c_DOMText::ifa___get, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMText::ci_iswhitespaceinelementcontent((void*)&c_DOMText::i_iswhitespaceinelementcontent, (void*)&c_DOMText::ifa_iswhitespaceinelementcontent, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMText::ci_splittext((void*)&c_DOMText::i_splittext, (void*)&c_DOMText::ifa_splittext, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMText::ci___isset((void*)&c_DOMText::i___isset, (void*)&c_DOMText::ifa___isset, 1, 4, 0x0000000000000000LL);
Variant c_DOMText::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_DOMText);
  }
  c_DOMText *self ATTRIBUTE_UNUSED (static_cast<c_DOMText*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMText::i___set(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___set, coo_DOMText);
  }
  c_DOMText *self ATTRIBUTE_UNUSED (static_cast<c_DOMText*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___set(arg0, arg1));
  }
}
Variant c_DOMText::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_DOMText);
  }
  c_DOMText *self ATTRIBUTE_UNUSED (static_cast<c_DOMText*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("__construct", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t___construct(), null);
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___construct(arg0), null);
  }
}
Variant c_DOMText::i___get(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___get, coo_DOMText);
  }
  c_DOMText *self ATTRIBUTE_UNUSED (static_cast<c_DOMText*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___get(arg0));
  }
}
Variant c_DOMText::i_iswhitespaceinelementcontent(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_iswhitespaceinelementcontent, coo_DOMText);
  }
  c_DOMText *self ATTRIBUTE_UNUSED (static_cast<c_DOMText*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("iswhitespaceinelementcontent", 0, 1);
  return (self->t_iswhitespaceinelementcontent());
}
Variant c_DOMText::i_splittext(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_splittext, coo_DOMText);
  }
  c_DOMText *self ATTRIBUTE_UNUSED (static_cast<c_DOMText*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("splittext", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_splittext(arg0));
  }
}
Variant c_DOMText::i___isset(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___isset, coo_DOMText);
  }
  c_DOMText *self ATTRIBUTE_UNUSED (static_cast<c_DOMText*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___isset(arg0));
  }
}
Variant c_DOMText::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_DOMText);
  }
  c_DOMText *self ATTRIBUTE_UNUSED (static_cast<c_DOMText*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMText::ifa___set(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___set, coo_DOMText);
  }
  c_DOMText *self ATTRIBUTE_UNUSED (static_cast<c_DOMText*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t___set(arg0, arg1));
}
Variant c_DOMText::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_DOMText);
  }
  c_DOMText *self ATTRIBUTE_UNUSED (static_cast<c_DOMText*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("__construct", 1, 1);
  if (count <= 0) return (self->t___construct(), null);
  CVarRef arg0(a0);
  return (self->t___construct(arg0), null);
}
Variant c_DOMText::ifa___get(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___get, coo_DOMText);
  }
  c_DOMText *self ATTRIBUTE_UNUSED (static_cast<c_DOMText*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___get(arg0));
}
Variant c_DOMText::ifa_iswhitespaceinelementcontent(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_iswhitespaceinelementcontent, coo_DOMText);
  }
  c_DOMText *self ATTRIBUTE_UNUSED (static_cast<c_DOMText*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("iswhitespaceinelementcontent", 0, 1);
  return (self->t_iswhitespaceinelementcontent());
}
Variant c_DOMText::ifa_splittext(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_splittext, coo_DOMText);
  }
  c_DOMText *self ATTRIBUTE_UNUSED (static_cast<c_DOMText*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("splittext", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_splittext(arg0));
}
Variant c_DOMText::ifa___isset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___isset, coo_DOMText);
  }
  c_DOMText *self ATTRIBUTE_UNUSED (static_cast<c_DOMText*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___isset(arg0));
}
const MethodCallInfoTable c_DOMText::s_call_info_table[] = {
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_DOMText::ci___destruct },
  { 0x52F3DAD783340395LL, 1, 5, "__set", &c_DOMText::ci___set },
  { 0x714D38308D8212B7LL, 1, 9, "splitText", &c_DOMText::ci_splittext },
  { 0x28FBAB4F0F6C02DDLL, 1, 28, "isWhitespaceInElementContent", &c_DOMText::ci_iswhitespaceinelementcontent },
  { 0x4FE08FDDAE2178EELL, 1, 7, "__isset", &c_DOMText::ci___isset },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_DOMText::ci___construct },
  { 0x26B6E00C74FA338FLL, 0, 5, "__get", &c_DOMText::ci___get },
  { 0, 1, 0, 0 }
};
const int c_DOMText::s_call_info_index[] = {
  15,
  -1,-1,-1,0,-1,1,-1,2,
  -1,-1,-1,-1,-1,3,4,5,

};
c_DOMText *c_DOMText::create(String a0) {
  CountableHelper h(this);
  init();
  t___construct(a0);
  return this;
}
void c_DOMText::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) throw_toomany_arguments("__construct", 1, 2);
  do {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) {
      (t___construct());
      break;
    }
    CVarRef arg0((ad->getValue(pos)));
    (t___construct(arg0));
  } while (false);
}
void c_DOMText::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DOMText::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_DOMText = {
  c_DOMText::os_getInit,
  c_DOMText::os_get,
  c_DOMText::os_lval,
  c_DOMText::os_invoke,
  c_DOMText::os_constant,
  (ObjectData*(*)(ObjectData*))coo_DOMText,
  c_DOMText::s_call_info_table,c_DOMText::s_call_info_index,
  "DOMText",
  &cw_DOMCharacterData
};
ObjectData *coo_DebuggerClient() {
  return NEWOBJ(c_DebuggerClient)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DebuggerClient
Variant c_DebuggerClient::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DebuggerClient
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DebuggerClient
Variant c_DebuggerClient::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DebuggerClient
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DebuggerClient
Variant &c_DebuggerClient::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DebuggerClient
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DebuggerClient
Variant * c_DebuggerClient::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DebuggerClient
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DebuggerClient
Variant * c_DebuggerClient::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DebuggerClient
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DebuggerClient
Variant * c_DebuggerClient::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DebuggerClient
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DebuggerClient
Variant c_DebuggerClient::os_constant(const char *s) {
  int64 hash = hash_string(s);
  switch (hash & 31) {
    case 2:
      HASH_RETURN(0x2038737F45604DE2LL, q_DebuggerClient_AUTO_COMPLETE_VARIABLES, "AUTO_COMPLETE_VARIABLES");
      break;
    case 7:
      HASH_RETURN(0x1B352E31B034F827LL, q_DebuggerClient_AUTO_COMPLETE_FILENAMES, "AUTO_COMPLETE_FILENAMES");
      HASH_RETURN(0x0F17BB5BEC004CA7LL, q_DebuggerClient_AUTO_COMPLETE_CLASSES, "AUTO_COMPLETE_CLASSES");
      break;
    case 9:
      HASH_RETURN(0x6A811D407DC24A29LL, q_DebuggerClient_AUTO_COMPLETE_CLASS_CONSTANTS, "AUTO_COMPLETE_CLASS_CONSTANTS");
      break;
    case 11:
      HASH_RETURN(0x1858E5511222BC8BLL, q_DebuggerClient_AUTO_COMPLETE_CLASS_PROPERTIES, "AUTO_COMPLETE_CLASS_PROPERTIES");
      HASH_RETURN(0x1DE12226E1E87B6BLL, q_DebuggerClient_AUTO_COMPLETE_CODE, "AUTO_COMPLETE_CODE");
      break;
    case 15:
      HASH_RETURN(0x2C29DCF63AAC70EFLL, q_DebuggerClient_AUTO_COMPLETE_CLASS_METHODS, "AUTO_COMPLETE_CLASS_METHODS");
      HASH_RETURN(0x76A6B174D3E2108FLL, q_DebuggerClient_AUTO_COMPLETE_KEYWORDS, "AUTO_COMPLETE_KEYWORDS");
      break;
    case 19:
      HASH_RETURN(0x78221A7B002235D3LL, q_DebuggerClient_AUTO_COMPLETE_CONSTANTS, "AUTO_COMPLETE_CONSTANTS");
      break;
    case 31:
      HASH_RETURN(0x7CAE318E6EF6449FLL, q_DebuggerClient_AUTO_COMPLETE_FUNCTIONS, "AUTO_COMPLETE_FUNCTIONS");
      break;
    default:
      break;
  }
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DebuggerClient
IMPLEMENT_CLASS(DebuggerClient)
ObjectData *c_DebuggerClient::cloneImpl() {
  ObjectData *obj = coo_DebuggerClient();
  c_DebuggerClient::cloneSet(obj);
  return obj;
}
void c_DebuggerClient::cloneSet(ObjectData *cl) {
  c_DebuggerClient *clone = static_cast<c_DebuggerClient*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_DebuggerClient::ci_argcount((void*)&c_DebuggerClient::i_argcount, (void*)&c_DebuggerClient::ifa_argcount, 0, 4, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_arg((void*)&c_DebuggerClient::i_arg, (void*)&c_DebuggerClient::ifa_arg, 2, 4, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_helpcmds((void*)&c_DebuggerClient::i_helpcmds, (void*)&c_DebuggerClient::ifa_helpcmds, 2, 5, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_ask((void*)&c_DebuggerClient::i_ask, (void*)&c_DebuggerClient::ifa_ask, 1, 5, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_error((void*)&c_DebuggerClient::i_error, (void*)&c_DebuggerClient::ifa_error, 1, 5, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_xend((void*)&c_DebuggerClient::i_xend, (void*)&c_DebuggerClient::ifa_xend, 1, 4, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci___destruct((void*)&c_DebuggerClient::i___destruct, (void*)&c_DebuggerClient::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_helptitle((void*)&c_DebuggerClient::i_helptitle, (void*)&c_DebuggerClient::ifa_helptitle, 1, 4, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_getcommand((void*)&c_DebuggerClient::i_getcommand, (void*)&c_DebuggerClient::ifa_getcommand, 0, 4, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_tutorial((void*)&c_DebuggerClient::i_tutorial, (void*)&c_DebuggerClient::ifa_tutorial, 1, 4, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci___construct((void*)&c_DebuggerClient::i___construct, (void*)&c_DebuggerClient::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_getcode((void*)&c_DebuggerClient::i_getcode, (void*)&c_DebuggerClient::ifa_getcode, 0, 4, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_argvalue((void*)&c_DebuggerClient::i_argvalue, (void*)&c_DebuggerClient::ifa_argvalue, 1, 4, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_output((void*)&c_DebuggerClient::i_output, (void*)&c_DebuggerClient::ifa_output, 1, 5, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_getstacktrace((void*)&c_DebuggerClient::i_getstacktrace, (void*)&c_DebuggerClient::ifa_getstacktrace, 0, 4, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_info((void*)&c_DebuggerClient::i_info, (void*)&c_DebuggerClient::ifa_info, 1, 5, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_printframe((void*)&c_DebuggerClient::i_printframe, (void*)&c_DebuggerClient::ifa_printframe, 1, 4, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_print((void*)&c_DebuggerClient::i_print, (void*)&c_DebuggerClient::ifa_print, 1, 5, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_code((void*)&c_DebuggerClient::i_code, (void*)&c_DebuggerClient::ifa_code, 4, 4, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_helpsection((void*)&c_DebuggerClient::i_helpsection, (void*)&c_DebuggerClient::ifa_helpsection, 1, 4, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_quit((void*)&c_DebuggerClient::i_quit, (void*)&c_DebuggerClient::ifa_quit, 0, 4, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_helpbody((void*)&c_DebuggerClient::i_helpbody, (void*)&c_DebuggerClient::ifa_helpbody, 1, 4, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_getframe((void*)&c_DebuggerClient::i_getframe, (void*)&c_DebuggerClient::ifa_getframe, 0, 4, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_help((void*)&c_DebuggerClient::i_help, (void*)&c_DebuggerClient::ifa_help, 1, 5, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_args((void*)&c_DebuggerClient::i_args, (void*)&c_DebuggerClient::ifa_args, 0, 4, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_addcompletion((void*)&c_DebuggerClient::i_addcompletion, (void*)&c_DebuggerClient::ifa_addcompletion, 1, 4, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_argrest((void*)&c_DebuggerClient::i_argrest, (void*)&c_DebuggerClient::ifa_argrest, 1, 4, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_getcurrentlocation((void*)&c_DebuggerClient::i_getcurrentlocation, (void*)&c_DebuggerClient::ifa_getcurrentlocation, 0, 4, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_send((void*)&c_DebuggerClient::i_send, (void*)&c_DebuggerClient::ifa_send, 1, 4, 0x0000000000000000LL);
CallInfo c_DebuggerClient::ci_wrap((void*)&c_DebuggerClient::i_wrap, (void*)&c_DebuggerClient::ifa_wrap, 1, 4, 0x0000000000000000LL);
Variant c_DebuggerClient::i_argcount(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_argcount, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("argcount", 0, 1);
  return (self->t_argcount());
}
Variant c_DebuggerClient::i_arg(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_arg, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("arg", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_arg(arg0, arg1));
  }
}
Variant c_DebuggerClient::i_helpcmds(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_helpcmds, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2)) return throw_missing_arguments("helpcmds", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    const Array &p(count > 2 ? params.slice(2, count - 2, false) : Array());
    return (self->t_helpcmds(count, arg0, arg1, p), null);
  }
}
Variant c_DebuggerClient::i_ask(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_ask, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("ask", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (self->t_ask(count, arg0, p));
  }
}
Variant c_DebuggerClient::i_error(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_error, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("error", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (self->t_error(count, arg0, p), null);
  }
}
Variant c_DebuggerClient::i_xend(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_xend, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xend", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_xend(arg0));
  }
}
Variant c_DebuggerClient::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DebuggerClient::i_helptitle(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_helptitle, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("helptitle", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_helptitle(arg0), null);
  }
}
Variant c_DebuggerClient::i_getcommand(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getcommand, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getcommand", 0, 1);
  return (self->t_getcommand());
}
Variant c_DebuggerClient::i_tutorial(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_tutorial, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("tutorial", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_tutorial(arg0), null);
  }
}
Variant c_DebuggerClient::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DebuggerClient::i_getcode(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getcode, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getcode", 0, 1);
  return (self->t_getcode());
}
Variant c_DebuggerClient::i_argvalue(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_argvalue, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("argvalue", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_argvalue(arg0));
  }
}
Variant c_DebuggerClient::i_output(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_output, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("output", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (self->t_output(count, arg0, p), null);
  }
}
Variant c_DebuggerClient::i_getstacktrace(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getstacktrace, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getstacktrace", 0, 1);
  return (self->t_getstacktrace());
}
Variant c_DebuggerClient::i_info(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_info, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("info", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (self->t_info(count, arg0, p), null);
  }
}
Variant c_DebuggerClient::i_printframe(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_printframe, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("printframe", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_printframe(arg0), null);
  }
}
Variant c_DebuggerClient::i_print(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_print, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("print", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (self->t_print(count, arg0, p), null);
  }
}
Variant c_DebuggerClient::i_code(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_code, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("code", count, 1, 4, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_code(arg0), null);
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_code(arg0, arg1), null);
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_code(arg0, arg1, arg2), null);
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_code(arg0, arg1, arg2, arg3), null);
  }
}
Variant c_DebuggerClient::i_helpsection(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_helpsection, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("helpsection", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_helpsection(arg0), null);
  }
}
Variant c_DebuggerClient::i_quit(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_quit, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("quit", 0, 1);
  return (self->t_quit(), null);
}
Variant c_DebuggerClient::i_helpbody(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_helpbody, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("helpbody", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_helpbody(arg0), null);
  }
}
Variant c_DebuggerClient::i_getframe(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getframe, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getframe", 0, 1);
  return (self->t_getframe());
}
Variant c_DebuggerClient::i_help(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_help, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("help", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (self->t_help(count, arg0, p), null);
  }
}
Variant c_DebuggerClient::i_args(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_args, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("args", 0, 1);
  return (self->t_args());
}
Variant c_DebuggerClient::i_addcompletion(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_addcompletion, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("addcompletion", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_addcompletion(arg0), null);
  }
}
Variant c_DebuggerClient::i_argrest(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_argrest, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("argrest", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_argrest(arg0));
  }
}
Variant c_DebuggerClient::i_getcurrentlocation(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getcurrentlocation, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getcurrentlocation", 0, 1);
  return (self->t_getcurrentlocation());
}
Variant c_DebuggerClient::i_send(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_send, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("send", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_send(arg0));
  }
}
Variant c_DebuggerClient::i_wrap(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_wrap, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("wrap", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_wrap(arg0));
  }
}
Variant c_DebuggerClient::ifa_argcount(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_argcount, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("argcount", 0, 1);
  return (self->t_argcount());
}
Variant c_DebuggerClient::ifa_arg(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_arg, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("arg", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_arg(arg0, arg1));
}
Variant c_DebuggerClient::ifa_helpcmds(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_helpcmds, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count < 2)) return throw_missing_arguments("helpcmds", count+1, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  Array p;
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (self->t_helpcmds(count, arg0, arg1, p), null);
}
Variant c_DebuggerClient::ifa_ask(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_ask, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count < 1)) return throw_missing_arguments("ask", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (self->t_ask(count, arg0, p));
}
Variant c_DebuggerClient::ifa_error(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_error, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count < 1)) return throw_missing_arguments("error", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (self->t_error(count, arg0, p), null);
}
Variant c_DebuggerClient::ifa_xend(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_xend, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xend", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_xend(arg0));
}
Variant c_DebuggerClient::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DebuggerClient::ifa_helptitle(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_helptitle, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("helptitle", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_helptitle(arg0), null);
}
Variant c_DebuggerClient::ifa_getcommand(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getcommand, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getcommand", 0, 1);
  return (self->t_getcommand());
}
Variant c_DebuggerClient::ifa_tutorial(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_tutorial, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("tutorial", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_tutorial(arg0), null);
}
Variant c_DebuggerClient::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DebuggerClient::ifa_getcode(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getcode, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getcode", 0, 1);
  return (self->t_getcode());
}
Variant c_DebuggerClient::ifa_argvalue(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_argvalue, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("argvalue", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_argvalue(arg0));
}
Variant c_DebuggerClient::ifa_output(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_output, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count < 1)) return throw_missing_arguments("output", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (self->t_output(count, arg0, p), null);
}
Variant c_DebuggerClient::ifa_getstacktrace(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getstacktrace, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getstacktrace", 0, 1);
  return (self->t_getstacktrace());
}
Variant c_DebuggerClient::ifa_info(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_info, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count < 1)) return throw_missing_arguments("info", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (self->t_info(count, arg0, p), null);
}
Variant c_DebuggerClient::ifa_printframe(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_printframe, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("printframe", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_printframe(arg0), null);
}
Variant c_DebuggerClient::ifa_print(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_print, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count < 1)) return throw_missing_arguments("print", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (self->t_print(count, arg0, p), null);
}
Variant c_DebuggerClient::ifa_code(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_code, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("code", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_code(arg0), null);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_code(arg0, arg1), null);
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_code(arg0, arg1, arg2), null);
  CVarRef arg3(a3);
  return (self->t_code(arg0, arg1, arg2, arg3), null);
}
Variant c_DebuggerClient::ifa_helpsection(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_helpsection, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("helpsection", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_helpsection(arg0), null);
}
Variant c_DebuggerClient::ifa_quit(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_quit, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("quit", 0, 1);
  return (self->t_quit(), null);
}
Variant c_DebuggerClient::ifa_helpbody(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_helpbody, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("helpbody", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_helpbody(arg0), null);
}
Variant c_DebuggerClient::ifa_getframe(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getframe, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getframe", 0, 1);
  return (self->t_getframe());
}
Variant c_DebuggerClient::ifa_help(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_help, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count < 1)) return throw_missing_arguments("help", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (self->t_help(count, arg0, p), null);
}
Variant c_DebuggerClient::ifa_args(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_args, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("args", 0, 1);
  return (self->t_args());
}
Variant c_DebuggerClient::ifa_addcompletion(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_addcompletion, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("addcompletion", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_addcompletion(arg0), null);
}
Variant c_DebuggerClient::ifa_argrest(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_argrest, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("argrest", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_argrest(arg0));
}
Variant c_DebuggerClient::ifa_getcurrentlocation(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getcurrentlocation, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getcurrentlocation", 0, 1);
  return (self->t_getcurrentlocation());
}
Variant c_DebuggerClient::ifa_send(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_send, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("send", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_send(arg0));
}
Variant c_DebuggerClient::ifa_wrap(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_wrap, coo_DebuggerClient);
  }
  c_DebuggerClient *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerClient*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("wrap", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_wrap(arg0));
}
const MethodCallInfoTable c_DebuggerClient::s_call_info_table[] = {
  { 0x07768FF90B181780LL, 1, 13, "addCompletion", &c_DebuggerClient::ci_addcompletion },
  { 0x20F2EA2BBFF5AA42LL, 1, 3, "ask", &c_DebuggerClient::ci_ask },
  { 0x0E836DA3377C4984LL, 1, 8, "getFrame", &c_DebuggerClient::ci_getframe },
  { 0x1D033DFD1DCAEA85LL, 1, 10, "printFrame", &c_DebuggerClient::ci_printframe },
  { 0x3E0170A7802E3888LL, 1, 4, "send", &c_DebuggerClient::ci_send },
  { 0x7A24AFD8ADE43B8ELL, 1, 4, "args", &c_DebuggerClient::ci_args },
  { 0x5C108B351DC3D04FLL, 1, 7, "getCode", &c_DebuggerClient::ci_getcode },
  { 0x6B3BF595A55159CFLL, 0, 8, "helpBody", &c_DebuggerClient::ci_helpbody },
  { 0x687DF38195F5B951LL, 1, 8, "helpCmds", &c_DebuggerClient::ci_helpcmds },
  { 0x1015EB3F52B098D1LL, 0, 5, "print", &c_DebuggerClient::ci_print },
  { 0x182AC39D2C493A97LL, 1, 10, "getCommand", &c_DebuggerClient::ci_getcommand },
  { 0x67A7ABCB74D168D7LL, 0, 7, "argRest", &c_DebuggerClient::ci_argrest },
  { 0x016509DCA13DB6DFLL, 1, 5, "error", &c_DebuggerClient::ci_error },
  { 0x0D31D0AC229C615FLL, 0, 11, "__construct", &c_DebuggerClient::ci___construct },
  { 0x0F2EF58F157D479FLL, 0, 4, "info", &c_DebuggerClient::ci_info },
  { 0x5F8B4ACA3731C423LL, 1, 9, "helpTitle", &c_DebuggerClient::ci_helptitle },
  { 0x2191643700554726LL, 1, 18, "getCurrentLocation", &c_DebuggerClient::ci_getcurrentlocation },
  { 0x620C55BAC770E928LL, 1, 8, "argValue", &c_DebuggerClient::ci_argvalue },
  { 0x6CB0A07E0516B6ACLL, 1, 8, "tutorial", &c_DebuggerClient::ci_tutorial },
  { 0x5412C8462A696DEFLL, 1, 8, "argCount", &c_DebuggerClient::ci_argcount },
  { 0x5CE665973E2B4C6FLL, 0, 11, "helpSection", &c_DebuggerClient::ci_helpsection },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_DebuggerClient::ci___destruct },
  { 0x64C0B4BCDA99F6F4LL, 1, 3, "arg", &c_DebuggerClient::ci_arg },
  { 0x665AFB5CDFD23534LL, 0, 4, "help", &c_DebuggerClient::ci_help },
  { 0x04A108469024B7B6LL, 1, 4, "xend", &c_DebuggerClient::ci_xend },
  { 0x7C41EEC813FC6FB7LL, 1, 13, "getStackTrace", &c_DebuggerClient::ci_getstacktrace },
  { 0x6C5E35754AA2B277LL, 0, 4, "wrap", &c_DebuggerClient::ci_wrap },
  { 0x58C72230857ACDB9LL, 1, 4, "code", &c_DebuggerClient::ci_code },
  { 0x0732FA520631017ALL, 1, 4, "quit", &c_DebuggerClient::ci_quit },
  { 0x07B89E83B77C677FLL, 1, 6, "output", &c_DebuggerClient::ci_output },
  { 0, 1, 0, 0 }
};
const int c_DebuggerClient::s_call_info_index[] = {
  63,
  0,-1,1,-1,2,3,-1,-1,
  4,-1,-1,-1,-1,-1,5,6,
  -1,8,-1,-1,-1,-1,-1,10,
  -1,-1,-1,-1,-1,-1,-1,12,
  -1,-1,-1,15,-1,-1,16,-1,
  17,-1,-1,-1,18,-1,-1,19,
  -1,-1,-1,21,22,-1,24,25,
  -1,27,28,-1,-1,-1,-1,29,

};
c_DebuggerClient *c_DebuggerClient::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_DebuggerClient::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_DebuggerClient::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DebuggerClient::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_DebuggerClient = {
  c_DebuggerClient::os_getInit,
  c_DebuggerClient::os_get,
  c_DebuggerClient::os_lval,
  c_DebuggerClient::os_invoke,
  c_DebuggerClient::os_constant,
  (ObjectData*(*)(ObjectData*))coo_DebuggerClient,
  c_DebuggerClient::s_call_info_table,c_DebuggerClient::s_call_info_index,
  "DebuggerClient",
  0
};
ObjectData *coo_EncodingDetector() {
  return NEWOBJ(c_EncodingDetector)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_EncodingDetector
Variant c_EncodingDetector::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_EncodingDetector
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_EncodingDetector
Variant c_EncodingDetector::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_EncodingDetector
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_EncodingDetector
Variant &c_EncodingDetector::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_EncodingDetector
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_EncodingDetector
Variant * c_EncodingDetector::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_EncodingDetector
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_EncodingDetector
Variant * c_EncodingDetector::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_EncodingDetector
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_EncodingDetector
Variant * c_EncodingDetector::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_EncodingDetector
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_EncodingDetector
Variant c_EncodingDetector::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_EncodingDetector
IMPLEMENT_CLASS(EncodingDetector)
ObjectData *c_EncodingDetector::cloneImpl() {
  ObjectData *obj = coo_EncodingDetector();
  c_EncodingDetector::cloneSet(obj);
  return obj;
}
void c_EncodingDetector::cloneSet(ObjectData *cl) {
  c_EncodingDetector *clone = static_cast<c_EncodingDetector*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_EncodingDetector::ci_settext((void*)&c_EncodingDetector::i_settext, (void*)&c_EncodingDetector::ifa_settext, 1, 4, 0x0000000000000000LL);
CallInfo c_EncodingDetector::ci___destruct((void*)&c_EncodingDetector::i___destruct, (void*)&c_EncodingDetector::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_EncodingDetector::ci___construct((void*)&c_EncodingDetector::i___construct, (void*)&c_EncodingDetector::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_EncodingDetector::ci_setdeclaredencoding((void*)&c_EncodingDetector::i_setdeclaredencoding, (void*)&c_EncodingDetector::ifa_setdeclaredencoding, 1, 4, 0x0000000000000000LL);
CallInfo c_EncodingDetector::ci_detect((void*)&c_EncodingDetector::i_detect, (void*)&c_EncodingDetector::ifa_detect, 0, 4, 0x0000000000000000LL);
CallInfo c_EncodingDetector::ci_detectall((void*)&c_EncodingDetector::i_detectall, (void*)&c_EncodingDetector::ifa_detectall, 0, 4, 0x0000000000000000LL);
Variant c_EncodingDetector::i_settext(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_settext, coo_EncodingDetector);
  }
  c_EncodingDetector *self ATTRIBUTE_UNUSED (static_cast<c_EncodingDetector*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("settext", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_settext(arg0), null);
  }
}
Variant c_EncodingDetector::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_EncodingDetector);
  }
  c_EncodingDetector *self ATTRIBUTE_UNUSED (static_cast<c_EncodingDetector*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_EncodingDetector::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_EncodingDetector);
  }
  c_EncodingDetector *self ATTRIBUTE_UNUSED (static_cast<c_EncodingDetector*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_EncodingDetector::i_setdeclaredencoding(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setdeclaredencoding, coo_EncodingDetector);
  }
  c_EncodingDetector *self ATTRIBUTE_UNUSED (static_cast<c_EncodingDetector*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setdeclaredencoding", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_setdeclaredencoding(arg0), null);
  }
}
Variant c_EncodingDetector::i_detect(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_detect, coo_EncodingDetector);
  }
  c_EncodingDetector *self ATTRIBUTE_UNUSED (static_cast<c_EncodingDetector*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("detect", 0, 1);
  return (self->t_detect());
}
Variant c_EncodingDetector::i_detectall(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_detectall, coo_EncodingDetector);
  }
  c_EncodingDetector *self ATTRIBUTE_UNUSED (static_cast<c_EncodingDetector*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("detectall", 0, 1);
  return (self->t_detectall());
}
Variant c_EncodingDetector::ifa_settext(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_settext, coo_EncodingDetector);
  }
  c_EncodingDetector *self ATTRIBUTE_UNUSED (static_cast<c_EncodingDetector*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("settext", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_settext(arg0), null);
}
Variant c_EncodingDetector::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_EncodingDetector);
  }
  c_EncodingDetector *self ATTRIBUTE_UNUSED (static_cast<c_EncodingDetector*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_EncodingDetector::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_EncodingDetector);
  }
  c_EncodingDetector *self ATTRIBUTE_UNUSED (static_cast<c_EncodingDetector*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_EncodingDetector::ifa_setdeclaredencoding(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setdeclaredencoding, coo_EncodingDetector);
  }
  c_EncodingDetector *self ATTRIBUTE_UNUSED (static_cast<c_EncodingDetector*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setdeclaredencoding", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_setdeclaredencoding(arg0), null);
}
Variant c_EncodingDetector::ifa_detect(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_detect, coo_EncodingDetector);
  }
  c_EncodingDetector *self ATTRIBUTE_UNUSED (static_cast<c_EncodingDetector*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("detect", 0, 1);
  return (self->t_detect());
}
Variant c_EncodingDetector::ifa_detectall(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_detectall, coo_EncodingDetector);
  }
  c_EncodingDetector *self ATTRIBUTE_UNUSED (static_cast<c_EncodingDetector*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("detectall", 0, 1);
  return (self->t_detectall());
}
const MethodCallInfoTable c_EncodingDetector::s_call_info_table[] = {
  { 0x49159EB2BC385B00LL, 1, 6, "detect", &c_EncodingDetector::ci_detect },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_EncodingDetector::ci___destruct },
  { 0x460377650F751823LL, 0, 9, "detectAll", &c_EncodingDetector::ci_detectall },
  { 0x5C75DB446C2096A6LL, 1, 7, "setText", &c_EncodingDetector::ci_settext },
  { 0x25ED4E6932322946LL, 0, 19, "setDeclaredEncoding", &c_EncodingDetector::ci_setdeclaredencoding },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_EncodingDetector::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_EncodingDetector::s_call_info_index[] = {
  15,
  0,-1,-1,1,-1,-1,3,-1,
  -1,-1,-1,-1,-1,-1,-1,5,

};
c_EncodingDetector *c_EncodingDetector::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_EncodingDetector::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_EncodingDetector::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_EncodingDetector::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_EncodingDetector = {
  c_EncodingDetector::os_getInit,
  c_EncodingDetector::os_get,
  c_EncodingDetector::os_lval,
  c_EncodingDetector::os_invoke,
  c_EncodingDetector::os_constant,
  (ObjectData*(*)(ObjectData*))coo_EncodingDetector,
  c_EncodingDetector::s_call_info_table,c_EncodingDetector::s_call_info_index,
  "EncodingDetector",
  0
};
ObjectData *coo_DOMCDATASection() {
  return NEWOBJ(c_DOMCDATASection)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMCDATASection
Variant c_DOMCDATASection::os_getInit(CStrRef s) {
  return c_DOMText::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMCDATASection
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMCDATASection
Variant c_DOMCDATASection::os_get(CStrRef s) {
  return c_DOMText::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMCDATASection
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMCDATASection
Variant &c_DOMCDATASection::os_lval(CStrRef s) {
  return c_DOMText::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMCDATASection
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DOMCDATASection
Variant * c_DOMCDATASection::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DOMCDATASection
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMCDATASection
Variant * c_DOMCDATASection::o_realPropPublic(CStrRef s, int flags) const {
  return c_DOMText::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMCDATASection
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMCDATASection
Variant * c_DOMCDATASection::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMCDATASection
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMCDATASection
Variant c_DOMCDATASection::os_constant(const char *s) {
  return c_DOMText::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMCDATASection
IMPLEMENT_CLASS(DOMCDATASection)
ObjectData *c_DOMCDATASection::cloneImpl() {
  ObjectData *obj = coo_DOMCDATASection();
  c_DOMCDATASection::cloneSet(obj);
  return obj;
}
void c_DOMCDATASection::cloneSet(ObjectData *cl) {
  c_DOMCDATASection *clone = static_cast<c_DOMCDATASection*>(cl);
  c_DOMText::cloneSet(clone);
}
CallInfo c_DOMCDATASection::ci___destruct((void*)&c_DOMCDATASection::i___destruct, (void*)&c_DOMCDATASection::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMCDATASection::ci___construct((void*)&c_DOMCDATASection::i___construct, (void*)&c_DOMCDATASection::ifa___construct, 1, 4, 0x0000000000000000LL);
Variant c_DOMCDATASection::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_DOMCDATASection);
  }
  c_DOMCDATASection *self ATTRIBUTE_UNUSED (static_cast<c_DOMCDATASection*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMCDATASection::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_DOMCDATASection);
  }
  c_DOMCDATASection *self ATTRIBUTE_UNUSED (static_cast<c_DOMCDATASection*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__construct", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___construct(arg0), null);
  }
}
Variant c_DOMCDATASection::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_DOMCDATASection);
  }
  c_DOMCDATASection *self ATTRIBUTE_UNUSED (static_cast<c_DOMCDATASection*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMCDATASection::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_DOMCDATASection);
  }
  c_DOMCDATASection *self ATTRIBUTE_UNUSED (static_cast<c_DOMCDATASection*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__construct", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___construct(arg0), null);
}
const MethodCallInfoTable c_DOMCDATASection::s_call_info_table[] = {
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_DOMCDATASection::ci___destruct },
  { 0x0D31D0AC229C615FLL, 0, 11, "__construct", &c_DOMCDATASection::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_DOMCDATASection::s_call_info_index[] = {
  3,
  -1,-1,-1,0,
};
c_DOMCDATASection *c_DOMCDATASection::create(String a0) {
  CountableHelper h(this);
  init();
  t___construct(a0);
  return this;
}
void c_DOMCDATASection::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) throw_wrong_arguments("__construct", count, 1, 1, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    (t___construct(arg0));
  }
}
void c_DOMCDATASection::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DOMCDATASection::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_DOMCDATASection = {
  c_DOMCDATASection::os_getInit,
  c_DOMCDATASection::os_get,
  c_DOMCDATASection::os_lval,
  c_DOMCDATASection::os_invoke,
  c_DOMCDATASection::os_constant,
  (ObjectData*(*)(ObjectData*))coo_DOMCDATASection,
  c_DOMCDATASection::s_call_info_table,c_DOMCDATASection::s_call_info_index,
  "DOMCDATASection",
  &cw_DOMText
};
ObjectData *coo_Locale() {
  return NEWOBJ(c_Locale)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_Locale
Variant c_Locale::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_Locale
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_Locale
Variant c_Locale::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_Locale
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_Locale
Variant &c_Locale::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_Locale
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_Locale
Variant * c_Locale::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_Locale
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_Locale
Variant * c_Locale::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_Locale
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_Locale
Variant * c_Locale::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_Locale
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_Locale
Variant c_Locale::os_constant(const char *s) {
  int64 hash = hash_string(s);
  switch (hash & 3) {
    case 1:
      HASH_RETURN(0x78695696B47AF8CDLL, q_Locale_ACTUAL_LOCALE, "ACTUAL_LOCALE");
      HASH_RETURN(0x35B10383BBF3BAE1LL, q_Locale_VALID_LOCALE, "VALID_LOCALE");
      break;
    default:
      break;
  }
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_Locale
IMPLEMENT_CLASS(Locale)
ObjectData *c_Locale::cloneImpl() {
  ObjectData *obj = coo_Locale();
  c_Locale::cloneSet(obj);
  return obj;
}
void c_Locale::cloneSet(ObjectData *cl) {
  c_Locale *clone = static_cast<c_Locale*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_Locale::ci___destruct((void*)&c_Locale::i___destruct, (void*)&c_Locale::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_Locale::ci___construct((void*)&c_Locale::i___construct, (void*)&c_Locale::ifa___construct, 0, 4, 0x0000000000000000LL);
Variant c_Locale::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_Locale);
  }
  c_Locale *self ATTRIBUTE_UNUSED (static_cast<c_Locale*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_Locale::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_Locale);
  }
  c_Locale *self ATTRIBUTE_UNUSED (static_cast<c_Locale*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_Locale::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_Locale);
  }
  c_Locale *self ATTRIBUTE_UNUSED (static_cast<c_Locale*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_Locale::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_Locale);
  }
  c_Locale *self ATTRIBUTE_UNUSED (static_cast<c_Locale*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
const MethodCallInfoTable c_Locale::s_call_info_table[] = {
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_Locale::ci___destruct },
  { 0x0D31D0AC229C615FLL, 0, 11, "__construct", &c_Locale::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_Locale::s_call_info_index[] = {
  3,
  -1,-1,-1,0,
};
c_Locale *c_Locale::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_Locale::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_Locale::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_Locale::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_Locale = {
  c_Locale::os_getInit,
  c_Locale::os_get,
  c_Locale::os_lval,
  c_Locale::os_invoke,
  c_Locale::os_constant,
  (ObjectData*(*)(ObjectData*))coo_Locale,
  c_Locale::s_call_info_table,c_Locale::s_call_info_index,
  "Locale",
  0
};
ObjectData *coo_Closure() {
  return NEWOBJ(c_Closure)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_Closure
Variant c_Closure::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_Closure
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_Closure
Variant c_Closure::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_Closure
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_Closure
Variant &c_Closure::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_Closure
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_Closure
Variant * c_Closure::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_Closure
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_Closure
Variant * c_Closure::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_Closure
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_Closure
Variant * c_Closure::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_Closure
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_Closure
Variant c_Closure::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_Closure
IMPLEMENT_CLASS(Closure)
ObjectData *c_Closure::cloneImpl() {
  ObjectData *obj = coo_Closure();
  c_Closure::cloneSet(obj);
  return obj;
}
void c_Closure::cloneSet(ObjectData *cl) {
  c_Closure *clone = static_cast<c_Closure*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_Closure::ci___destruct((void*)&c_Closure::i___destruct, (void*)&c_Closure::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_Closure::ci___construct((void*)&c_Closure::i___construct, (void*)&c_Closure::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_Closure::ci___clone((void*)&c_Closure::i___clone, (void*)&c_Closure::ifa___clone, 0, 4, 0x0000000000000000LL);
CallInfo c_Closure::ci___invoke((void*)&c_Closure::i___invoke, (void*)&c_Closure::ifa___invoke, 0, 5, 0x0000000000000000LL);
Variant c_Closure::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_Closure);
  }
  c_Closure *self ATTRIBUTE_UNUSED (static_cast<c_Closure*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_Closure::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_Closure);
  }
  c_Closure *self ATTRIBUTE_UNUSED (static_cast<c_Closure*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_Closure::i___clone(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___clone, coo_Closure);
  }
  c_Closure *self ATTRIBUTE_UNUSED (static_cast<c_Closure*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__clone", 0, 1);
  return (self->t___clone());
}
Variant c_Closure::i___invoke(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___invoke, coo_Closure);
  }
  c_Closure *self ATTRIBUTE_UNUSED (static_cast<c_Closure*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  const Array &p(count > 0 ? ArrayUtil::EnsureIntKeys(params) : Array());
  return (self->t___invoke(count, p));
}
Variant c_Closure::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_Closure);
  }
  c_Closure *self ATTRIBUTE_UNUSED (static_cast<c_Closure*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_Closure::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_Closure);
  }
  c_Closure *self ATTRIBUTE_UNUSED (static_cast<c_Closure*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_Closure::ifa___clone(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___clone, coo_Closure);
  }
  c_Closure *self ATTRIBUTE_UNUSED (static_cast<c_Closure*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__clone", 0, 1);
  return (self->t___clone());
}
Variant c_Closure::ifa___invoke(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___invoke, coo_Closure);
  }
  c_Closure *self ATTRIBUTE_UNUSED (static_cast<c_Closure*>(mcp.obj));
  Array p;
  if (count >= 1) p.append(a0);
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (self->t___invoke(count, p));
}
const MethodCallInfoTable c_Closure::s_call_info_table[] = {
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_Closure::ci___destruct },
  { 0x0F2CA10C0004BE9BLL, 0, 7, "__clone", &c_Closure::ci___clone },
  { 0x795C470F1BD81D65LL, 1, 8, "__invoke", &c_Closure::ci___invoke },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_Closure::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_Closure::s_call_info_index[] = {
  7,
  -1,-1,-1,0,-1,2,-1,3,

};
c_Closure *c_Closure::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_Closure::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_Closure::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_Closure::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_Closure = {
  c_Closure::os_getInit,
  c_Closure::os_get,
  c_Closure::os_lval,
  c_Closure::os_invoke,
  c_Closure::os_constant,
  (ObjectData*(*)(ObjectData*))coo_Closure,
  c_Closure::s_call_info_table,c_Closure::s_call_info_index,
  "Closure",
  0
};
ObjectData *coo_DOMDocumentType() {
  return NEWOBJ(c_DOMDocumentType)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMDocumentType
Variant c_DOMDocumentType::os_getInit(CStrRef s) {
  return c_DOMNode::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMDocumentType
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMDocumentType
Variant c_DOMDocumentType::os_get(CStrRef s) {
  return c_DOMNode::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMDocumentType
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMDocumentType
Variant &c_DOMDocumentType::os_lval(CStrRef s) {
  return c_DOMNode::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMDocumentType
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DOMDocumentType
Variant * c_DOMDocumentType::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DOMDocumentType
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMDocumentType
Variant * c_DOMDocumentType::o_realPropPublic(CStrRef s, int flags) const {
  return c_DOMNode::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMDocumentType
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMDocumentType
Variant * c_DOMDocumentType::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMDocumentType
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMDocumentType
Variant c_DOMDocumentType::os_constant(const char *s) {
  return c_DOMNode::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMDocumentType
IMPLEMENT_CLASS(DOMDocumentType)
ObjectData *c_DOMDocumentType::cloneImpl() {
  ObjectData *obj = coo_DOMDocumentType();
  c_DOMDocumentType::cloneSet(obj);
  return obj;
}
void c_DOMDocumentType::cloneSet(ObjectData *cl) {
  c_DOMDocumentType *clone = static_cast<c_DOMDocumentType*>(cl);
  c_DOMNode::cloneSet(clone);
}
CallInfo c_DOMDocumentType::ci___destruct((void*)&c_DOMDocumentType::i___destruct, (void*)&c_DOMDocumentType::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMDocumentType::ci___set((void*)&c_DOMDocumentType::i___set, (void*)&c_DOMDocumentType::ifa___set, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMDocumentType::ci___construct((void*)&c_DOMDocumentType::i___construct, (void*)&c_DOMDocumentType::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMDocumentType::ci___get((void*)&c_DOMDocumentType::i___get, (void*)&c_DOMDocumentType::ifa___get, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMDocumentType::ci___isset((void*)&c_DOMDocumentType::i___isset, (void*)&c_DOMDocumentType::ifa___isset, 1, 4, 0x0000000000000000LL);
Variant c_DOMDocumentType::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_DOMDocumentType);
  }
  c_DOMDocumentType *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocumentType*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMDocumentType::i___set(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___set, coo_DOMDocumentType);
  }
  c_DOMDocumentType *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocumentType*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___set(arg0, arg1));
  }
}
Variant c_DOMDocumentType::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_DOMDocumentType);
  }
  c_DOMDocumentType *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocumentType*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DOMDocumentType::i___get(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___get, coo_DOMDocumentType);
  }
  c_DOMDocumentType *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocumentType*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___get(arg0));
  }
}
Variant c_DOMDocumentType::i___isset(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___isset, coo_DOMDocumentType);
  }
  c_DOMDocumentType *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocumentType*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___isset(arg0));
  }
}
Variant c_DOMDocumentType::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_DOMDocumentType);
  }
  c_DOMDocumentType *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocumentType*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMDocumentType::ifa___set(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___set, coo_DOMDocumentType);
  }
  c_DOMDocumentType *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocumentType*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t___set(arg0, arg1));
}
Variant c_DOMDocumentType::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_DOMDocumentType);
  }
  c_DOMDocumentType *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocumentType*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DOMDocumentType::ifa___get(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___get, coo_DOMDocumentType);
  }
  c_DOMDocumentType *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocumentType*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___get(arg0));
}
Variant c_DOMDocumentType::ifa___isset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___isset, coo_DOMDocumentType);
  }
  c_DOMDocumentType *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocumentType*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___isset(arg0));
}
const MethodCallInfoTable c_DOMDocumentType::s_call_info_table[] = {
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_DOMDocumentType::ci___destruct },
  { 0x52F3DAD783340395LL, 1, 5, "__set", &c_DOMDocumentType::ci___set },
  { 0x4FE08FDDAE2178EELL, 1, 7, "__isset", &c_DOMDocumentType::ci___isset },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_DOMDocumentType::ci___construct },
  { 0x26B6E00C74FA338FLL, 0, 5, "__get", &c_DOMDocumentType::ci___get },
  { 0, 1, 0, 0 }
};
const int c_DOMDocumentType::s_call_info_index[] = {
  15,
  -1,-1,-1,0,-1,1,-1,-1,
  -1,-1,-1,-1,-1,-1,2,3,

};
c_DOMDocumentType *c_DOMDocumentType::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_DOMDocumentType::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_DOMDocumentType::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DOMDocumentType::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_DOMDocumentType = {
  c_DOMDocumentType::os_getInit,
  c_DOMDocumentType::os_get,
  c_DOMDocumentType::os_lval,
  c_DOMDocumentType::os_invoke,
  c_DOMDocumentType::os_constant,
  (ObjectData*(*)(ObjectData*))coo_DOMDocumentType,
  c_DOMDocumentType::s_call_info_table,c_DOMDocumentType::s_call_info_index,
  "DOMDocumentType",
  &cw_DOMNode
};
ObjectData *coo_GenericContinuation() {
  return NEWOBJ(c_GenericContinuation)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_GenericContinuation
Variant c_GenericContinuation::os_getInit(CStrRef s) {
  return c_Continuation::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_GenericContinuation
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_GenericContinuation
Variant c_GenericContinuation::os_get(CStrRef s) {
  return c_Continuation::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_GenericContinuation
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_GenericContinuation
Variant &c_GenericContinuation::os_lval(CStrRef s) {
  return c_Continuation::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_GenericContinuation
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_GenericContinuation
Variant * c_GenericContinuation::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  CStrRef s = context.isNull() ? FrameInjection::GetClassName(false) : context;
  int64 hash = s->hash();
  switch (hash & 3) {
    case 1:
      HASH_GUARD_STRING(0x05DE30099B58533DLL, GenericContinuation) { return o_realPropPrivate(prop, flags); }
      break;
    case 2:
      HASH_GUARD_STRING(0x61DD21ABF790E9E2LL, Continuation) { return c_Continuation::o_realPropPrivate(prop, flags); }
      break;
    default:
      break;
  }
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_GenericContinuation
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_GenericContinuation
Variant * c_GenericContinuation::o_realPropPublic(CStrRef s, int flags) const {
  return c_Continuation::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_GenericContinuation
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_GenericContinuation
Variant * c_GenericContinuation::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_GenericContinuation
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_GenericContinuation
Variant c_GenericContinuation::os_constant(const char *s) {
  return c_Continuation::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_GenericContinuation
IMPLEMENT_CLASS(GenericContinuation)
ObjectData *c_GenericContinuation::cloneImpl() {
  ObjectData *obj = coo_GenericContinuation();
  c_GenericContinuation::cloneSet(obj);
  return obj;
}
void c_GenericContinuation::cloneSet(ObjectData *cl) {
  c_GenericContinuation *clone = static_cast<c_GenericContinuation*>(cl);
  c_Continuation::cloneSet(clone);
  clone->m_vars = m_vars;
}
CallInfo c_GenericContinuation::ci___destruct((void*)&c_GenericContinuation::i___destruct, (void*)&c_GenericContinuation::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_GenericContinuation::ci_getvars((void*)&c_GenericContinuation::i_getvars, (void*)&c_GenericContinuation::ifa_getvars, 0, 4, 0x0000000000000000LL);
CallInfo c_GenericContinuation::ci___construct((void*)&c_GenericContinuation::i___construct, (void*)&c_GenericContinuation::ifa___construct, 7, 4, 0x0000000000000000LL);
CallInfo c_GenericContinuation::ci_update((void*)&c_GenericContinuation::i_update, (void*)&c_GenericContinuation::ifa_update, 3, 4, 0x0000000000000000LL);
Variant c_GenericContinuation::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_GenericContinuation);
  }
  c_GenericContinuation *self ATTRIBUTE_UNUSED (static_cast<c_GenericContinuation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_GenericContinuation::i_getvars(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getvars, coo_GenericContinuation);
  }
  c_GenericContinuation *self ATTRIBUTE_UNUSED (static_cast<c_GenericContinuation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getvars", 0, 1);
  return (self->t_getvars());
}
Variant c_GenericContinuation::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_GenericContinuation);
  }
  c_GenericContinuation *self ATTRIBUTE_UNUSED (static_cast<c_GenericContinuation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 5 || count > 7)) return throw_wrong_arguments("__construct", count, 5, 7, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 5) return (self->t___construct(arg0, arg1, arg2, arg3, arg4), null);
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 6) return (self->t___construct(arg0, arg1, arg2, arg3, arg4, arg5), null);
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___construct(arg0, arg1, arg2, arg3, arg4, arg5, arg6), null);
  }
}
Variant c_GenericContinuation::i_update(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_update, coo_GenericContinuation);
  }
  c_GenericContinuation *self ATTRIBUTE_UNUSED (static_cast<c_GenericContinuation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("update", count, 3, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_update(arg0, arg1, arg2), null);
  }
}
Variant c_GenericContinuation::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_GenericContinuation);
  }
  c_GenericContinuation *self ATTRIBUTE_UNUSED (static_cast<c_GenericContinuation*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_GenericContinuation::ifa_getvars(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getvars, coo_GenericContinuation);
  }
  c_GenericContinuation *self ATTRIBUTE_UNUSED (static_cast<c_GenericContinuation*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getvars", 0, 1);
  return (self->t_getvars());
}
Variant c_GenericContinuation::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_GenericContinuation);
  }
  c_GenericContinuation *self ATTRIBUTE_UNUSED (static_cast<c_GenericContinuation*>(mcp.obj));
  if (UNLIKELY(count < 5)) return throw_wrong_arguments("__construct", count, 5, 7, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  CVarRef arg4(a4);
  if (count <= 5) return (self->t___construct(arg0, arg1, arg2, arg3, arg4), null);
  CVarRef arg5(a5);
  return (self->t___construct(arg0, arg1, arg2, arg3, arg4, arg5), null);
}
Variant c_GenericContinuation::ifa_update(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_update, coo_GenericContinuation);
  }
  c_GenericContinuation *self ATTRIBUTE_UNUSED (static_cast<c_GenericContinuation*>(mcp.obj));
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("update", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (self->t_update(arg0, arg1, arg2), null);
}
const MethodCallInfoTable c_GenericContinuation::s_call_info_table[] = {
  { 0x1402C6C4A8D472A0LL, 1, 6, "update", &c_GenericContinuation::ci_update },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_GenericContinuation::ci___destruct },
  { 0x72BA7745837A2236LL, 1, 7, "getVars", &c_GenericContinuation::ci_getvars },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_GenericContinuation::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_GenericContinuation::s_call_info_index[] = {
  7,
  0,-1,-1,1,-1,-1,2,3,

};
c_GenericContinuation *c_GenericContinuation::create(int64 a0, int64 a1, bool a2, String a3, Array a4, Variant a5, Array a6) {
  CountableHelper h(this);
  init();
  t___construct(a0, a1, a2, a3, a4, a5, a6);
  return this;
}
void c_GenericContinuation::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 5 || count > 7)) throw_wrong_arguments("__construct", count, 5, 7, 2);
  do {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 5) {
      (t___construct(arg0, arg1, arg2, arg3, arg4));
      break;
    }
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 6) {
      (t___construct(arg0, arg1, arg2, arg3, arg4, arg5));
      break;
    }
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    (t___construct(arg0, arg1, arg2, arg3, arg4, arg5, arg6));
  } while (false);
}
void c_GenericContinuation::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_GenericContinuation::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_GenericContinuation = {
  c_GenericContinuation::os_getInit,
  c_GenericContinuation::os_get,
  c_GenericContinuation::os_lval,
  c_GenericContinuation::os_invoke,
  c_GenericContinuation::os_constant,
  (ObjectData*(*)(ObjectData*))coo_GenericContinuation,
  c_GenericContinuation::s_call_info_table,c_GenericContinuation::s_call_info_index,
  "GenericContinuation",
  &cw_Continuation
};
ObjectData *coo_SQLite3Stmt() {
  return NEWOBJ(c_SQLite3Stmt)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_SQLite3Stmt
Variant c_SQLite3Stmt::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_SQLite3Stmt
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_SQLite3Stmt
Variant c_SQLite3Stmt::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_SQLite3Stmt
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_SQLite3Stmt
Variant &c_SQLite3Stmt::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_SQLite3Stmt
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_SQLite3Stmt
Variant * c_SQLite3Stmt::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_SQLite3Stmt
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_SQLite3Stmt
Variant * c_SQLite3Stmt::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_SQLite3Stmt
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_SQLite3Stmt
Variant * c_SQLite3Stmt::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_SQLite3Stmt
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_SQLite3Stmt
Variant c_SQLite3Stmt::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_SQLite3Stmt
IMPLEMENT_CLASS(SQLite3Stmt)
ObjectData *c_SQLite3Stmt::cloneImpl() {
  ObjectData *obj = coo_SQLite3Stmt();
  c_SQLite3Stmt::cloneSet(obj);
  return obj;
}
void c_SQLite3Stmt::cloneSet(ObjectData *cl) {
  c_SQLite3Stmt *clone = static_cast<c_SQLite3Stmt*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_SQLite3Stmt::ci___destruct((void*)&c_SQLite3Stmt::i___destruct, (void*)&c_SQLite3Stmt::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_SQLite3Stmt::ci___construct((void*)&c_SQLite3Stmt::i___construct, (void*)&c_SQLite3Stmt::ifa___construct, 2, 4, 0x0000000000000000LL);
CallInfo c_SQLite3Stmt::ci_close((void*)&c_SQLite3Stmt::i_close, (void*)&c_SQLite3Stmt::ifa_close, 0, 4, 0x0000000000000000LL);
CallInfo c_SQLite3Stmt::ci_paramcount((void*)&c_SQLite3Stmt::i_paramcount, (void*)&c_SQLite3Stmt::ifa_paramcount, 0, 4, 0x0000000000000000LL);
CallInfo c_SQLite3Stmt::ci_bindparam((void*)&c_SQLite3Stmt::i_bindparam, (void*)&c_SQLite3Stmt::ifa_bindparam, 3, 4, 0x0000000000000002LL);
CallInfo c_SQLite3Stmt::ci_execute((void*)&c_SQLite3Stmt::i_execute, (void*)&c_SQLite3Stmt::ifa_execute, 0, 4, 0x0000000000000000LL);
CallInfo c_SQLite3Stmt::ci_reset((void*)&c_SQLite3Stmt::i_reset, (void*)&c_SQLite3Stmt::ifa_reset, 0, 4, 0x0000000000000000LL);
CallInfo c_SQLite3Stmt::ci_clear((void*)&c_SQLite3Stmt::i_clear, (void*)&c_SQLite3Stmt::ifa_clear, 0, 4, 0x0000000000000000LL);
CallInfo c_SQLite3Stmt::ci_bindvalue((void*)&c_SQLite3Stmt::i_bindvalue, (void*)&c_SQLite3Stmt::ifa_bindvalue, 3, 4, 0x0000000000000000LL);
Variant c_SQLite3Stmt::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_SQLite3Stmt);
  }
  c_SQLite3Stmt *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Stmt*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_SQLite3Stmt::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_SQLite3Stmt);
  }
  c_SQLite3Stmt *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Stmt*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__construct", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___construct(arg0, arg1), null);
  }
}
Variant c_SQLite3Stmt::i_close(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_close, coo_SQLite3Stmt);
  }
  c_SQLite3Stmt *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Stmt*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("close", 0, 1);
  return (self->t_close());
}
Variant c_SQLite3Stmt::i_paramcount(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_paramcount, coo_SQLite3Stmt);
  }
  c_SQLite3Stmt *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Stmt*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("paramcount", 0, 1);
  return (self->t_paramcount());
}
Variant c_SQLite3Stmt::i_bindparam(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_bindparam, coo_SQLite3Stmt);
  }
  c_SQLite3Stmt *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Stmt*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("bindparam", count, 2, 3, 1);
  const_cast<Array&>(params).escalate(true);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    VRefParam arg1(vref(ad->getValueRef(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_bindparam(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_bindparam(arg0, arg1, arg2));
  }
}
Variant c_SQLite3Stmt::i_execute(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_execute, coo_SQLite3Stmt);
  }
  c_SQLite3Stmt *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Stmt*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("execute", 0, 1);
  return (self->t_execute());
}
Variant c_SQLite3Stmt::i_reset(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_reset, coo_SQLite3Stmt);
  }
  c_SQLite3Stmt *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Stmt*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("reset", 0, 1);
  return (self->t_reset());
}
Variant c_SQLite3Stmt::i_clear(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_clear, coo_SQLite3Stmt);
  }
  c_SQLite3Stmt *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Stmt*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("clear", 0, 1);
  return (self->t_clear());
}
Variant c_SQLite3Stmt::i_bindvalue(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_bindvalue, coo_SQLite3Stmt);
  }
  c_SQLite3Stmt *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Stmt*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("bindvalue", count, 2, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_bindvalue(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_bindvalue(arg0, arg1, arg2));
  }
}
Variant c_SQLite3Stmt::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_SQLite3Stmt);
  }
  c_SQLite3Stmt *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Stmt*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_SQLite3Stmt::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_SQLite3Stmt);
  }
  c_SQLite3Stmt *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Stmt*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__construct", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t___construct(arg0, arg1), null);
}
Variant c_SQLite3Stmt::ifa_close(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_close, coo_SQLite3Stmt);
  }
  c_SQLite3Stmt *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Stmt*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("close", 0, 1);
  return (self->t_close());
}
Variant c_SQLite3Stmt::ifa_paramcount(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_paramcount, coo_SQLite3Stmt);
  }
  c_SQLite3Stmt *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Stmt*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("paramcount", 0, 1);
  return (self->t_paramcount());
}
Variant c_SQLite3Stmt::ifa_bindparam(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_bindparam, coo_SQLite3Stmt);
  }
  c_SQLite3Stmt *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Stmt*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("bindparam", count, 2, 3, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  if (count <= 2) return (self->t_bindparam(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_bindparam(arg0, arg1, arg2));
}
Variant c_SQLite3Stmt::ifa_execute(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_execute, coo_SQLite3Stmt);
  }
  c_SQLite3Stmt *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Stmt*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("execute", 0, 1);
  return (self->t_execute());
}
Variant c_SQLite3Stmt::ifa_reset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_reset, coo_SQLite3Stmt);
  }
  c_SQLite3Stmt *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Stmt*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("reset", 0, 1);
  return (self->t_reset());
}
Variant c_SQLite3Stmt::ifa_clear(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_clear, coo_SQLite3Stmt);
  }
  c_SQLite3Stmt *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Stmt*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("clear", 0, 1);
  return (self->t_clear());
}
Variant c_SQLite3Stmt::ifa_bindvalue(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_bindvalue, coo_SQLite3Stmt);
  }
  c_SQLite3Stmt *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Stmt*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("bindvalue", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_bindvalue(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_bindvalue(arg0, arg1, arg2));
}
const MethodCallInfoTable c_SQLite3Stmt::s_call_info_table[] = {
  { 0x340A51AE22A924E0LL, 1, 5, "reset", &c_SQLite3Stmt::ci_reset },
  { 0x78AE97BFBEBF5341LL, 1, 5, "close", &c_SQLite3Stmt::ci_close },
  { 0x436E6AFC3628E403LL, 1, 9, "bindvalue", &c_SQLite3Stmt::ci_bindvalue },
  { 0x31DA235C5A226667LL, 1, 5, "clear", &c_SQLite3Stmt::ci_clear },
  { 0x187C7F43EB57714ELL, 1, 7, "execute", &c_SQLite3Stmt::ci_execute },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_SQLite3Stmt::ci___destruct },
  { 0x77B13FCF1BA41696LL, 1, 9, "bindparam", &c_SQLite3Stmt::ci_bindparam },
  { 0x72FA987001E93357LL, 1, 10, "paramcount", &c_SQLite3Stmt::ci_paramcount },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_SQLite3Stmt::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_SQLite3Stmt::s_call_info_index[] = {
  31,
  0,1,-1,2,-1,-1,-1,3,
  -1,-1,-1,-1,-1,-1,4,-1,
  -1,-1,-1,5,-1,-1,6,7,
  -1,-1,-1,-1,-1,-1,-1,8,

};
c_SQLite3Stmt *c_SQLite3Stmt::create(Object a0, String a1) {
  CountableHelper h(this);
  init();
  t___construct(a0, a1);
  return this;
}
void c_SQLite3Stmt::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) throw_wrong_arguments("__construct", count, 2, 2, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    (t___construct(arg0, arg1));
  }
}
void c_SQLite3Stmt::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_SQLite3Stmt::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_SQLite3Stmt = {
  c_SQLite3Stmt::os_getInit,
  c_SQLite3Stmt::os_get,
  c_SQLite3Stmt::os_lval,
  c_SQLite3Stmt::os_invoke,
  c_SQLite3Stmt::os_constant,
  (ObjectData*(*)(ObjectData*))coo_SQLite3Stmt,
  c_SQLite3Stmt::s_call_info_table,c_SQLite3Stmt::s_call_info_index,
  "SQLite3Stmt",
  0
};
ObjectData *coo_DOMNodeList() {
  return NEWOBJ(c_DOMNodeList)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMNodeList
Variant c_DOMNodeList::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMNodeList
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMNodeList
Variant c_DOMNodeList::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMNodeList
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMNodeList
Variant &c_DOMNodeList::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMNodeList
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DOMNodeList
Variant * c_DOMNodeList::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DOMNodeList
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMNodeList
Variant * c_DOMNodeList::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMNodeList
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMNodeList
Variant * c_DOMNodeList::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMNodeList
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMNodeList
Variant c_DOMNodeList::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMNodeList
IMPLEMENT_CLASS(DOMNodeList)
ObjectData *c_DOMNodeList::cloneImpl() {
  ObjectData *obj = coo_DOMNodeList();
  c_DOMNodeList::cloneSet(obj);
  return obj;
}
void c_DOMNodeList::cloneSet(ObjectData *cl) {
  c_DOMNodeList *clone = static_cast<c_DOMNodeList*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_DOMNodeList::ci_item((void*)&c_DOMNodeList::i_item, (void*)&c_DOMNodeList::ifa_item, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMNodeList::ci___destruct((void*)&c_DOMNodeList::i___destruct, (void*)&c_DOMNodeList::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMNodeList::ci___set((void*)&c_DOMNodeList::i___set, (void*)&c_DOMNodeList::ifa___set, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMNodeList::ci___construct((void*)&c_DOMNodeList::i___construct, (void*)&c_DOMNodeList::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMNodeList::ci_getiterator((void*)&c_DOMNodeList::i_getiterator, (void*)&c_DOMNodeList::ifa_getiterator, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMNodeList::ci___get((void*)&c_DOMNodeList::i___get, (void*)&c_DOMNodeList::ifa___get, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMNodeList::ci___isset((void*)&c_DOMNodeList::i___isset, (void*)&c_DOMNodeList::ifa___isset, 1, 4, 0x0000000000000000LL);
Variant c_DOMNodeList::i_item(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_item, coo_DOMNodeList);
  }
  c_DOMNodeList *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeList*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("item", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_item(arg0));
  }
}
Variant c_DOMNodeList::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_DOMNodeList);
  }
  c_DOMNodeList *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeList*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMNodeList::i___set(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___set, coo_DOMNodeList);
  }
  c_DOMNodeList *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeList*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___set(arg0, arg1));
  }
}
Variant c_DOMNodeList::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_DOMNodeList);
  }
  c_DOMNodeList *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeList*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DOMNodeList::i_getiterator(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getiterator, coo_DOMNodeList);
  }
  c_DOMNodeList *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeList*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getiterator", 0, 1);
  return (self->t_getiterator());
}
Variant c_DOMNodeList::i___get(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___get, coo_DOMNodeList);
  }
  c_DOMNodeList *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeList*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___get(arg0));
  }
}
Variant c_DOMNodeList::i___isset(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___isset, coo_DOMNodeList);
  }
  c_DOMNodeList *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeList*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___isset(arg0));
  }
}
Variant c_DOMNodeList::ifa_item(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_item, coo_DOMNodeList);
  }
  c_DOMNodeList *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeList*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("item", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_item(arg0));
}
Variant c_DOMNodeList::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_DOMNodeList);
  }
  c_DOMNodeList *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeList*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMNodeList::ifa___set(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___set, coo_DOMNodeList);
  }
  c_DOMNodeList *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeList*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t___set(arg0, arg1));
}
Variant c_DOMNodeList::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_DOMNodeList);
  }
  c_DOMNodeList *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeList*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DOMNodeList::ifa_getiterator(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getiterator, coo_DOMNodeList);
  }
  c_DOMNodeList *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeList*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getiterator", 0, 1);
  return (self->t_getiterator());
}
Variant c_DOMNodeList::ifa___get(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___get, coo_DOMNodeList);
  }
  c_DOMNodeList *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeList*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___get(arg0));
}
Variant c_DOMNodeList::ifa___isset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___isset, coo_DOMNodeList);
  }
  c_DOMNodeList *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeList*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___isset(arg0));
}
const MethodCallInfoTable c_DOMNodeList::s_call_info_table[] = {
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_DOMNodeList::ci___destruct },
  { 0x570B2E1232A12503LL, 0, 11, "getIterator", &c_DOMNodeList::ci_getiterator },
  { 0x52F3DAD783340395LL, 1, 5, "__set", &c_DOMNodeList::ci___set },
  { 0x0A41DBE0830902C6LL, 1, 4, "item", &c_DOMNodeList::ci_item },
  { 0x4FE08FDDAE2178EELL, 1, 7, "__isset", &c_DOMNodeList::ci___isset },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_DOMNodeList::ci___construct },
  { 0x26B6E00C74FA338FLL, 0, 5, "__get", &c_DOMNodeList::ci___get },
  { 0, 1, 0, 0 }
};
const int c_DOMNodeList::s_call_info_index[] = {
  15,
  -1,-1,-1,0,-1,2,3,-1,
  -1,-1,-1,-1,-1,-1,4,5,

};
c_DOMNodeList *c_DOMNodeList::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_DOMNodeList::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_DOMNodeList::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DOMNodeList::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_DOMNodeList = {
  c_DOMNodeList::os_getInit,
  c_DOMNodeList::os_get,
  c_DOMNodeList::os_lval,
  c_DOMNodeList::os_invoke,
  c_DOMNodeList::os_constant,
  (ObjectData*(*)(ObjectData*))coo_DOMNodeList,
  c_DOMNodeList::s_call_info_table,c_DOMNodeList::s_call_info_index,
  "DOMNodeList",
  0
};
ObjectData *coo_Normalizer() {
  return NEWOBJ(c_Normalizer)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_Normalizer
Variant c_Normalizer::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_Normalizer
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_Normalizer
Variant c_Normalizer::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_Normalizer
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_Normalizer
Variant &c_Normalizer::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_Normalizer
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_Normalizer
Variant * c_Normalizer::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_Normalizer
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_Normalizer
Variant * c_Normalizer::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_Normalizer
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_Normalizer
Variant * c_Normalizer::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_Normalizer
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_Normalizer
Variant c_Normalizer::os_constant(const char *s) {
  int64 hash = hash_string(s);
  switch (hash & 31) {
    case 1:
      HASH_RETURN(0x2C9DA0E379A28381LL, q_Normalizer_FORM_KD, "FORM_KD");
      HASH_RETURN(0x1C369D0E14B76C41LL, q_Normalizer_FORM_KC, "FORM_KC");
      HASH_RETURN(0x3E3AA0A97BD09921LL, q_Normalizer_NFKC, "NFKC");
      break;
    case 2:
      HASH_RETURN(0x07512AA38ADD1AE2LL, q_Normalizer_FORM_D, "FORM_D");
      break;
    case 6:
      HASH_RETURN(0x51422F059BEFCD86LL, q_Normalizer_NFC, "NFC");
      break;
    case 15:
      HASH_RETURN(0x58B301790FA834EFLL, q_Normalizer_NFD, "NFD");
      HASH_RETURN(0x3CF19F2D23C185CFLL, q_Normalizer_NFKD, "NFKD");
      break;
    case 19:
      HASH_RETURN(0x2EFDCA1922BFB273LL, q_Normalizer_NONE, "NONE");
      break;
    case 31:
      HASH_RETURN(0x3BE3511FDA9A9E7FLL, q_Normalizer_FORM_C, "FORM_C");
      break;
    default:
      break;
  }
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_Normalizer
IMPLEMENT_CLASS(Normalizer)
ObjectData *c_Normalizer::cloneImpl() {
  ObjectData *obj = coo_Normalizer();
  c_Normalizer::cloneSet(obj);
  return obj;
}
void c_Normalizer::cloneSet(ObjectData *cl) {
  c_Normalizer *clone = static_cast<c_Normalizer*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_Normalizer::ci___destruct((void*)&c_Normalizer::i___destruct, (void*)&c_Normalizer::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_Normalizer::ci___construct((void*)&c_Normalizer::i___construct, (void*)&c_Normalizer::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_Normalizer::ci_normalize((void*)&c_Normalizer::i_normalize, (void*)&c_Normalizer::ifa_normalize, 2, 12, 0x0000000000000000LL);
CallInfo c_Normalizer::ci_isnormalized((void*)&c_Normalizer::i_isnormalized, (void*)&c_Normalizer::ifa_isnormalized, 2, 12, 0x0000000000000000LL);
Variant c_Normalizer::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_Normalizer);
  }
  c_Normalizer *self ATTRIBUTE_UNUSED (static_cast<c_Normalizer*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_Normalizer::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_Normalizer);
  }
  c_Normalizer *self ATTRIBUTE_UNUSED (static_cast<c_Normalizer*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_Normalizer::i_normalize(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("normalize", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (c_Normalizer::t_normalize(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (c_Normalizer::t_normalize(arg0, arg1));
  }
}
Variant c_Normalizer::i_isnormalized(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("isnormalized", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (c_Normalizer::t_isnormalized(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (c_Normalizer::t_isnormalized(arg0, arg1));
  }
}
Variant c_Normalizer::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_Normalizer);
  }
  c_Normalizer *self ATTRIBUTE_UNUSED (static_cast<c_Normalizer*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_Normalizer::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_Normalizer);
  }
  c_Normalizer *self ATTRIBUTE_UNUSED (static_cast<c_Normalizer*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_Normalizer::ifa_normalize(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("normalize", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (c_Normalizer::t_normalize(arg0));
  CVarRef arg1(a1);
  return (c_Normalizer::t_normalize(arg0, arg1));
}
Variant c_Normalizer::ifa_isnormalized(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("isnormalized", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (c_Normalizer::t_isnormalized(arg0));
  CVarRef arg1(a1);
  return (c_Normalizer::t_isnormalized(arg0, arg1));
}
const MethodCallInfoTable c_Normalizer::s_call_info_table[] = {
  { 0x11A2D4B742CB6C5ALL, 1, 9, "normalize", &c_Normalizer::ci_normalize },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_Normalizer::ci___destruct },
  { 0x58CF37E15F66ED1DLL, 1, 12, "isnormalized", &c_Normalizer::ci_isnormalized },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_Normalizer::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_Normalizer::s_call_info_index[] = {
  7,
  -1,-1,0,1,-1,2,-1,3,

};
c_Normalizer *c_Normalizer::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_Normalizer::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_Normalizer::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_Normalizer::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_Normalizer = {
  c_Normalizer::os_getInit,
  c_Normalizer::os_get,
  c_Normalizer::os_lval,
  c_Normalizer::os_invoke,
  c_Normalizer::os_constant,
  (ObjectData*(*)(ObjectData*))coo_Normalizer,
  c_Normalizer::s_call_info_table,c_Normalizer::s_call_info_index,
  "Normalizer",
  0
};
ObjectData *coo_DOMCharacterData() {
  return NEWOBJ(c_DOMCharacterData)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMCharacterData
Variant c_DOMCharacterData::os_getInit(CStrRef s) {
  return c_DOMNode::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMCharacterData
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMCharacterData
Variant c_DOMCharacterData::os_get(CStrRef s) {
  return c_DOMNode::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMCharacterData
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMCharacterData
Variant &c_DOMCharacterData::os_lval(CStrRef s) {
  return c_DOMNode::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMCharacterData
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DOMCharacterData
Variant * c_DOMCharacterData::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DOMCharacterData
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMCharacterData
Variant * c_DOMCharacterData::o_realPropPublic(CStrRef s, int flags) const {
  return c_DOMNode::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMCharacterData
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMCharacterData
Variant * c_DOMCharacterData::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMCharacterData
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMCharacterData
Variant c_DOMCharacterData::os_constant(const char *s) {
  return c_DOMNode::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMCharacterData
IMPLEMENT_CLASS(DOMCharacterData)
ObjectData *c_DOMCharacterData::cloneImpl() {
  ObjectData *obj = coo_DOMCharacterData();
  c_DOMCharacterData::cloneSet(obj);
  return obj;
}
void c_DOMCharacterData::cloneSet(ObjectData *cl) {
  c_DOMCharacterData *clone = static_cast<c_DOMCharacterData*>(cl);
  c_DOMNode::cloneSet(clone);
}
CallInfo c_DOMCharacterData::ci___destruct((void*)&c_DOMCharacterData::i___destruct, (void*)&c_DOMCharacterData::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMCharacterData::ci_substringdata((void*)&c_DOMCharacterData::i_substringdata, (void*)&c_DOMCharacterData::ifa_substringdata, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMCharacterData::ci___set((void*)&c_DOMCharacterData::i___set, (void*)&c_DOMCharacterData::ifa___set, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMCharacterData::ci_insertdata((void*)&c_DOMCharacterData::i_insertdata, (void*)&c_DOMCharacterData::ifa_insertdata, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMCharacterData::ci___construct((void*)&c_DOMCharacterData::i___construct, (void*)&c_DOMCharacterData::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMCharacterData::ci_appenddata((void*)&c_DOMCharacterData::i_appenddata, (void*)&c_DOMCharacterData::ifa_appenddata, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMCharacterData::ci___get((void*)&c_DOMCharacterData::i___get, (void*)&c_DOMCharacterData::ifa___get, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMCharacterData::ci_replacedata((void*)&c_DOMCharacterData::i_replacedata, (void*)&c_DOMCharacterData::ifa_replacedata, 3, 4, 0x0000000000000000LL);
CallInfo c_DOMCharacterData::ci_deletedata((void*)&c_DOMCharacterData::i_deletedata, (void*)&c_DOMCharacterData::ifa_deletedata, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMCharacterData::ci___isset((void*)&c_DOMCharacterData::i___isset, (void*)&c_DOMCharacterData::ifa___isset, 1, 4, 0x0000000000000000LL);
Variant c_DOMCharacterData::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_DOMCharacterData);
  }
  c_DOMCharacterData *self ATTRIBUTE_UNUSED (static_cast<c_DOMCharacterData*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMCharacterData::i_substringdata(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_substringdata, coo_DOMCharacterData);
  }
  c_DOMCharacterData *self ATTRIBUTE_UNUSED (static_cast<c_DOMCharacterData*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("substringdata", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_substringdata(arg0, arg1));
  }
}
Variant c_DOMCharacterData::i___set(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___set, coo_DOMCharacterData);
  }
  c_DOMCharacterData *self ATTRIBUTE_UNUSED (static_cast<c_DOMCharacterData*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___set(arg0, arg1));
  }
}
Variant c_DOMCharacterData::i_insertdata(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_insertdata, coo_DOMCharacterData);
  }
  c_DOMCharacterData *self ATTRIBUTE_UNUSED (static_cast<c_DOMCharacterData*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("insertdata", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_insertdata(arg0, arg1));
  }
}
Variant c_DOMCharacterData::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_DOMCharacterData);
  }
  c_DOMCharacterData *self ATTRIBUTE_UNUSED (static_cast<c_DOMCharacterData*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DOMCharacterData::i_appenddata(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_appenddata, coo_DOMCharacterData);
  }
  c_DOMCharacterData *self ATTRIBUTE_UNUSED (static_cast<c_DOMCharacterData*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("appenddata", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_appenddata(arg0));
  }
}
Variant c_DOMCharacterData::i___get(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___get, coo_DOMCharacterData);
  }
  c_DOMCharacterData *self ATTRIBUTE_UNUSED (static_cast<c_DOMCharacterData*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___get(arg0));
  }
}
Variant c_DOMCharacterData::i_replacedata(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_replacedata, coo_DOMCharacterData);
  }
  c_DOMCharacterData *self ATTRIBUTE_UNUSED (static_cast<c_DOMCharacterData*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("replacedata", count, 3, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_replacedata(arg0, arg1, arg2));
  }
}
Variant c_DOMCharacterData::i_deletedata(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_deletedata, coo_DOMCharacterData);
  }
  c_DOMCharacterData *self ATTRIBUTE_UNUSED (static_cast<c_DOMCharacterData*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("deletedata", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_deletedata(arg0, arg1));
  }
}
Variant c_DOMCharacterData::i___isset(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___isset, coo_DOMCharacterData);
  }
  c_DOMCharacterData *self ATTRIBUTE_UNUSED (static_cast<c_DOMCharacterData*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___isset(arg0));
  }
}
Variant c_DOMCharacterData::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_DOMCharacterData);
  }
  c_DOMCharacterData *self ATTRIBUTE_UNUSED (static_cast<c_DOMCharacterData*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMCharacterData::ifa_substringdata(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_substringdata, coo_DOMCharacterData);
  }
  c_DOMCharacterData *self ATTRIBUTE_UNUSED (static_cast<c_DOMCharacterData*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("substringdata", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_substringdata(arg0, arg1));
}
Variant c_DOMCharacterData::ifa___set(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___set, coo_DOMCharacterData);
  }
  c_DOMCharacterData *self ATTRIBUTE_UNUSED (static_cast<c_DOMCharacterData*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t___set(arg0, arg1));
}
Variant c_DOMCharacterData::ifa_insertdata(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_insertdata, coo_DOMCharacterData);
  }
  c_DOMCharacterData *self ATTRIBUTE_UNUSED (static_cast<c_DOMCharacterData*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("insertdata", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_insertdata(arg0, arg1));
}
Variant c_DOMCharacterData::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_DOMCharacterData);
  }
  c_DOMCharacterData *self ATTRIBUTE_UNUSED (static_cast<c_DOMCharacterData*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DOMCharacterData::ifa_appenddata(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_appenddata, coo_DOMCharacterData);
  }
  c_DOMCharacterData *self ATTRIBUTE_UNUSED (static_cast<c_DOMCharacterData*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("appenddata", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_appenddata(arg0));
}
Variant c_DOMCharacterData::ifa___get(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___get, coo_DOMCharacterData);
  }
  c_DOMCharacterData *self ATTRIBUTE_UNUSED (static_cast<c_DOMCharacterData*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___get(arg0));
}
Variant c_DOMCharacterData::ifa_replacedata(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_replacedata, coo_DOMCharacterData);
  }
  c_DOMCharacterData *self ATTRIBUTE_UNUSED (static_cast<c_DOMCharacterData*>(mcp.obj));
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("replacedata", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (self->t_replacedata(arg0, arg1, arg2));
}
Variant c_DOMCharacterData::ifa_deletedata(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_deletedata, coo_DOMCharacterData);
  }
  c_DOMCharacterData *self ATTRIBUTE_UNUSED (static_cast<c_DOMCharacterData*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("deletedata", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_deletedata(arg0, arg1));
}
Variant c_DOMCharacterData::ifa___isset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___isset, coo_DOMCharacterData);
  }
  c_DOMCharacterData *self ATTRIBUTE_UNUSED (static_cast<c_DOMCharacterData*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___isset(arg0));
}
const MethodCallInfoTable c_DOMCharacterData::s_call_info_table[] = {
  { 0x3DAC04A51FD2D92DLL, 1, 10, "appendData", &c_DOMCharacterData::ci_appenddata },
  { 0x4FE08FDDAE2178EELL, 1, 7, "__isset", &c_DOMCharacterData::ci___isset },
  { 0x26B6E00C74FA338FLL, 1, 5, "__get", &c_DOMCharacterData::ci___get },
  { 0x2D8D2253C2149972LL, 1, 13, "substringData", &c_DOMCharacterData::ci_substringdata },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_DOMCharacterData::ci___destruct },
  { 0x470F2F0EA1F3D4B4LL, 1, 11, "replaceData", &c_DOMCharacterData::ci_replacedata },
  { 0x52F3DAD783340395LL, 1, 5, "__set", &c_DOMCharacterData::ci___set },
  { 0x7543EC746714D118LL, 1, 10, "deleteData", &c_DOMCharacterData::ci_deletedata },
  { 0x0E19CE7886BCEF3DLL, 1, 10, "insertData", &c_DOMCharacterData::ci_insertdata },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_DOMCharacterData::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_DOMCharacterData::s_call_info_index[] = {
  31,
  -1,-1,-1,-1,-1,-1,-1,-1,
  -1,-1,-1,-1,-1,0,1,2,
  -1,-1,3,4,5,6,-1,-1,
  7,-1,-1,-1,-1,8,-1,9,

};
c_DOMCharacterData *c_DOMCharacterData::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_DOMCharacterData::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_DOMCharacterData::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DOMCharacterData::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_DOMCharacterData = {
  c_DOMCharacterData::os_getInit,
  c_DOMCharacterData::os_get,
  c_DOMCharacterData::os_lval,
  c_DOMCharacterData::os_invoke,
  c_DOMCharacterData::os_constant,
  (ObjectData*(*)(ObjectData*))coo_DOMCharacterData,
  c_DOMCharacterData::s_call_info_table,c_DOMCharacterData::s_call_info_index,
  "DOMCharacterData",
  &cw_DOMNode
};
ObjectData *coo_DOMEntityReference() {
  return NEWOBJ(c_DOMEntityReference)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMEntityReference
Variant c_DOMEntityReference::os_getInit(CStrRef s) {
  return c_DOMNode::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMEntityReference
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMEntityReference
Variant c_DOMEntityReference::os_get(CStrRef s) {
  return c_DOMNode::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMEntityReference
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMEntityReference
Variant &c_DOMEntityReference::os_lval(CStrRef s) {
  return c_DOMNode::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMEntityReference
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DOMEntityReference
Variant * c_DOMEntityReference::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DOMEntityReference
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMEntityReference
Variant * c_DOMEntityReference::o_realPropPublic(CStrRef s, int flags) const {
  return c_DOMNode::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMEntityReference
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMEntityReference
Variant * c_DOMEntityReference::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMEntityReference
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMEntityReference
Variant c_DOMEntityReference::os_constant(const char *s) {
  return c_DOMNode::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMEntityReference
IMPLEMENT_CLASS(DOMEntityReference)
ObjectData *c_DOMEntityReference::cloneImpl() {
  ObjectData *obj = coo_DOMEntityReference();
  c_DOMEntityReference::cloneSet(obj);
  return obj;
}
void c_DOMEntityReference::cloneSet(ObjectData *cl) {
  c_DOMEntityReference *clone = static_cast<c_DOMEntityReference*>(cl);
  c_DOMNode::cloneSet(clone);
}
CallInfo c_DOMEntityReference::ci___destruct((void*)&c_DOMEntityReference::i___destruct, (void*)&c_DOMEntityReference::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMEntityReference::ci___construct((void*)&c_DOMEntityReference::i___construct, (void*)&c_DOMEntityReference::ifa___construct, 1, 4, 0x0000000000000000LL);
Variant c_DOMEntityReference::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_DOMEntityReference);
  }
  c_DOMEntityReference *self ATTRIBUTE_UNUSED (static_cast<c_DOMEntityReference*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMEntityReference::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_DOMEntityReference);
  }
  c_DOMEntityReference *self ATTRIBUTE_UNUSED (static_cast<c_DOMEntityReference*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__construct", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___construct(arg0), null);
  }
}
Variant c_DOMEntityReference::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_DOMEntityReference);
  }
  c_DOMEntityReference *self ATTRIBUTE_UNUSED (static_cast<c_DOMEntityReference*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMEntityReference::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_DOMEntityReference);
  }
  c_DOMEntityReference *self ATTRIBUTE_UNUSED (static_cast<c_DOMEntityReference*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__construct", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___construct(arg0), null);
}
const MethodCallInfoTable c_DOMEntityReference::s_call_info_table[] = {
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_DOMEntityReference::ci___destruct },
  { 0x0D31D0AC229C615FLL, 0, 11, "__construct", &c_DOMEntityReference::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_DOMEntityReference::s_call_info_index[] = {
  3,
  -1,-1,-1,0,
};
c_DOMEntityReference *c_DOMEntityReference::create(String a0) {
  CountableHelper h(this);
  init();
  t___construct(a0);
  return this;
}
void c_DOMEntityReference::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) throw_wrong_arguments("__construct", count, 1, 1, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    (t___construct(arg0));
  }
}
void c_DOMEntityReference::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DOMEntityReference::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_DOMEntityReference = {
  c_DOMEntityReference::os_getInit,
  c_DOMEntityReference::os_get,
  c_DOMEntityReference::os_lval,
  c_DOMEntityReference::os_invoke,
  c_DOMEntityReference::os_constant,
  (ObjectData*(*)(ObjectData*))coo_DOMEntityReference,
  c_DOMEntityReference::s_call_info_table,c_DOMEntityReference::s_call_info_index,
  "DOMEntityReference",
  &cw_DOMNode
};
ObjectData *coo_SimpleXMLElementIterator() {
  return NEWOBJ(c_SimpleXMLElementIterator)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_SimpleXMLElementIterator
Variant c_SimpleXMLElementIterator::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_SimpleXMLElementIterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_SimpleXMLElementIterator
Variant c_SimpleXMLElementIterator::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_SimpleXMLElementIterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_SimpleXMLElementIterator
Variant &c_SimpleXMLElementIterator::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_SimpleXMLElementIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_SimpleXMLElementIterator
Variant * c_SimpleXMLElementIterator::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_SimpleXMLElementIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_SimpleXMLElementIterator
Variant * c_SimpleXMLElementIterator::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_SimpleXMLElementIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_SimpleXMLElementIterator
Variant * c_SimpleXMLElementIterator::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_SimpleXMLElementIterator
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_SimpleXMLElementIterator
Variant c_SimpleXMLElementIterator::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_SimpleXMLElementIterator
IMPLEMENT_CLASS(SimpleXMLElementIterator)
ObjectData *c_SimpleXMLElementIterator::cloneImpl() {
  ObjectData *obj = coo_SimpleXMLElementIterator();
  c_SimpleXMLElementIterator::cloneSet(obj);
  return obj;
}
void c_SimpleXMLElementIterator::cloneSet(ObjectData *cl) {
  c_SimpleXMLElementIterator *clone = static_cast<c_SimpleXMLElementIterator*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_SimpleXMLElementIterator::ci_next((void*)&c_SimpleXMLElementIterator::i_next, (void*)&c_SimpleXMLElementIterator::ifa_next, 0, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElementIterator::ci_key((void*)&c_SimpleXMLElementIterator::i_key, (void*)&c_SimpleXMLElementIterator::ifa_key, 0, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElementIterator::ci_valid((void*)&c_SimpleXMLElementIterator::i_valid, (void*)&c_SimpleXMLElementIterator::ifa_valid, 0, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElementIterator::ci___destruct((void*)&c_SimpleXMLElementIterator::i___destruct, (void*)&c_SimpleXMLElementIterator::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElementIterator::ci___construct((void*)&c_SimpleXMLElementIterator::i___construct, (void*)&c_SimpleXMLElementIterator::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElementIterator::ci_current((void*)&c_SimpleXMLElementIterator::i_current, (void*)&c_SimpleXMLElementIterator::ifa_current, 0, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElementIterator::ci_rewind((void*)&c_SimpleXMLElementIterator::i_rewind, (void*)&c_SimpleXMLElementIterator::ifa_rewind, 0, 4, 0x0000000000000000LL);
Variant c_SimpleXMLElementIterator::i_next(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_next, coo_SimpleXMLElementIterator);
  }
  c_SimpleXMLElementIterator *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElementIterator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("next", 0, 1);
  return (self->t_next());
}
Variant c_SimpleXMLElementIterator::i_key(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_key, coo_SimpleXMLElementIterator);
  }
  c_SimpleXMLElementIterator *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElementIterator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("key", 0, 1);
  return (self->t_key());
}
Variant c_SimpleXMLElementIterator::i_valid(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_valid, coo_SimpleXMLElementIterator);
  }
  c_SimpleXMLElementIterator *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElementIterator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("valid", 0, 1);
  return (self->t_valid());
}
Variant c_SimpleXMLElementIterator::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_SimpleXMLElementIterator);
  }
  c_SimpleXMLElementIterator *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElementIterator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_SimpleXMLElementIterator::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_SimpleXMLElementIterator);
  }
  c_SimpleXMLElementIterator *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElementIterator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_SimpleXMLElementIterator::i_current(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_current, coo_SimpleXMLElementIterator);
  }
  c_SimpleXMLElementIterator *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElementIterator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("current", 0, 1);
  return (self->t_current());
}
Variant c_SimpleXMLElementIterator::i_rewind(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_rewind, coo_SimpleXMLElementIterator);
  }
  c_SimpleXMLElementIterator *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElementIterator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("rewind", 0, 1);
  return (self->t_rewind());
}
Variant c_SimpleXMLElementIterator::ifa_next(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_next, coo_SimpleXMLElementIterator);
  }
  c_SimpleXMLElementIterator *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElementIterator*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("next", 0, 1);
  return (self->t_next());
}
Variant c_SimpleXMLElementIterator::ifa_key(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_key, coo_SimpleXMLElementIterator);
  }
  c_SimpleXMLElementIterator *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElementIterator*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("key", 0, 1);
  return (self->t_key());
}
Variant c_SimpleXMLElementIterator::ifa_valid(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_valid, coo_SimpleXMLElementIterator);
  }
  c_SimpleXMLElementIterator *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElementIterator*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("valid", 0, 1);
  return (self->t_valid());
}
Variant c_SimpleXMLElementIterator::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_SimpleXMLElementIterator);
  }
  c_SimpleXMLElementIterator *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElementIterator*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_SimpleXMLElementIterator::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_SimpleXMLElementIterator);
  }
  c_SimpleXMLElementIterator *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElementIterator*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_SimpleXMLElementIterator::ifa_current(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_current, coo_SimpleXMLElementIterator);
  }
  c_SimpleXMLElementIterator *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElementIterator*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("current", 0, 1);
  return (self->t_current());
}
Variant c_SimpleXMLElementIterator::ifa_rewind(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_rewind, coo_SimpleXMLElementIterator);
  }
  c_SimpleXMLElementIterator *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElementIterator*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("rewind", 0, 1);
  return (self->t_rewind());
}
const MethodCallInfoTable c_SimpleXMLElementIterator::s_call_info_table[] = {
  { 0x56EDB60C824E8C51LL, 1, 3, "key", &c_SimpleXMLElementIterator::ci_key },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_SimpleXMLElementIterator::ci___destruct },
  { 0x6413CB5154808C44LL, 1, 5, "valid", &c_SimpleXMLElementIterator::ci_valid },
  { 0x3C6D50F3BB8102B8LL, 1, 4, "next", &c_SimpleXMLElementIterator::ci_next },
  { 0x1670096FDE27AF6ALL, 1, 6, "rewind", &c_SimpleXMLElementIterator::ci_rewind },
  { 0x5B3A4A72846B21DCLL, 1, 7, "current", &c_SimpleXMLElementIterator::ci_current },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_SimpleXMLElementIterator::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_SimpleXMLElementIterator::s_call_info_index[] = {
  15,
  -1,0,-1,1,2,-1,-1,-1,
  3,-1,4,-1,5,-1,-1,6,

};
c_SimpleXMLElementIterator *c_SimpleXMLElementIterator::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_SimpleXMLElementIterator::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_SimpleXMLElementIterator::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_SimpleXMLElementIterator::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_SimpleXMLElementIterator = {
  c_SimpleXMLElementIterator::os_getInit,
  c_SimpleXMLElementIterator::os_get,
  c_SimpleXMLElementIterator::os_lval,
  c_SimpleXMLElementIterator::os_invoke,
  c_SimpleXMLElementIterator::os_constant,
  (ObjectData*(*)(ObjectData*))coo_SimpleXMLElementIterator,
  c_SimpleXMLElementIterator::s_call_info_table,c_SimpleXMLElementIterator::s_call_info_index,
  "SimpleXMLElementIterator",
  0
};
ObjectData *coo_GeneratorClosure() {
  return NEWOBJ(c_GeneratorClosure)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_GeneratorClosure
Variant c_GeneratorClosure::os_getInit(CStrRef s) {
  return c_Closure::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_GeneratorClosure
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_GeneratorClosure
Variant c_GeneratorClosure::os_get(CStrRef s) {
  return c_Closure::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_GeneratorClosure
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_GeneratorClosure
Variant &c_GeneratorClosure::os_lval(CStrRef s) {
  return c_Closure::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_GeneratorClosure
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_GeneratorClosure
Variant * c_GeneratorClosure::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_GeneratorClosure
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_GeneratorClosure
Variant * c_GeneratorClosure::o_realPropPublic(CStrRef s, int flags) const {
  return c_Closure::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_GeneratorClosure
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_GeneratorClosure
Variant * c_GeneratorClosure::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_GeneratorClosure
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_GeneratorClosure
Variant c_GeneratorClosure::os_constant(const char *s) {
  return c_Closure::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_GeneratorClosure
IMPLEMENT_CLASS(GeneratorClosure)
ObjectData *c_GeneratorClosure::cloneImpl() {
  ObjectData *obj = coo_GeneratorClosure();
  c_GeneratorClosure::cloneSet(obj);
  return obj;
}
void c_GeneratorClosure::cloneSet(ObjectData *cl) {
  c_GeneratorClosure *clone = static_cast<c_GeneratorClosure*>(cl);
  c_Closure::cloneSet(clone);
}
CallInfo c_GeneratorClosure::ci___destruct((void*)&c_GeneratorClosure::i___destruct, (void*)&c_GeneratorClosure::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_GeneratorClosure::ci___construct((void*)&c_GeneratorClosure::i___construct, (void*)&c_GeneratorClosure::ifa___construct, 0, 4, 0x0000000000000000LL);
Variant c_GeneratorClosure::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_GeneratorClosure);
  }
  c_GeneratorClosure *self ATTRIBUTE_UNUSED (static_cast<c_GeneratorClosure*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_GeneratorClosure::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_GeneratorClosure);
  }
  c_GeneratorClosure *self ATTRIBUTE_UNUSED (static_cast<c_GeneratorClosure*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_GeneratorClosure::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_GeneratorClosure);
  }
  c_GeneratorClosure *self ATTRIBUTE_UNUSED (static_cast<c_GeneratorClosure*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_GeneratorClosure::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_GeneratorClosure);
  }
  c_GeneratorClosure *self ATTRIBUTE_UNUSED (static_cast<c_GeneratorClosure*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
const MethodCallInfoTable c_GeneratorClosure::s_call_info_table[] = {
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_GeneratorClosure::ci___destruct },
  { 0x0D31D0AC229C615FLL, 0, 11, "__construct", &c_GeneratorClosure::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_GeneratorClosure::s_call_info_index[] = {
  3,
  -1,-1,-1,0,
};
c_GeneratorClosure *c_GeneratorClosure::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_GeneratorClosure::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_GeneratorClosure::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_GeneratorClosure::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_GeneratorClosure = {
  c_GeneratorClosure::os_getInit,
  c_GeneratorClosure::os_get,
  c_GeneratorClosure::os_lval,
  c_GeneratorClosure::os_invoke,
  c_GeneratorClosure::os_constant,
  (ObjectData*(*)(ObjectData*))coo_GeneratorClosure,
  c_GeneratorClosure::s_call_info_table,c_GeneratorClosure::s_call_info_index,
  "GeneratorClosure",
  &cw_Closure
};
ObjectData *coo_DateTimeZone() {
  return NEWOBJ(c_DateTimeZone)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DateTimeZone
Variant c_DateTimeZone::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DateTimeZone
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DateTimeZone
Variant c_DateTimeZone::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DateTimeZone
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DateTimeZone
Variant &c_DateTimeZone::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DateTimeZone
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DateTimeZone
Variant * c_DateTimeZone::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DateTimeZone
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DateTimeZone
Variant * c_DateTimeZone::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DateTimeZone
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DateTimeZone
Variant * c_DateTimeZone::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DateTimeZone
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DateTimeZone
Variant c_DateTimeZone::os_constant(const char *s) {
  int64 hash = hash_string(s);
  switch (hash & 31) {
    case 2:
      HASH_RETURN(0x5213CDB166554802LL, q_DateTimeZone_AFRICA, "AFRICA");
      break;
    case 10:
      HASH_RETURN(0x1F67AB7044E3CA2ALL, q_DateTimeZone_EUROPE, "EUROPE");
      break;
    case 12:
      HASH_RETURN(0x76F99914EEA96ECCLL, q_DateTimeZone_ARCTIC, "ARCTIC");
      break;
    case 13:
      HASH_RETURN(0x338F44565E0C038DLL, q_DateTimeZone_AMERICA, "AMERICA");
      break;
    case 15:
      HASH_RETURN(0x22CAA6990573E5EFLL, q_DateTimeZone_PACIFIC, "PACIFIC");
      break;
    case 19:
      HASH_RETURN(0x7879534F49C301F3LL, q_DateTimeZone_PER_COUNTRY, "PER_COUNTRY");
      break;
    case 20:
      HASH_RETURN(0x6FB9D84AA364CA14LL, q_DateTimeZone_UTC, "UTC");
      break;
    case 23:
      HASH_RETURN(0x5A01AACAA61E0FF7LL, q_DateTimeZone_ASIA, "ASIA");
      HASH_RETURN(0x3E74CAEDAD25E137LL, q_DateTimeZone_INDIAN, "INDIAN");
      break;
    case 24:
      HASH_RETURN(0x0C4F30470A9EEBF8LL, q_DateTimeZone_ALL, "ALL");
      break;
    case 25:
      HASH_RETURN(0x2BEDCED53E63BC79LL, q_DateTimeZone_ATLANTIC, "ATLANTIC");
      break;
    case 30:
      HASH_RETURN(0x3C168ED86522549ELL, q_DateTimeZone_AUSTRALIA, "AUSTRALIA");
      HASH_RETURN(0x690180C3BA732B5ELL, q_DateTimeZone_ALL_WITH_BC, "ALL_WITH_BC");
      break;
    case 31:
      HASH_RETURN(0x6B29DE65F46EAFDFLL, q_DateTimeZone_ANTARCTICA, "ANTARCTICA");
      break;
    default:
      break;
  }
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DateTimeZone
IMPLEMENT_CLASS(DateTimeZone)
ObjectData *c_DateTimeZone::cloneImpl() {
  ObjectData *obj = coo_DateTimeZone();
  c_DateTimeZone::cloneSet(obj);
  return obj;
}
void c_DateTimeZone::cloneSet(ObjectData *cl) {
  c_DateTimeZone *clone = static_cast<c_DateTimeZone*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_DateTimeZone::ci_gettransitions((void*)&c_DateTimeZone::i_gettransitions, (void*)&c_DateTimeZone::ifa_gettransitions, 0, 4, 0x0000000000000000LL);
CallInfo c_DateTimeZone::ci_listidentifiers((void*)&c_DateTimeZone::i_listidentifiers, (void*)&c_DateTimeZone::ifa_listidentifiers, 0, 12, 0x0000000000000000LL);
CallInfo c_DateTimeZone::ci___destruct((void*)&c_DateTimeZone::i___destruct, (void*)&c_DateTimeZone::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_DateTimeZone::ci_getoffset((void*)&c_DateTimeZone::i_getoffset, (void*)&c_DateTimeZone::ifa_getoffset, 1, 4, 0x0000000000000000LL);
CallInfo c_DateTimeZone::ci___construct((void*)&c_DateTimeZone::i___construct, (void*)&c_DateTimeZone::ifa___construct, 1, 4, 0x0000000000000000LL);
CallInfo c_DateTimeZone::ci_listabbreviations((void*)&c_DateTimeZone::i_listabbreviations, (void*)&c_DateTimeZone::ifa_listabbreviations, 0, 12, 0x0000000000000000LL);
CallInfo c_DateTimeZone::ci_getname((void*)&c_DateTimeZone::i_getname, (void*)&c_DateTimeZone::ifa_getname, 0, 4, 0x0000000000000000LL);
Variant c_DateTimeZone::i_gettransitions(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_gettransitions, coo_DateTimeZone);
  }
  c_DateTimeZone *self ATTRIBUTE_UNUSED (static_cast<c_DateTimeZone*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("gettransitions", 0, 1);
  return (self->t_gettransitions());
}
Variant c_DateTimeZone::i_listidentifiers(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("listidentifiers", 0, 1);
  return (c_DateTimeZone::t_listidentifiers());
}
Variant c_DateTimeZone::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_DateTimeZone);
  }
  c_DateTimeZone *self ATTRIBUTE_UNUSED (static_cast<c_DateTimeZone*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DateTimeZone::i_getoffset(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getoffset, coo_DateTimeZone);
  }
  c_DateTimeZone *self ATTRIBUTE_UNUSED (static_cast<c_DateTimeZone*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getoffset", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getoffset(arg0));
  }
}
Variant c_DateTimeZone::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_DateTimeZone);
  }
  c_DateTimeZone *self ATTRIBUTE_UNUSED (static_cast<c_DateTimeZone*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__construct", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___construct(arg0), null);
  }
}
Variant c_DateTimeZone::i_listabbreviations(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("listabbreviations", 0, 1);
  return (c_DateTimeZone::t_listabbreviations());
}
Variant c_DateTimeZone::i_getname(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getname, coo_DateTimeZone);
  }
  c_DateTimeZone *self ATTRIBUTE_UNUSED (static_cast<c_DateTimeZone*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getname", 0, 1);
  return (self->t_getname());
}
Variant c_DateTimeZone::ifa_gettransitions(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_gettransitions, coo_DateTimeZone);
  }
  c_DateTimeZone *self ATTRIBUTE_UNUSED (static_cast<c_DateTimeZone*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("gettransitions", 0, 1);
  return (self->t_gettransitions());
}
Variant c_DateTimeZone::ifa_listidentifiers(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("listidentifiers", 0, 1);
  return (c_DateTimeZone::t_listidentifiers());
}
Variant c_DateTimeZone::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_DateTimeZone);
  }
  c_DateTimeZone *self ATTRIBUTE_UNUSED (static_cast<c_DateTimeZone*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DateTimeZone::ifa_getoffset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getoffset, coo_DateTimeZone);
  }
  c_DateTimeZone *self ATTRIBUTE_UNUSED (static_cast<c_DateTimeZone*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getoffset", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_getoffset(arg0));
}
Variant c_DateTimeZone::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_DateTimeZone);
  }
  c_DateTimeZone *self ATTRIBUTE_UNUSED (static_cast<c_DateTimeZone*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__construct", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___construct(arg0), null);
}
Variant c_DateTimeZone::ifa_listabbreviations(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("listabbreviations", 0, 1);
  return (c_DateTimeZone::t_listabbreviations());
}
Variant c_DateTimeZone::ifa_getname(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getname, coo_DateTimeZone);
  }
  c_DateTimeZone *self ATTRIBUTE_UNUSED (static_cast<c_DateTimeZone*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getname", 0, 1);
  return (self->t_getname());
}
const MethodCallInfoTable c_DateTimeZone::s_call_info_table[] = {
  { 0x6D7CD16BBA93D063LL, 1, 15, "listIdentifiers", &c_DateTimeZone::ci_listidentifiers },
  { 0x7F974836AACC1EF3LL, 0, 10, "__destruct", &c_DateTimeZone::ci___destruct },
  { 0x63D3CF3884CE93F4LL, 1, 14, "getTransitions", &c_DateTimeZone::ci_gettransitions },
  { 0x23F51CDECC198965LL, 1, 7, "getName", &c_DateTimeZone::ci_getname },
  { 0x2D0CCAB16C3ED068LL, 1, 17, "listAbbreviations", &c_DateTimeZone::ci_listabbreviations },
  { 0x68DB66F60B55BD0BLL, 1, 9, "getOffset", &c_DateTimeZone::ci_getoffset },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_DateTimeZone::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_DateTimeZone::s_call_info_index[] = {
  15,
  -1,-1,-1,0,2,3,-1,-1,
  4,-1,-1,5,-1,-1,-1,6,

};
c_DateTimeZone *c_DateTimeZone::create(String a0) {
  CountableHelper h(this);
  init();
  t___construct(a0);
  return this;
}
void c_DateTimeZone::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) throw_wrong_arguments("__construct", count, 1, 1, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    (t___construct(arg0));
  }
}
void c_DateTimeZone::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DateTimeZone::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_DateTimeZone = {
  c_DateTimeZone::os_getInit,
  c_DateTimeZone::os_get,
  c_DateTimeZone::os_lval,
  c_DateTimeZone::os_invoke,
  c_DateTimeZone::os_constant,
  (ObjectData*(*)(ObjectData*))coo_DateTimeZone,
  c_DateTimeZone::s_call_info_table,c_DateTimeZone::s_call_info_index,
  "DateTimeZone",
  0
};
ObjectData *coo_DOMNodeIterator() {
  return NEWOBJ(c_DOMNodeIterator)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMNodeIterator
Variant c_DOMNodeIterator::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMNodeIterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMNodeIterator
Variant c_DOMNodeIterator::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMNodeIterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMNodeIterator
Variant &c_DOMNodeIterator::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMNodeIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DOMNodeIterator
Variant * c_DOMNodeIterator::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DOMNodeIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMNodeIterator
Variant * c_DOMNodeIterator::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMNodeIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMNodeIterator
Variant * c_DOMNodeIterator::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMNodeIterator
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMNodeIterator
Variant c_DOMNodeIterator::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMNodeIterator
IMPLEMENT_CLASS_NO_DEFAULT_SWEEP(DOMNodeIterator)
ObjectData *c_DOMNodeIterator::cloneImpl() {
  ObjectData *obj = coo_DOMNodeIterator();
  c_DOMNodeIterator::cloneSet(obj);
  return obj;
}
void c_DOMNodeIterator::cloneSet(ObjectData *cl) {
  c_DOMNodeIterator *clone = static_cast<c_DOMNodeIterator*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_DOMNodeIterator::ci_next((void*)&c_DOMNodeIterator::i_next, (void*)&c_DOMNodeIterator::ifa_next, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMNodeIterator::ci_key((void*)&c_DOMNodeIterator::i_key, (void*)&c_DOMNodeIterator::ifa_key, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMNodeIterator::ci_valid((void*)&c_DOMNodeIterator::i_valid, (void*)&c_DOMNodeIterator::ifa_valid, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMNodeIterator::ci___destruct((void*)&c_DOMNodeIterator::i___destruct, (void*)&c_DOMNodeIterator::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMNodeIterator::ci___construct((void*)&c_DOMNodeIterator::i___construct, (void*)&c_DOMNodeIterator::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMNodeIterator::ci_current((void*)&c_DOMNodeIterator::i_current, (void*)&c_DOMNodeIterator::ifa_current, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMNodeIterator::ci_rewind((void*)&c_DOMNodeIterator::i_rewind, (void*)&c_DOMNodeIterator::ifa_rewind, 0, 4, 0x0000000000000000LL);
Variant c_DOMNodeIterator::i_next(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_next, coo_DOMNodeIterator);
  }
  c_DOMNodeIterator *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeIterator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("next", 0, 1);
  return (self->t_next());
}
Variant c_DOMNodeIterator::i_key(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_key, coo_DOMNodeIterator);
  }
  c_DOMNodeIterator *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeIterator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("key", 0, 1);
  return (self->t_key());
}
Variant c_DOMNodeIterator::i_valid(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_valid, coo_DOMNodeIterator);
  }
  c_DOMNodeIterator *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeIterator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("valid", 0, 1);
  return (self->t_valid());
}
Variant c_DOMNodeIterator::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_DOMNodeIterator);
  }
  c_DOMNodeIterator *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeIterator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMNodeIterator::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_DOMNodeIterator);
  }
  c_DOMNodeIterator *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeIterator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DOMNodeIterator::i_current(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_current, coo_DOMNodeIterator);
  }
  c_DOMNodeIterator *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeIterator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("current", 0, 1);
  return (self->t_current());
}
Variant c_DOMNodeIterator::i_rewind(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_rewind, coo_DOMNodeIterator);
  }
  c_DOMNodeIterator *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeIterator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("rewind", 0, 1);
  return (self->t_rewind());
}
Variant c_DOMNodeIterator::ifa_next(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_next, coo_DOMNodeIterator);
  }
  c_DOMNodeIterator *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeIterator*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("next", 0, 1);
  return (self->t_next());
}
Variant c_DOMNodeIterator::ifa_key(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_key, coo_DOMNodeIterator);
  }
  c_DOMNodeIterator *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeIterator*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("key", 0, 1);
  return (self->t_key());
}
Variant c_DOMNodeIterator::ifa_valid(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_valid, coo_DOMNodeIterator);
  }
  c_DOMNodeIterator *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeIterator*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("valid", 0, 1);
  return (self->t_valid());
}
Variant c_DOMNodeIterator::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_DOMNodeIterator);
  }
  c_DOMNodeIterator *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeIterator*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMNodeIterator::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_DOMNodeIterator);
  }
  c_DOMNodeIterator *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeIterator*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DOMNodeIterator::ifa_current(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_current, coo_DOMNodeIterator);
  }
  c_DOMNodeIterator *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeIterator*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("current", 0, 1);
  return (self->t_current());
}
Variant c_DOMNodeIterator::ifa_rewind(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_rewind, coo_DOMNodeIterator);
  }
  c_DOMNodeIterator *self ATTRIBUTE_UNUSED (static_cast<c_DOMNodeIterator*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("rewind", 0, 1);
  return (self->t_rewind());
}
const MethodCallInfoTable c_DOMNodeIterator::s_call_info_table[] = {
  { 0x56EDB60C824E8C51LL, 1, 3, "key", &c_DOMNodeIterator::ci_key },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_DOMNodeIterator::ci___destruct },
  { 0x6413CB5154808C44LL, 1, 5, "valid", &c_DOMNodeIterator::ci_valid },
  { 0x3C6D50F3BB8102B8LL, 1, 4, "next", &c_DOMNodeIterator::ci_next },
  { 0x1670096FDE27AF6ALL, 1, 6, "rewind", &c_DOMNodeIterator::ci_rewind },
  { 0x5B3A4A72846B21DCLL, 1, 7, "current", &c_DOMNodeIterator::ci_current },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_DOMNodeIterator::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_DOMNodeIterator::s_call_info_index[] = {
  15,
  -1,0,-1,1,2,-1,-1,-1,
  3,-1,4,-1,5,-1,-1,6,

};
c_DOMNodeIterator *c_DOMNodeIterator::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_DOMNodeIterator::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_DOMNodeIterator::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DOMNodeIterator::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_DOMNodeIterator = {
  c_DOMNodeIterator::os_getInit,
  c_DOMNodeIterator::os_get,
  c_DOMNodeIterator::os_lval,
  c_DOMNodeIterator::os_invoke,
  c_DOMNodeIterator::os_constant,
  (ObjectData*(*)(ObjectData*))coo_DOMNodeIterator,
  c_DOMNodeIterator::s_call_info_table,c_DOMNodeIterator::s_call_info_index,
  "DOMNodeIterator",
  0
};
ObjectData *coo_DOMImplementation() {
  return NEWOBJ(c_DOMImplementation)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMImplementation
Variant c_DOMImplementation::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMImplementation
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMImplementation
Variant c_DOMImplementation::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMImplementation
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMImplementation
Variant &c_DOMImplementation::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMImplementation
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DOMImplementation
Variant * c_DOMImplementation::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DOMImplementation
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMImplementation
Variant * c_DOMImplementation::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMImplementation
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMImplementation
Variant * c_DOMImplementation::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMImplementation
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMImplementation
Variant c_DOMImplementation::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMImplementation
IMPLEMENT_CLASS(DOMImplementation)
ObjectData *c_DOMImplementation::cloneImpl() {
  ObjectData *obj = coo_DOMImplementation();
  c_DOMImplementation::cloneSet(obj);
  return obj;
}
void c_DOMImplementation::cloneSet(ObjectData *cl) {
  c_DOMImplementation *clone = static_cast<c_DOMImplementation*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_DOMImplementation::ci_createdocument((void*)&c_DOMImplementation::i_createdocument, (void*)&c_DOMImplementation::ifa_createdocument, 3, 4, 0x0000000000000000LL);
CallInfo c_DOMImplementation::ci_createdocumenttype((void*)&c_DOMImplementation::i_createdocumenttype, (void*)&c_DOMImplementation::ifa_createdocumenttype, 3, 4, 0x0000000000000000LL);
CallInfo c_DOMImplementation::ci___destruct((void*)&c_DOMImplementation::i___destruct, (void*)&c_DOMImplementation::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMImplementation::ci___construct((void*)&c_DOMImplementation::i___construct, (void*)&c_DOMImplementation::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMImplementation::ci_hasfeature((void*)&c_DOMImplementation::i_hasfeature, (void*)&c_DOMImplementation::ifa_hasfeature, 2, 4, 0x0000000000000000LL);
Variant c_DOMImplementation::i_createdocument(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_createdocument, coo_DOMImplementation);
  }
  c_DOMImplementation *self ATTRIBUTE_UNUSED (static_cast<c_DOMImplementation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("createdocument", 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_createdocument());
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_createdocument(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_createdocument(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_createdocument(arg0, arg1, arg2));
  }
}
Variant c_DOMImplementation::i_createdocumenttype(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_createdocumenttype, coo_DOMImplementation);
  }
  c_DOMImplementation *self ATTRIBUTE_UNUSED (static_cast<c_DOMImplementation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("createdocumenttype", 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_createdocumenttype());
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_createdocumenttype(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_createdocumenttype(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_createdocumenttype(arg0, arg1, arg2));
  }
}
Variant c_DOMImplementation::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_DOMImplementation);
  }
  c_DOMImplementation *self ATTRIBUTE_UNUSED (static_cast<c_DOMImplementation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMImplementation::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_DOMImplementation);
  }
  c_DOMImplementation *self ATTRIBUTE_UNUSED (static_cast<c_DOMImplementation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DOMImplementation::i_hasfeature(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_hasfeature, coo_DOMImplementation);
  }
  c_DOMImplementation *self ATTRIBUTE_UNUSED (static_cast<c_DOMImplementation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hasfeature", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_hasfeature(arg0, arg1));
  }
}
Variant c_DOMImplementation::ifa_createdocument(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_createdocument, coo_DOMImplementation);
  }
  c_DOMImplementation *self ATTRIBUTE_UNUSED (static_cast<c_DOMImplementation*>(mcp.obj));
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("createdocument", 3, 1);
  if (count <= 0) return (self->t_createdocument());
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_createdocument(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_createdocument(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_createdocument(arg0, arg1, arg2));
}
Variant c_DOMImplementation::ifa_createdocumenttype(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_createdocumenttype, coo_DOMImplementation);
  }
  c_DOMImplementation *self ATTRIBUTE_UNUSED (static_cast<c_DOMImplementation*>(mcp.obj));
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("createdocumenttype", 3, 1);
  if (count <= 0) return (self->t_createdocumenttype());
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_createdocumenttype(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_createdocumenttype(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_createdocumenttype(arg0, arg1, arg2));
}
Variant c_DOMImplementation::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_DOMImplementation);
  }
  c_DOMImplementation *self ATTRIBUTE_UNUSED (static_cast<c_DOMImplementation*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMImplementation::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_DOMImplementation);
  }
  c_DOMImplementation *self ATTRIBUTE_UNUSED (static_cast<c_DOMImplementation*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DOMImplementation::ifa_hasfeature(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_hasfeature, coo_DOMImplementation);
  }
  c_DOMImplementation *self ATTRIBUTE_UNUSED (static_cast<c_DOMImplementation*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hasfeature", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_hasfeature(arg0, arg1));
}
const MethodCallInfoTable c_DOMImplementation::s_call_info_table[] = {
  { 0x3CB56A796F3DBAC3LL, 1, 18, "createDocumentType", &c_DOMImplementation::ci_createdocumenttype },
  { 0x7F974836AACC1EF3LL, 0, 10, "__destruct", &c_DOMImplementation::ci___destruct },
  { 0x280878EAC306A6A3LL, 0, 10, "hasFeature", &c_DOMImplementation::ci_hasfeature },
  { 0x30855E95B37D1B4ELL, 1, 14, "createDocument", &c_DOMImplementation::ci_createdocument },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_DOMImplementation::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_DOMImplementation::s_call_info_index[] = {
  15,
  -1,-1,-1,0,-1,-1,-1,-1,
  -1,-1,-1,-1,-1,-1,3,4,

};
c_DOMImplementation *c_DOMImplementation::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_DOMImplementation::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_DOMImplementation::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DOMImplementation::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_DOMImplementation = {
  c_DOMImplementation::os_getInit,
  c_DOMImplementation::os_get,
  c_DOMImplementation::os_lval,
  c_DOMImplementation::os_invoke,
  c_DOMImplementation::os_constant,
  (ObjectData*(*)(ObjectData*))coo_DOMImplementation,
  c_DOMImplementation::s_call_info_table,c_DOMImplementation::s_call_info_index,
  "DOMImplementation",
  0
};
ObjectData *coo_SoapHeader() {
  return NEWOBJ(c_SoapHeader)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_SoapHeader
Variant c_SoapHeader::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_SoapHeader
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_SoapHeader
Variant c_SoapHeader::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_SoapHeader
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_SoapHeader
Variant &c_SoapHeader::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_SoapHeader
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_SoapHeader
Variant * c_SoapHeader::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_SoapHeader
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_SoapHeader
Variant * c_SoapHeader::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_SoapHeader
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_SoapHeader
Variant * c_SoapHeader::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_SoapHeader
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_SoapHeader
Variant c_SoapHeader::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_SoapHeader
IMPLEMENT_CLASS(SoapHeader)
ObjectData *c_SoapHeader::cloneImpl() {
  ObjectData *obj = coo_SoapHeader();
  c_SoapHeader::cloneSet(obj);
  return obj;
}
void c_SoapHeader::cloneSet(ObjectData *cl) {
  c_SoapHeader *clone = static_cast<c_SoapHeader*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_SoapHeader::ci___destruct((void*)&c_SoapHeader::i___destruct, (void*)&c_SoapHeader::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_SoapHeader::ci___construct((void*)&c_SoapHeader::i___construct, (void*)&c_SoapHeader::ifa___construct, 5, 4, 0x0000000000000000LL);
Variant c_SoapHeader::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_SoapHeader);
  }
  c_SoapHeader *self ATTRIBUTE_UNUSED (static_cast<c_SoapHeader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_SoapHeader::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_SoapHeader);
  }
  c_SoapHeader *self ATTRIBUTE_UNUSED (static_cast<c_SoapHeader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 5)) return throw_wrong_arguments("__construct", count, 2, 5, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t___construct(arg0, arg1), null);
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t___construct(arg0, arg1, arg2), null);
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (self->t___construct(arg0, arg1, arg2, arg3), null);
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___construct(arg0, arg1, arg2, arg3, arg4), null);
  }
}
Variant c_SoapHeader::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_SoapHeader);
  }
  c_SoapHeader *self ATTRIBUTE_UNUSED (static_cast<c_SoapHeader*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_SoapHeader::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_SoapHeader);
  }
  c_SoapHeader *self ATTRIBUTE_UNUSED (static_cast<c_SoapHeader*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 5)) return throw_wrong_arguments("__construct", count, 2, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t___construct(arg0, arg1), null);
  CVarRef arg2(a2);
  if (count <= 3) return (self->t___construct(arg0, arg1, arg2), null);
  CVarRef arg3(a3);
  if (count <= 4) return (self->t___construct(arg0, arg1, arg2, arg3), null);
  CVarRef arg4(a4);
  return (self->t___construct(arg0, arg1, arg2, arg3, arg4), null);
}
const MethodCallInfoTable c_SoapHeader::s_call_info_table[] = {
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_SoapHeader::ci___destruct },
  { 0x0D31D0AC229C615FLL, 0, 11, "__construct", &c_SoapHeader::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_SoapHeader::s_call_info_index[] = {
  3,
  -1,-1,-1,0,
};
c_SoapHeader *c_SoapHeader::create(String a0, String a1, Variant a2, bool a3, Variant a4) {
  CountableHelper h(this);
  init();
  t___construct(a0, a1, a2, a3, a4);
  return this;
}
void c_SoapHeader::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 5)) throw_wrong_arguments("__construct", count, 2, 5, 2);
  do {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) {
      (t___construct(arg0, arg1));
      break;
    }
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) {
      (t___construct(arg0, arg1, arg2));
      break;
    }
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) {
      (t___construct(arg0, arg1, arg2, arg3));
      break;
    }
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    (t___construct(arg0, arg1, arg2, arg3, arg4));
  } while (false);
}
void c_SoapHeader::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_SoapHeader::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_SoapHeader = {
  c_SoapHeader::os_getInit,
  c_SoapHeader::os_get,
  c_SoapHeader::os_lval,
  c_SoapHeader::os_invoke,
  c_SoapHeader::os_constant,
  (ObjectData*(*)(ObjectData*))coo_SoapHeader,
  c_SoapHeader::s_call_info_table,c_SoapHeader::s_call_info_index,
  "SoapHeader",
  0
};
ObjectData *coo_DOMNotation() {
  return NEWOBJ(c_DOMNotation)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMNotation
Variant c_DOMNotation::os_getInit(CStrRef s) {
  return c_DOMNode::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMNotation
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMNotation
Variant c_DOMNotation::os_get(CStrRef s) {
  return c_DOMNode::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMNotation
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMNotation
Variant &c_DOMNotation::os_lval(CStrRef s) {
  return c_DOMNode::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMNotation
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DOMNotation
Variant * c_DOMNotation::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DOMNotation
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMNotation
Variant * c_DOMNotation::o_realPropPublic(CStrRef s, int flags) const {
  return c_DOMNode::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMNotation
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMNotation
Variant * c_DOMNotation::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMNotation
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMNotation
Variant c_DOMNotation::os_constant(const char *s) {
  return c_DOMNode::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMNotation
IMPLEMENT_CLASS(DOMNotation)
ObjectData *c_DOMNotation::cloneImpl() {
  ObjectData *obj = coo_DOMNotation();
  c_DOMNotation::cloneSet(obj);
  return obj;
}
void c_DOMNotation::cloneSet(ObjectData *cl) {
  c_DOMNotation *clone = static_cast<c_DOMNotation*>(cl);
  c_DOMNode::cloneSet(clone);
}
CallInfo c_DOMNotation::ci___destruct((void*)&c_DOMNotation::i___destruct, (void*)&c_DOMNotation::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMNotation::ci___set((void*)&c_DOMNotation::i___set, (void*)&c_DOMNotation::ifa___set, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMNotation::ci___construct((void*)&c_DOMNotation::i___construct, (void*)&c_DOMNotation::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMNotation::ci___get((void*)&c_DOMNotation::i___get, (void*)&c_DOMNotation::ifa___get, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMNotation::ci___isset((void*)&c_DOMNotation::i___isset, (void*)&c_DOMNotation::ifa___isset, 1, 4, 0x0000000000000000LL);
Variant c_DOMNotation::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_DOMNotation);
  }
  c_DOMNotation *self ATTRIBUTE_UNUSED (static_cast<c_DOMNotation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMNotation::i___set(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___set, coo_DOMNotation);
  }
  c_DOMNotation *self ATTRIBUTE_UNUSED (static_cast<c_DOMNotation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___set(arg0, arg1));
  }
}
Variant c_DOMNotation::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_DOMNotation);
  }
  c_DOMNotation *self ATTRIBUTE_UNUSED (static_cast<c_DOMNotation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DOMNotation::i___get(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___get, coo_DOMNotation);
  }
  c_DOMNotation *self ATTRIBUTE_UNUSED (static_cast<c_DOMNotation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___get(arg0));
  }
}
Variant c_DOMNotation::i___isset(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___isset, coo_DOMNotation);
  }
  c_DOMNotation *self ATTRIBUTE_UNUSED (static_cast<c_DOMNotation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___isset(arg0));
  }
}
Variant c_DOMNotation::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_DOMNotation);
  }
  c_DOMNotation *self ATTRIBUTE_UNUSED (static_cast<c_DOMNotation*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMNotation::ifa___set(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___set, coo_DOMNotation);
  }
  c_DOMNotation *self ATTRIBUTE_UNUSED (static_cast<c_DOMNotation*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t___set(arg0, arg1));
}
Variant c_DOMNotation::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_DOMNotation);
  }
  c_DOMNotation *self ATTRIBUTE_UNUSED (static_cast<c_DOMNotation*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DOMNotation::ifa___get(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___get, coo_DOMNotation);
  }
  c_DOMNotation *self ATTRIBUTE_UNUSED (static_cast<c_DOMNotation*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___get(arg0));
}
Variant c_DOMNotation::ifa___isset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___isset, coo_DOMNotation);
  }
  c_DOMNotation *self ATTRIBUTE_UNUSED (static_cast<c_DOMNotation*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___isset(arg0));
}
const MethodCallInfoTable c_DOMNotation::s_call_info_table[] = {
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_DOMNotation::ci___destruct },
  { 0x52F3DAD783340395LL, 1, 5, "__set", &c_DOMNotation::ci___set },
  { 0x4FE08FDDAE2178EELL, 1, 7, "__isset", &c_DOMNotation::ci___isset },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_DOMNotation::ci___construct },
  { 0x26B6E00C74FA338FLL, 0, 5, "__get", &c_DOMNotation::ci___get },
  { 0, 1, 0, 0 }
};
const int c_DOMNotation::s_call_info_index[] = {
  15,
  -1,-1,-1,0,-1,1,-1,-1,
  -1,-1,-1,-1,-1,-1,2,3,

};
c_DOMNotation *c_DOMNotation::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_DOMNotation::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_DOMNotation::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DOMNotation::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_DOMNotation = {
  c_DOMNotation::os_getInit,
  c_DOMNotation::os_get,
  c_DOMNotation::os_lval,
  c_DOMNotation::os_invoke,
  c_DOMNotation::os_constant,
  (ObjectData*(*)(ObjectData*))coo_DOMNotation,
  c_DOMNotation::s_call_info_table,c_DOMNotation::s_call_info_index,
  "DOMNotation",
  &cw_DOMNode
};
ObjectData *coo_DebuggerProxy() {
  return NEWOBJ(c_DebuggerProxy)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DebuggerProxy
Variant c_DebuggerProxy::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DebuggerProxy
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DebuggerProxy
Variant c_DebuggerProxy::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DebuggerProxy
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DebuggerProxy
Variant &c_DebuggerProxy::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DebuggerProxy
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DebuggerProxy
Variant * c_DebuggerProxy::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DebuggerProxy
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DebuggerProxy
Variant * c_DebuggerProxy::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DebuggerProxy
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DebuggerProxy
Variant * c_DebuggerProxy::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DebuggerProxy
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DebuggerProxy
Variant c_DebuggerProxy::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DebuggerProxy
IMPLEMENT_CLASS(DebuggerProxy)
ObjectData *c_DebuggerProxy::cloneImpl() {
  ObjectData *obj = coo_DebuggerProxy();
  c_DebuggerProxy::cloneSet(obj);
  return obj;
}
void c_DebuggerProxy::cloneSet(ObjectData *cl) {
  c_DebuggerProxy *clone = static_cast<c_DebuggerProxy*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_DebuggerProxy::ci_islocal((void*)&c_DebuggerProxy::i_islocal, (void*)&c_DebuggerProxy::ifa_islocal, 0, 4, 0x0000000000000000LL);
CallInfo c_DebuggerProxy::ci___destruct((void*)&c_DebuggerProxy::i___destruct, (void*)&c_DebuggerProxy::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_DebuggerProxy::ci___construct((void*)&c_DebuggerProxy::i___construct, (void*)&c_DebuggerProxy::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_DebuggerProxy::ci_send((void*)&c_DebuggerProxy::i_send, (void*)&c_DebuggerProxy::ifa_send, 1, 4, 0x0000000000000000LL);
Variant c_DebuggerProxy::i_islocal(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_islocal, coo_DebuggerProxy);
  }
  c_DebuggerProxy *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerProxy*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("islocal", 0, 1);
  return (self->t_islocal());
}
Variant c_DebuggerProxy::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_DebuggerProxy);
  }
  c_DebuggerProxy *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerProxy*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DebuggerProxy::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_DebuggerProxy);
  }
  c_DebuggerProxy *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerProxy*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DebuggerProxy::i_send(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_send, coo_DebuggerProxy);
  }
  c_DebuggerProxy *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerProxy*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("send", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_send(arg0));
  }
}
Variant c_DebuggerProxy::ifa_islocal(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_islocal, coo_DebuggerProxy);
  }
  c_DebuggerProxy *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerProxy*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("islocal", 0, 1);
  return (self->t_islocal());
}
Variant c_DebuggerProxy::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_DebuggerProxy);
  }
  c_DebuggerProxy *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerProxy*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DebuggerProxy::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_DebuggerProxy);
  }
  c_DebuggerProxy *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerProxy*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DebuggerProxy::ifa_send(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_send, coo_DebuggerProxy);
  }
  c_DebuggerProxy *self ATTRIBUTE_UNUSED (static_cast<c_DebuggerProxy*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("send", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_send(arg0));
}
const MethodCallInfoTable c_DebuggerProxy::s_call_info_table[] = {
  { 0x3E0170A7802E3888LL, 1, 4, "send", &c_DebuggerProxy::ci_send },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_DebuggerProxy::ci___destruct },
  { 0x7B58587A529D270CLL, 1, 7, "isLocal", &c_DebuggerProxy::ci_islocal },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_DebuggerProxy::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_DebuggerProxy::s_call_info_index[] = {
  7,
  0,-1,-1,1,2,-1,-1,3,

};
c_DebuggerProxy *c_DebuggerProxy::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_DebuggerProxy::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_DebuggerProxy::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DebuggerProxy::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_DebuggerProxy = {
  c_DebuggerProxy::os_getInit,
  c_DebuggerProxy::os_get,
  c_DebuggerProxy::os_lval,
  c_DebuggerProxy::os_invoke,
  c_DebuggerProxy::os_constant,
  (ObjectData*(*)(ObjectData*))coo_DebuggerProxy,
  c_DebuggerProxy::s_call_info_table,c_DebuggerProxy::s_call_info_index,
  "DebuggerProxy",
  0
};
ObjectData *coo_Memcached() {
  return NEWOBJ(c_Memcached)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_Memcached
Variant c_Memcached::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_Memcached
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_Memcached
Variant c_Memcached::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_Memcached
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_Memcached
Variant &c_Memcached::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_Memcached
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_Memcached
Variant * c_Memcached::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_Memcached
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_Memcached
Variant * c_Memcached::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_Memcached
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_Memcached
Variant * c_Memcached::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_Memcached
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_Memcached
Variant c_Memcached::os_constant(const char *s) {
  int64 hash = hash_string(s);
  switch (hash & 127) {
    case 3:
      HASH_RETURN(0x2CCABB2638D29583LL, q_Memcached_RES_ERRNO, "RES_ERRNO");
      break;
    case 5:
      HASH_RETURN(0x6AF4D4CD7B6B9E85LL, q_Memcached_OPT_TCP_NODELAY, "OPT_TCP_NODELAY");
      break;
    case 7:
      HASH_RETURN(0x1FBB5AC58A77E707LL, q_Memcached_RES_BUFFERED, "RES_BUFFERED");
      break;
    case 10:
      HASH_RETURN(0x261AB88649B2E58ALL, q_Memcached_OPT_SERVER_FAILURE_LIMIT, "OPT_SERVER_FAILURE_LIMIT");
      HASH_RETURN(0x2072FB05B0D6540ALL, q_Memcached_RES_NO_SERVERS, "RES_NO_SERVERS");
      break;
    case 13:
      HASH_RETURN(0x5EC3EFCB1563B68DLL, q_Memcached_OPT_LIBKETAMA_COMPATIBLE, "OPT_LIBKETAMA_COMPATIBLE");
      HASH_RETURN(0x0C53D08ECD9ACC0DLL, q_Memcached_RES_SUCCESS, "RES_SUCCESS");
      break;
    case 22:
      HASH_RETURN(0x7071566611A71D96LL, q_Memcached_OPT_PREFIX_KEY, "OPT_PREFIX_KEY");
      HASH_RETURN(0x425EDC08E649F716LL, q_Memcached_OPT_HASH, "OPT_HASH");
      break;
    case 24:
      HASH_RETURN(0x64B6C925C7A41498LL, q_Memcached_DISTRIBUTION_CONSISTENT, "DISTRIBUTION_CONSISTENT");
      break;
    case 28:
      HASH_RETURN(0x200711C7E62DFB1CLL, q_Memcached_HASH_HSIEH, "HASH_HSIEH");
      HASH_RETURN(0x6B8DE2AA09E1749CLL, q_Memcached_OPT_BINARY_PROTOCOL, "OPT_BINARY_PROTOCOL");
      HASH_RETURN(0x47FC6D6596D2411CLL, q_Memcached_RES_UNKNOWN_READ_FAILURE, "RES_UNKNOWN_READ_FAILURE");
      break;
    case 29:
      HASH_RETURN(0x6364909F8AA5869DLL, q_Memcached_RES_NOTFOUND, "RES_NOTFOUND");
      break;
    case 34:
      HASH_RETURN(0x56E8EF0A2966E7A2LL, q_Memcached_RES_PROTOCOL_ERROR, "RES_PROTOCOL_ERROR");
      HASH_RETURN(0x4A25210D326D0922LL, q_Memcached_RES_CLIENT_ERROR, "RES_CLIENT_ERROR");
      break;
    case 35:
      HASH_RETURN(0x2B230612FB5D80A3LL, q_Memcached_RES_SERVER_ERROR, "RES_SERVER_ERROR");
      break;
    case 37:
      HASH_RETURN(0x49D8D4184B78B3A5LL, q_Memcached_HASH_FNV1A_64, "HASH_FNV1A_64");
      break;
    case 47:
      HASH_RETURN(0x6808EBB81DDE422FLL, q_Memcached_OPT_CACHE_LOOKUPS, "OPT_CACHE_LOOKUPS");
      break;
    case 50:
      HASH_RETURN(0x3A7E842A627341B2LL, q_Memcached_HASH_FNV1_64, "HASH_FNV1_64");
      break;
    case 52:
      HASH_RETURN(0x56895500D1F05334LL, q_Memcached_OPT_SEND_TIMEOUT, "OPT_SEND_TIMEOUT");
      break;
    case 67:
      HASH_RETURN(0x6BC90BF53C6E7CC3LL, q_Memcached_RES_TIMEOUT, "RES_TIMEOUT");
      HASH_RETURN(0x4155BF3DCFA655C3LL, q_Memcached_RES_BAD_KEY_PROVIDED, "RES_BAD_KEY_PROVIDED");
      break;
    case 68:
      HASH_RETURN(0x490A114712BBA544LL, q_Memcached_RES_SOME_ERRORS, "RES_SOME_ERRORS");
      break;
    case 70:
      HASH_RETURN(0x68724938D592E4C6LL, q_Memcached_OPT_SOCKET_SEND_SIZE, "OPT_SOCKET_SEND_SIZE");
      break;
    case 71:
      HASH_RETURN(0x073E4D38138A7DC7LL, q_Memcached_OPT_COMPRESSION, "OPT_COMPRESSION");
      break;
    case 72:
      HASH_RETURN(0x7B91B2E2CC4DE648LL, q_Memcached_SERIALIZER_PHP, "SERIALIZER_PHP");
      break;
    case 75:
      HASH_RETURN(0x138CD297B9FD244BLL, q_Memcached_OPT_RETRY_TIMEOUT, "OPT_RETRY_TIMEOUT");
      break;
    case 78:
      HASH_RETURN(0x74824687F4C8D7CELL, q_Memcached_HAVE_JSON, "HAVE_JSON");
      break;
    case 80:
      HASH_RETURN(0x7AC058297870C1D0LL, q_Memcached_SERIALIZER_JSON, "SERIALIZER_JSON");
      break;
    case 81:
      HASH_RETURN(0x2B4E411F0C7596D1LL, q_Memcached_SERIALIZER_IGBINARY, "SERIALIZER_IGBINARY");
      HASH_RETURN(0x1E8ABFABE00D2651LL, q_Memcached_OPT_NO_BLOCK, "OPT_NO_BLOCK");
      break;
    case 84:
      HASH_RETURN(0x49856B6165627AD4LL, q_Memcached_DISTRIBUTION_MODULA, "DISTRIBUTION_MODULA");
      break;
    case 85:
      HASH_RETURN(0x02FAAD1AB87BA2D5LL, q_Memcached_HASH_CRC, "HASH_CRC");
      HASH_RETURN(0x1045EAC17F112855LL, q_Memcached_RES_WRITE_FAILURE, "RES_WRITE_FAILURE");
      break;
    case 87:
      HASH_RETURN(0x3A3731492FB1B557LL, q_Memcached_HASH_FNV1_32, "HASH_FNV1_32");
      HASH_RETURN(0x345B7B934684B3D7LL, q_Memcached_OPT_SOCKET_RECV_SIZE, "OPT_SOCKET_RECV_SIZE");
      break;
    case 88:
      HASH_RETURN(0x296424A39A9F1AD8LL, q_Memcached_OPT_POLL_TIMEOUT, "OPT_POLL_TIMEOUT");
      break;
    case 91:
      HASH_RETURN(0x3DD14F50C65BCDDBLL, q_Memcached_OPT_DISTRIBUTION, "OPT_DISTRIBUTION");
      HASH_RETURN(0x0224412EA957C9DBLL, q_Memcached_RES_CONNECTION_SOCKET_CREATE_FAILURE, "RES_CONNECTION_SOCKET_CREATE_FAILURE");
      break;
    case 94:
      HASH_RETURN(0x6460D48B93209DDELL, q_Memcached_OPT_RECV_TIMEOUT, "OPT_RECV_TIMEOUT");
      break;
    case 97:
      HASH_RETURN(0x68D025242664C361LL, q_Memcached_GET_PRESERVE_ORDER, "GET_PRESERVE_ORDER");
      break;
    case 100:
      HASH_RETURN(0x53A1149CE01E8C64LL, q_Memcached_HASH_DEFAULT, "HASH_DEFAULT");
      break;
    case 107:
      HASH_RETURN(0x76B0604A2B4408EBLL, q_Memcached_OPT_BUFFER_WRITES, "OPT_BUFFER_WRITES");
      break;
    case 108:
      HASH_RETURN(0x3C4C4E1BC9DFDCECLL, q_Memcached_HASH_FNV1A_32, "HASH_FNV1A_32");
      HASH_RETURN(0x4197FC89C9F88DECLL, q_Memcached_RES_HOST_LOOKUP_FAILURE, "RES_HOST_LOOKUP_FAILURE");
      break;
    case 109:
      HASH_RETURN(0x56C85759C5701DEDLL, q_Memcached_RES_DATA_EXISTS, "RES_DATA_EXISTS");
      break;
    case 110:
      HASH_RETURN(0x153143A96D687E6ELL, q_Memcached_RES_NOTSTORED, "RES_NOTSTORED");
      break;
    case 112:
      HASH_RETURN(0x2BB4CFA54A5085F0LL, q_Memcached_HASH_MD5, "HASH_MD5");
      break;
    case 113:
      HASH_RETURN(0x74109B06DAD2F9F1LL, q_Memcached_RES_END, "RES_END");
      break;
    case 116:
      HASH_RETURN(0x73ABA23A4A0C5D74LL, q_Memcached_OPT_SERIALIZER, "OPT_SERIALIZER");
      break;
    case 120:
      HASH_RETURN(0x460A66958F0524F8LL, q_Memcached_RES_FAILURE, "RES_FAILURE");
      break;
    case 121:
      HASH_RETURN(0x1C014F2A2E707EF9LL, q_Memcached_HAVE_IGBINARY, "HAVE_IGBINARY");
      break;
    case 123:
      HASH_RETURN(0x0443DA24DAD42EFBLL, q_Memcached_OPT_CONNECT_TIMEOUT, "OPT_CONNECT_TIMEOUT");
      HASH_RETURN(0x35B252ECC21E5F7BLL, q_Memcached_RES_PARTIAL_READ, "RES_PARTIAL_READ");
      break;
    case 126:
      HASH_RETURN(0x7A68C36A2F5D27FELL, q_Memcached_HASH_MURMUR, "HASH_MURMUR");
      break;
    case 127:
      HASH_RETURN(0x6948F797B210F37FLL, q_Memcached_RES_PAYLOAD_FAILURE, "RES_PAYLOAD_FAILURE");
      break;
    default:
      break;
  }
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_Memcached
IMPLEMENT_CLASS(Memcached)
ObjectData *c_Memcached::cloneImpl() {
  ObjectData *obj = coo_Memcached();
  c_Memcached::cloneSet(obj);
  return obj;
}
void c_Memcached::cloneSet(ObjectData *cl) {
  c_Memcached *clone = static_cast<c_Memcached*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_Memcached::ci_getmulti((void*)&c_Memcached::i_getmulti, (void*)&c_Memcached::ifa_getmulti, 3, 4, 0x0000000000000002LL);
CallInfo c_Memcached::ci_getresultmessage((void*)&c_Memcached::i_getresultmessage, (void*)&c_Memcached::ifa_getresultmessage, 0, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_getresultcode((void*)&c_Memcached::i_getresultcode, (void*)&c_Memcached::ifa_getresultcode, 0, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_setbykey((void*)&c_Memcached::i_setbykey, (void*)&c_Memcached::ifa_setbykey, 4, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_addserver((void*)&c_Memcached::i_addserver, (void*)&c_Memcached::ifa_addserver, 3, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_set((void*)&c_Memcached::i_set, (void*)&c_Memcached::ifa_set, 3, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_appendbykey((void*)&c_Memcached::i_appendbykey, (void*)&c_Memcached::ifa_appendbykey, 3, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_getdelayed((void*)&c_Memcached::i_getdelayed, (void*)&c_Memcached::ifa_getdelayed, 3, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_setoption((void*)&c_Memcached::i_setoption, (void*)&c_Memcached::ifa_setoption, 2, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci___destruct((void*)&c_Memcached::i___destruct, (void*)&c_Memcached::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_prepend((void*)&c_Memcached::i_prepend, (void*)&c_Memcached::ifa_prepend, 2, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_append((void*)&c_Memcached::i_append, (void*)&c_Memcached::ifa_append, 2, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci___construct((void*)&c_Memcached::i___construct, (void*)&c_Memcached::ifa___construct, 1, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_replacebykey((void*)&c_Memcached::i_replacebykey, (void*)&c_Memcached::ifa_replacebykey, 4, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_casbykey((void*)&c_Memcached::i_casbykey, (void*)&c_Memcached::ifa_casbykey, 5, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_increment((void*)&c_Memcached::i_increment, (void*)&c_Memcached::ifa_increment, 2, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_decrement((void*)&c_Memcached::i_decrement, (void*)&c_Memcached::ifa_decrement, 2, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_getstats((void*)&c_Memcached::i_getstats, (void*)&c_Memcached::ifa_getstats, 0, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_getdelayedbykey((void*)&c_Memcached::i_getdelayedbykey, (void*)&c_Memcached::ifa_getdelayedbykey, 4, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_setmulti((void*)&c_Memcached::i_setmulti, (void*)&c_Memcached::ifa_setmulti, 2, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_getbykey((void*)&c_Memcached::i_getbykey, (void*)&c_Memcached::ifa_getbykey, 4, 4, 0x0000000000000008LL);
CallInfo c_Memcached::ci_deletebykey((void*)&c_Memcached::i_deletebykey, (void*)&c_Memcached::ifa_deletebykey, 3, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_get((void*)&c_Memcached::i_get, (void*)&c_Memcached::ifa_get, 3, 4, 0x0000000000000004LL);
CallInfo c_Memcached::ci_getoption((void*)&c_Memcached::i_getoption, (void*)&c_Memcached::ifa_getoption, 1, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_add((void*)&c_Memcached::i_add, (void*)&c_Memcached::ifa_add, 3, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_getserverbykey((void*)&c_Memcached::i_getserverbykey, (void*)&c_Memcached::ifa_getserverbykey, 1, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_getserverlist((void*)&c_Memcached::i_getserverlist, (void*)&c_Memcached::ifa_getserverlist, 0, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_addbykey((void*)&c_Memcached::i_addbykey, (void*)&c_Memcached::ifa_addbykey, 4, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_getversion((void*)&c_Memcached::i_getversion, (void*)&c_Memcached::ifa_getversion, 0, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_fetchall((void*)&c_Memcached::i_fetchall, (void*)&c_Memcached::ifa_fetchall, 0, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_delete((void*)&c_Memcached::i_delete, (void*)&c_Memcached::ifa_delete, 2, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_setmultibykey((void*)&c_Memcached::i_setmultibykey, (void*)&c_Memcached::ifa_setmultibykey, 3, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_getmultibykey((void*)&c_Memcached::i_getmultibykey, (void*)&c_Memcached::ifa_getmultibykey, 4, 4, 0x0000000000000004LL);
CallInfo c_Memcached::ci_fetch((void*)&c_Memcached::i_fetch, (void*)&c_Memcached::ifa_fetch, 0, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_addservers((void*)&c_Memcached::i_addservers, (void*)&c_Memcached::ifa_addservers, 1, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_replace((void*)&c_Memcached::i_replace, (void*)&c_Memcached::ifa_replace, 3, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_flush((void*)&c_Memcached::i_flush, (void*)&c_Memcached::ifa_flush, 1, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_cas((void*)&c_Memcached::i_cas, (void*)&c_Memcached::ifa_cas, 4, 4, 0x0000000000000000LL);
CallInfo c_Memcached::ci_prependbykey((void*)&c_Memcached::i_prependbykey, (void*)&c_Memcached::ifa_prependbykey, 3, 4, 0x0000000000000000LL);
Variant c_Memcached::i_getmulti(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getmulti, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("getmulti", count, 1, 3, 1);
  const_cast<Array&>(params).escalate(true);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_getmulti(arg0));
    VRefParam arg1(vref(ad->getValueRef(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_getmulti(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_getmulti(arg0, arg1, arg2));
  }
}
Variant c_Memcached::i_getresultmessage(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getresultmessage, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getresultmessage", 0, 1);
  return (self->t_getresultmessage());
}
Variant c_Memcached::i_getresultcode(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getresultcode, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getresultcode", 0, 1);
  return (self->t_getresultcode());
}
Variant c_Memcached::i_setbykey(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setbykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("setbykey", count, 3, 4, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_setbykey(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_setbykey(arg0, arg1, arg2, arg3));
  }
}
Variant c_Memcached::i_addserver(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_addserver, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("addserver", count, 2, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_addserver(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_addserver(arg0, arg1, arg2));
  }
}
Variant c_Memcached::i_set(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_set, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("set", count, 2, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_set(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_set(arg0, arg1, arg2));
  }
}
Variant c_Memcached::i_appendbykey(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_appendbykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("appendbykey", count, 3, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_appendbykey(arg0, arg1, arg2));
  }
}
Variant c_Memcached::i_getdelayed(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getdelayed, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("getdelayed", count, 1, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_getdelayed(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_getdelayed(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_getdelayed(arg0, arg1, arg2));
  }
}
Variant c_Memcached::i_setoption(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setoption, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("setoption", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_setoption(arg0, arg1));
  }
}
Variant c_Memcached::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_Memcached::i_prepend(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_prepend, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("prepend", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_prepend(arg0, arg1));
  }
}
Variant c_Memcached::i_append(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_append, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("append", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_append(arg0, arg1));
  }
}
Variant c_Memcached::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("__construct", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t___construct(), null);
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___construct(arg0), null);
  }
}
Variant c_Memcached::i_replacebykey(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_replacebykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("replacebykey", count, 3, 4, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_replacebykey(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_replacebykey(arg0, arg1, arg2, arg3));
  }
}
Variant c_Memcached::i_casbykey(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_casbykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 4 || count > 5)) return throw_wrong_arguments("casbykey", count, 4, 5, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (self->t_casbykey(arg0, arg1, arg2, arg3));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_casbykey(arg0, arg1, arg2, arg3, arg4));
  }
}
Variant c_Memcached::i_increment(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_increment, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("increment", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_increment(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_increment(arg0, arg1));
  }
}
Variant c_Memcached::i_decrement(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_decrement, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("decrement", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_decrement(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_decrement(arg0, arg1));
  }
}
Variant c_Memcached::i_getstats(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getstats, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getstats", 0, 1);
  return (self->t_getstats());
}
Variant c_Memcached::i_getdelayedbykey(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getdelayedbykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("getdelayedbykey", count, 2, 4, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_getdelayedbykey(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_getdelayedbykey(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_getdelayedbykey(arg0, arg1, arg2, arg3));
  }
}
Variant c_Memcached::i_setmulti(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setmulti, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("setmulti", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_setmulti(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_setmulti(arg0, arg1));
  }
}
Variant c_Memcached::i_getbykey(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getbykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("getbykey", count, 2, 4, 1);
  const_cast<Array&>(params).escalate(true);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_getbykey(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_getbykey(arg0, arg1, arg2));
    VRefParam arg3(vref(ad->getValueRef(pos = ad->iter_advance(pos))));
    return (self->t_getbykey(arg0, arg1, arg2, arg3));
  }
}
Variant c_Memcached::i_deletebykey(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_deletebykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("deletebykey", count, 2, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_deletebykey(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_deletebykey(arg0, arg1, arg2));
  }
}
Variant c_Memcached::i_get(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_get, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("get", count, 1, 3, 1);
  const_cast<Array&>(params).escalate(true);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_get(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_get(arg0, arg1));
    VRefParam arg2(vref(ad->getValueRef(pos = ad->iter_advance(pos))));
    return (self->t_get(arg0, arg1, arg2));
  }
}
Variant c_Memcached::i_getoption(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getoption, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getoption", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getoption(arg0));
  }
}
Variant c_Memcached::i_add(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_add, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("add", count, 2, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_add(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_add(arg0, arg1, arg2));
  }
}
Variant c_Memcached::i_getserverbykey(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getserverbykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getserverbykey", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getserverbykey(arg0));
  }
}
Variant c_Memcached::i_getserverlist(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getserverlist, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getserverlist", 0, 1);
  return (self->t_getserverlist());
}
Variant c_Memcached::i_addbykey(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_addbykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("addbykey", count, 3, 4, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_addbykey(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_addbykey(arg0, arg1, arg2, arg3));
  }
}
Variant c_Memcached::i_getversion(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getversion, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getversion", 0, 1);
  return (self->t_getversion());
}
Variant c_Memcached::i_fetchall(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_fetchall, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("fetchall", 0, 1);
  return (self->t_fetchall());
}
Variant c_Memcached::i_delete(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_delete, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("delete", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_delete(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_delete(arg0, arg1));
  }
}
Variant c_Memcached::i_setmultibykey(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setmultibykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("setmultibykey", count, 2, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_setmultibykey(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_setmultibykey(arg0, arg1, arg2));
  }
}
Variant c_Memcached::i_getmultibykey(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getmultibykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("getmultibykey", count, 2, 4, 1);
  const_cast<Array&>(params).escalate(true);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_getmultibykey(arg0, arg1));
    VRefParam arg2(vref(ad->getValueRef(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_getmultibykey(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_getmultibykey(arg0, arg1, arg2, arg3));
  }
}
Variant c_Memcached::i_fetch(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_fetch, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("fetch", 0, 1);
  return (self->t_fetch());
}
Variant c_Memcached::i_addservers(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_addservers, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("addservers", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_addservers(arg0));
  }
}
Variant c_Memcached::i_replace(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_replace, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("replace", count, 2, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_replace(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_replace(arg0, arg1, arg2));
  }
}
Variant c_Memcached::i_flush(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_flush, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("flush", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_flush());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_flush(arg0));
  }
}
Variant c_Memcached::i_cas(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_cas, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("cas", count, 3, 4, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_cas(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_cas(arg0, arg1, arg2, arg3));
  }
}
Variant c_Memcached::i_prependbykey(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_prependbykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("prependbykey", count, 3, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_prependbykey(arg0, arg1, arg2));
  }
}
Variant c_Memcached::ifa_getmulti(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getmulti, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("getmulti", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_getmulti(arg0));
  VRefParam arg1(vref(a1));
  if (count <= 2) return (self->t_getmulti(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_getmulti(arg0, arg1, arg2));
}
Variant c_Memcached::ifa_getresultmessage(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getresultmessage, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getresultmessage", 0, 1);
  return (self->t_getresultmessage());
}
Variant c_Memcached::ifa_getresultcode(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getresultcode, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getresultcode", 0, 1);
  return (self->t_getresultcode());
}
Variant c_Memcached::ifa_setbykey(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setbykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("setbykey", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_setbykey(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (self->t_setbykey(arg0, arg1, arg2, arg3));
}
Variant c_Memcached::ifa_addserver(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_addserver, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("addserver", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_addserver(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_addserver(arg0, arg1, arg2));
}
Variant c_Memcached::ifa_set(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_set, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("set", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_set(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_set(arg0, arg1, arg2));
}
Variant c_Memcached::ifa_appendbykey(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_appendbykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("appendbykey", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (self->t_appendbykey(arg0, arg1, arg2));
}
Variant c_Memcached::ifa_getdelayed(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getdelayed, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("getdelayed", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_getdelayed(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_getdelayed(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_getdelayed(arg0, arg1, arg2));
}
Variant c_Memcached::ifa_setoption(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setoption, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("setoption", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_setoption(arg0, arg1));
}
Variant c_Memcached::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_Memcached::ifa_prepend(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_prepend, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("prepend", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_prepend(arg0, arg1));
}
Variant c_Memcached::ifa_append(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_append, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("append", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_append(arg0, arg1));
}
Variant c_Memcached::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("__construct", 1, 1);
  if (count <= 0) return (self->t___construct(), null);
  CVarRef arg0(a0);
  return (self->t___construct(arg0), null);
}
Variant c_Memcached::ifa_replacebykey(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_replacebykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("replacebykey", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_replacebykey(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (self->t_replacebykey(arg0, arg1, arg2, arg3));
}
Variant c_Memcached::ifa_casbykey(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_casbykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count < 4 || count > 5)) return throw_wrong_arguments("casbykey", count, 4, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  if (count <= 4) return (self->t_casbykey(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (self->t_casbykey(arg0, arg1, arg2, arg3, arg4));
}
Variant c_Memcached::ifa_increment(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_increment, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("increment", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_increment(arg0));
  CVarRef arg1(a1);
  return (self->t_increment(arg0, arg1));
}
Variant c_Memcached::ifa_decrement(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_decrement, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("decrement", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_decrement(arg0));
  CVarRef arg1(a1);
  return (self->t_decrement(arg0, arg1));
}
Variant c_Memcached::ifa_getstats(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getstats, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getstats", 0, 1);
  return (self->t_getstats());
}
Variant c_Memcached::ifa_getdelayedbykey(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getdelayedbykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("getdelayedbykey", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_getdelayedbykey(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_getdelayedbykey(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (self->t_getdelayedbykey(arg0, arg1, arg2, arg3));
}
Variant c_Memcached::ifa_setmulti(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setmulti, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("setmulti", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_setmulti(arg0));
  CVarRef arg1(a1);
  return (self->t_setmulti(arg0, arg1));
}
Variant c_Memcached::ifa_getbykey(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getbykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("getbykey", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_getbykey(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_getbykey(arg0, arg1, arg2));
  VRefParam arg3(vref(a3));
  return (self->t_getbykey(arg0, arg1, arg2, arg3));
}
Variant c_Memcached::ifa_deletebykey(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_deletebykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("deletebykey", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_deletebykey(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_deletebykey(arg0, arg1, arg2));
}
Variant c_Memcached::ifa_get(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_get, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("get", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_get(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_get(arg0, arg1));
  VRefParam arg2(vref(a2));
  return (self->t_get(arg0, arg1, arg2));
}
Variant c_Memcached::ifa_getoption(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getoption, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getoption", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_getoption(arg0));
}
Variant c_Memcached::ifa_add(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_add, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("add", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_add(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_add(arg0, arg1, arg2));
}
Variant c_Memcached::ifa_getserverbykey(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getserverbykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getserverbykey", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_getserverbykey(arg0));
}
Variant c_Memcached::ifa_getserverlist(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getserverlist, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getserverlist", 0, 1);
  return (self->t_getserverlist());
}
Variant c_Memcached::ifa_addbykey(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_addbykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("addbykey", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_addbykey(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (self->t_addbykey(arg0, arg1, arg2, arg3));
}
Variant c_Memcached::ifa_getversion(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getversion, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getversion", 0, 1);
  return (self->t_getversion());
}
Variant c_Memcached::ifa_fetchall(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_fetchall, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("fetchall", 0, 1);
  return (self->t_fetchall());
}
Variant c_Memcached::ifa_delete(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_delete, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("delete", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_delete(arg0));
  CVarRef arg1(a1);
  return (self->t_delete(arg0, arg1));
}
Variant c_Memcached::ifa_setmultibykey(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setmultibykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("setmultibykey", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_setmultibykey(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_setmultibykey(arg0, arg1, arg2));
}
Variant c_Memcached::ifa_getmultibykey(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getmultibykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("getmultibykey", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_getmultibykey(arg0, arg1));
  VRefParam arg2(vref(a2));
  if (count <= 3) return (self->t_getmultibykey(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (self->t_getmultibykey(arg0, arg1, arg2, arg3));
}
Variant c_Memcached::ifa_fetch(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_fetch, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("fetch", 0, 1);
  return (self->t_fetch());
}
Variant c_Memcached::ifa_addservers(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_addservers, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("addservers", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_addservers(arg0));
}
Variant c_Memcached::ifa_replace(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_replace, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("replace", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_replace(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_replace(arg0, arg1, arg2));
}
Variant c_Memcached::ifa_flush(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_flush, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("flush", 1, 1);
  if (count <= 0) return (self->t_flush());
  CVarRef arg0(a0);
  return (self->t_flush(arg0));
}
Variant c_Memcached::ifa_cas(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_cas, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("cas", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_cas(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (self->t_cas(arg0, arg1, arg2, arg3));
}
Variant c_Memcached::ifa_prependbykey(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_prependbykey, coo_Memcached);
  }
  c_Memcached *self ATTRIBUTE_UNUSED (static_cast<c_Memcached*>(mcp.obj));
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("prependbykey", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (self->t_prependbykey(arg0, arg1, arg2));
}
const MethodCallInfoTable c_Memcached::s_call_info_table[] = {
  { 0x38998A4858382D82LL, 1, 13, "getMultiByKey", &c_Memcached::ci_getmultibykey },
  { 0x4F31CCB24341F605LL, 1, 8, "getMulti", &c_Memcached::ci_getmulti },
  { 0x6FB9087461635285LL, 0, 9, "setOption", &c_Memcached::ci_setoption },
  { 0x06E29D289FC0AF87LL, 1, 10, "addServers", &c_Memcached::ci_addservers },
  { 0x15D34462FC79458BLL, 1, 3, "add", &c_Memcached::ci_add },
  { 0x1C80DDD00742930FLL, 1, 14, "getServerByKey", &c_Memcached::ci_getserverbykey },
  { 0x7521E8833BE3D316LL, 1, 10, "getVersion", &c_Memcached::ci_getversion },
  { 0x65C5EF328C77C917LL, 1, 7, "prepend", &c_Memcached::ci_prepend },
  { 0x3B7F419ECE80EE19LL, 1, 8, "setMulti", &c_Memcached::ci_setmulti },
  { 0x399A6427C2185621LL, 1, 3, "set", &c_Memcached::ci_set },
  { 0x573E46DE52BFF8A1LL, 0, 3, "cas", &c_Memcached::ci_cas },
  { 0x25DCCC35D69AD828LL, 1, 3, "get", &c_Memcached::ci_get },
  { 0x00FBB16B058D5C2FLL, 1, 15, "getDelayedByKey", &c_Memcached::ci_getdelayedbykey },
  { 0x7F4CB6AD55C9F7B8LL, 1, 8, "setByKey", &c_Memcached::ci_setbykey },
  { 0x303DBA91556D773DLL, 1, 12, "replaceByKey", &c_Memcached::ci_replacebykey },
  { 0x402DD1A85CAEA6C0LL, 1, 9, "getOption", &c_Memcached::ci_getoption },
  { 0x5740729B65EB8E41LL, 1, 8, "fetchAll", &c_Memcached::ci_fetchall },
  { 0x4DEE4A472DC69EC2LL, 1, 6, "append", &c_Memcached::ci_append },
  { 0x5BB1AF59B155E144LL, 1, 16, "getResultMessage", &c_Memcached::ci_getresultmessage },
  { 0x42FAC655280A6146LL, 1, 7, "replace", &c_Memcached::ci_replace },
  { 0x39099707DF7945C7LL, 1, 9, "increment", &c_Memcached::ci_increment },
  { 0x1C660E5BFA6F55D3LL, 1, 6, "delete", &c_Memcached::ci_delete },
  { 0x344A3DC90A5BD1D7LL, 1, 8, "getByKey", &c_Memcached::ci_getbykey },
  { 0x5044B38DE4461A57LL, 0, 13, "getServerList", &c_Memcached::ci_getserverlist },
  { 0x1CCDC4317CE59BD9LL, 1, 8, "getStats", &c_Memcached::ci_getstats },
  { 0x2A733FC12BA4C1DALL, 1, 9, "decrement", &c_Memcached::ci_decrement },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_Memcached::ci___construct },
  { 0x086C8D4E944C0FE0LL, 1, 11, "appendByKey", &c_Memcached::ci_appendbykey },
  { 0x56CD24186237AAE6LL, 1, 9, "addServer", &c_Memcached::ci_addserver },
  { 0x0EE9EC6BCA56B46ELL, 1, 12, "prependByKey", &c_Memcached::ci_prependbykey },
  { 0x3B59E52110B990F2LL, 1, 11, "deleteByKey", &c_Memcached::ci_deletebykey },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_Memcached::ci___destruct },
  { 0x18A8B25BF74FA276LL, 1, 10, "getDelayed", &c_Memcached::ci_getdelayed },
  { 0x03F8E65E47097177LL, 1, 8, "addByKey", &c_Memcached::ci_addbykey },
  { 0x6AB1842FE8684D77LL, 0, 13, "setMultiByKey", &c_Memcached::ci_setmultibykey },
  { 0x50BC469CFA9BF579LL, 1, 8, "casByKey", &c_Memcached::ci_casbykey },
  { 0x6A3D9F8EDB005E7ALL, 1, 5, "flush", &c_Memcached::ci_flush },
  { 0x5E82B850BB90B0FBLL, 1, 5, "fetch", &c_Memcached::ci_fetch },
  { 0x3F460132535C00FDLL, 1, 13, "getResultCode", &c_Memcached::ci_getresultcode },
  { 0, 1, 0, 0 }
};
const int c_Memcached::s_call_info_index[] = {
  127,
  -1,-1,0,-1,-1,1,-1,3,
  -1,-1,-1,4,-1,-1,-1,5,
  -1,-1,-1,-1,-1,-1,6,7,
  -1,8,-1,-1,-1,-1,-1,-1,
  -1,9,-1,-1,-1,-1,-1,-1,
  11,-1,-1,-1,-1,-1,-1,12,
  -1,-1,-1,-1,-1,-1,-1,-1,
  13,-1,-1,-1,-1,14,-1,-1,
  15,16,17,-1,18,-1,19,20,
  -1,-1,-1,-1,-1,-1,-1,-1,
  -1,-1,-1,21,-1,-1,-1,22,
  -1,24,25,-1,-1,-1,-1,26,
  27,-1,-1,-1,-1,-1,28,-1,
  -1,-1,-1,-1,-1,-1,29,-1,
  -1,-1,30,31,-1,-1,32,33,
  -1,35,36,37,-1,38,-1,-1,

};
c_Memcached *c_Memcached::create(String a0) {
  CountableHelper h(this);
  init();
  t___construct(a0);
  return this;
}
void c_Memcached::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) throw_toomany_arguments("__construct", 1, 2);
  do {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) {
      (t___construct());
      break;
    }
    CVarRef arg0((ad->getValue(pos)));
    (t___construct(arg0));
  } while (false);
}
void c_Memcached::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_Memcached::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_Memcached = {
  c_Memcached::os_getInit,
  c_Memcached::os_get,
  c_Memcached::os_lval,
  c_Memcached::os_invoke,
  c_Memcached::os_constant,
  (ObjectData*(*)(ObjectData*))coo_Memcached,
  c_Memcached::s_call_info_table,c_Memcached::s_call_info_index,
  "Memcached",
  0
};
ObjectData *coo_XMLReader() {
  return NEWOBJ(c_XMLReader)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_XMLReader
Variant c_XMLReader::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_XMLReader
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_XMLReader
Variant c_XMLReader::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_XMLReader
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_XMLReader
Variant &c_XMLReader::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_XMLReader
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_XMLReader
Variant * c_XMLReader::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_XMLReader
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_XMLReader
Variant * c_XMLReader::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_XMLReader
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_XMLReader
Variant * c_XMLReader::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_XMLReader
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_XMLReader
Variant c_XMLReader::os_constant(const char *s) {
  int64 hash = hash_string(s);
  switch (hash & 63) {
    case 1:
      HASH_RETURN(0x13B3121CBF212DC1LL, q_XMLReader_DOC_FRAGMENT, "DOC_FRAGMENT");
      break;
    case 9:
      HASH_RETURN(0x6071F0A4D7F152C9LL, q_XMLReader_NOTATION, "NOTATION");
      break;
    case 13:
      HASH_RETURN(0x16AD79F9AF3ECC0DLL, q_XMLReader_COMMENT, "COMMENT");
      break;
    case 15:
      HASH_RETURN(0x5BB72110C0F94F8FLL, q_XMLReader_ELEMENT, "ELEMENT");
      HASH_RETURN(0x4431B68F8476210FLL, q_XMLReader_SUBST_ENTITIES, "SUBST_ENTITIES");
      break;
    case 20:
      HASH_RETURN(0x66710CEFCACCEAD4LL, q_XMLReader_DEFAULTATTRS, "DEFAULTATTRS");
      break;
    case 22:
      HASH_RETURN(0x0A70D397C0570F56LL, q_XMLReader_CDATA, "CDATA");
      break;
    case 24:
      HASH_RETURN(0x69070452A320C4D8LL, q_XMLReader_LOADDTD, "LOADDTD");
      break;
    case 29:
      HASH_RETURN(0x4D26D167066BB11DLL, q_XMLReader_TEXT, "TEXT");
      HASH_RETURN(0x507641F239996F9DLL, q_XMLReader_WHITESPACE, "WHITESPACE");
      break;
    case 31:
      HASH_RETURN(0x7EB865DC91D7AC1FLL, q_XMLReader_DOC_TYPE, "DOC_TYPE");
      break;
    case 37:
      HASH_RETURN(0x4A21896B12C338E5LL, q_XMLReader_SIGNIFICANT_WHITESPACE, "SIGNIFICANT_WHITESPACE");
      break;
    case 44:
      HASH_RETURN(0x18CF3E4A60E4AAACLL, q_XMLReader_PI, "PI");
      break;
    case 45:
      HASH_RETURN(0x5C1091C88F8EB6EDLL, q_XMLReader_DOC, "DOC");
      break;
    case 47:
      HASH_RETURN(0x18FB7BF5786BF72FLL, q_XMLReader_ENTITY, "ENTITY");
      break;
    case 48:
      HASH_RETURN(0x3EBBF7FE181568B0LL, q_XMLReader_END_ELEMENT, "END_ELEMENT");
      HASH_RETURN(0x2907A7E1425D0970LL, q_XMLReader_XML_DECLARATION, "XML_DECLARATION");
      break;
    case 51:
      HASH_RETURN(0x2EFDCA1922BFB273LL, q_XMLReader_NONE, "NONE");
      HASH_RETURN(0x66785D8330DBC573LL, q_XMLReader_END_ENTITY, "END_ENTITY");
      break;
    case 53:
      HASH_RETURN(0x21A6FB97A47EB4F5LL, q_XMLReader_ATTRIBUTE, "ATTRIBUTE");
      break;
    case 55:
      HASH_RETURN(0x1CA408E02262F737LL, q_XMLReader_VALIDATE, "VALIDATE");
      break;
    case 60:
      HASH_RETURN(0x631C49B1B9F742FCLL, q_XMLReader_ENTITY_REF, "ENTITY_REF");
      break;
    default:
      break;
  }
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_XMLReader
IMPLEMENT_CLASS(XMLReader)
ObjectData *c_XMLReader::cloneImpl() {
  ObjectData *obj = coo_XMLReader();
  c_XMLReader::cloneSet(obj);
  return obj;
}
void c_XMLReader::cloneSet(ObjectData *cl) {
  c_XMLReader *clone = static_cast<c_XMLReader*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_XMLReader::ci_lookupnamespace((void*)&c_XMLReader::i_lookupnamespace, (void*)&c_XMLReader::ifa_lookupnamespace, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_next((void*)&c_XMLReader::i_next, (void*)&c_XMLReader::ifa_next, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_getattribute((void*)&c_XMLReader::i_getattribute, (void*)&c_XMLReader::ifa_getattribute, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_movetoelement((void*)&c_XMLReader::i_movetoelement, (void*)&c_XMLReader::ifa_movetoelement, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_movetofirstattribute((void*)&c_XMLReader::i_movetofirstattribute, (void*)&c_XMLReader::ifa_movetofirstattribute, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_movetoattribute((void*)&c_XMLReader::i_movetoattribute, (void*)&c_XMLReader::ifa_movetoattribute, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci___destruct((void*)&c_XMLReader::i___destruct, (void*)&c_XMLReader::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci___construct((void*)&c_XMLReader::i___construct, (void*)&c_XMLReader::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_movetonextattribute((void*)&c_XMLReader::i_movetonextattribute, (void*)&c_XMLReader::ifa_movetonextattribute, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_setrelaxngschemasource((void*)&c_XMLReader::i_setrelaxngschemasource, (void*)&c_XMLReader::ifa_setrelaxngschemasource, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_close((void*)&c_XMLReader::i_close, (void*)&c_XMLReader::ifa_close, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_expand((void*)&c_XMLReader::i_expand, (void*)&c_XMLReader::ifa_expand, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_getparserproperty((void*)&c_XMLReader::i_getparserproperty, (void*)&c_XMLReader::ifa_getparserproperty, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_setschema((void*)&c_XMLReader::i_setschema, (void*)&c_XMLReader::ifa_setschema, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_getattributeno((void*)&c_XMLReader::i_getattributeno, (void*)&c_XMLReader::ifa_getattributeno, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_getattributens((void*)&c_XMLReader::i_getattributens, (void*)&c_XMLReader::ifa_getattributens, 2, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_setparserproperty((void*)&c_XMLReader::i_setparserproperty, (void*)&c_XMLReader::ifa_setparserproperty, 2, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_readouterxml((void*)&c_XMLReader::i_readouterxml, (void*)&c_XMLReader::ifa_readouterxml, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_open((void*)&c_XMLReader::i_open, (void*)&c_XMLReader::ifa_open, 3, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci___get((void*)&c_XMLReader::i___get, (void*)&c_XMLReader::ifa___get, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_movetoattributeno((void*)&c_XMLReader::i_movetoattributeno, (void*)&c_XMLReader::ifa_movetoattributeno, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_movetoattributens((void*)&c_XMLReader::i_movetoattributens, (void*)&c_XMLReader::ifa_movetoattributens, 2, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_setrelaxngschema((void*)&c_XMLReader::i_setrelaxngschema, (void*)&c_XMLReader::ifa_setrelaxngschema, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_isvalid((void*)&c_XMLReader::i_isvalid, (void*)&c_XMLReader::ifa_isvalid, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_readstring((void*)&c_XMLReader::i_readstring, (void*)&c_XMLReader::ifa_readstring, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_xml((void*)&c_XMLReader::i_xml, (void*)&c_XMLReader::ifa_xml, 3, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_read((void*)&c_XMLReader::i_read, (void*)&c_XMLReader::ifa_read, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLReader::ci_readinnerxml((void*)&c_XMLReader::i_readinnerxml, (void*)&c_XMLReader::ifa_readinnerxml, 0, 4, 0x0000000000000000LL);
Variant c_XMLReader::i_lookupnamespace(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_lookupnamespace, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("lookupnamespace", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_lookupnamespace(arg0));
  }
}
Variant c_XMLReader::i_next(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_next, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("next", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_next());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_next(arg0));
  }
}
Variant c_XMLReader::i_getattribute(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getattribute, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getattribute", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getattribute(arg0));
  }
}
Variant c_XMLReader::i_movetoelement(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_movetoelement, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("movetoelement", 0, 1);
  return (self->t_movetoelement());
}
Variant c_XMLReader::i_movetofirstattribute(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_movetofirstattribute, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("movetofirstattribute", 0, 1);
  return (self->t_movetofirstattribute());
}
Variant c_XMLReader::i_movetoattribute(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_movetoattribute, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("movetoattribute", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_movetoattribute(arg0));
  }
}
Variant c_XMLReader::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_XMLReader::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_XMLReader::i_movetonextattribute(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_movetonextattribute, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("movetonextattribute", 0, 1);
  return (self->t_movetonextattribute());
}
Variant c_XMLReader::i_setrelaxngschemasource(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setrelaxngschemasource, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setrelaxngschemasource", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_setrelaxngschemasource(arg0));
  }
}
Variant c_XMLReader::i_close(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_close, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("close", 0, 1);
  return (self->t_close());
}
Variant c_XMLReader::i_expand(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_expand, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("expand", 0, 1);
  return (self->t_expand());
}
Variant c_XMLReader::i_getparserproperty(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getparserproperty, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getparserproperty", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getparserproperty(arg0));
  }
}
Variant c_XMLReader::i_setschema(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setschema, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setschema", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_setschema(arg0));
  }
}
Variant c_XMLReader::i_getattributeno(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getattributeno, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getattributeno", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getattributeno(arg0));
  }
}
Variant c_XMLReader::i_getattributens(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getattributens, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("getattributens", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_getattributens(arg0, arg1));
  }
}
Variant c_XMLReader::i_setparserproperty(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setparserproperty, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("setparserproperty", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_setparserproperty(arg0, arg1));
  }
}
Variant c_XMLReader::i_readouterxml(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_readouterxml, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("readouterxml", 0, 1);
  return (self->t_readouterxml());
}
Variant c_XMLReader::i_open(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_open, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("open", count, 1, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_open(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_open(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_open(arg0, arg1, arg2));
  }
}
Variant c_XMLReader::i___get(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___get, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___get(arg0));
  }
}
Variant c_XMLReader::i_movetoattributeno(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_movetoattributeno, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("movetoattributeno", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_movetoattributeno(arg0));
  }
}
Variant c_XMLReader::i_movetoattributens(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_movetoattributens, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("movetoattributens", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_movetoattributens(arg0, arg1));
  }
}
Variant c_XMLReader::i_setrelaxngschema(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setrelaxngschema, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setrelaxngschema", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_setrelaxngschema(arg0));
  }
}
Variant c_XMLReader::i_isvalid(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_isvalid, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("isvalid", 0, 1);
  return (self->t_isvalid());
}
Variant c_XMLReader::i_readstring(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_readstring, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("readstring", 0, 1);
  return (self->t_readstring());
}
Variant c_XMLReader::i_xml(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_xml, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("xml", count, 1, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_xml(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_xml(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_xml(arg0, arg1, arg2));
  }
}
Variant c_XMLReader::i_read(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_read, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("read", 0, 1);
  return (self->t_read());
}
Variant c_XMLReader::i_readinnerxml(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_readinnerxml, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("readinnerxml", 0, 1);
  return (self->t_readinnerxml());
}
Variant c_XMLReader::ifa_lookupnamespace(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_lookupnamespace, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("lookupnamespace", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_lookupnamespace(arg0));
}
Variant c_XMLReader::ifa_next(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_next, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("next", 1, 1);
  if (count <= 0) return (self->t_next());
  CVarRef arg0(a0);
  return (self->t_next(arg0));
}
Variant c_XMLReader::ifa_getattribute(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getattribute, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getattribute", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_getattribute(arg0));
}
Variant c_XMLReader::ifa_movetoelement(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_movetoelement, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("movetoelement", 0, 1);
  return (self->t_movetoelement());
}
Variant c_XMLReader::ifa_movetofirstattribute(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_movetofirstattribute, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("movetofirstattribute", 0, 1);
  return (self->t_movetofirstattribute());
}
Variant c_XMLReader::ifa_movetoattribute(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_movetoattribute, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("movetoattribute", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_movetoattribute(arg0));
}
Variant c_XMLReader::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_XMLReader::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_XMLReader::ifa_movetonextattribute(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_movetonextattribute, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("movetonextattribute", 0, 1);
  return (self->t_movetonextattribute());
}
Variant c_XMLReader::ifa_setrelaxngschemasource(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setrelaxngschemasource, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setrelaxngschemasource", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_setrelaxngschemasource(arg0));
}
Variant c_XMLReader::ifa_close(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_close, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("close", 0, 1);
  return (self->t_close());
}
Variant c_XMLReader::ifa_expand(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_expand, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("expand", 0, 1);
  return (self->t_expand());
}
Variant c_XMLReader::ifa_getparserproperty(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getparserproperty, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getparserproperty", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_getparserproperty(arg0));
}
Variant c_XMLReader::ifa_setschema(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setschema, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setschema", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_setschema(arg0));
}
Variant c_XMLReader::ifa_getattributeno(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getattributeno, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getattributeno", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_getattributeno(arg0));
}
Variant c_XMLReader::ifa_getattributens(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getattributens, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("getattributens", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_getattributens(arg0, arg1));
}
Variant c_XMLReader::ifa_setparserproperty(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setparserproperty, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("setparserproperty", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_setparserproperty(arg0, arg1));
}
Variant c_XMLReader::ifa_readouterxml(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_readouterxml, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("readouterxml", 0, 1);
  return (self->t_readouterxml());
}
Variant c_XMLReader::ifa_open(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_open, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("open", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_open(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_open(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_open(arg0, arg1, arg2));
}
Variant c_XMLReader::ifa___get(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___get, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___get(arg0));
}
Variant c_XMLReader::ifa_movetoattributeno(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_movetoattributeno, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("movetoattributeno", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_movetoattributeno(arg0));
}
Variant c_XMLReader::ifa_movetoattributens(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_movetoattributens, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("movetoattributens", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_movetoattributens(arg0, arg1));
}
Variant c_XMLReader::ifa_setrelaxngschema(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setrelaxngschema, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setrelaxngschema", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_setrelaxngschema(arg0));
}
Variant c_XMLReader::ifa_isvalid(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isvalid, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("isvalid", 0, 1);
  return (self->t_isvalid());
}
Variant c_XMLReader::ifa_readstring(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_readstring, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("readstring", 0, 1);
  return (self->t_readstring());
}
Variant c_XMLReader::ifa_xml(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_xml, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("xml", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_xml(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_xml(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_xml(arg0, arg1, arg2));
}
Variant c_XMLReader::ifa_read(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_read, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("read", 0, 1);
  return (self->t_read());
}
Variant c_XMLReader::ifa_readinnerxml(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_readinnerxml, coo_XMLReader);
  }
  c_XMLReader *self ATTRIBUTE_UNUSED (static_cast<c_XMLReader*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("readinnerxml", 0, 1);
  return (self->t_readinnerxml());
}
const MethodCallInfoTable c_XMLReader::s_call_info_table[] = {
  { 0x78AE97BFBEBF5341LL, 1, 5, "close", &c_XMLReader::ci_close },
  { 0x1F479267E49EF301LL, 0, 4, "read", &c_XMLReader::ci_read },
  { 0x21F68C010C124BC4LL, 1, 4, "open", &c_XMLReader::ci_open },
  { 0x0C1F965FD1079AC6LL, 1, 20, "moveToFirstAttribute", &c_XMLReader::ci_movetofirstattribute },
  { 0x0D2003842AF83A07LL, 1, 17, "getParserProperty", &c_XMLReader::ci_getparserproperty },
  { 0x39B7BB05F05A37CDLL, 1, 6, "expand", &c_XMLReader::ci_expand },
  { 0x797E2A56E560520ELL, 1, 12, "readInnerXML", &c_XMLReader::ci_readinnerxml },
  { 0x26B6E00C74FA338FLL, 1, 5, "__get", &c_XMLReader::ci___get },
  { 0x7BA9DD90E7AE3A13LL, 1, 17, "setParserProperty", &c_XMLReader::ci_setparserproperty },
  { 0x1986122197FD4B14LL, 1, 3, "XML", &c_XMLReader::ci_xml },
  { 0x33982845A5250499LL, 1, 14, "getAttributeNo", &c_XMLReader::ci_getattributeno },
  { 0x34E103E06D3F0899LL, 0, 14, "getAttributeNs", &c_XMLReader::ci_getattributens },
  { 0x06697B31313080DBLL, 1, 12, "readOuterXML", &c_XMLReader::ci_readouterxml },
  { 0x182BF31CCB09E11DLL, 1, 15, "lookupNamespace", &c_XMLReader::ci_lookupnamespace },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_XMLReader::ci___construct },
  { 0x72A8D1997F7E0F67LL, 1, 19, "moveToNextAttribute", &c_XMLReader::ci_movetonextattribute },
  { 0x49F89C466612FC28LL, 1, 12, "getAttribute", &c_XMLReader::ci_getattribute },
  { 0x76ED78B4A392C36BLL, 1, 16, "setRelaxNGSchema", &c_XMLReader::ci_setrelaxngschema },
  { 0x71E1A6F1ACA9872BLL, 0, 7, "isValid", &c_XMLReader::ci_isvalid },
  { 0x0CFE207982641D6FLL, 1, 13, "moveToElement", &c_XMLReader::ci_movetoelement },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_XMLReader::ci___destruct },
  { 0x4E53414CB3A073B4LL, 1, 17, "moveToAttributeNo", &c_XMLReader::ci_movetoattributeno },
  { 0x062D7D5B55654634LL, 0, 10, "readString", &c_XMLReader::ci_readstring },
  { 0x7DA2728AC230DFF6LL, 1, 15, "moveToAttribute", &c_XMLReader::ci_movetoattribute },
  { 0x3C6D50F3BB8102B8LL, 1, 4, "next", &c_XMLReader::ci_next },
  { 0x21A405E8B21F8838LL, 0, 9, "setSchema", &c_XMLReader::ci_setschema },
  { 0x0661BC19E05663FDLL, 1, 17, "moveToAttributeNs", &c_XMLReader::ci_movetoattributens },
  { 0x4789E6BFAAC164FFLL, 1, 22, "setRelaxNGSchemaSource", &c_XMLReader::ci_setrelaxngschemasource },
  { 0, 1, 0, 0 }
};
const int c_XMLReader::s_call_info_index[] = {
  63,
  -1,0,-1,-1,2,-1,3,4,
  -1,-1,-1,-1,-1,5,6,7,
  -1,-1,-1,8,9,-1,-1,-1,
  -1,10,-1,12,-1,13,-1,14,
  -1,-1,-1,-1,-1,-1,-1,15,
  16,-1,-1,17,-1,-1,-1,19,
  -1,-1,-1,20,21,-1,23,-1,
  24,-1,-1,-1,-1,26,-1,27,

};
c_XMLReader *c_XMLReader::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_XMLReader::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_XMLReader::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_XMLReader::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_XMLReader = {
  c_XMLReader::os_getInit,
  c_XMLReader::os_get,
  c_XMLReader::os_lval,
  c_XMLReader::os_invoke,
  c_XMLReader::os_constant,
  (ObjectData*(*)(ObjectData*))coo_XMLReader,
  c_XMLReader::s_call_info_table,c_XMLReader::s_call_info_index,
  "XMLReader",
  0
};
ObjectData *coo_DOMComment() {
  return NEWOBJ(c_DOMComment)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMComment
Variant c_DOMComment::os_getInit(CStrRef s) {
  return c_DOMCharacterData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMComment
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMComment
Variant c_DOMComment::os_get(CStrRef s) {
  return c_DOMCharacterData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMComment
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMComment
Variant &c_DOMComment::os_lval(CStrRef s) {
  return c_DOMCharacterData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMComment
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DOMComment
Variant * c_DOMComment::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DOMComment
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMComment
Variant * c_DOMComment::o_realPropPublic(CStrRef s, int flags) const {
  return c_DOMCharacterData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMComment
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMComment
Variant * c_DOMComment::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMComment
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMComment
Variant c_DOMComment::os_constant(const char *s) {
  return c_DOMCharacterData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMComment
IMPLEMENT_CLASS(DOMComment)
ObjectData *c_DOMComment::cloneImpl() {
  ObjectData *obj = coo_DOMComment();
  c_DOMComment::cloneSet(obj);
  return obj;
}
void c_DOMComment::cloneSet(ObjectData *cl) {
  c_DOMComment *clone = static_cast<c_DOMComment*>(cl);
  c_DOMCharacterData::cloneSet(clone);
}
CallInfo c_DOMComment::ci___destruct((void*)&c_DOMComment::i___destruct, (void*)&c_DOMComment::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMComment::ci___construct((void*)&c_DOMComment::i___construct, (void*)&c_DOMComment::ifa___construct, 1, 4, 0x0000000000000000LL);
Variant c_DOMComment::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_DOMComment);
  }
  c_DOMComment *self ATTRIBUTE_UNUSED (static_cast<c_DOMComment*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMComment::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_DOMComment);
  }
  c_DOMComment *self ATTRIBUTE_UNUSED (static_cast<c_DOMComment*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("__construct", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t___construct(), null);
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___construct(arg0), null);
  }
}
Variant c_DOMComment::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_DOMComment);
  }
  c_DOMComment *self ATTRIBUTE_UNUSED (static_cast<c_DOMComment*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMComment::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_DOMComment);
  }
  c_DOMComment *self ATTRIBUTE_UNUSED (static_cast<c_DOMComment*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("__construct", 1, 1);
  if (count <= 0) return (self->t___construct(), null);
  CVarRef arg0(a0);
  return (self->t___construct(arg0), null);
}
const MethodCallInfoTable c_DOMComment::s_call_info_table[] = {
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_DOMComment::ci___destruct },
  { 0x0D31D0AC229C615FLL, 0, 11, "__construct", &c_DOMComment::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_DOMComment::s_call_info_index[] = {
  3,
  -1,-1,-1,0,
};
c_DOMComment *c_DOMComment::create(String a0) {
  CountableHelper h(this);
  init();
  t___construct(a0);
  return this;
}
void c_DOMComment::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) throw_toomany_arguments("__construct", 1, 2);
  do {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) {
      (t___construct());
      break;
    }
    CVarRef arg0((ad->getValue(pos)));
    (t___construct(arg0));
  } while (false);
}
void c_DOMComment::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DOMComment::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_DOMComment = {
  c_DOMComment::os_getInit,
  c_DOMComment::os_get,
  c_DOMComment::os_lval,
  c_DOMComment::os_invoke,
  c_DOMComment::os_constant,
  (ObjectData*(*)(ObjectData*))coo_DOMComment,
  c_DOMComment::s_call_info_table,c_DOMComment::s_call_info_index,
  "DOMComment",
  &cw_DOMCharacterData
};
ObjectData *coo_SQLite3() {
  return NEWOBJ(c_SQLite3)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_SQLite3
Variant c_SQLite3::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_SQLite3
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_SQLite3
Variant c_SQLite3::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_SQLite3
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_SQLite3
Variant &c_SQLite3::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_SQLite3
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_SQLite3
Variant * c_SQLite3::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_SQLite3
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_SQLite3
Variant * c_SQLite3::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_SQLite3
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_SQLite3
Variant * c_SQLite3::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_SQLite3
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_SQLite3
Variant c_SQLite3::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_SQLite3
IMPLEMENT_CLASS(SQLite3)
ObjectData *c_SQLite3::cloneImpl() {
  ObjectData *obj = coo_SQLite3();
  c_SQLite3::cloneSet(obj);
  return obj;
}
void c_SQLite3::cloneSet(ObjectData *cl) {
  c_SQLite3 *clone = static_cast<c_SQLite3*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_SQLite3::ci_exec((void*)&c_SQLite3::i_exec, (void*)&c_SQLite3::ifa_exec, 1, 4, 0x0000000000000000LL);
CallInfo c_SQLite3::ci_version((void*)&c_SQLite3::i_version, (void*)&c_SQLite3::ifa_version, 0, 4, 0x0000000000000000LL);
CallInfo c_SQLite3::ci_loadextension((void*)&c_SQLite3::i_loadextension, (void*)&c_SQLite3::ifa_loadextension, 1, 4, 0x0000000000000000LL);
CallInfo c_SQLite3::ci___destruct((void*)&c_SQLite3::i___destruct, (void*)&c_SQLite3::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_SQLite3::ci_createfunction((void*)&c_SQLite3::i_createfunction, (void*)&c_SQLite3::ifa_createfunction, 3, 4, 0x0000000000000000LL);
CallInfo c_SQLite3::ci___construct((void*)&c_SQLite3::i___construct, (void*)&c_SQLite3::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_SQLite3::ci_lastinsertrowid((void*)&c_SQLite3::i_lastinsertrowid, (void*)&c_SQLite3::ifa_lastinsertrowid, 0, 4, 0x0000000000000000LL);
CallInfo c_SQLite3::ci_query((void*)&c_SQLite3::i_query, (void*)&c_SQLite3::ifa_query, 1, 4, 0x0000000000000000LL);
CallInfo c_SQLite3::ci_close((void*)&c_SQLite3::i_close, (void*)&c_SQLite3::ifa_close, 0, 4, 0x0000000000000000LL);
CallInfo c_SQLite3::ci_escapestring((void*)&c_SQLite3::i_escapestring, (void*)&c_SQLite3::ifa_escapestring, 1, 4, 0x0000000000000000LL);
CallInfo c_SQLite3::ci_lasterrormsg((void*)&c_SQLite3::i_lasterrormsg, (void*)&c_SQLite3::ifa_lasterrormsg, 0, 4, 0x0000000000000000LL);
CallInfo c_SQLite3::ci_createaggregate((void*)&c_SQLite3::i_createaggregate, (void*)&c_SQLite3::ifa_createaggregate, 4, 4, 0x0000000000000000LL);
CallInfo c_SQLite3::ci_open((void*)&c_SQLite3::i_open, (void*)&c_SQLite3::ifa_open, 3, 4, 0x0000000000000000LL);
CallInfo c_SQLite3::ci_changes((void*)&c_SQLite3::i_changes, (void*)&c_SQLite3::ifa_changes, 0, 4, 0x0000000000000000LL);
CallInfo c_SQLite3::ci_openblob((void*)&c_SQLite3::i_openblob, (void*)&c_SQLite3::ifa_openblob, 4, 4, 0x0000000000000000LL);
CallInfo c_SQLite3::ci_lasterrorcode((void*)&c_SQLite3::i_lasterrorcode, (void*)&c_SQLite3::ifa_lasterrorcode, 0, 4, 0x0000000000000000LL);
CallInfo c_SQLite3::ci_prepare((void*)&c_SQLite3::i_prepare, (void*)&c_SQLite3::ifa_prepare, 1, 4, 0x0000000000000000LL);
CallInfo c_SQLite3::ci_querysingle((void*)&c_SQLite3::i_querysingle, (void*)&c_SQLite3::ifa_querysingle, 2, 4, 0x0000000000000000LL);
Variant c_SQLite3::i_exec(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_exec, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("exec", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_exec(arg0));
  }
}
Variant c_SQLite3::i_version(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_version, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("version", 0, 1);
  return (self->t_version());
}
Variant c_SQLite3::i_loadextension(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_loadextension, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("loadextension", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_loadextension(arg0));
  }
}
Variant c_SQLite3::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_SQLite3::i_createfunction(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_createfunction, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("createfunction", count, 2, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_createfunction(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_createfunction(arg0, arg1, arg2));
  }
}
Variant c_SQLite3::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_SQLite3::i_lastinsertrowid(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_lastinsertrowid, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("lastinsertrowid", 0, 1);
  return (self->t_lastinsertrowid());
}
Variant c_SQLite3::i_query(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_query, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("query", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_query(arg0));
  }
}
Variant c_SQLite3::i_close(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_close, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("close", 0, 1);
  return (self->t_close());
}
Variant c_SQLite3::i_escapestring(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_escapestring, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("escapestring", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_escapestring(arg0));
  }
}
Variant c_SQLite3::i_lasterrormsg(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_lasterrormsg, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("lasterrormsg", 0, 1);
  return (self->t_lasterrormsg());
}
Variant c_SQLite3::i_createaggregate(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_createaggregate, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("createaggregate", count, 3, 4, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_createaggregate(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_createaggregate(arg0, arg1, arg2, arg3));
  }
}
Variant c_SQLite3::i_open(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_open, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("open", count, 1, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_open(arg0), null);
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_open(arg0, arg1), null);
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_open(arg0, arg1, arg2), null);
  }
}
Variant c_SQLite3::i_changes(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_changes, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("changes", 0, 1);
  return (self->t_changes());
}
Variant c_SQLite3::i_openblob(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_openblob, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("openblob", count, 3, 4, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_openblob(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_openblob(arg0, arg1, arg2, arg3));
  }
}
Variant c_SQLite3::i_lasterrorcode(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_lasterrorcode, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("lasterrorcode", 0, 1);
  return (self->t_lasterrorcode());
}
Variant c_SQLite3::i_prepare(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_prepare, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("prepare", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_prepare(arg0));
  }
}
Variant c_SQLite3::i_querysingle(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_querysingle, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("querysingle", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_querysingle(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_querysingle(arg0, arg1));
  }
}
Variant c_SQLite3::ifa_exec(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_exec, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("exec", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_exec(arg0));
}
Variant c_SQLite3::ifa_version(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_version, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("version", 0, 1);
  return (self->t_version());
}
Variant c_SQLite3::ifa_loadextension(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_loadextension, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("loadextension", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_loadextension(arg0));
}
Variant c_SQLite3::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_SQLite3::ifa_createfunction(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_createfunction, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("createfunction", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_createfunction(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_createfunction(arg0, arg1, arg2));
}
Variant c_SQLite3::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_SQLite3::ifa_lastinsertrowid(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_lastinsertrowid, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("lastinsertrowid", 0, 1);
  return (self->t_lastinsertrowid());
}
Variant c_SQLite3::ifa_query(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_query, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("query", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_query(arg0));
}
Variant c_SQLite3::ifa_close(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_close, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("close", 0, 1);
  return (self->t_close());
}
Variant c_SQLite3::ifa_escapestring(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_escapestring, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("escapestring", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_escapestring(arg0));
}
Variant c_SQLite3::ifa_lasterrormsg(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_lasterrormsg, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("lasterrormsg", 0, 1);
  return (self->t_lasterrormsg());
}
Variant c_SQLite3::ifa_createaggregate(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_createaggregate, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("createaggregate", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_createaggregate(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (self->t_createaggregate(arg0, arg1, arg2, arg3));
}
Variant c_SQLite3::ifa_open(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_open, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("open", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_open(arg0), null);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_open(arg0, arg1), null);
  CVarRef arg2(a2);
  return (self->t_open(arg0, arg1, arg2), null);
}
Variant c_SQLite3::ifa_changes(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_changes, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("changes", 0, 1);
  return (self->t_changes());
}
Variant c_SQLite3::ifa_openblob(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_openblob, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("openblob", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_openblob(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (self->t_openblob(arg0, arg1, arg2, arg3));
}
Variant c_SQLite3::ifa_lasterrorcode(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_lasterrorcode, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("lasterrorcode", 0, 1);
  return (self->t_lasterrorcode());
}
Variant c_SQLite3::ifa_prepare(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_prepare, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("prepare", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_prepare(arg0));
}
Variant c_SQLite3::ifa_querysingle(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_querysingle, coo_SQLite3);
  }
  c_SQLite3 *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("querysingle", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_querysingle(arg0));
  CVarRef arg1(a1);
  return (self->t_querysingle(arg0, arg1));
}
const MethodCallInfoTable c_SQLite3::s_call_info_table[] = {
  { 0x78AE97BFBEBF5341LL, 1, 5, "close", &c_SQLite3::ci_close },
  { 0x6081F282094466C2LL, 1, 12, "lasterrormsg", &c_SQLite3::ci_lasterrormsg },
  { 0x65BD6700742BF3C2LL, 0, 8, "openblob", &c_SQLite3::ci_openblob },
  { 0x3AA4CCEC6BD68143LL, 1, 15, "createaggregate", &c_SQLite3::ci_createaggregate },
  { 0x21F68C010C124BC4LL, 1, 4, "open", &c_SQLite3::ci_open },
  { 0x632B468FC2FCAB0ALL, 1, 13, "lasterrorcode", &c_SQLite3::ci_lasterrorcode },
  { 0x4F1D1ED7B087208CLL, 1, 4, "exec", &c_SQLite3::ci_exec },
  { 0x7CECF508291057CDLL, 1, 14, "createfunction", &c_SQLite3::ci_createfunction },
  { 0x64D2BDB189B02819LL, 1, 7, "changes", &c_SQLite3::ci_changes },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_SQLite3::ci___construct },
  { 0x1B3CDE890A487664LL, 1, 13, "loadextension", &c_SQLite3::ci_loadextension },
  { 0x5024F08DB0FDCBE6LL, 1, 15, "lastinsertrowid", &c_SQLite3::ci_lastinsertrowid },
  { 0x5AE41239FF63D86ALL, 1, 7, "version", &c_SQLite3::ci_version },
  { 0x156B1FAE4132ABEELL, 1, 11, "querysingle", &c_SQLite3::ci_querysingle },
  { 0x540020AE4BA591AFLL, 1, 7, "prepare", &c_SQLite3::ci_prepare },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_SQLite3::ci___destruct },
  { 0x607C4C73BB251635LL, 1, 12, "escapestring", &c_SQLite3::ci_escapestring },
  { 0x356758D4414DA377LL, 1, 5, "query", &c_SQLite3::ci_query },
  { 0, 1, 0, 0 }
};
const int c_SQLite3::s_call_info_index[] = {
  63,
  -1,0,1,3,4,-1,-1,-1,
  -1,-1,5,-1,6,7,-1,-1,
  -1,-1,-1,-1,-1,-1,-1,-1,
  -1,8,-1,-1,-1,-1,-1,9,
  -1,-1,-1,-1,10,-1,11,-1,
  -1,-1,12,-1,-1,-1,13,14,
  -1,-1,-1,15,-1,16,-1,17,
  -1,-1,-1,-1,-1,-1,-1,-1,

};
c_SQLite3 *c_SQLite3::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_SQLite3::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_SQLite3::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_SQLite3::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_SQLite3 = {
  c_SQLite3::os_getInit,
  c_SQLite3::os_get,
  c_SQLite3::os_lval,
  c_SQLite3::os_invoke,
  c_SQLite3::os_constant,
  (ObjectData*(*)(ObjectData*))coo_SQLite3,
  c_SQLite3::s_call_info_table,c_SQLite3::s_call_info_index,
  "SQLite3",
  0
};
ObjectData *coo_DOMAttr() {
  return NEWOBJ(c_DOMAttr)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMAttr
Variant c_DOMAttr::os_getInit(CStrRef s) {
  return c_DOMNode::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMAttr
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMAttr
Variant c_DOMAttr::os_get(CStrRef s) {
  return c_DOMNode::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMAttr
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMAttr
Variant &c_DOMAttr::os_lval(CStrRef s) {
  return c_DOMNode::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMAttr
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DOMAttr
Variant * c_DOMAttr::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DOMAttr
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMAttr
Variant * c_DOMAttr::o_realPropPublic(CStrRef s, int flags) const {
  return c_DOMNode::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMAttr
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMAttr
Variant * c_DOMAttr::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMAttr
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMAttr
Variant c_DOMAttr::os_constant(const char *s) {
  return c_DOMNode::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMAttr
IMPLEMENT_CLASS(DOMAttr)
ObjectData *c_DOMAttr::cloneImpl() {
  ObjectData *obj = coo_DOMAttr();
  c_DOMAttr::cloneSet(obj);
  return obj;
}
void c_DOMAttr::cloneSet(ObjectData *cl) {
  c_DOMAttr *clone = static_cast<c_DOMAttr*>(cl);
  c_DOMNode::cloneSet(clone);
}
CallInfo c_DOMAttr::ci_isid((void*)&c_DOMAttr::i_isid, (void*)&c_DOMAttr::ifa_isid, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMAttr::ci___destruct((void*)&c_DOMAttr::i___destruct, (void*)&c_DOMAttr::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMAttr::ci___set((void*)&c_DOMAttr::i___set, (void*)&c_DOMAttr::ifa___set, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMAttr::ci___construct((void*)&c_DOMAttr::i___construct, (void*)&c_DOMAttr::ifa___construct, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMAttr::ci___get((void*)&c_DOMAttr::i___get, (void*)&c_DOMAttr::ifa___get, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMAttr::ci___isset((void*)&c_DOMAttr::i___isset, (void*)&c_DOMAttr::ifa___isset, 1, 4, 0x0000000000000000LL);
Variant c_DOMAttr::i_isid(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_isid, coo_DOMAttr);
  }
  c_DOMAttr *self ATTRIBUTE_UNUSED (static_cast<c_DOMAttr*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("isid", 0, 1);
  return (self->t_isid());
}
Variant c_DOMAttr::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_DOMAttr);
  }
  c_DOMAttr *self ATTRIBUTE_UNUSED (static_cast<c_DOMAttr*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMAttr::i___set(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___set, coo_DOMAttr);
  }
  c_DOMAttr *self ATTRIBUTE_UNUSED (static_cast<c_DOMAttr*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___set(arg0, arg1));
  }
}
Variant c_DOMAttr::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_DOMAttr);
  }
  c_DOMAttr *self ATTRIBUTE_UNUSED (static_cast<c_DOMAttr*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("__construct", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t___construct(arg0), null);
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___construct(arg0, arg1), null);
  }
}
Variant c_DOMAttr::i___get(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___get, coo_DOMAttr);
  }
  c_DOMAttr *self ATTRIBUTE_UNUSED (static_cast<c_DOMAttr*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___get(arg0));
  }
}
Variant c_DOMAttr::i___isset(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___isset, coo_DOMAttr);
  }
  c_DOMAttr *self ATTRIBUTE_UNUSED (static_cast<c_DOMAttr*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___isset(arg0));
  }
}
Variant c_DOMAttr::ifa_isid(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isid, coo_DOMAttr);
  }
  c_DOMAttr *self ATTRIBUTE_UNUSED (static_cast<c_DOMAttr*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("isid", 0, 1);
  return (self->t_isid());
}
Variant c_DOMAttr::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_DOMAttr);
  }
  c_DOMAttr *self ATTRIBUTE_UNUSED (static_cast<c_DOMAttr*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMAttr::ifa___set(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___set, coo_DOMAttr);
  }
  c_DOMAttr *self ATTRIBUTE_UNUSED (static_cast<c_DOMAttr*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t___set(arg0, arg1));
}
Variant c_DOMAttr::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_DOMAttr);
  }
  c_DOMAttr *self ATTRIBUTE_UNUSED (static_cast<c_DOMAttr*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("__construct", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t___construct(arg0), null);
  CVarRef arg1(a1);
  return (self->t___construct(arg0, arg1), null);
}
Variant c_DOMAttr::ifa___get(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___get, coo_DOMAttr);
  }
  c_DOMAttr *self ATTRIBUTE_UNUSED (static_cast<c_DOMAttr*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___get(arg0));
}
Variant c_DOMAttr::ifa___isset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___isset, coo_DOMAttr);
  }
  c_DOMAttr *self ATTRIBUTE_UNUSED (static_cast<c_DOMAttr*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___isset(arg0));
}
const MethodCallInfoTable c_DOMAttr::s_call_info_table[] = {
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_DOMAttr::ci___destruct },
  { 0x30A9329415D17F24LL, 1, 4, "isId", &c_DOMAttr::ci_isid },
  { 0x52F3DAD783340395LL, 1, 5, "__set", &c_DOMAttr::ci___set },
  { 0x4FE08FDDAE2178EELL, 1, 7, "__isset", &c_DOMAttr::ci___isset },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_DOMAttr::ci___construct },
  { 0x26B6E00C74FA338FLL, 0, 5, "__get", &c_DOMAttr::ci___get },
  { 0, 1, 0, 0 }
};
const int c_DOMAttr::s_call_info_index[] = {
  15,
  -1,-1,-1,0,1,2,-1,-1,
  -1,-1,-1,-1,-1,-1,3,4,

};
c_DOMAttr *c_DOMAttr::create(String a0, String a1) {
  CountableHelper h(this);
  init();
  t___construct(a0, a1);
  return this;
}
void c_DOMAttr::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) throw_wrong_arguments("__construct", count, 1, 2, 2);
  do {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) {
      (t___construct(arg0));
      break;
    }
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    (t___construct(arg0, arg1));
  } while (false);
}
void c_DOMAttr::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DOMAttr::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_DOMAttr = {
  c_DOMAttr::os_getInit,
  c_DOMAttr::os_get,
  c_DOMAttr::os_lval,
  c_DOMAttr::os_invoke,
  c_DOMAttr::os_constant,
  (ObjectData*(*)(ObjectData*))coo_DOMAttr,
  c_DOMAttr::s_call_info_table,c_DOMAttr::s_call_info_index,
  "DOMAttr",
  &cw_DOMNode
};
ObjectData *coo_SoapVar() {
  return NEWOBJ(c_SoapVar)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_SoapVar
Variant c_SoapVar::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_SoapVar
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_SoapVar
Variant c_SoapVar::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_SoapVar
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_SoapVar
Variant &c_SoapVar::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_SoapVar
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_SoapVar
Variant * c_SoapVar::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_SoapVar
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_SoapVar
Variant * c_SoapVar::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_SoapVar
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_SoapVar
Variant * c_SoapVar::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_SoapVar
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_SoapVar
Variant c_SoapVar::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_SoapVar
IMPLEMENT_CLASS(SoapVar)
ObjectData *c_SoapVar::cloneImpl() {
  ObjectData *obj = coo_SoapVar();
  c_SoapVar::cloneSet(obj);
  return obj;
}
void c_SoapVar::cloneSet(ObjectData *cl) {
  c_SoapVar *clone = static_cast<c_SoapVar*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_SoapVar::ci___destruct((void*)&c_SoapVar::i___destruct, (void*)&c_SoapVar::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_SoapVar::ci___construct((void*)&c_SoapVar::i___construct, (void*)&c_SoapVar::ifa___construct, 6, 4, 0x0000000000000000LL);
Variant c_SoapVar::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_SoapVar);
  }
  c_SoapVar *self ATTRIBUTE_UNUSED (static_cast<c_SoapVar*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_SoapVar::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_SoapVar);
  }
  c_SoapVar *self ATTRIBUTE_UNUSED (static_cast<c_SoapVar*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 6)) return throw_wrong_arguments("__construct", count, 2, 6, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t___construct(arg0, arg1), null);
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t___construct(arg0, arg1, arg2), null);
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (self->t___construct(arg0, arg1, arg2, arg3), null);
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 5) return (self->t___construct(arg0, arg1, arg2, arg3, arg4), null);
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___construct(arg0, arg1, arg2, arg3, arg4, arg5), null);
  }
}
Variant c_SoapVar::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_SoapVar);
  }
  c_SoapVar *self ATTRIBUTE_UNUSED (static_cast<c_SoapVar*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_SoapVar::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_SoapVar);
  }
  c_SoapVar *self ATTRIBUTE_UNUSED (static_cast<c_SoapVar*>(mcp.obj));
  if (UNLIKELY(count < 2)) return throw_wrong_arguments("__construct", count, 2, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t___construct(arg0, arg1), null);
  CVarRef arg2(a2);
  if (count <= 3) return (self->t___construct(arg0, arg1, arg2), null);
  CVarRef arg3(a3);
  if (count <= 4) return (self->t___construct(arg0, arg1, arg2, arg3), null);
  CVarRef arg4(a4);
  if (count <= 5) return (self->t___construct(arg0, arg1, arg2, arg3, arg4), null);
  CVarRef arg5(a5);
  return (self->t___construct(arg0, arg1, arg2, arg3, arg4, arg5), null);
}
const MethodCallInfoTable c_SoapVar::s_call_info_table[] = {
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_SoapVar::ci___destruct },
  { 0x0D31D0AC229C615FLL, 0, 11, "__construct", &c_SoapVar::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_SoapVar::s_call_info_index[] = {
  3,
  -1,-1,-1,0,
};
c_SoapVar *c_SoapVar::create(Variant a0, Variant a1, String a2, String a3, String a4, String a5) {
  CountableHelper h(this);
  init();
  t___construct(a0, a1, a2, a3, a4, a5);
  return this;
}
void c_SoapVar::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 6)) throw_wrong_arguments("__construct", count, 2, 6, 2);
  do {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) {
      (t___construct(arg0, arg1));
      break;
    }
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) {
      (t___construct(arg0, arg1, arg2));
      break;
    }
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) {
      (t___construct(arg0, arg1, arg2, arg3));
      break;
    }
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 5) {
      (t___construct(arg0, arg1, arg2, arg3, arg4));
      break;
    }
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    (t___construct(arg0, arg1, arg2, arg3, arg4, arg5));
  } while (false);
}
void c_SoapVar::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_SoapVar::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_SoapVar = {
  c_SoapVar::os_getInit,
  c_SoapVar::os_get,
  c_SoapVar::os_lval,
  c_SoapVar::os_invoke,
  c_SoapVar::os_constant,
  (ObjectData*(*)(ObjectData*))coo_SoapVar,
  c_SoapVar::s_call_info_table,c_SoapVar::s_call_info_index,
  "SoapVar",
  0
};
ObjectData *coo_DOMNamedNodeMap() {
  return NEWOBJ(c_DOMNamedNodeMap)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMNamedNodeMap
Variant c_DOMNamedNodeMap::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMNamedNodeMap
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMNamedNodeMap
Variant c_DOMNamedNodeMap::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMNamedNodeMap
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMNamedNodeMap
Variant &c_DOMNamedNodeMap::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMNamedNodeMap
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DOMNamedNodeMap
Variant * c_DOMNamedNodeMap::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DOMNamedNodeMap
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMNamedNodeMap
Variant * c_DOMNamedNodeMap::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMNamedNodeMap
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMNamedNodeMap
Variant * c_DOMNamedNodeMap::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMNamedNodeMap
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMNamedNodeMap
Variant c_DOMNamedNodeMap::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMNamedNodeMap
IMPLEMENT_CLASS(DOMNamedNodeMap)
ObjectData *c_DOMNamedNodeMap::cloneImpl() {
  ObjectData *obj = coo_DOMNamedNodeMap();
  c_DOMNamedNodeMap::cloneSet(obj);
  return obj;
}
void c_DOMNamedNodeMap::cloneSet(ObjectData *cl) {
  c_DOMNamedNodeMap *clone = static_cast<c_DOMNamedNodeMap*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_DOMNamedNodeMap::ci_item((void*)&c_DOMNamedNodeMap::i_item, (void*)&c_DOMNamedNodeMap::ifa_item, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMNamedNodeMap::ci_getnameditem((void*)&c_DOMNamedNodeMap::i_getnameditem, (void*)&c_DOMNamedNodeMap::ifa_getnameditem, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMNamedNodeMap::ci___destruct((void*)&c_DOMNamedNodeMap::i___destruct, (void*)&c_DOMNamedNodeMap::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMNamedNodeMap::ci___set((void*)&c_DOMNamedNodeMap::i___set, (void*)&c_DOMNamedNodeMap::ifa___set, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMNamedNodeMap::ci___construct((void*)&c_DOMNamedNodeMap::i___construct, (void*)&c_DOMNamedNodeMap::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMNamedNodeMap::ci_getiterator((void*)&c_DOMNamedNodeMap::i_getiterator, (void*)&c_DOMNamedNodeMap::ifa_getiterator, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMNamedNodeMap::ci___get((void*)&c_DOMNamedNodeMap::i___get, (void*)&c_DOMNamedNodeMap::ifa___get, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMNamedNodeMap::ci_getnameditemns((void*)&c_DOMNamedNodeMap::i_getnameditemns, (void*)&c_DOMNamedNodeMap::ifa_getnameditemns, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMNamedNodeMap::ci___isset((void*)&c_DOMNamedNodeMap::i___isset, (void*)&c_DOMNamedNodeMap::ifa___isset, 1, 4, 0x0000000000000000LL);
Variant c_DOMNamedNodeMap::i_item(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_item, coo_DOMNamedNodeMap);
  }
  c_DOMNamedNodeMap *self ATTRIBUTE_UNUSED (static_cast<c_DOMNamedNodeMap*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("item", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_item(arg0));
  }
}
Variant c_DOMNamedNodeMap::i_getnameditem(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getnameditem, coo_DOMNamedNodeMap);
  }
  c_DOMNamedNodeMap *self ATTRIBUTE_UNUSED (static_cast<c_DOMNamedNodeMap*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getnameditem", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getnameditem(arg0));
  }
}
Variant c_DOMNamedNodeMap::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_DOMNamedNodeMap);
  }
  c_DOMNamedNodeMap *self ATTRIBUTE_UNUSED (static_cast<c_DOMNamedNodeMap*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMNamedNodeMap::i___set(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___set, coo_DOMNamedNodeMap);
  }
  c_DOMNamedNodeMap *self ATTRIBUTE_UNUSED (static_cast<c_DOMNamedNodeMap*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___set(arg0, arg1));
  }
}
Variant c_DOMNamedNodeMap::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_DOMNamedNodeMap);
  }
  c_DOMNamedNodeMap *self ATTRIBUTE_UNUSED (static_cast<c_DOMNamedNodeMap*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DOMNamedNodeMap::i_getiterator(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getiterator, coo_DOMNamedNodeMap);
  }
  c_DOMNamedNodeMap *self ATTRIBUTE_UNUSED (static_cast<c_DOMNamedNodeMap*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getiterator", 0, 1);
  return (self->t_getiterator());
}
Variant c_DOMNamedNodeMap::i___get(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___get, coo_DOMNamedNodeMap);
  }
  c_DOMNamedNodeMap *self ATTRIBUTE_UNUSED (static_cast<c_DOMNamedNodeMap*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___get(arg0));
  }
}
Variant c_DOMNamedNodeMap::i_getnameditemns(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getnameditemns, coo_DOMNamedNodeMap);
  }
  c_DOMNamedNodeMap *self ATTRIBUTE_UNUSED (static_cast<c_DOMNamedNodeMap*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("getnameditemns", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_getnameditemns(arg0, arg1));
  }
}
Variant c_DOMNamedNodeMap::i___isset(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___isset, coo_DOMNamedNodeMap);
  }
  c_DOMNamedNodeMap *self ATTRIBUTE_UNUSED (static_cast<c_DOMNamedNodeMap*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___isset(arg0));
  }
}
Variant c_DOMNamedNodeMap::ifa_item(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_item, coo_DOMNamedNodeMap);
  }
  c_DOMNamedNodeMap *self ATTRIBUTE_UNUSED (static_cast<c_DOMNamedNodeMap*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("item", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_item(arg0));
}
Variant c_DOMNamedNodeMap::ifa_getnameditem(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getnameditem, coo_DOMNamedNodeMap);
  }
  c_DOMNamedNodeMap *self ATTRIBUTE_UNUSED (static_cast<c_DOMNamedNodeMap*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getnameditem", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_getnameditem(arg0));
}
Variant c_DOMNamedNodeMap::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_DOMNamedNodeMap);
  }
  c_DOMNamedNodeMap *self ATTRIBUTE_UNUSED (static_cast<c_DOMNamedNodeMap*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMNamedNodeMap::ifa___set(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___set, coo_DOMNamedNodeMap);
  }
  c_DOMNamedNodeMap *self ATTRIBUTE_UNUSED (static_cast<c_DOMNamedNodeMap*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t___set(arg0, arg1));
}
Variant c_DOMNamedNodeMap::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_DOMNamedNodeMap);
  }
  c_DOMNamedNodeMap *self ATTRIBUTE_UNUSED (static_cast<c_DOMNamedNodeMap*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DOMNamedNodeMap::ifa_getiterator(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getiterator, coo_DOMNamedNodeMap);
  }
  c_DOMNamedNodeMap *self ATTRIBUTE_UNUSED (static_cast<c_DOMNamedNodeMap*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getiterator", 0, 1);
  return (self->t_getiterator());
}
Variant c_DOMNamedNodeMap::ifa___get(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___get, coo_DOMNamedNodeMap);
  }
  c_DOMNamedNodeMap *self ATTRIBUTE_UNUSED (static_cast<c_DOMNamedNodeMap*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___get(arg0));
}
Variant c_DOMNamedNodeMap::ifa_getnameditemns(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getnameditemns, coo_DOMNamedNodeMap);
  }
  c_DOMNamedNodeMap *self ATTRIBUTE_UNUSED (static_cast<c_DOMNamedNodeMap*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("getnameditemns", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_getnameditemns(arg0, arg1));
}
Variant c_DOMNamedNodeMap::ifa___isset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___isset, coo_DOMNamedNodeMap);
  }
  c_DOMNamedNodeMap *self ATTRIBUTE_UNUSED (static_cast<c_DOMNamedNodeMap*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___isset(arg0));
}
const MethodCallInfoTable c_DOMNamedNodeMap::s_call_info_table[] = {
  { 0x570B2E1232A12503LL, 1, 11, "getIterator", &c_DOMNamedNodeMap::ci_getiterator },
  { 0x0A41DBE0830902C6LL, 1, 4, "item", &c_DOMNamedNodeMap::ci_item },
  { 0x4FE08FDDAE2178EELL, 1, 7, "__isset", &c_DOMNamedNodeMap::ci___isset },
  { 0x26B6E00C74FA338FLL, 1, 5, "__get", &c_DOMNamedNodeMap::ci___get },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_DOMNamedNodeMap::ci___destruct },
  { 0x52F3DAD783340395LL, 1, 5, "__set", &c_DOMNamedNodeMap::ci___set },
  { 0x5D3CEC627F9ADC3ALL, 1, 12, "getNamedItem", &c_DOMNamedNodeMap::ci_getnameditem },
  { 0x53B4D840FF4F0F1BLL, 1, 14, "getNamedItemNS", &c_DOMNamedNodeMap::ci_getnameditemns },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_DOMNamedNodeMap::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_DOMNamedNodeMap::s_call_info_index[] = {
  31,
  -1,-1,-1,0,-1,-1,1,-1,
  -1,-1,-1,-1,-1,-1,2,3,
  -1,-1,-1,4,-1,5,-1,-1,
  -1,-1,6,7,-1,-1,-1,8,

};
c_DOMNamedNodeMap *c_DOMNamedNodeMap::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_DOMNamedNodeMap::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_DOMNamedNodeMap::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DOMNamedNodeMap::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_DOMNamedNodeMap = {
  c_DOMNamedNodeMap::os_getInit,
  c_DOMNamedNodeMap::os_get,
  c_DOMNamedNodeMap::os_lval,
  c_DOMNamedNodeMap::os_invoke,
  c_DOMNamedNodeMap::os_constant,
  (ObjectData*(*)(ObjectData*))coo_DOMNamedNodeMap,
  c_DOMNamedNodeMap::s_call_info_table,c_DOMNamedNodeMap::s_call_info_index,
  "DOMNamedNodeMap",
  0
};
ObjectData *coo_SQLite3Result() {
  return NEWOBJ(c_SQLite3Result)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_SQLite3Result
Variant c_SQLite3Result::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_SQLite3Result
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_SQLite3Result
Variant c_SQLite3Result::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_SQLite3Result
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_SQLite3Result
Variant &c_SQLite3Result::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_SQLite3Result
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_SQLite3Result
Variant * c_SQLite3Result::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_SQLite3Result
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_SQLite3Result
Variant * c_SQLite3Result::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_SQLite3Result
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_SQLite3Result
Variant * c_SQLite3Result::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_SQLite3Result
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_SQLite3Result
Variant c_SQLite3Result::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_SQLite3Result
IMPLEMENT_CLASS(SQLite3Result)
ObjectData *c_SQLite3Result::cloneImpl() {
  ObjectData *obj = coo_SQLite3Result();
  c_SQLite3Result::cloneSet(obj);
  return obj;
}
void c_SQLite3Result::cloneSet(ObjectData *cl) {
  c_SQLite3Result *clone = static_cast<c_SQLite3Result*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_SQLite3Result::ci_columnname((void*)&c_SQLite3Result::i_columnname, (void*)&c_SQLite3Result::ifa_columnname, 1, 4, 0x0000000000000000LL);
CallInfo c_SQLite3Result::ci_columntype((void*)&c_SQLite3Result::i_columntype, (void*)&c_SQLite3Result::ifa_columntype, 1, 4, 0x0000000000000000LL);
CallInfo c_SQLite3Result::ci___destruct((void*)&c_SQLite3Result::i___destruct, (void*)&c_SQLite3Result::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_SQLite3Result::ci___construct((void*)&c_SQLite3Result::i___construct, (void*)&c_SQLite3Result::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_SQLite3Result::ci_numcolumns((void*)&c_SQLite3Result::i_numcolumns, (void*)&c_SQLite3Result::ifa_numcolumns, 0, 4, 0x0000000000000000LL);
CallInfo c_SQLite3Result::ci_fetcharray((void*)&c_SQLite3Result::i_fetcharray, (void*)&c_SQLite3Result::ifa_fetcharray, 1, 4, 0x0000000000000000LL);
CallInfo c_SQLite3Result::ci_reset((void*)&c_SQLite3Result::i_reset, (void*)&c_SQLite3Result::ifa_reset, 0, 4, 0x0000000000000000LL);
CallInfo c_SQLite3Result::ci_finalize((void*)&c_SQLite3Result::i_finalize, (void*)&c_SQLite3Result::ifa_finalize, 0, 4, 0x0000000000000000LL);
Variant c_SQLite3Result::i_columnname(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_columnname, coo_SQLite3Result);
  }
  c_SQLite3Result *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Result*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("columnname", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_columnname(arg0));
  }
}
Variant c_SQLite3Result::i_columntype(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_columntype, coo_SQLite3Result);
  }
  c_SQLite3Result *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Result*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("columntype", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_columntype(arg0));
  }
}
Variant c_SQLite3Result::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_SQLite3Result);
  }
  c_SQLite3Result *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Result*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_SQLite3Result::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_SQLite3Result);
  }
  c_SQLite3Result *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Result*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_SQLite3Result::i_numcolumns(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_numcolumns, coo_SQLite3Result);
  }
  c_SQLite3Result *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Result*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("numcolumns", 0, 1);
  return (self->t_numcolumns());
}
Variant c_SQLite3Result::i_fetcharray(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_fetcharray, coo_SQLite3Result);
  }
  c_SQLite3Result *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Result*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("fetcharray", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_fetcharray());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_fetcharray(arg0));
  }
}
Variant c_SQLite3Result::i_reset(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_reset, coo_SQLite3Result);
  }
  c_SQLite3Result *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Result*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("reset", 0, 1);
  return (self->t_reset());
}
Variant c_SQLite3Result::i_finalize(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_finalize, coo_SQLite3Result);
  }
  c_SQLite3Result *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Result*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("finalize", 0, 1);
  return (self->t_finalize());
}
Variant c_SQLite3Result::ifa_columnname(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_columnname, coo_SQLite3Result);
  }
  c_SQLite3Result *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Result*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("columnname", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_columnname(arg0));
}
Variant c_SQLite3Result::ifa_columntype(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_columntype, coo_SQLite3Result);
  }
  c_SQLite3Result *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Result*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("columntype", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_columntype(arg0));
}
Variant c_SQLite3Result::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_SQLite3Result);
  }
  c_SQLite3Result *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Result*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_SQLite3Result::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_SQLite3Result);
  }
  c_SQLite3Result *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Result*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_SQLite3Result::ifa_numcolumns(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_numcolumns, coo_SQLite3Result);
  }
  c_SQLite3Result *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Result*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("numcolumns", 0, 1);
  return (self->t_numcolumns());
}
Variant c_SQLite3Result::ifa_fetcharray(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_fetcharray, coo_SQLite3Result);
  }
  c_SQLite3Result *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Result*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("fetcharray", 1, 1);
  if (count <= 0) return (self->t_fetcharray());
  CVarRef arg0(a0);
  return (self->t_fetcharray(arg0));
}
Variant c_SQLite3Result::ifa_reset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_reset, coo_SQLite3Result);
  }
  c_SQLite3Result *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Result*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("reset", 0, 1);
  return (self->t_reset());
}
Variant c_SQLite3Result::ifa_finalize(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_finalize, coo_SQLite3Result);
  }
  c_SQLite3Result *self ATTRIBUTE_UNUSED (static_cast<c_SQLite3Result*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("finalize", 0, 1);
  return (self->t_finalize());
}
const MethodCallInfoTable c_SQLite3Result::s_call_info_table[] = {
  { 0x340A51AE22A924E0LL, 1, 5, "reset", &c_SQLite3Result::ci_reset },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_SQLite3Result::ci___destruct },
  { 0x4C7702FC22784996LL, 1, 10, "numcolumns", &c_SQLite3Result::ci_numcolumns },
  { 0x696EFC04EE7E47F8LL, 1, 10, "columnname", &c_SQLite3Result::ci_columnname },
  { 0x59F73C4DEF1C3A6BLL, 1, 10, "fetcharray", &c_SQLite3Result::ci_fetcharray },
  { 0x32A58B0CE493957CLL, 1, 8, "finalize", &c_SQLite3Result::ci_finalize },
  { 0x42EDB5CA009D8C6DLL, 1, 10, "columntype", &c_SQLite3Result::ci_columntype },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_SQLite3Result::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_SQLite3Result::s_call_info_index[] = {
  15,
  0,-1,-1,1,-1,-1,2,-1,
  3,-1,-1,4,5,6,-1,7,

};
c_SQLite3Result *c_SQLite3Result::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_SQLite3Result::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_SQLite3Result::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_SQLite3Result::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_SQLite3Result = {
  c_SQLite3Result::os_getInit,
  c_SQLite3Result::os_get,
  c_SQLite3Result::os_lval,
  c_SQLite3Result::os_invoke,
  c_SQLite3Result::os_constant,
  (ObjectData*(*)(ObjectData*))coo_SQLite3Result,
  c_SQLite3Result::s_call_info_table,c_SQLite3Result::s_call_info_index,
  "SQLite3Result",
  0
};
ObjectData *coo_SimpleXMLElement() {
  return NEWOBJ(c_SimpleXMLElement)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_SimpleXMLElement
Variant c_SimpleXMLElement::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_SimpleXMLElement
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_SimpleXMLElement
Variant c_SimpleXMLElement::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_SimpleXMLElement
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_SimpleXMLElement
Variant &c_SimpleXMLElement::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_SimpleXMLElement
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_SimpleXMLElement
Variant * c_SimpleXMLElement::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_SimpleXMLElement
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_SimpleXMLElement
Variant * c_SimpleXMLElement::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_SimpleXMLElement
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_SimpleXMLElement
Variant * c_SimpleXMLElement::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_SimpleXMLElement
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_SimpleXMLElement
Variant c_SimpleXMLElement::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_SimpleXMLElement
IMPLEMENT_CLASS(SimpleXMLElement)
ObjectData *c_SimpleXMLElement::cloneImpl() {
  ObjectData *obj = coo_SimpleXMLElement();
  c_SimpleXMLElement::cloneSet(obj);
  return obj;
}
void c_SimpleXMLElement::cloneSet(ObjectData *cl) {
  c_SimpleXMLElement *clone = static_cast<c_SimpleXMLElement*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_SimpleXMLElement::ci_addattribute((void*)&c_SimpleXMLElement::i_addattribute, (void*)&c_SimpleXMLElement::ifa_addattribute, 3, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElement::ci_count((void*)&c_SimpleXMLElement::i_count, (void*)&c_SimpleXMLElement::ifa_count, 0, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElement::ci___tostring((void*)&c_SimpleXMLElement::i___tostring, (void*)&c_SimpleXMLElement::ifa___tostring, 0, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElement::ci_xpath((void*)&c_SimpleXMLElement::i_xpath, (void*)&c_SimpleXMLElement::ifa_xpath, 1, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElement::ci___destruct((void*)&c_SimpleXMLElement::i___destruct, (void*)&c_SimpleXMLElement::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElement::ci___set((void*)&c_SimpleXMLElement::i___set, (void*)&c_SimpleXMLElement::ifa___set, 2, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElement::ci___construct((void*)&c_SimpleXMLElement::i___construct, (void*)&c_SimpleXMLElement::ifa___construct, 5, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElement::ci_offsetexists((void*)&c_SimpleXMLElement::i_offsetexists, (void*)&c_SimpleXMLElement::ifa_offsetexists, 1, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElement::ci_getiterator((void*)&c_SimpleXMLElement::i_getiterator, (void*)&c_SimpleXMLElement::ifa_getiterator, 0, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElement::ci_registerxpathnamespace((void*)&c_SimpleXMLElement::i_registerxpathnamespace, (void*)&c_SimpleXMLElement::ifa_registerxpathnamespace, 2, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElement::ci_offsetget((void*)&c_SimpleXMLElement::i_offsetget, (void*)&c_SimpleXMLElement::ifa_offsetget, 1, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElement::ci_getnamespaces((void*)&c_SimpleXMLElement::i_getnamespaces, (void*)&c_SimpleXMLElement::ifa_getnamespaces, 1, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElement::ci___unset((void*)&c_SimpleXMLElement::i___unset, (void*)&c_SimpleXMLElement::ifa___unset, 1, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElement::ci_asxml((void*)&c_SimpleXMLElement::i_asxml, (void*)&c_SimpleXMLElement::ifa_asxml, 1, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElement::ci_getdocnamespaces((void*)&c_SimpleXMLElement::i_getdocnamespaces, (void*)&c_SimpleXMLElement::ifa_getdocnamespaces, 1, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElement::ci_offsetunset((void*)&c_SimpleXMLElement::i_offsetunset, (void*)&c_SimpleXMLElement::ifa_offsetunset, 1, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElement::ci___get((void*)&c_SimpleXMLElement::i___get, (void*)&c_SimpleXMLElement::ifa___get, 1, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElement::ci_children((void*)&c_SimpleXMLElement::i_children, (void*)&c_SimpleXMLElement::ifa_children, 2, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElement::ci_addchild((void*)&c_SimpleXMLElement::i_addchild, (void*)&c_SimpleXMLElement::ifa_addchild, 3, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElement::ci___isset((void*)&c_SimpleXMLElement::i___isset, (void*)&c_SimpleXMLElement::ifa___isset, 1, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElement::ci_getname((void*)&c_SimpleXMLElement::i_getname, (void*)&c_SimpleXMLElement::ifa_getname, 0, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElement::ci_attributes((void*)&c_SimpleXMLElement::i_attributes, (void*)&c_SimpleXMLElement::ifa_attributes, 2, 4, 0x0000000000000000LL);
CallInfo c_SimpleXMLElement::ci_offsetset((void*)&c_SimpleXMLElement::i_offsetset, (void*)&c_SimpleXMLElement::ifa_offsetset, 2, 4, 0x0000000000000000LL);
Variant c_SimpleXMLElement::i_addattribute(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_addattribute, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("addattribute", count, 1, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_addattribute(arg0), null);
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_addattribute(arg0, arg1), null);
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_addattribute(arg0, arg1, arg2), null);
  }
}
Variant c_SimpleXMLElement::i_count(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_count, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("count", 0, 1);
  return (self->t_count());
}
Variant c_SimpleXMLElement::i___tostring(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___tostring, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__tostring", 0, 1);
  return (self->t___tostring());
}
Variant c_SimpleXMLElement::i_xpath(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_xpath, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xpath", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_xpath(arg0));
  }
}
Variant c_SimpleXMLElement::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_SimpleXMLElement::i___set(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___set, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___set(arg0, arg1));
  }
}
Variant c_SimpleXMLElement::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 5)) return throw_wrong_arguments("__construct", count, 1, 5, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t___construct(arg0), null);
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t___construct(arg0, arg1), null);
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t___construct(arg0, arg1, arg2), null);
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (self->t___construct(arg0, arg1, arg2, arg3), null);
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___construct(arg0, arg1, arg2, arg3, arg4), null);
  }
}
Variant c_SimpleXMLElement::i_offsetexists(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_offsetexists, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("offsetexists", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_offsetexists(arg0));
  }
}
Variant c_SimpleXMLElement::i_getiterator(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getiterator, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getiterator", 0, 1);
  return (self->t_getiterator());
}
Variant c_SimpleXMLElement::i_registerxpathnamespace(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_registerxpathnamespace, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("registerxpathnamespace", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_registerxpathnamespace(arg0, arg1));
  }
}
Variant c_SimpleXMLElement::i_offsetget(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_offsetget, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("offsetget", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_offsetget(arg0));
  }
}
Variant c_SimpleXMLElement::i_getnamespaces(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getnamespaces, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("getnamespaces", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_getnamespaces());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getnamespaces(arg0));
  }
}
Variant c_SimpleXMLElement::i___unset(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___unset, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__unset", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___unset(arg0));
  }
}
Variant c_SimpleXMLElement::i_asxml(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_asxml, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("asxml", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_asxml());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_asxml(arg0));
  }
}
Variant c_SimpleXMLElement::i_getdocnamespaces(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getdocnamespaces, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("getdocnamespaces", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_getdocnamespaces());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getdocnamespaces(arg0));
  }
}
Variant c_SimpleXMLElement::i_offsetunset(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_offsetunset, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("offsetunset", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_offsetunset(arg0), null);
  }
}
Variant c_SimpleXMLElement::i___get(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___get, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___get(arg0));
  }
}
Variant c_SimpleXMLElement::i_children(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_children, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("children", 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_children());
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_children(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_children(arg0, arg1));
  }
}
Variant c_SimpleXMLElement::i_addchild(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_addchild, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("addchild", count, 1, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_addchild(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_addchild(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_addchild(arg0, arg1, arg2));
  }
}
Variant c_SimpleXMLElement::i___isset(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___isset, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___isset(arg0));
  }
}
Variant c_SimpleXMLElement::i_getname(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getname, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getname", 0, 1);
  return (self->t_getname());
}
Variant c_SimpleXMLElement::i_attributes(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_attributes, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("attributes", 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_attributes());
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_attributes(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_attributes(arg0, arg1));
  }
}
Variant c_SimpleXMLElement::i_offsetset(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_offsetset, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("offsetset", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_offsetset(arg0, arg1), null);
  }
}
Variant c_SimpleXMLElement::ifa_addattribute(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_addattribute, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("addattribute", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_addattribute(arg0), null);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_addattribute(arg0, arg1), null);
  CVarRef arg2(a2);
  return (self->t_addattribute(arg0, arg1, arg2), null);
}
Variant c_SimpleXMLElement::ifa_count(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_count, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("count", 0, 1);
  return (self->t_count());
}
Variant c_SimpleXMLElement::ifa___tostring(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___tostring, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__tostring", 0, 1);
  return (self->t___tostring());
}
Variant c_SimpleXMLElement::ifa_xpath(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_xpath, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("xpath", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_xpath(arg0));
}
Variant c_SimpleXMLElement::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_SimpleXMLElement::ifa___set(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___set, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t___set(arg0, arg1));
}
Variant c_SimpleXMLElement::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 5)) return throw_wrong_arguments("__construct", count, 1, 5, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t___construct(arg0), null);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t___construct(arg0, arg1), null);
  CVarRef arg2(a2);
  if (count <= 3) return (self->t___construct(arg0, arg1, arg2), null);
  CVarRef arg3(a3);
  if (count <= 4) return (self->t___construct(arg0, arg1, arg2, arg3), null);
  CVarRef arg4(a4);
  return (self->t___construct(arg0, arg1, arg2, arg3, arg4), null);
}
Variant c_SimpleXMLElement::ifa_offsetexists(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_offsetexists, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("offsetexists", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_offsetexists(arg0));
}
Variant c_SimpleXMLElement::ifa_getiterator(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getiterator, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getiterator", 0, 1);
  return (self->t_getiterator());
}
Variant c_SimpleXMLElement::ifa_registerxpathnamespace(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_registerxpathnamespace, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("registerxpathnamespace", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_registerxpathnamespace(arg0, arg1));
}
Variant c_SimpleXMLElement::ifa_offsetget(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_offsetget, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("offsetget", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_offsetget(arg0));
}
Variant c_SimpleXMLElement::ifa_getnamespaces(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getnamespaces, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("getnamespaces", 1, 1);
  if (count <= 0) return (self->t_getnamespaces());
  CVarRef arg0(a0);
  return (self->t_getnamespaces(arg0));
}
Variant c_SimpleXMLElement::ifa___unset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___unset, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__unset", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___unset(arg0));
}
Variant c_SimpleXMLElement::ifa_asxml(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_asxml, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("asxml", 1, 1);
  if (count <= 0) return (self->t_asxml());
  CVarRef arg0(a0);
  return (self->t_asxml(arg0));
}
Variant c_SimpleXMLElement::ifa_getdocnamespaces(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getdocnamespaces, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("getdocnamespaces", 1, 1);
  if (count <= 0) return (self->t_getdocnamespaces());
  CVarRef arg0(a0);
  return (self->t_getdocnamespaces(arg0));
}
Variant c_SimpleXMLElement::ifa_offsetunset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_offsetunset, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("offsetunset", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_offsetunset(arg0), null);
}
Variant c_SimpleXMLElement::ifa___get(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___get, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___get(arg0));
}
Variant c_SimpleXMLElement::ifa_children(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_children, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("children", 2, 1);
  if (count <= 0) return (self->t_children());
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_children(arg0));
  CVarRef arg1(a1);
  return (self->t_children(arg0, arg1));
}
Variant c_SimpleXMLElement::ifa_addchild(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_addchild, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("addchild", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_addchild(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_addchild(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_addchild(arg0, arg1, arg2));
}
Variant c_SimpleXMLElement::ifa___isset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___isset, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___isset(arg0));
}
Variant c_SimpleXMLElement::ifa_getname(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getname, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getname", 0, 1);
  return (self->t_getname());
}
Variant c_SimpleXMLElement::ifa_attributes(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_attributes, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("attributes", 2, 1);
  if (count <= 0) return (self->t_attributes());
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_attributes(arg0));
  CVarRef arg1(a1);
  return (self->t_attributes(arg0, arg1));
}
Variant c_SimpleXMLElement::ifa_offsetset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_offsetset, coo_SimpleXMLElement);
  }
  c_SimpleXMLElement *self ATTRIBUTE_UNUSED (static_cast<c_SimpleXMLElement*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("offsetset", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_offsetset(arg0, arg1), null);
}
const MethodCallInfoTable c_SimpleXMLElement::s_call_info_table[] = {
  { 0x3E6BCFB9742FC700LL, 1, 12, "offsetExists", &c_SimpleXMLElement::ci_offsetexists },
  { 0x570B2E1232A12503LL, 1, 11, "getIterator", &c_SimpleXMLElement::ci_getiterator },
  { 0x26B6E00C74FA338FLL, 1, 5, "__get", &c_SimpleXMLElement::ci___get },
  { 0x5CEFA5A265104D10LL, 1, 5, "count", &c_SimpleXMLElement::ci_count },
  { 0x642C2D2994B34A13LL, 1, 10, "__toString", &c_SimpleXMLElement::ci___tostring },
  { 0x2DDE12A9866FC794LL, 1, 8, "addChild", &c_SimpleXMLElement::ci_addchild },
  { 0x52F3DAD783340395LL, 1, 5, "__set", &c_SimpleXMLElement::ci___set },
  { 0x52F7AA6C19BEEAD6LL, 1, 12, "addAttribute", &c_SimpleXMLElement::ci_addattribute },
  { 0x61D11ECEF4404498LL, 1, 9, "offsetGet", &c_SimpleXMLElement::ci_offsetget },
  { 0x0817454F196A9A1BLL, 1, 5, "xpath", &c_SimpleXMLElement::ci_xpath },
  { 0x04FB7028C9A2079BLL, 0, 7, "__unset", &c_SimpleXMLElement::ci___unset },
  { 0x4B65E1A09A33F21DLL, 1, 10, "attributes", &c_SimpleXMLElement::ci_attributes },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_SimpleXMLElement::ci___construct },
  { 0x23F51CDECC198965LL, 1, 7, "getName", &c_SimpleXMLElement::ci_getname },
  { 0x6D9D75B7E3B40FA6LL, 1, 13, "getNamespaces", &c_SimpleXMLElement::ci_getnamespaces },
  { 0x5C09D9345FD864A6LL, 0, 5, "asXML", &c_SimpleXMLElement::ci_asxml },
  { 0x2B299E949E2E82ADLL, 1, 8, "children", &c_SimpleXMLElement::ci_children },
  { 0x4FE08FDDAE2178EELL, 1, 7, "__isset", &c_SimpleXMLElement::ci___isset },
  { 0x0D08AA5F0B2F34F1LL, 1, 16, "getDocNamespaces", &c_SimpleXMLElement::ci_getdocnamespaces },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_SimpleXMLElement::ci___destruct },
  { 0x0957F693A48AF738LL, 1, 9, "offsetSet", &c_SimpleXMLElement::ci_offsetset },
  { 0x08329980E6369ABALL, 1, 11, "offsetUnset", &c_SimpleXMLElement::ci_offsetunset },
  { 0x3FE8F6937854F83DLL, 1, 22, "registerXPathNamespace", &c_SimpleXMLElement::ci_registerxpathnamespace },
  { 0, 1, 0, 0 }
};
const int c_SimpleXMLElement::s_call_info_index[] = {
  63,
  0,-1,-1,1,-1,-1,-1,-1,
  -1,-1,-1,-1,-1,-1,-1,2,
  3,-1,-1,4,5,6,7,-1,
  8,-1,-1,9,-1,11,-1,12,
  -1,-1,-1,-1,-1,13,14,-1,
  -1,-1,-1,-1,-1,16,17,-1,
  -1,18,-1,19,-1,-1,-1,-1,
  20,-1,21,-1,-1,22,-1,-1,

};
c_SimpleXMLElement *c_SimpleXMLElement::create(String a0, int64 a1, bool a2, String a3, bool a4) {
  CountableHelper h(this);
  init();
  t___construct(a0, a1, a2, a3, a4);
  return this;
}
void c_SimpleXMLElement::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 5)) throw_wrong_arguments("__construct", count, 1, 5, 2);
  do {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) {
      (t___construct(arg0));
      break;
    }
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) {
      (t___construct(arg0, arg1));
      break;
    }
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) {
      (t___construct(arg0, arg1, arg2));
      break;
    }
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) {
      (t___construct(arg0, arg1, arg2, arg3));
      break;
    }
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    (t___construct(arg0, arg1, arg2, arg3, arg4));
  } while (false);
}
void c_SimpleXMLElement::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_SimpleXMLElement::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_SimpleXMLElement = {
  c_SimpleXMLElement::os_getInit,
  c_SimpleXMLElement::os_get,
  c_SimpleXMLElement::os_lval,
  c_SimpleXMLElement::os_invoke,
  c_SimpleXMLElement::os_constant,
  (ObjectData*(*)(ObjectData*))coo_SimpleXMLElement,
  c_SimpleXMLElement::s_call_info_table,c_SimpleXMLElement::s_call_info_index,
  "SimpleXMLElement",
  0
};
ObjectData *coo_Memcache() {
  return NEWOBJ(c_Memcache)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_Memcache
Variant c_Memcache::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_Memcache
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_Memcache
Variant c_Memcache::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_Memcache
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_Memcache
Variant &c_Memcache::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_Memcache
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_Memcache
Variant * c_Memcache::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_Memcache
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_Memcache
Variant * c_Memcache::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_Memcache
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_Memcache
Variant * c_Memcache::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_Memcache
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_Memcache
Variant c_Memcache::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_Memcache
IMPLEMENT_CLASS(Memcache)
ObjectData *c_Memcache::cloneImpl() {
  ObjectData *obj = coo_Memcache();
  c_Memcache::cloneSet(obj);
  return obj;
}
void c_Memcache::cloneSet(ObjectData *cl) {
  c_Memcache *clone = static_cast<c_Memcache*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_Memcache::ci_addserver((void*)&c_Memcache::i_addserver, (void*)&c_Memcache::ifa_addserver, 9, 4, 0x0000000000000000LL);
CallInfo c_Memcache::ci_set((void*)&c_Memcache::i_set, (void*)&c_Memcache::ifa_set, 4, 4, 0x0000000000000000LL);
CallInfo c_Memcache::ci_setserverparams((void*)&c_Memcache::i_setserverparams, (void*)&c_Memcache::ifa_setserverparams, 6, 4, 0x0000000000000000LL);
CallInfo c_Memcache::ci___destruct((void*)&c_Memcache::i___destruct, (void*)&c_Memcache::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_Memcache::ci___construct((void*)&c_Memcache::i___construct, (void*)&c_Memcache::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_Memcache::ci_increment((void*)&c_Memcache::i_increment, (void*)&c_Memcache::ifa_increment, 2, 4, 0x0000000000000000LL);
CallInfo c_Memcache::ci_decrement((void*)&c_Memcache::i_decrement, (void*)&c_Memcache::ifa_decrement, 2, 4, 0x0000000000000000LL);
CallInfo c_Memcache::ci_getstats((void*)&c_Memcache::i_getstats, (void*)&c_Memcache::ifa_getstats, 3, 4, 0x0000000000000000LL);
CallInfo c_Memcache::ci_getserverstatus((void*)&c_Memcache::i_getserverstatus, (void*)&c_Memcache::ifa_getserverstatus, 2, 4, 0x0000000000000000LL);
CallInfo c_Memcache::ci_close((void*)&c_Memcache::i_close, (void*)&c_Memcache::ifa_close, 0, 4, 0x0000000000000000LL);
CallInfo c_Memcache::ci_setoptimeout((void*)&c_Memcache::i_setoptimeout, (void*)&c_Memcache::ifa_setoptimeout, 1, 4, 0x0000000000000000LL);
CallInfo c_Memcache::ci_setcompressthreshold((void*)&c_Memcache::i_setcompressthreshold, (void*)&c_Memcache::ifa_setcompressthreshold, 2, 4, 0x0000000000000000LL);
CallInfo c_Memcache::ci_get((void*)&c_Memcache::i_get, (void*)&c_Memcache::ifa_get, 2, 4, 0x0000000000000002LL);
CallInfo c_Memcache::ci_add((void*)&c_Memcache::i_add, (void*)&c_Memcache::ifa_add, 4, 4, 0x0000000000000000LL);
CallInfo c_Memcache::ci_pconnect((void*)&c_Memcache::i_pconnect, (void*)&c_Memcache::ifa_pconnect, 4, 4, 0x0000000000000000LL);
CallInfo c_Memcache::ci_getversion((void*)&c_Memcache::i_getversion, (void*)&c_Memcache::ifa_getversion, 0, 4, 0x0000000000000000LL);
CallInfo c_Memcache::ci_delete((void*)&c_Memcache::i_delete, (void*)&c_Memcache::ifa_delete, 2, 4, 0x0000000000000000LL);
CallInfo c_Memcache::ci_connect((void*)&c_Memcache::i_connect, (void*)&c_Memcache::ifa_connect, 4, 4, 0x0000000000000000LL);
CallInfo c_Memcache::ci_flush((void*)&c_Memcache::i_flush, (void*)&c_Memcache::ifa_flush, 1, 4, 0x0000000000000000LL);
CallInfo c_Memcache::ci_replace((void*)&c_Memcache::i_replace, (void*)&c_Memcache::ifa_replace, 4, 4, 0x0000000000000000LL);
CallInfo c_Memcache::ci_getextendedstats((void*)&c_Memcache::i_getextendedstats, (void*)&c_Memcache::ifa_getextendedstats, 3, 4, 0x0000000000000000LL);
Variant c_Memcache::i_addserver(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_addserver, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 9)) return throw_wrong_arguments("addserver", count, 1, 9, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_addserver(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_addserver(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_addserver(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (self->t_addserver(arg0, arg1, arg2, arg3));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 5) return (self->t_addserver(arg0, arg1, arg2, arg3, arg4));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 6) return (self->t_addserver(arg0, arg1, arg2, arg3, arg4, arg5));
    CVarRef arg6((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 7) return (self->t_addserver(arg0, arg1, arg2, arg3, arg4, arg5, arg6));
    CVarRef arg7((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 8) return (self->t_addserver(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7));
    CVarRef arg8((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_addserver(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8));
  }
}
Variant c_Memcache::i_set(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_set, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("set", count, 2, 4, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_set(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_set(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_set(arg0, arg1, arg2, arg3));
  }
}
Variant c_Memcache::i_setserverparams(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setserverparams, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 6)) return throw_wrong_arguments("setserverparams", count, 1, 6, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_setserverparams(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_setserverparams(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_setserverparams(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (self->t_setserverparams(arg0, arg1, arg2, arg3));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 5) return (self->t_setserverparams(arg0, arg1, arg2, arg3, arg4));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_setserverparams(arg0, arg1, arg2, arg3, arg4, arg5));
  }
}
Variant c_Memcache::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_Memcache::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_Memcache::i_increment(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_increment, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("increment", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_increment(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_increment(arg0, arg1));
  }
}
Variant c_Memcache::i_decrement(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_decrement, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("decrement", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_decrement(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_decrement(arg0, arg1));
  }
}
Variant c_Memcache::i_getstats(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getstats, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("getstats", 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_getstats());
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_getstats(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_getstats(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_getstats(arg0, arg1, arg2));
  }
}
Variant c_Memcache::i_getserverstatus(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getserverstatus, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("getserverstatus", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_getserverstatus(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_getserverstatus(arg0, arg1));
  }
}
Variant c_Memcache::i_close(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_close, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("close", 0, 1);
  return (self->t_close());
}
Variant c_Memcache::i_setoptimeout(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setoptimeout, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setoptimeout", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_setoptimeout(arg0));
  }
}
Variant c_Memcache::i_setcompressthreshold(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setcompressthreshold, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("setcompressthreshold", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_setcompressthreshold(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_setcompressthreshold(arg0, arg1));
  }
}
Variant c_Memcache::i_get(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_get, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("get", count, 1, 2, 1);
  const_cast<Array&>(params).escalate(true);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_get(arg0));
    VRefParam arg1(vref(ad->getValueRef(pos = ad->iter_advance(pos))));
    return (self->t_get(arg0, arg1));
  }
}
Variant c_Memcache::i_add(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_add, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("add", count, 2, 4, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_add(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_add(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_add(arg0, arg1, arg2, arg3));
  }
}
Variant c_Memcache::i_pconnect(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_pconnect, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("pconnect", count, 1, 4, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_pconnect(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_pconnect(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_pconnect(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_pconnect(arg0, arg1, arg2, arg3));
  }
}
Variant c_Memcache::i_getversion(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getversion, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getversion", 0, 1);
  return (self->t_getversion());
}
Variant c_Memcache::i_delete(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_delete, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("delete", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_delete(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_delete(arg0, arg1));
  }
}
Variant c_Memcache::i_connect(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_connect, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("connect", count, 1, 4, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_connect(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_connect(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_connect(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_connect(arg0, arg1, arg2, arg3));
  }
}
Variant c_Memcache::i_flush(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_flush, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("flush", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_flush());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_flush(arg0));
  }
}
Variant c_Memcache::i_replace(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_replace, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("replace", count, 2, 4, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_replace(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_replace(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_replace(arg0, arg1, arg2, arg3));
  }
}
Variant c_Memcache::i_getextendedstats(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getextendedstats, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("getextendedstats", 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_getextendedstats());
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_getextendedstats(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_getextendedstats(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_getextendedstats(arg0, arg1, arg2));
  }
}
Variant c_Memcache::ifa_addserver(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_addserver, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  if (UNLIKELY(count < 1)) return throw_wrong_arguments("addserver", count, 1, 9, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_addserver(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_addserver(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_addserver(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (self->t_addserver(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (self->t_addserver(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (self->t_addserver(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant c_Memcache::ifa_set(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_set, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("set", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_set(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_set(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (self->t_set(arg0, arg1, arg2, arg3));
}
Variant c_Memcache::ifa_setserverparams(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setserverparams, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  if (UNLIKELY(count < 1)) return throw_wrong_arguments("setserverparams", count, 1, 6, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_setserverparams(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_setserverparams(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_setserverparams(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (self->t_setserverparams(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (self->t_setserverparams(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (self->t_setserverparams(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant c_Memcache::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_Memcache::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_Memcache::ifa_increment(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_increment, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("increment", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_increment(arg0));
  CVarRef arg1(a1);
  return (self->t_increment(arg0, arg1));
}
Variant c_Memcache::ifa_decrement(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_decrement, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("decrement", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_decrement(arg0));
  CVarRef arg1(a1);
  return (self->t_decrement(arg0, arg1));
}
Variant c_Memcache::ifa_getstats(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getstats, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("getstats", 3, 1);
  if (count <= 0) return (self->t_getstats());
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_getstats(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_getstats(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_getstats(arg0, arg1, arg2));
}
Variant c_Memcache::ifa_getserverstatus(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getserverstatus, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("getserverstatus", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_getserverstatus(arg0));
  CVarRef arg1(a1);
  return (self->t_getserverstatus(arg0, arg1));
}
Variant c_Memcache::ifa_close(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_close, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("close", 0, 1);
  return (self->t_close());
}
Variant c_Memcache::ifa_setoptimeout(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setoptimeout, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setoptimeout", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_setoptimeout(arg0));
}
Variant c_Memcache::ifa_setcompressthreshold(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setcompressthreshold, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("setcompressthreshold", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_setcompressthreshold(arg0));
  CVarRef arg1(a1);
  return (self->t_setcompressthreshold(arg0, arg1));
}
Variant c_Memcache::ifa_get(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_get, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("get", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_get(arg0));
  VRefParam arg1(vref(a1));
  return (self->t_get(arg0, arg1));
}
Variant c_Memcache::ifa_add(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_add, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("add", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_add(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_add(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (self->t_add(arg0, arg1, arg2, arg3));
}
Variant c_Memcache::ifa_pconnect(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_pconnect, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("pconnect", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_pconnect(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_pconnect(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_pconnect(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (self->t_pconnect(arg0, arg1, arg2, arg3));
}
Variant c_Memcache::ifa_getversion(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getversion, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getversion", 0, 1);
  return (self->t_getversion());
}
Variant c_Memcache::ifa_delete(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_delete, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("delete", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_delete(arg0));
  CVarRef arg1(a1);
  return (self->t_delete(arg0, arg1));
}
Variant c_Memcache::ifa_connect(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_connect, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("connect", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_connect(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_connect(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_connect(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (self->t_connect(arg0, arg1, arg2, arg3));
}
Variant c_Memcache::ifa_flush(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_flush, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("flush", 1, 1);
  if (count <= 0) return (self->t_flush());
  CVarRef arg0(a0);
  return (self->t_flush(arg0));
}
Variant c_Memcache::ifa_replace(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_replace, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 4)) return throw_wrong_arguments("replace", count, 2, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_replace(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_replace(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (self->t_replace(arg0, arg1, arg2, arg3));
}
Variant c_Memcache::ifa_getextendedstats(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getextendedstats, coo_Memcache);
  }
  c_Memcache *self ATTRIBUTE_UNUSED (static_cast<c_Memcache*>(mcp.obj));
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("getextendedstats", 3, 1);
  if (count <= 0) return (self->t_getextendedstats());
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_getextendedstats(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_getextendedstats(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_getextendedstats(arg0, arg1, arg2));
}
const MethodCallInfoTable c_Memcache::s_call_info_table[] = {
  { 0x78AE97BFBEBF5341LL, 1, 5, "close", &c_Memcache::ci_close },
  { 0x42FAC655280A6146LL, 1, 7, "replace", &c_Memcache::ci_replace },
  { 0x39099707DF7945C7LL, 1, 9, "increment", &c_Memcache::ci_increment },
  { 0x3BF3710A1661DE0BLL, 1, 12, "setoptimeout", &c_Memcache::ci_setoptimeout },
  { 0x15D34462FC79458BLL, 0, 3, "add", &c_Memcache::ci_add },
  { 0x710DE893BB376C4FLL, 1, 15, "getserverstatus", &c_Memcache::ci_getserverstatus },
  { 0x030429D528A8EA92LL, 1, 20, "setcompressthreshold", &c_Memcache::ci_setcompressthreshold },
  { 0x1C660E5BFA6F55D3LL, 1, 6, "delete", &c_Memcache::ci_delete },
  { 0x7521E8833BE3D316LL, 1, 10, "getversion", &c_Memcache::ci_getversion },
  { 0x1CCDC4317CE59BD9LL, 1, 8, "getstats", &c_Memcache::ci_getstats },
  { 0x2A733FC12BA4C1DALL, 1, 9, "decrement", &c_Memcache::ci_decrement },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_Memcache::ci___construct },
  { 0x399A6427C2185621LL, 1, 3, "set", &c_Memcache::ci_set },
  { 0x4770E54B86BF7765LL, 1, 16, "getextendedstats", &c_Memcache::ci_getextendedstats },
  { 0x56CD24186237AAE6LL, 1, 9, "addserver", &c_Memcache::ci_addserver },
  { 0x25DCCC35D69AD828LL, 1, 3, "get", &c_Memcache::ci_get },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_Memcache::ci___destruct },
  { 0x742B441E13CD7279LL, 1, 8, "pconnect", &c_Memcache::ci_pconnect },
  { 0x6A3D9F8EDB005E7ALL, 1, 5, "flush", &c_Memcache::ci_flush },
  { 0x1780351E8EFF92BDLL, 1, 15, "setserverparams", &c_Memcache::ci_setserverparams },
  { 0x7032C660AD16D7FELL, 1, 7, "connect", &c_Memcache::ci_connect },
  { 0, 1, 0, 0 }
};
const int c_Memcache::s_call_info_index[] = {
  63,
  -1,0,-1,-1,-1,-1,1,2,
  -1,-1,-1,3,-1,-1,-1,5,
  -1,-1,6,7,-1,-1,8,-1,
  -1,9,10,-1,-1,-1,-1,11,
  -1,12,-1,-1,-1,13,14,-1,
  15,-1,-1,-1,-1,-1,-1,-1,
  -1,-1,-1,16,-1,-1,-1,-1,
  -1,17,18,-1,-1,19,20,-1,

};
c_Memcache *c_Memcache::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_Memcache::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_Memcache::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_Memcache::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_Memcache = {
  c_Memcache::os_getInit,
  c_Memcache::os_get,
  c_Memcache::os_lval,
  c_Memcache::os_invoke,
  c_Memcache::os_constant,
  (ObjectData*(*)(ObjectData*))coo_Memcache,
  c_Memcache::s_call_info_table,c_Memcache::s_call_info_index,
  "Memcache",
  0
};
ObjectData *coo_DOMProcessingInstruction() {
  return NEWOBJ(c_DOMProcessingInstruction)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMProcessingInstruction
Variant c_DOMProcessingInstruction::os_getInit(CStrRef s) {
  return c_DOMNode::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMProcessingInstruction
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMProcessingInstruction
Variant c_DOMProcessingInstruction::os_get(CStrRef s) {
  return c_DOMNode::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMProcessingInstruction
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMProcessingInstruction
Variant &c_DOMProcessingInstruction::os_lval(CStrRef s) {
  return c_DOMNode::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMProcessingInstruction
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DOMProcessingInstruction
Variant * c_DOMProcessingInstruction::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DOMProcessingInstruction
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMProcessingInstruction
Variant * c_DOMProcessingInstruction::o_realPropPublic(CStrRef s, int flags) const {
  return c_DOMNode::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMProcessingInstruction
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMProcessingInstruction
Variant * c_DOMProcessingInstruction::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMProcessingInstruction
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMProcessingInstruction
Variant c_DOMProcessingInstruction::os_constant(const char *s) {
  return c_DOMNode::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMProcessingInstruction
IMPLEMENT_CLASS(DOMProcessingInstruction)
ObjectData *c_DOMProcessingInstruction::cloneImpl() {
  ObjectData *obj = coo_DOMProcessingInstruction();
  c_DOMProcessingInstruction::cloneSet(obj);
  return obj;
}
void c_DOMProcessingInstruction::cloneSet(ObjectData *cl) {
  c_DOMProcessingInstruction *clone = static_cast<c_DOMProcessingInstruction*>(cl);
  c_DOMNode::cloneSet(clone);
}
CallInfo c_DOMProcessingInstruction::ci___destruct((void*)&c_DOMProcessingInstruction::i___destruct, (void*)&c_DOMProcessingInstruction::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMProcessingInstruction::ci___set((void*)&c_DOMProcessingInstruction::i___set, (void*)&c_DOMProcessingInstruction::ifa___set, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMProcessingInstruction::ci___construct((void*)&c_DOMProcessingInstruction::i___construct, (void*)&c_DOMProcessingInstruction::ifa___construct, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMProcessingInstruction::ci___get((void*)&c_DOMProcessingInstruction::i___get, (void*)&c_DOMProcessingInstruction::ifa___get, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMProcessingInstruction::ci___isset((void*)&c_DOMProcessingInstruction::i___isset, (void*)&c_DOMProcessingInstruction::ifa___isset, 1, 4, 0x0000000000000000LL);
Variant c_DOMProcessingInstruction::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_DOMProcessingInstruction);
  }
  c_DOMProcessingInstruction *self ATTRIBUTE_UNUSED (static_cast<c_DOMProcessingInstruction*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMProcessingInstruction::i___set(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___set, coo_DOMProcessingInstruction);
  }
  c_DOMProcessingInstruction *self ATTRIBUTE_UNUSED (static_cast<c_DOMProcessingInstruction*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___set(arg0, arg1));
  }
}
Variant c_DOMProcessingInstruction::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_DOMProcessingInstruction);
  }
  c_DOMProcessingInstruction *self ATTRIBUTE_UNUSED (static_cast<c_DOMProcessingInstruction*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("__construct", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t___construct(arg0), null);
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___construct(arg0, arg1), null);
  }
}
Variant c_DOMProcessingInstruction::i___get(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___get, coo_DOMProcessingInstruction);
  }
  c_DOMProcessingInstruction *self ATTRIBUTE_UNUSED (static_cast<c_DOMProcessingInstruction*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___get(arg0));
  }
}
Variant c_DOMProcessingInstruction::i___isset(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___isset, coo_DOMProcessingInstruction);
  }
  c_DOMProcessingInstruction *self ATTRIBUTE_UNUSED (static_cast<c_DOMProcessingInstruction*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___isset(arg0));
  }
}
Variant c_DOMProcessingInstruction::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_DOMProcessingInstruction);
  }
  c_DOMProcessingInstruction *self ATTRIBUTE_UNUSED (static_cast<c_DOMProcessingInstruction*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMProcessingInstruction::ifa___set(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___set, coo_DOMProcessingInstruction);
  }
  c_DOMProcessingInstruction *self ATTRIBUTE_UNUSED (static_cast<c_DOMProcessingInstruction*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t___set(arg0, arg1));
}
Variant c_DOMProcessingInstruction::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_DOMProcessingInstruction);
  }
  c_DOMProcessingInstruction *self ATTRIBUTE_UNUSED (static_cast<c_DOMProcessingInstruction*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("__construct", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t___construct(arg0), null);
  CVarRef arg1(a1);
  return (self->t___construct(arg0, arg1), null);
}
Variant c_DOMProcessingInstruction::ifa___get(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___get, coo_DOMProcessingInstruction);
  }
  c_DOMProcessingInstruction *self ATTRIBUTE_UNUSED (static_cast<c_DOMProcessingInstruction*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___get(arg0));
}
Variant c_DOMProcessingInstruction::ifa___isset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___isset, coo_DOMProcessingInstruction);
  }
  c_DOMProcessingInstruction *self ATTRIBUTE_UNUSED (static_cast<c_DOMProcessingInstruction*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___isset(arg0));
}
const MethodCallInfoTable c_DOMProcessingInstruction::s_call_info_table[] = {
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_DOMProcessingInstruction::ci___destruct },
  { 0x52F3DAD783340395LL, 1, 5, "__set", &c_DOMProcessingInstruction::ci___set },
  { 0x4FE08FDDAE2178EELL, 1, 7, "__isset", &c_DOMProcessingInstruction::ci___isset },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_DOMProcessingInstruction::ci___construct },
  { 0x26B6E00C74FA338FLL, 0, 5, "__get", &c_DOMProcessingInstruction::ci___get },
  { 0, 1, 0, 0 }
};
const int c_DOMProcessingInstruction::s_call_info_index[] = {
  15,
  -1,-1,-1,0,-1,1,-1,-1,
  -1,-1,-1,-1,-1,-1,2,3,

};
c_DOMProcessingInstruction *c_DOMProcessingInstruction::create(String a0, String a1) {
  CountableHelper h(this);
  init();
  t___construct(a0, a1);
  return this;
}
void c_DOMProcessingInstruction::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) throw_wrong_arguments("__construct", count, 1, 2, 2);
  do {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) {
      (t___construct(arg0));
      break;
    }
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    (t___construct(arg0, arg1));
  } while (false);
}
void c_DOMProcessingInstruction::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DOMProcessingInstruction::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_DOMProcessingInstruction = {
  c_DOMProcessingInstruction::os_getInit,
  c_DOMProcessingInstruction::os_get,
  c_DOMProcessingInstruction::os_lval,
  c_DOMProcessingInstruction::os_invoke,
  c_DOMProcessingInstruction::os_constant,
  (ObjectData*(*)(ObjectData*))coo_DOMProcessingInstruction,
  c_DOMProcessingInstruction::s_call_info_table,c_DOMProcessingInstruction::s_call_info_index,
  "DOMProcessingInstruction",
  &cw_DOMNode
};
ObjectData *coo_EncodingMatch() {
  return NEWOBJ(c_EncodingMatch)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_EncodingMatch
Variant c_EncodingMatch::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_EncodingMatch
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_EncodingMatch
Variant c_EncodingMatch::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_EncodingMatch
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_EncodingMatch
Variant &c_EncodingMatch::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_EncodingMatch
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_EncodingMatch
Variant * c_EncodingMatch::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_EncodingMatch
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_EncodingMatch
Variant * c_EncodingMatch::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_EncodingMatch
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_EncodingMatch
Variant * c_EncodingMatch::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_EncodingMatch
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_EncodingMatch
Variant c_EncodingMatch::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_EncodingMatch
IMPLEMENT_CLASS(EncodingMatch)
ObjectData *c_EncodingMatch::cloneImpl() {
  ObjectData *obj = coo_EncodingMatch();
  c_EncodingMatch::cloneSet(obj);
  return obj;
}
void c_EncodingMatch::cloneSet(ObjectData *cl) {
  c_EncodingMatch *clone = static_cast<c_EncodingMatch*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_EncodingMatch::ci___destruct((void*)&c_EncodingMatch::i___destruct, (void*)&c_EncodingMatch::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_EncodingMatch::ci___construct((void*)&c_EncodingMatch::i___construct, (void*)&c_EncodingMatch::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_EncodingMatch::ci_getutf8((void*)&c_EncodingMatch::i_getutf8, (void*)&c_EncodingMatch::ifa_getutf8, 0, 4, 0x0000000000000000LL);
CallInfo c_EncodingMatch::ci_getencoding((void*)&c_EncodingMatch::i_getencoding, (void*)&c_EncodingMatch::ifa_getencoding, 0, 4, 0x0000000000000000LL);
CallInfo c_EncodingMatch::ci_getconfidence((void*)&c_EncodingMatch::i_getconfidence, (void*)&c_EncodingMatch::ifa_getconfidence, 0, 4, 0x0000000000000000LL);
CallInfo c_EncodingMatch::ci_getlanguage((void*)&c_EncodingMatch::i_getlanguage, (void*)&c_EncodingMatch::ifa_getlanguage, 0, 4, 0x0000000000000000LL);
CallInfo c_EncodingMatch::ci_isvalid((void*)&c_EncodingMatch::i_isvalid, (void*)&c_EncodingMatch::ifa_isvalid, 0, 4, 0x0000000000000000LL);
Variant c_EncodingMatch::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_EncodingMatch);
  }
  c_EncodingMatch *self ATTRIBUTE_UNUSED (static_cast<c_EncodingMatch*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_EncodingMatch::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_EncodingMatch);
  }
  c_EncodingMatch *self ATTRIBUTE_UNUSED (static_cast<c_EncodingMatch*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_EncodingMatch::i_getutf8(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getutf8, coo_EncodingMatch);
  }
  c_EncodingMatch *self ATTRIBUTE_UNUSED (static_cast<c_EncodingMatch*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getutf8", 0, 1);
  return (self->t_getutf8());
}
Variant c_EncodingMatch::i_getencoding(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getencoding, coo_EncodingMatch);
  }
  c_EncodingMatch *self ATTRIBUTE_UNUSED (static_cast<c_EncodingMatch*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getencoding", 0, 1);
  return (self->t_getencoding());
}
Variant c_EncodingMatch::i_getconfidence(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getconfidence, coo_EncodingMatch);
  }
  c_EncodingMatch *self ATTRIBUTE_UNUSED (static_cast<c_EncodingMatch*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getconfidence", 0, 1);
  return (self->t_getconfidence());
}
Variant c_EncodingMatch::i_getlanguage(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getlanguage, coo_EncodingMatch);
  }
  c_EncodingMatch *self ATTRIBUTE_UNUSED (static_cast<c_EncodingMatch*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getlanguage", 0, 1);
  return (self->t_getlanguage());
}
Variant c_EncodingMatch::i_isvalid(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_isvalid, coo_EncodingMatch);
  }
  c_EncodingMatch *self ATTRIBUTE_UNUSED (static_cast<c_EncodingMatch*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("isvalid", 0, 1);
  return (self->t_isvalid());
}
Variant c_EncodingMatch::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_EncodingMatch);
  }
  c_EncodingMatch *self ATTRIBUTE_UNUSED (static_cast<c_EncodingMatch*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_EncodingMatch::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_EncodingMatch);
  }
  c_EncodingMatch *self ATTRIBUTE_UNUSED (static_cast<c_EncodingMatch*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_EncodingMatch::ifa_getutf8(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getutf8, coo_EncodingMatch);
  }
  c_EncodingMatch *self ATTRIBUTE_UNUSED (static_cast<c_EncodingMatch*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getutf8", 0, 1);
  return (self->t_getutf8());
}
Variant c_EncodingMatch::ifa_getencoding(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getencoding, coo_EncodingMatch);
  }
  c_EncodingMatch *self ATTRIBUTE_UNUSED (static_cast<c_EncodingMatch*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getencoding", 0, 1);
  return (self->t_getencoding());
}
Variant c_EncodingMatch::ifa_getconfidence(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getconfidence, coo_EncodingMatch);
  }
  c_EncodingMatch *self ATTRIBUTE_UNUSED (static_cast<c_EncodingMatch*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getconfidence", 0, 1);
  return (self->t_getconfidence());
}
Variant c_EncodingMatch::ifa_getlanguage(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getlanguage, coo_EncodingMatch);
  }
  c_EncodingMatch *self ATTRIBUTE_UNUSED (static_cast<c_EncodingMatch*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getlanguage", 0, 1);
  return (self->t_getlanguage());
}
Variant c_EncodingMatch::ifa_isvalid(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isvalid, coo_EncodingMatch);
  }
  c_EncodingMatch *self ATTRIBUTE_UNUSED (static_cast<c_EncodingMatch*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("isvalid", 0, 1);
  return (self->t_isvalid());
}
const MethodCallInfoTable c_EncodingMatch::s_call_info_table[] = {
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_EncodingMatch::ci___destruct },
  { 0x7F7D4D67CD474FB7LL, 1, 11, "getEncoding", &c_EncodingMatch::ci_getencoding },
  { 0x71E1A6F1ACA9872BLL, 1, 7, "isValid", &c_EncodingMatch::ci_isvalid },
  { 0x7232FD32D5596ADCLL, 1, 7, "getUTF8", &c_EncodingMatch::ci_getutf8 },
  { 0x67478E8B880ED08CLL, 0, 13, "getConfidence", &c_EncodingMatch::ci_getconfidence },
  { 0x6A3A456D8D4A914CLL, 0, 11, "getLanguage", &c_EncodingMatch::ci_getlanguage },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_EncodingMatch::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_EncodingMatch::s_call_info_index[] = {
  15,
  -1,-1,-1,0,-1,-1,-1,1,
  -1,-1,-1,2,3,-1,-1,6,

};
c_EncodingMatch *c_EncodingMatch::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_EncodingMatch::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_EncodingMatch::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_EncodingMatch::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_EncodingMatch = {
  c_EncodingMatch::os_getInit,
  c_EncodingMatch::os_get,
  c_EncodingMatch::os_lval,
  c_EncodingMatch::os_invoke,
  c_EncodingMatch::os_constant,
  (ObjectData*(*)(ObjectData*))coo_EncodingMatch,
  c_EncodingMatch::s_call_info_table,c_EncodingMatch::s_call_info_index,
  "EncodingMatch",
  0
};
ObjectData *coo_PDOStatement() {
  return NEWOBJ(c_PDOStatement)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_PDOStatement
Variant c_PDOStatement::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_PDOStatement
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_PDOStatement
Variant c_PDOStatement::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_PDOStatement
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_PDOStatement
Variant &c_PDOStatement::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_PDOStatement
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PDOStatement
Variant * c_PDOStatement::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PDOStatement
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_PDOStatement
Variant * c_PDOStatement::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_PDOStatement
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_PDOStatement
Variant * c_PDOStatement::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_PDOStatement
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_PDOStatement
Variant c_PDOStatement::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_PDOStatement
IMPLEMENT_CLASS(PDOStatement)
ObjectData *c_PDOStatement::cloneImpl() {
  ObjectData *obj = coo_PDOStatement();
  c_PDOStatement::cloneSet(obj);
  return obj;
}
void c_PDOStatement::cloneSet(ObjectData *cl) {
  c_PDOStatement *clone = static_cast<c_PDOStatement*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_PDOStatement::ci_next((void*)&c_PDOStatement::i_next, (void*)&c_PDOStatement::ifa_next, 0, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci_errorcode((void*)&c_PDOStatement::i_errorcode, (void*)&c_PDOStatement::ifa_errorcode, 0, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci_getattribute((void*)&c_PDOStatement::i_getattribute, (void*)&c_PDOStatement::ifa_getattribute, 1, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci_fetchcolumn((void*)&c_PDOStatement::i_fetchcolumn, (void*)&c_PDOStatement::ifa_fetchcolumn, 1, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci_key((void*)&c_PDOStatement::i_key, (void*)&c_PDOStatement::ifa_key, 0, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci_getcolumnmeta((void*)&c_PDOStatement::i_getcolumnmeta, (void*)&c_PDOStatement::ifa_getcolumnmeta, 1, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci_valid((void*)&c_PDOStatement::i_valid, (void*)&c_PDOStatement::ifa_valid, 0, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci_nextrowset((void*)&c_PDOStatement::i_nextrowset, (void*)&c_PDOStatement::ifa_nextrowset, 0, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci___destruct((void*)&c_PDOStatement::i___destruct, (void*)&c_PDOStatement::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci___wakeup((void*)&c_PDOStatement::i___wakeup, (void*)&c_PDOStatement::ifa___wakeup, 0, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci___construct((void*)&c_PDOStatement::i___construct, (void*)&c_PDOStatement::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci_bindcolumn((void*)&c_PDOStatement::i_bindcolumn, (void*)&c_PDOStatement::ifa_bindcolumn, 5, 4, 0x0000000000000002LL);
CallInfo c_PDOStatement::ci_setfetchmode((void*)&c_PDOStatement::i_setfetchmode, (void*)&c_PDOStatement::ifa_setfetchmode, 1, 5, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci_columncount((void*)&c_PDOStatement::i_columncount, (void*)&c_PDOStatement::ifa_columncount, 0, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci_bindparam((void*)&c_PDOStatement::i_bindparam, (void*)&c_PDOStatement::ifa_bindparam, 5, 4, 0x0000000000000002LL);
CallInfo c_PDOStatement::ci_closecursor((void*)&c_PDOStatement::i_closecursor, (void*)&c_PDOStatement::ifa_closecursor, 0, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci_setattribute((void*)&c_PDOStatement::i_setattribute, (void*)&c_PDOStatement::ifa_setattribute, 2, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci_rowcount((void*)&c_PDOStatement::i_rowcount, (void*)&c_PDOStatement::ifa_rowcount, 0, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci_execute((void*)&c_PDOStatement::i_execute, (void*)&c_PDOStatement::ifa_execute, 1, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci_fetchobject((void*)&c_PDOStatement::i_fetchobject, (void*)&c_PDOStatement::ifa_fetchobject, 2, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci_bindvalue((void*)&c_PDOStatement::i_bindvalue, (void*)&c_PDOStatement::ifa_bindvalue, 3, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci_fetchall((void*)&c_PDOStatement::i_fetchall, (void*)&c_PDOStatement::ifa_fetchall, 3, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci_fetch((void*)&c_PDOStatement::i_fetch, (void*)&c_PDOStatement::ifa_fetch, 3, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci_current((void*)&c_PDOStatement::i_current, (void*)&c_PDOStatement::ifa_current, 0, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci_errorinfo((void*)&c_PDOStatement::i_errorinfo, (void*)&c_PDOStatement::ifa_errorinfo, 0, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci___sleep((void*)&c_PDOStatement::i___sleep, (void*)&c_PDOStatement::ifa___sleep, 0, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci_debugdumpparams((void*)&c_PDOStatement::i_debugdumpparams, (void*)&c_PDOStatement::ifa_debugdumpparams, 0, 4, 0x0000000000000000LL);
CallInfo c_PDOStatement::ci_rewind((void*)&c_PDOStatement::i_rewind, (void*)&c_PDOStatement::ifa_rewind, 0, 4, 0x0000000000000000LL);
Variant c_PDOStatement::i_next(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_next, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("next", 0, 1);
  return (self->t_next());
}
Variant c_PDOStatement::i_errorcode(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_errorcode, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("errorcode", 0, 1);
  return (self->t_errorcode());
}
Variant c_PDOStatement::i_getattribute(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getattribute, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getattribute", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getattribute(arg0));
  }
}
Variant c_PDOStatement::i_fetchcolumn(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_fetchcolumn, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("fetchcolumn", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_fetchcolumn());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_fetchcolumn(arg0));
  }
}
Variant c_PDOStatement::i_key(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_key, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("key", 0, 1);
  return (self->t_key());
}
Variant c_PDOStatement::i_getcolumnmeta(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getcolumnmeta, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getcolumnmeta", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getcolumnmeta(arg0));
  }
}
Variant c_PDOStatement::i_valid(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_valid, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("valid", 0, 1);
  return (self->t_valid());
}
Variant c_PDOStatement::i_nextrowset(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_nextrowset, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("nextrowset", 0, 1);
  return (self->t_nextrowset());
}
Variant c_PDOStatement::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_PDOStatement::i___wakeup(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___wakeup, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__wakeup", 0, 1);
  return (self->t___wakeup());
}
Variant c_PDOStatement::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_PDOStatement::i_bindcolumn(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_bindcolumn, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 5)) return throw_wrong_arguments("bindcolumn", count, 2, 5, 1);
  const_cast<Array&>(params).escalate(true);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    VRefParam arg1(vref(ad->getValueRef(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_bindcolumn(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_bindcolumn(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (self->t_bindcolumn(arg0, arg1, arg2, arg3));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_bindcolumn(arg0, arg1, arg2, arg3, arg4));
  }
}
Variant c_PDOStatement::i_setfetchmode(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setfetchmode, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("setfetchmode", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (self->t_setfetchmode(count, arg0, p));
  }
}
Variant c_PDOStatement::i_columncount(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_columncount, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("columncount", 0, 1);
  return (self->t_columncount());
}
Variant c_PDOStatement::i_bindparam(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_bindparam, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 5)) return throw_wrong_arguments("bindparam", count, 2, 5, 1);
  const_cast<Array&>(params).escalate(true);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    VRefParam arg1(vref(ad->getValueRef(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_bindparam(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_bindparam(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (self->t_bindparam(arg0, arg1, arg2, arg3));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_bindparam(arg0, arg1, arg2, arg3, arg4));
  }
}
Variant c_PDOStatement::i_closecursor(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_closecursor, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("closecursor", 0, 1);
  return (self->t_closecursor());
}
Variant c_PDOStatement::i_setattribute(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setattribute, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("setattribute", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_setattribute(arg0, arg1));
  }
}
Variant c_PDOStatement::i_rowcount(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_rowcount, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("rowcount", 0, 1);
  return (self->t_rowcount());
}
Variant c_PDOStatement::i_execute(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_execute, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("execute", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_execute());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_execute(arg0));
  }
}
Variant c_PDOStatement::i_fetchobject(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_fetchobject, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("fetchobject", 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_fetchobject());
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_fetchobject(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_fetchobject(arg0, arg1));
  }
}
Variant c_PDOStatement::i_bindvalue(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_bindvalue, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("bindvalue", count, 2, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_bindvalue(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_bindvalue(arg0, arg1, arg2));
  }
}
Variant c_PDOStatement::i_fetchall(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_fetchall, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("fetchall", 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_fetchall());
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_fetchall(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_fetchall(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_fetchall(arg0, arg1, arg2));
  }
}
Variant c_PDOStatement::i_fetch(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_fetch, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("fetch", 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_fetch());
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_fetch(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_fetch(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_fetch(arg0, arg1, arg2));
  }
}
Variant c_PDOStatement::i_current(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_current, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("current", 0, 1);
  return (self->t_current());
}
Variant c_PDOStatement::i_errorinfo(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_errorinfo, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("errorinfo", 0, 1);
  return (self->t_errorinfo());
}
Variant c_PDOStatement::i___sleep(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___sleep, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__sleep", 0, 1);
  return (self->t___sleep());
}
Variant c_PDOStatement::i_debugdumpparams(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_debugdumpparams, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("debugdumpparams", 0, 1);
  return (self->t_debugdumpparams());
}
Variant c_PDOStatement::i_rewind(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_rewind, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("rewind", 0, 1);
  return (self->t_rewind());
}
Variant c_PDOStatement::ifa_next(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_next, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("next", 0, 1);
  return (self->t_next());
}
Variant c_PDOStatement::ifa_errorcode(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_errorcode, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("errorcode", 0, 1);
  return (self->t_errorcode());
}
Variant c_PDOStatement::ifa_getattribute(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getattribute, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getattribute", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_getattribute(arg0));
}
Variant c_PDOStatement::ifa_fetchcolumn(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_fetchcolumn, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("fetchcolumn", 1, 1);
  if (count <= 0) return (self->t_fetchcolumn());
  CVarRef arg0(a0);
  return (self->t_fetchcolumn(arg0));
}
Variant c_PDOStatement::ifa_key(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_key, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("key", 0, 1);
  return (self->t_key());
}
Variant c_PDOStatement::ifa_getcolumnmeta(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getcolumnmeta, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getcolumnmeta", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_getcolumnmeta(arg0));
}
Variant c_PDOStatement::ifa_valid(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_valid, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("valid", 0, 1);
  return (self->t_valid());
}
Variant c_PDOStatement::ifa_nextrowset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_nextrowset, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("nextrowset", 0, 1);
  return (self->t_nextrowset());
}
Variant c_PDOStatement::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_PDOStatement::ifa___wakeup(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___wakeup, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__wakeup", 0, 1);
  return (self->t___wakeup());
}
Variant c_PDOStatement::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_PDOStatement::ifa_bindcolumn(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_bindcolumn, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 5)) return throw_wrong_arguments("bindcolumn", count, 2, 5, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  if (count <= 2) return (self->t_bindcolumn(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_bindcolumn(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (self->t_bindcolumn(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (self->t_bindcolumn(arg0, arg1, arg2, arg3, arg4));
}
Variant c_PDOStatement::ifa_setfetchmode(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setfetchmode, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count < 1)) return throw_missing_arguments("setfetchmode", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (self->t_setfetchmode(count, arg0, p));
}
Variant c_PDOStatement::ifa_columncount(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_columncount, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("columncount", 0, 1);
  return (self->t_columncount());
}
Variant c_PDOStatement::ifa_bindparam(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_bindparam, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 5)) return throw_wrong_arguments("bindparam", count, 2, 5, 1);
  CVarRef arg0(a0);
  VRefParam arg1(vref(a1));
  if (count <= 2) return (self->t_bindparam(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_bindparam(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (self->t_bindparam(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (self->t_bindparam(arg0, arg1, arg2, arg3, arg4));
}
Variant c_PDOStatement::ifa_closecursor(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_closecursor, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("closecursor", 0, 1);
  return (self->t_closecursor());
}
Variant c_PDOStatement::ifa_setattribute(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setattribute, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("setattribute", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_setattribute(arg0, arg1));
}
Variant c_PDOStatement::ifa_rowcount(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_rowcount, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("rowcount", 0, 1);
  return (self->t_rowcount());
}
Variant c_PDOStatement::ifa_execute(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_execute, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("execute", 1, 1);
  if (count <= 0) return (self->t_execute());
  CVarRef arg0(a0);
  return (self->t_execute(arg0));
}
Variant c_PDOStatement::ifa_fetchobject(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_fetchobject, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("fetchobject", 2, 1);
  if (count <= 0) return (self->t_fetchobject());
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_fetchobject(arg0));
  CVarRef arg1(a1);
  return (self->t_fetchobject(arg0, arg1));
}
Variant c_PDOStatement::ifa_bindvalue(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_bindvalue, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("bindvalue", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_bindvalue(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_bindvalue(arg0, arg1, arg2));
}
Variant c_PDOStatement::ifa_fetchall(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_fetchall, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("fetchall", 3, 1);
  if (count <= 0) return (self->t_fetchall());
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_fetchall(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_fetchall(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_fetchall(arg0, arg1, arg2));
}
Variant c_PDOStatement::ifa_fetch(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_fetch, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("fetch", 3, 1);
  if (count <= 0) return (self->t_fetch());
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_fetch(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_fetch(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_fetch(arg0, arg1, arg2));
}
Variant c_PDOStatement::ifa_current(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_current, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("current", 0, 1);
  return (self->t_current());
}
Variant c_PDOStatement::ifa_errorinfo(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_errorinfo, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("errorinfo", 0, 1);
  return (self->t_errorinfo());
}
Variant c_PDOStatement::ifa___sleep(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___sleep, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__sleep", 0, 1);
  return (self->t___sleep());
}
Variant c_PDOStatement::ifa_debugdumpparams(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_debugdumpparams, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("debugdumpparams", 0, 1);
  return (self->t_debugdumpparams());
}
Variant c_PDOStatement::ifa_rewind(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_rewind, coo_PDOStatement);
  }
  c_PDOStatement *self ATTRIBUTE_UNUSED (static_cast<c_PDOStatement*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("rewind", 0, 1);
  return (self->t_rewind());
}
const MethodCallInfoTable c_PDOStatement::s_call_info_table[] = {
  { 0x5740729B65EB8E41LL, 1, 8, "fetchall", &c_PDOStatement::ci_fetchall },
  { 0x436E6AFC3628E403LL, 1, 9, "bindvalue", &c_PDOStatement::ci_bindvalue },
  { 0x6413CB5154808C44LL, 1, 5, "valid", &c_PDOStatement::ci_valid },
  { 0x75A2E23098C65C05LL, 1, 11, "closecursor", &c_PDOStatement::ci_closecursor },
  { 0x6D0664CC2372F2C7LL, 1, 9, "errorcode", &c_PDOStatement::ci_errorcode },
  { 0x1D5B8B8144F4AB8ALL, 1, 12, "setattribute", &c_PDOStatement::ci_setattribute },
  { 0x187C7F43EB57714ELL, 1, 7, "execute", &c_PDOStatement::ci_execute },
  { 0x32A381ECDC91918FLL, 1, 11, "columncount", &c_PDOStatement::ci_columncount },
  { 0x56EDB60C824E8C51LL, 1, 3, "key", &c_PDOStatement::ci_key },
  { 0x31A8917EC4F2A252LL, 1, 10, "nextrowset", &c_PDOStatement::ci_nextrowset },
  { 0x77B13FCF1BA41696LL, 1, 9, "bindparam", &c_PDOStatement::ci_bindparam },
  { 0x5C38814410C5FFD9LL, 1, 11, "fetchcolumn", &c_PDOStatement::ci_fetchcolumn },
  { 0x0D43A7148903299ALL, 1, 8, "rowcount", &c_PDOStatement::ci_rowcount },
  { 0x4389F50CAA085CDCLL, 1, 8, "__wakeup", &c_PDOStatement::ci___wakeup },
  { 0x5B3A4A72846B21DCLL, 0, 7, "current", &c_PDOStatement::ci_current },
  { 0x1C87AD14A095219DLL, 1, 10, "bindcolumn", &c_PDOStatement::ci_bindcolumn },
  { 0x0E1814AA3327229DLL, 0, 11, "fetchobject", &c_PDOStatement::ci_fetchobject },
  { 0x1DDD412E7F04605ELL, 1, 9, "errorinfo", &c_PDOStatement::ci_errorinfo },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_PDOStatement::ci___construct },
  { 0x78C9BF8620136861LL, 1, 12, "setfetchmode", &c_PDOStatement::ci_setfetchmode },
  { 0x699F5A1E3BD7B2A2LL, 1, 15, "debugdumpparams", &c_PDOStatement::ci_debugdumpparams },
  { 0x49F89C466612FC28LL, 1, 12, "getattribute", &c_PDOStatement::ci_getattribute },
  { 0x1670096FDE27AF6ALL, 1, 6, "rewind", &c_PDOStatement::ci_rewind },
  { 0x61D1244DDADBC02DLL, 1, 7, "__sleep", &c_PDOStatement::ci___sleep },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_PDOStatement::ci___destruct },
  { 0x3C6D50F3BB8102B8LL, 1, 4, "next", &c_PDOStatement::ci_next },
  { 0x5B6B980006E717FBLL, 1, 13, "getcolumnmeta", &c_PDOStatement::ci_getcolumnmeta },
  { 0x5E82B850BB90B0FBLL, 0, 5, "fetch", &c_PDOStatement::ci_fetch },
  { 0, 1, 0, 0 }
};
const int c_PDOStatement::s_call_info_index[] = {
  63,
  -1,0,-1,1,2,3,-1,4,
  -1,-1,5,-1,-1,-1,6,7,
  -1,8,9,-1,-1,-1,10,-1,
  -1,11,12,-1,13,15,17,18,
  -1,19,20,-1,-1,-1,-1,-1,
  21,-1,22,-1,-1,23,-1,-1,
  -1,-1,-1,24,-1,-1,-1,-1,
  25,-1,-1,26,-1,-1,-1,-1,

};
c_PDOStatement *c_PDOStatement::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_PDOStatement::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_PDOStatement::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_PDOStatement::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_PDOStatement = {
  c_PDOStatement::os_getInit,
  c_PDOStatement::os_get,
  c_PDOStatement::os_lval,
  c_PDOStatement::os_invoke,
  c_PDOStatement::os_constant,
  (ObjectData*(*)(ObjectData*))coo_PDOStatement,
  c_PDOStatement::s_call_info_table,c_PDOStatement::s_call_info_index,
  "PDOStatement",
  0
};
ObjectData *coo_SoapClient() {
  return NEWOBJ(c_SoapClient)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_SoapClient
Variant c_SoapClient::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_SoapClient
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_SoapClient
Variant c_SoapClient::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_SoapClient
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_SoapClient
Variant &c_SoapClient::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_SoapClient
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_SoapClient
Variant * c_SoapClient::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_SoapClient
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_SoapClient
Variant * c_SoapClient::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_SoapClient
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_SoapClient
Variant * c_SoapClient::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_SoapClient
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_SoapClient
Variant c_SoapClient::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_SoapClient
IMPLEMENT_CLASS(SoapClient)
ObjectData *c_SoapClient::cloneImpl() {
  ObjectData *obj = coo_SoapClient();
  c_SoapClient::cloneSet(obj);
  return obj;
}
void c_SoapClient::cloneSet(ObjectData *cl) {
  c_SoapClient *clone = static_cast<c_SoapClient*>(cl);
  ObjectData::cloneSet(clone);
}
Variant c_SoapClient::doCall(Variant v_name, Variant v_arguments, bool fatal) {
  return t___call(v_name, !v_arguments.isNull() ? v_arguments : Variant(Array::Create()));
}
CallInfo c_SoapClient::ci___dorequest((void*)&c_SoapClient::i___dorequest, (void*)&c_SoapClient::ifa___dorequest, 5, 4, 0x0000000000000000LL);
CallInfo c_SoapClient::ci___getlastrequest((void*)&c_SoapClient::i___getlastrequest, (void*)&c_SoapClient::ifa___getlastrequest, 0, 4, 0x0000000000000000LL);
CallInfo c_SoapClient::ci___setsoapheaders((void*)&c_SoapClient::i___setsoapheaders, (void*)&c_SoapClient::ifa___setsoapheaders, 1, 4, 0x0000000000000000LL);
CallInfo c_SoapClient::ci___setcookie((void*)&c_SoapClient::i___setcookie, (void*)&c_SoapClient::ifa___setcookie, 2, 4, 0x0000000000000000LL);
CallInfo c_SoapClient::ci___soapcall((void*)&c_SoapClient::i___soapcall, (void*)&c_SoapClient::ifa___soapcall, 5, 4, 0x0000000000000010LL);
CallInfo c_SoapClient::ci___destruct((void*)&c_SoapClient::i___destruct, (void*)&c_SoapClient::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_SoapClient::ci___setlocation((void*)&c_SoapClient::i___setlocation, (void*)&c_SoapClient::ifa___setlocation, 1, 4, 0x0000000000000000LL);
CallInfo c_SoapClient::ci___getlastrequestheaders((void*)&c_SoapClient::i___getlastrequestheaders, (void*)&c_SoapClient::ifa___getlastrequestheaders, 0, 4, 0x0000000000000000LL);
CallInfo c_SoapClient::ci___construct((void*)&c_SoapClient::i___construct, (void*)&c_SoapClient::ifa___construct, 2, 4, 0x0000000000000000LL);
CallInfo c_SoapClient::ci___getfunctions((void*)&c_SoapClient::i___getfunctions, (void*)&c_SoapClient::ifa___getfunctions, 0, 4, 0x0000000000000000LL);
CallInfo c_SoapClient::ci___getlastresponseheaders((void*)&c_SoapClient::i___getlastresponseheaders, (void*)&c_SoapClient::ifa___getlastresponseheaders, 0, 4, 0x0000000000000000LL);
CallInfo c_SoapClient::ci___getlastresponse((void*)&c_SoapClient::i___getlastresponse, (void*)&c_SoapClient::ifa___getlastresponse, 0, 4, 0x0000000000000000LL);
CallInfo c_SoapClient::ci___gettypes((void*)&c_SoapClient::i___gettypes, (void*)&c_SoapClient::ifa___gettypes, 0, 4, 0x0000000000000000LL);
CallInfo c_SoapClient::ci___call((void*)&c_SoapClient::i___call, (void*)&c_SoapClient::ifa___call, 2, 4, 0x0000000000000000LL);
Variant c_SoapClient::i___dorequest(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___dorequest, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 4 || count > 5)) return throw_wrong_arguments("__dorequest", count, 4, 5, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (self->t___dorequest(arg0, arg1, arg2, arg3));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___dorequest(arg0, arg1, arg2, arg3, arg4));
  }
}
Variant c_SoapClient::i___getlastrequest(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___getlastrequest, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__getlastrequest", 0, 1);
  return (self->t___getlastrequest());
}
Variant c_SoapClient::i___setsoapheaders(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___setsoapheaders, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("__setsoapheaders", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t___setsoapheaders());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___setsoapheaders(arg0));
  }
}
Variant c_SoapClient::i___setcookie(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___setcookie, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("__setcookie", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t___setcookie(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___setcookie(arg0, arg1));
  }
}
Variant c_SoapClient::i___soapcall(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___soapcall, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 5)) return throw_wrong_arguments("__soapcall", count, 2, 5, 1);
  const_cast<Array&>(params).escalate(true);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t___soapcall(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t___soapcall(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (self->t___soapcall(arg0, arg1, arg2, arg3));
    VRefParam arg4(vref(ad->getValueRef(pos = ad->iter_advance(pos))));
    return (self->t___soapcall(arg0, arg1, arg2, arg3, arg4));
  }
}
Variant c_SoapClient::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_SoapClient::i___setlocation(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___setlocation, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("__setlocation", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t___setlocation());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___setlocation(arg0));
  }
}
Variant c_SoapClient::i___getlastrequestheaders(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___getlastrequestheaders, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__getlastrequestheaders", 0, 1);
  return (self->t___getlastrequestheaders());
}
Variant c_SoapClient::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("__construct", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t___construct(arg0), null);
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___construct(arg0, arg1), null);
  }
}
Variant c_SoapClient::i___getfunctions(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___getfunctions, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__getfunctions", 0, 1);
  return (self->t___getfunctions());
}
Variant c_SoapClient::i___getlastresponseheaders(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___getlastresponseheaders, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__getlastresponseheaders", 0, 1);
  return (self->t___getlastresponseheaders());
}
Variant c_SoapClient::i___getlastresponse(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___getlastresponse, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__getlastresponse", 0, 1);
  return (self->t___getlastresponse());
}
Variant c_SoapClient::i___gettypes(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___gettypes, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__gettypes", 0, 1);
  return (self->t___gettypes());
}
Variant c_SoapClient::i___call(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___call, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__call", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___call(arg0, arg1));
  }
}
Variant c_SoapClient::ifa___dorequest(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___dorequest, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  if (UNLIKELY(count < 4 || count > 5)) return throw_wrong_arguments("__dorequest", count, 4, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  if (count <= 4) return (self->t___dorequest(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (self->t___dorequest(arg0, arg1, arg2, arg3, arg4));
}
Variant c_SoapClient::ifa___getlastrequest(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___getlastrequest, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__getlastrequest", 0, 1);
  return (self->t___getlastrequest());
}
Variant c_SoapClient::ifa___setsoapheaders(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___setsoapheaders, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("__setsoapheaders", 1, 1);
  if (count <= 0) return (self->t___setsoapheaders());
  CVarRef arg0(a0);
  return (self->t___setsoapheaders(arg0));
}
Variant c_SoapClient::ifa___setcookie(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___setcookie, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("__setcookie", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t___setcookie(arg0));
  CVarRef arg1(a1);
  return (self->t___setcookie(arg0, arg1));
}
Variant c_SoapClient::ifa___soapcall(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___soapcall, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 5)) return throw_wrong_arguments("__soapcall", count, 2, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t___soapcall(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (self->t___soapcall(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (self->t___soapcall(arg0, arg1, arg2, arg3));
  VRefParam arg4(vref(a4));
  return (self->t___soapcall(arg0, arg1, arg2, arg3, arg4));
}
Variant c_SoapClient::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_SoapClient::ifa___setlocation(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___setlocation, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("__setlocation", 1, 1);
  if (count <= 0) return (self->t___setlocation());
  CVarRef arg0(a0);
  return (self->t___setlocation(arg0));
}
Variant c_SoapClient::ifa___getlastrequestheaders(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___getlastrequestheaders, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__getlastrequestheaders", 0, 1);
  return (self->t___getlastrequestheaders());
}
Variant c_SoapClient::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("__construct", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t___construct(arg0), null);
  CVarRef arg1(a1);
  return (self->t___construct(arg0, arg1), null);
}
Variant c_SoapClient::ifa___getfunctions(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___getfunctions, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__getfunctions", 0, 1);
  return (self->t___getfunctions());
}
Variant c_SoapClient::ifa___getlastresponseheaders(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___getlastresponseheaders, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__getlastresponseheaders", 0, 1);
  return (self->t___getlastresponseheaders());
}
Variant c_SoapClient::ifa___getlastresponse(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___getlastresponse, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__getlastresponse", 0, 1);
  return (self->t___getlastresponse());
}
Variant c_SoapClient::ifa___gettypes(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___gettypes, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__gettypes", 0, 1);
  return (self->t___gettypes());
}
Variant c_SoapClient::ifa___call(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___call, coo_SoapClient);
  }
  c_SoapClient *self ATTRIBUTE_UNUSED (static_cast<c_SoapClient*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__call", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t___call(arg0, arg1));
}
const MethodCallInfoTable c_SoapClient::s_call_info_table[] = {
  { 0x5C5C1E24A140F6E4LL, 1, 16, "__getlastrequest", &c_SoapClient::ci___getlastrequest },
  { 0x3648EE7D3B37DE8CLL, 1, 23, "__getlastrequestheaders", &c_SoapClient::ci___getlastrequestheaders },
  { 0x5D73364F53CEEB6CLL, 0, 6, "__call", &c_SoapClient::ci___call },
  { 0x1365B3105FC59871LL, 1, 14, "__getfunctions", &c_SoapClient::ci___getfunctions },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_SoapClient::ci___destruct },
  { 0x3CA9145031035A54LL, 1, 17, "__getlastresponse", &c_SoapClient::ci___getlastresponse },
  { 0x19A26CEC7E8AAEF5LL, 1, 11, "__dorequest", &c_SoapClient::ci___dorequest },
  { 0x52C6ABACCBFD0C75LL, 0, 11, "__setcookie", &c_SoapClient::ci___setcookie },
  { 0x628D398E7604B9D5LL, 0, 10, "__gettypes", &c_SoapClient::ci___gettypes },
  { 0x4A2F89F662050D99LL, 1, 10, "__soapcall", &c_SoapClient::ci___soapcall },
  { 0x0C94657A58A82CFALL, 1, 24, "__getlastresponseheaders", &c_SoapClient::ci___getlastresponseheaders },
  { 0x14842228D5E335BBLL, 1, 16, "__setsoapheaders", &c_SoapClient::ci___setsoapheaders },
  { 0x232D13904DBC36FFLL, 1, 13, "__setlocation", &c_SoapClient::ci___setlocation },
  { 0x0D31D0AC229C615FLL, 0, 11, "__construct", &c_SoapClient::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_SoapClient::s_call_info_index[] = {
  31,
  -1,-1,-1,-1,0,-1,-1,-1,
  -1,-1,-1,-1,1,-1,-1,-1,
  -1,3,-1,4,5,6,-1,-1,
  -1,9,10,11,-1,-1,-1,12,

};
c_SoapClient *c_SoapClient::create(Variant a0, Array a1) {
  CountableHelper h(this);
  init();
  t___construct(a0, a1);
  return this;
}
void c_SoapClient::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) throw_wrong_arguments("__construct", count, 1, 2, 2);
  do {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) {
      (t___construct(arg0));
      break;
    }
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    (t___construct(arg0, arg1));
  } while (false);
}
void c_SoapClient::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_SoapClient::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_SoapClient = {
  c_SoapClient::os_getInit,
  c_SoapClient::os_get,
  c_SoapClient::os_lval,
  c_SoapClient::os_invoke,
  c_SoapClient::os_constant,
  (ObjectData*(*)(ObjectData*))coo_SoapClient,
  c_SoapClient::s_call_info_table,c_SoapClient::s_call_info_index,
  "SoapClient",
  0
};
ObjectData *coo_SoapParam() {
  return NEWOBJ(c_SoapParam)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_SoapParam
Variant c_SoapParam::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_SoapParam
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_SoapParam
Variant c_SoapParam::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_SoapParam
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_SoapParam
Variant &c_SoapParam::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_SoapParam
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_SoapParam
Variant * c_SoapParam::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_SoapParam
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_SoapParam
Variant * c_SoapParam::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_SoapParam
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_SoapParam
Variant * c_SoapParam::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_SoapParam
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_SoapParam
Variant c_SoapParam::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_SoapParam
IMPLEMENT_CLASS(SoapParam)
ObjectData *c_SoapParam::cloneImpl() {
  ObjectData *obj = coo_SoapParam();
  c_SoapParam::cloneSet(obj);
  return obj;
}
void c_SoapParam::cloneSet(ObjectData *cl) {
  c_SoapParam *clone = static_cast<c_SoapParam*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_SoapParam::ci___destruct((void*)&c_SoapParam::i___destruct, (void*)&c_SoapParam::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_SoapParam::ci___construct((void*)&c_SoapParam::i___construct, (void*)&c_SoapParam::ifa___construct, 2, 4, 0x0000000000000000LL);
Variant c_SoapParam::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_SoapParam);
  }
  c_SoapParam *self ATTRIBUTE_UNUSED (static_cast<c_SoapParam*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_SoapParam::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_SoapParam);
  }
  c_SoapParam *self ATTRIBUTE_UNUSED (static_cast<c_SoapParam*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__construct", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___construct(arg0, arg1), null);
  }
}
Variant c_SoapParam::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_SoapParam);
  }
  c_SoapParam *self ATTRIBUTE_UNUSED (static_cast<c_SoapParam*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_SoapParam::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_SoapParam);
  }
  c_SoapParam *self ATTRIBUTE_UNUSED (static_cast<c_SoapParam*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__construct", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t___construct(arg0, arg1), null);
}
const MethodCallInfoTable c_SoapParam::s_call_info_table[] = {
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_SoapParam::ci___destruct },
  { 0x0D31D0AC229C615FLL, 0, 11, "__construct", &c_SoapParam::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_SoapParam::s_call_info_index[] = {
  3,
  -1,-1,-1,0,
};
c_SoapParam *c_SoapParam::create(Variant a0, String a1) {
  CountableHelper h(this);
  init();
  t___construct(a0, a1);
  return this;
}
void c_SoapParam::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) throw_wrong_arguments("__construct", count, 2, 2, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    (t___construct(arg0, arg1));
  }
}
void c_SoapParam::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_SoapParam::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_SoapParam = {
  c_SoapParam::os_getInit,
  c_SoapParam::os_get,
  c_SoapParam::os_lval,
  c_SoapParam::os_invoke,
  c_SoapParam::os_constant,
  (ObjectData*(*)(ObjectData*))coo_SoapParam,
  c_SoapParam::s_call_info_table,c_SoapParam::s_call_info_index,
  "SoapParam",
  0
};
ObjectData *coo_DateTime() {
  return NEWOBJ(c_DateTime)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DateTime
Variant c_DateTime::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DateTime
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DateTime
Variant c_DateTime::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DateTime
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DateTime
Variant &c_DateTime::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DateTime
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DateTime
Variant * c_DateTime::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DateTime
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DateTime
Variant * c_DateTime::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DateTime
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DateTime
Variant * c_DateTime::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DateTime
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DateTime
Variant c_DateTime::os_constant(const char *s) {
  int64 hash = hash_string(s);
  switch (hash & 31) {
    case 4:
      HASH_RETURN(0x65F665B8975D4C44LL, q_DateTime_RSS, "RSS");
      break;
    case 5:
      HASH_RETURN(0x4C70260A54584B05LL, q_DateTime_ATOM, "ATOM");
      break;
    case 9:
      HASH_RETURN(0x0D93F5DDBEAD7BC9LL, q_DateTime_ISO8601, "ISO8601");
      break;
    case 10:
      HASH_RETURN(0x2E8A54E476F8FF8ALL, q_DateTime_RFC850, "RFC850");
      break;
    case 12:
      HASH_RETURN(0x2183317DB64F7D2CLL, q_DateTime_COOKIE, "COOKIE");
      HASH_RETURN(0x51E9E1D29858652CLL, q_DateTime_RFC1036, "RFC1036");
      HASH_RETURN(0x2035891FE861602CLL, q_DateTime_RFC3339, "RFC3339");
      break;
    case 23:
      HASH_RETURN(0x1CC8F0E77D83F017LL, q_DateTime_RFC2822, "RFC2822");
      break;
    case 27:
      HASH_RETURN(0x64B53064426F891BLL, q_DateTime_RFC822, "RFC822");
      HASH_RETURN(0x0D99FD60C002B3DBLL, q_DateTime_W3C, "W3C");
      break;
    case 30:
      HASH_RETURN(0x325DE23E7968F7FELL, q_DateTime_RFC1123, "RFC1123");
      break;
    default:
      break;
  }
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DateTime
IMPLEMENT_CLASS(DateTime)
ObjectData *c_DateTime::cloneImpl() {
  ObjectData *obj = coo_DateTime();
  c_DateTime::cloneSet(obj);
  return obj;
}
void c_DateTime::cloneSet(ObjectData *cl) {
  c_DateTime *clone = static_cast<c_DateTime*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_DateTime::ci_format((void*)&c_DateTime::i_format, (void*)&c_DateTime::ifa_format, 1, 4, 0x0000000000000000LL);
CallInfo c_DateTime::ci_setdate((void*)&c_DateTime::i_setdate, (void*)&c_DateTime::ifa_setdate, 3, 4, 0x0000000000000000LL);
CallInfo c_DateTime::ci___destruct((void*)&c_DateTime::i___destruct, (void*)&c_DateTime::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_DateTime::ci_getoffset((void*)&c_DateTime::i_getoffset, (void*)&c_DateTime::ifa_getoffset, 0, 4, 0x0000000000000000LL);
CallInfo c_DateTime::ci_settime((void*)&c_DateTime::i_settime, (void*)&c_DateTime::ifa_settime, 3, 4, 0x0000000000000000LL);
CallInfo c_DateTime::ci___construct((void*)&c_DateTime::i___construct, (void*)&c_DateTime::ifa___construct, 2, 4, 0x0000000000000000LL);
CallInfo c_DateTime::ci_gettimezone((void*)&c_DateTime::i_gettimezone, (void*)&c_DateTime::ifa_gettimezone, 0, 4, 0x0000000000000000LL);
CallInfo c_DateTime::ci_setisodate((void*)&c_DateTime::i_setisodate, (void*)&c_DateTime::ifa_setisodate, 3, 4, 0x0000000000000000LL);
CallInfo c_DateTime::ci_settimezone((void*)&c_DateTime::i_settimezone, (void*)&c_DateTime::ifa_settimezone, 1, 4, 0x0000000000000000LL);
CallInfo c_DateTime::ci_modify((void*)&c_DateTime::i_modify, (void*)&c_DateTime::ifa_modify, 1, 4, 0x0000000000000000LL);
Variant c_DateTime::i_format(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_format, coo_DateTime);
  }
  c_DateTime *self ATTRIBUTE_UNUSED (static_cast<c_DateTime*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("format", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_format(arg0));
  }
}
Variant c_DateTime::i_setdate(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setdate, coo_DateTime);
  }
  c_DateTime *self ATTRIBUTE_UNUSED (static_cast<c_DateTime*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("setdate", count, 3, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_setdate(arg0, arg1, arg2));
  }
}
Variant c_DateTime::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_DateTime);
  }
  c_DateTime *self ATTRIBUTE_UNUSED (static_cast<c_DateTime*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DateTime::i_getoffset(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getoffset, coo_DateTime);
  }
  c_DateTime *self ATTRIBUTE_UNUSED (static_cast<c_DateTime*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getoffset", 0, 1);
  return (self->t_getoffset());
}
Variant c_DateTime::i_settime(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_settime, coo_DateTime);
  }
  c_DateTime *self ATTRIBUTE_UNUSED (static_cast<c_DateTime*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("settime", count, 2, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_settime(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_settime(arg0, arg1, arg2));
  }
}
Variant c_DateTime::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_DateTime);
  }
  c_DateTime *self ATTRIBUTE_UNUSED (static_cast<c_DateTime*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("__construct", 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t___construct(), null);
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t___construct(arg0), null);
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___construct(arg0, arg1), null);
  }
}
Variant c_DateTime::i_gettimezone(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_gettimezone, coo_DateTime);
  }
  c_DateTime *self ATTRIBUTE_UNUSED (static_cast<c_DateTime*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("gettimezone", 0, 1);
  return (self->t_gettimezone());
}
Variant c_DateTime::i_setisodate(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setisodate, coo_DateTime);
  }
  c_DateTime *self ATTRIBUTE_UNUSED (static_cast<c_DateTime*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("setisodate", count, 2, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_setisodate(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_setisodate(arg0, arg1, arg2));
  }
}
Variant c_DateTime::i_settimezone(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_settimezone, coo_DateTime);
  }
  c_DateTime *self ATTRIBUTE_UNUSED (static_cast<c_DateTime*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("settimezone", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_settimezone(arg0));
  }
}
Variant c_DateTime::i_modify(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_modify, coo_DateTime);
  }
  c_DateTime *self ATTRIBUTE_UNUSED (static_cast<c_DateTime*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("modify", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_modify(arg0));
  }
}
Variant c_DateTime::ifa_format(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_format, coo_DateTime);
  }
  c_DateTime *self ATTRIBUTE_UNUSED (static_cast<c_DateTime*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("format", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_format(arg0));
}
Variant c_DateTime::ifa_setdate(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setdate, coo_DateTime);
  }
  c_DateTime *self ATTRIBUTE_UNUSED (static_cast<c_DateTime*>(mcp.obj));
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("setdate", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (self->t_setdate(arg0, arg1, arg2));
}
Variant c_DateTime::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_DateTime);
  }
  c_DateTime *self ATTRIBUTE_UNUSED (static_cast<c_DateTime*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DateTime::ifa_getoffset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getoffset, coo_DateTime);
  }
  c_DateTime *self ATTRIBUTE_UNUSED (static_cast<c_DateTime*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getoffset", 0, 1);
  return (self->t_getoffset());
}
Variant c_DateTime::ifa_settime(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_settime, coo_DateTime);
  }
  c_DateTime *self ATTRIBUTE_UNUSED (static_cast<c_DateTime*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("settime", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_settime(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_settime(arg0, arg1, arg2));
}
Variant c_DateTime::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_DateTime);
  }
  c_DateTime *self ATTRIBUTE_UNUSED (static_cast<c_DateTime*>(mcp.obj));
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("__construct", 2, 1);
  if (count <= 0) return (self->t___construct(), null);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t___construct(arg0), null);
  CVarRef arg1(a1);
  return (self->t___construct(arg0, arg1), null);
}
Variant c_DateTime::ifa_gettimezone(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_gettimezone, coo_DateTime);
  }
  c_DateTime *self ATTRIBUTE_UNUSED (static_cast<c_DateTime*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("gettimezone", 0, 1);
  return (self->t_gettimezone());
}
Variant c_DateTime::ifa_setisodate(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setisodate, coo_DateTime);
  }
  c_DateTime *self ATTRIBUTE_UNUSED (static_cast<c_DateTime*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("setisodate", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_setisodate(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_setisodate(arg0, arg1, arg2));
}
Variant c_DateTime::ifa_settimezone(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_settimezone, coo_DateTime);
  }
  c_DateTime *self ATTRIBUTE_UNUSED (static_cast<c_DateTime*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("settimezone", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_settimezone(arg0));
}
Variant c_DateTime::ifa_modify(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_modify, coo_DateTime);
  }
  c_DateTime *self ATTRIBUTE_UNUSED (static_cast<c_DateTime*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("modify", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_modify(arg0));
}
const MethodCallInfoTable c_DateTime::s_call_info_table[] = {
  { 0x65A9B2950F080587LL, 1, 6, "modify", &c_DateTime::ci_modify },
  { 0x67314943DC9D120BLL, 1, 7, "setDate", &c_DateTime::ci_setdate },
  { 0x68DB66F60B55BD0BLL, 0, 9, "getOffset", &c_DateTime::ci_getoffset },
  { 0x688601F33BE7716CLL, 1, 11, "getTimezone", &c_DateTime::ci_gettimezone },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_DateTime::ci___destruct },
  { 0x16D6DBFD6EE55A74LL, 1, 10, "setISODate", &c_DateTime::ci_setisodate },
  { 0x07CB96AB34F4C258LL, 1, 7, "setTime", &c_DateTime::ci_settime },
  { 0x3B576E558B957CB8LL, 0, 11, "setTimezone", &c_DateTime::ci_settimezone },
  { 0x1B6DDAF6AAF8CA9BLL, 1, 6, "format", &c_DateTime::ci_format },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_DateTime::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_DateTime::s_call_info_index[] = {
  31,
  -1,-1,-1,-1,-1,-1,-1,0,
  -1,-1,-1,1,3,-1,-1,-1,
  -1,-1,-1,4,5,-1,-1,-1,
  6,-1,-1,8,-1,-1,-1,9,

};
c_DateTime *c_DateTime::create(String a0, Object a1) {
  CountableHelper h(this);
  init();
  t___construct(a0, a1);
  return this;
}
void c_DateTime::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 2)) throw_toomany_arguments("__construct", 2, 2);
  do {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) {
      (t___construct());
      break;
    }
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) {
      (t___construct(arg0));
      break;
    }
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    (t___construct(arg0, arg1));
  } while (false);
}
void c_DateTime::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DateTime::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_DateTime = {
  c_DateTime::os_getInit,
  c_DateTime::os_get,
  c_DateTime::os_lval,
  c_DateTime::os_invoke,
  c_DateTime::os_constant,
  (ObjectData*(*)(ObjectData*))coo_DateTime,
  c_DateTime::s_call_info_table,c_DateTime::s_call_info_index,
  "DateTime",
  0
};
ObjectData *coo_Collator() {
  return NEWOBJ(c_Collator)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_Collator
Variant c_Collator::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_Collator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_Collator
Variant c_Collator::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_Collator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_Collator
Variant &c_Collator::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_Collator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_Collator
Variant * c_Collator::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_Collator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_Collator
Variant * c_Collator::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_Collator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_Collator
Variant * c_Collator::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_Collator
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_Collator
Variant c_Collator::os_constant(const char *s) {
  int64 hash = hash_string(s);
  switch (hash & 63) {
    case 3:
      HASH_RETURN(0x44D1DA387595A403LL, q_Collator_SORT_REGULAR, "SORT_REGULAR");
      HASH_RETURN(0x243ECA9F2933DFC3LL, q_Collator_ON, "ON");
      break;
    case 4:
      HASH_RETURN(0x2FC0EE2E1B088E44LL, q_Collator_NUMERIC_COLLATION, "NUMERIC_COLLATION");
      break;
    case 7:
      HASH_RETURN(0x11D151DDDD2A4107LL, q_Collator_HIRAGANA_QUATERNARY_MODE, "HIRAGANA_QUATERNARY_MODE");
      break;
    case 12:
      HASH_RETURN(0x12C49411F55E648CLL, q_Collator_QUATERNARY, "QUATERNARY");
      break;
    case 20:
      HASH_RETURN(0x6A7AD33CDF49E8D4LL, q_Collator_SORT_NUMERIC, "SORT_NUMERIC");
      HASH_RETURN(0x342F3FCC372ABD54LL, q_Collator_NON_IGNORABLE, "NON_IGNORABLE");
      break;
    case 21:
      HASH_RETURN(0x43A7AE36C693E955LL, q_Collator_DEFAULT_VALUE, "DEFAULT_VALUE");
      break;
    case 24:
      HASH_RETURN(0x6DED35804EDAD218LL, q_Collator_CASE_LEVEL, "CASE_LEVEL");
      HASH_RETURN(0x0AE48A6C6BE5D798LL, q_Collator_LOWER_FIRST, "LOWER_FIRST");
      break;
    case 27:
      HASH_RETURN(0x2C6A6D2A478AF4DBLL, q_Collator_UPPER_FIRST, "UPPER_FIRST");
      break;
    case 29:
      HASH_RETURN(0x58342E71EC59E4DDLL, q_Collator_IDENTICAL, "IDENTICAL");
      break;
    case 32:
      HASH_RETURN(0x092DDC88428C3A20LL, q_Collator_PRIMARY, "PRIMARY");
      break;
    case 33:
      HASH_RETURN(0x713FE3D58B4C7661LL, q_Collator_FRENCH_COLLATION, "FRENCH_COLLATION");
      HASH_RETURN(0x25FE54F210EC5FE1LL, q_Collator_SECONDARY, "SECONDARY");
      HASH_RETURN(0x6E252898020550A1LL, q_Collator_TERTIARY, "TERTIARY");
      break;
    case 35:
      HASH_RETURN(0x2C984380FDBF8563LL, q_Collator_STRENGTH, "STRENGTH");
      break;
    case 39:
      HASH_RETURN(0x7306AAA31A7C8BE7LL, q_Collator_DEFAULT_STRENGTH, "DEFAULT_STRENGTH");
      break;
    case 45:
      HASH_RETURN(0x304F6E12C5B7486DLL, q_Collator_CASE_FIRST, "CASE_FIRST");
      break;
    case 52:
      HASH_RETURN(0x395D56BB0A8525F4LL, q_Collator_NORMALIZATION_MODE, "NORMALIZATION_MODE");
      break;
    case 53:
      HASH_RETURN(0x595FDD99C9EFE835LL, q_Collator_ALTERNATE_HANDLING, "ALTERNATE_HANDLING");
      break;
    case 60:
      HASH_RETURN(0x334AAA38C97C62FCLL, q_Collator_SORT_STRING, "SORT_STRING");
      HASH_RETURN(0x0039CBFC3620143CLL, q_Collator_SHIFTED, "SHIFTED");
      break;
    case 61:
      HASH_RETURN(0x136402C9E51A75FDLL, q_Collator_OFF, "OFF");
      break;
    default:
      break;
  }
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_Collator
IMPLEMENT_CLASS(Collator)
ObjectData *c_Collator::cloneImpl() {
  ObjectData *obj = coo_Collator();
  c_Collator::cloneSet(obj);
  return obj;
}
void c_Collator::cloneSet(ObjectData *cl) {
  c_Collator *clone = static_cast<c_Collator*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_Collator::ci_getattribute((void*)&c_Collator::i_getattribute, (void*)&c_Collator::ifa_getattribute, 1, 4, 0x0000000000000000LL);
CallInfo c_Collator::ci_sortwithsortkeys((void*)&c_Collator::i_sortwithsortkeys, (void*)&c_Collator::ifa_sortwithsortkeys, 1, 4, 0x0000000000000001LL);
CallInfo c_Collator::ci___destruct((void*)&c_Collator::i___destruct, (void*)&c_Collator::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_Collator::ci___construct((void*)&c_Collator::i___construct, (void*)&c_Collator::ifa___construct, 1, 4, 0x0000000000000000LL);
CallInfo c_Collator::ci_sort((void*)&c_Collator::i_sort, (void*)&c_Collator::ifa_sort, 2, 4, 0x0000000000000001LL);
CallInfo c_Collator::ci_geterrorcode((void*)&c_Collator::i_geterrorcode, (void*)&c_Collator::ifa_geterrorcode, 0, 4, 0x0000000000000000LL);
CallInfo c_Collator::ci_getstrength((void*)&c_Collator::i_getstrength, (void*)&c_Collator::ifa_getstrength, 0, 4, 0x0000000000000000LL);
CallInfo c_Collator::ci_asort((void*)&c_Collator::i_asort, (void*)&c_Collator::ifa_asort, 2, 4, 0x0000000000000001LL);
CallInfo c_Collator::ci_setstrength((void*)&c_Collator::i_setstrength, (void*)&c_Collator::ifa_setstrength, 1, 4, 0x0000000000000000LL);
CallInfo c_Collator::ci_create((void*)&c_Collator::i_create, (void*)&c_Collator::ifa_create, 1, 12, 0x0000000000000000LL);
CallInfo c_Collator::ci_setattribute((void*)&c_Collator::i_setattribute, (void*)&c_Collator::ifa_setattribute, 2, 4, 0x0000000000000000LL);
CallInfo c_Collator::ci_getlocale((void*)&c_Collator::i_getlocale, (void*)&c_Collator::ifa_getlocale, 1, 4, 0x0000000000000000LL);
CallInfo c_Collator::ci_geterrormessage((void*)&c_Collator::i_geterrormessage, (void*)&c_Collator::ifa_geterrormessage, 0, 4, 0x0000000000000000LL);
CallInfo c_Collator::ci_compare((void*)&c_Collator::i_compare, (void*)&c_Collator::ifa_compare, 2, 4, 0x0000000000000000LL);
Variant c_Collator::i_getattribute(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getattribute, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getattribute", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getattribute(arg0));
  }
}
Variant c_Collator::i_sortwithsortkeys(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_sortwithsortkeys, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("sortwithsortkeys", count, 1, 1, 1);
  const_cast<Array&>(params).escalate(true);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    VRefParam arg0(vref(ad->getValueRef(pos)));
    return (self->t_sortwithsortkeys(arg0));
  }
}
Variant c_Collator::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_Collator::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__construct", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___construct(arg0), null);
  }
}
Variant c_Collator::i_sort(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_sort, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("sort", count, 1, 2, 1);
  const_cast<Array&>(params).escalate(true);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    VRefParam arg0(vref(ad->getValueRef(pos)));
    if (count <= 1) return (self->t_sort(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_sort(arg0, arg1));
  }
}
Variant c_Collator::i_geterrorcode(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_geterrorcode, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("geterrorcode", 0, 1);
  return (self->t_geterrorcode());
}
Variant c_Collator::i_getstrength(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getstrength, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getstrength", 0, 1);
  return (self->t_getstrength());
}
Variant c_Collator::i_asort(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_asort, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("asort", count, 1, 2, 1);
  const_cast<Array&>(params).escalate(true);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    VRefParam arg0(vref(ad->getValueRef(pos)));
    if (count <= 1) return (self->t_asort(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_asort(arg0, arg1));
  }
}
Variant c_Collator::i_setstrength(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setstrength, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setstrength", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_setstrength(arg0));
  }
}
Variant c_Collator::i_create(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("create", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (c_Collator::t_create(arg0));
  }
}
Variant c_Collator::i_setattribute(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setattribute, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("setattribute", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_setattribute(arg0, arg1));
  }
}
Variant c_Collator::i_getlocale(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getlocale, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("getlocale", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_getlocale());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getlocale(arg0));
  }
}
Variant c_Collator::i_geterrormessage(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_geterrormessage, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("geterrormessage", 0, 1);
  return (self->t_geterrormessage());
}
Variant c_Collator::i_compare(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_compare, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("compare", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_compare(arg0, arg1));
  }
}
Variant c_Collator::ifa_getattribute(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getattribute, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getattribute", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_getattribute(arg0));
}
Variant c_Collator::ifa_sortwithsortkeys(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_sortwithsortkeys, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("sortwithsortkeys", count, 1, 1, 1);
  VRefParam arg0(vref(a0));
  return (self->t_sortwithsortkeys(arg0));
}
Variant c_Collator::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_Collator::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__construct", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___construct(arg0), null);
}
Variant c_Collator::ifa_sort(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_sort, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("sort", count, 1, 2, 1);
  VRefParam arg0(vref(a0));
  if (count <= 1) return (self->t_sort(arg0));
  CVarRef arg1(a1);
  return (self->t_sort(arg0, arg1));
}
Variant c_Collator::ifa_geterrorcode(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_geterrorcode, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("geterrorcode", 0, 1);
  return (self->t_geterrorcode());
}
Variant c_Collator::ifa_getstrength(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getstrength, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getstrength", 0, 1);
  return (self->t_getstrength());
}
Variant c_Collator::ifa_asort(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_asort, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("asort", count, 1, 2, 1);
  VRefParam arg0(vref(a0));
  if (count <= 1) return (self->t_asort(arg0));
  CVarRef arg1(a1);
  return (self->t_asort(arg0, arg1));
}
Variant c_Collator::ifa_setstrength(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setstrength, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setstrength", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_setstrength(arg0));
}
Variant c_Collator::ifa_create(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("create", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (c_Collator::t_create(arg0));
}
Variant c_Collator::ifa_setattribute(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setattribute, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("setattribute", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_setattribute(arg0, arg1));
}
Variant c_Collator::ifa_getlocale(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getlocale, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("getlocale", 1, 1);
  if (count <= 0) return (self->t_getlocale());
  CVarRef arg0(a0);
  return (self->t_getlocale(arg0));
}
Variant c_Collator::ifa_geterrormessage(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_geterrormessage, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("geterrormessage", 0, 1);
  return (self->t_geterrormessage());
}
Variant c_Collator::ifa_compare(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_compare, coo_Collator);
  }
  c_Collator *self ATTRIBUTE_UNUSED (static_cast<c_Collator*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("compare", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_compare(arg0, arg1));
}
const MethodCallInfoTable c_Collator::s_call_info_table[] = {
  { 0x43E057044D6296E0LL, 1, 12, "geterrorcode", &c_Collator::ci_geterrorcode },
  { 0x2C7E06EB2965CE02LL, 1, 9, "getlocale", &c_Collator::ci_getlocale },
  { 0x49F89C466612FC28LL, 1, 12, "getattribute", &c_Collator::ci_getattribute },
  { 0x1F4984938E1DBB2ALL, 1, 4, "sort", &c_Collator::ci_sort },
  { 0x1D5B8B8144F4AB8ALL, 0, 12, "setattribute", &c_Collator::ci_setattribute },
  { 0x365C573D887803EBLL, 1, 16, "sortwithsortkeys", &c_Collator::ci_sortwithsortkeys },
  { 0x790B7C44A3442BEELL, 1, 5, "asort", &c_Collator::ci_asort },
  { 0x3B4D97DC8C437CD1LL, 1, 15, "geterrormessage", &c_Collator::ci_geterrormessage },
  { 0x1BF74792BDECF352LL, 1, 7, "compare", &c_Collator::ci_compare },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_Collator::ci___destruct },
  { 0x3A0A2C5D90518456LL, 1, 6, "create", &c_Collator::ci_create },
  { 0x0B7AA0ED4CBF9ED7LL, 1, 11, "setstrength", &c_Collator::ci_setstrength },
  { 0x1C15B5A1A05B4C5ELL, 1, 11, "getstrength", &c_Collator::ci_getstrength },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_Collator::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_Collator::s_call_info_index[] = {
  31,
  0,-1,1,-1,-1,-1,-1,-1,
  2,-1,3,5,-1,-1,6,-1,
  -1,7,8,9,-1,-1,10,11,
  -1,-1,-1,-1,-1,-1,12,13,

};
c_Collator *c_Collator::create(String a0) {
  CountableHelper h(this);
  init();
  t___construct(a0);
  return this;
}
void c_Collator::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) throw_wrong_arguments("__construct", count, 1, 1, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    (t___construct(arg0));
  }
}
void c_Collator::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_Collator::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_Collator = {
  c_Collator::os_getInit,
  c_Collator::os_get,
  c_Collator::os_lval,
  c_Collator::os_invoke,
  c_Collator::os_constant,
  (ObjectData*(*)(ObjectData*))coo_Collator,
  c_Collator::s_call_info_table,c_Collator::s_call_info_index,
  "Collator",
  0
};
ObjectData *coo_PDO() {
  return NEWOBJ(c_PDO)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_PDO
Variant c_PDO::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_PDO
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_PDO
Variant c_PDO::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_PDO
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_PDO
Variant &c_PDO::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_PDO
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PDO
Variant * c_PDO::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PDO
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_PDO
Variant * c_PDO::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_PDO
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_PDO
Variant * c_PDO::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_PDO
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_PDO
Variant c_PDO::os_constant(const char *s) {
  int64 hash = hash_string(s);
  switch (hash & 255) {
    case 0:
      HASH_RETURN(0x1800ED92A8884D00LL, q_PDO_ATTR_CASE, "ATTR_CASE");
      break;
    case 2:
      HASH_RETURN(0x07BAFBAE5A431902LL, q_PDO_ATTR_STATEMENT_CLASS, "ATTR_STATEMENT_CLASS");
      break;
    case 4:
      HASH_RETURN(0x0229D662F91D9C04LL, q_PDO_ERRMODE_EXCEPTION, "ERRMODE_EXCEPTION");
      break;
    case 8:
      HASH_RETURN(0x3BE7A02FD980AA08LL, q_PDO_CASE_NATURAL, "CASE_NATURAL");
      break;
    case 13:
      HASH_RETURN(0x099B533427CCC20DLL, q_PDO_FETCH_OBJ, "FETCH_OBJ");
      break;
    case 17:
      HASH_RETURN(0x5FAD218776C6E511LL, q_PDO_FETCH_INTO, "FETCH_INTO");
      break;
    case 25:
      HASH_RETURN(0x78CB81320C710019LL, q_PDO_FETCH_BOUND, "FETCH_BOUND");
      break;
    case 27:
      HASH_RETURN(0x3158D52C3627FE1BLL, q_PDO_MYSQL_ATTR_INIT_COMMAND, "MYSQL_ATTR_INIT_COMMAND");
      break;
    case 28:
      HASH_RETURN(0x03CF598D3CCCD01CLL, q_PDO_ATTR_CLIENT_VERSION, "ATTR_CLIENT_VERSION");
      break;
    case 29:
      HASH_RETURN(0x2BE16C4111A7B41DLL, q_PDO_ATTR_FETCH_CATALOG_NAMES, "ATTR_FETCH_CATALOG_NAMES");
      break;
    case 30:
      HASH_RETURN(0x2A5BA04D0218F11ELL, q_PDO_CASE_LOWER, "CASE_LOWER");
      break;
    case 35:
      HASH_RETURN(0x16B15CF4B0DD7E23LL, q_PDO_FETCH_GROUP, "FETCH_GROUP");
      break;
    case 37:
      HASH_RETURN(0x37F650C462FB6A25LL, q_PDO_CASE_UPPER, "CASE_UPPER");
      break;
    case 42:
      HASH_RETURN(0x262D9BE84029992ALL, q_PDO_PARAM_EVT_FETCH_POST, "PARAM_EVT_FETCH_POST");
      break;
    case 51:
      HASH_RETURN(0x15D2BCCED7726933LL, q_PDO_ATTR_TIMEOUT, "ATTR_TIMEOUT");
      break;
    case 59:
      HASH_RETURN(0x01B17428BEE0243BLL, q_PDO_PARAM_EVT_EXEC_PRE, "PARAM_EVT_EXEC_PRE");
      break;
    case 60:
      HASH_RETURN(0x2739A1D49673D43CLL, q_PDO_ATTR_ERRMODE, "ATTR_ERRMODE");
      HASH_RETURN(0x6AC5C285F4DD863CLL, q_PDO_ATTR_DEFAULT_FETCH_MODE, "ATTR_DEFAULT_FETCH_MODE");
      break;
    case 61:
      HASH_RETURN(0x3E11051E4101D73DLL, q_PDO_ATTR_EMULATE_PREPARES, "ATTR_EMULATE_PREPARES");
      break;
    case 68:
      HASH_RETURN(0x2189354E22363544LL, q_PDO_ATTR_PREFETCH, "ATTR_PREFETCH");
      break;
    case 72:
      HASH_RETURN(0x428D5CA64BB99E48LL, q_PDO_FETCH_UNIQUE, "FETCH_UNIQUE");
      break;
    case 78:
      HASH_RETURN(0x39B4E90F36E93B4ELL, q_PDO_MYSQL_ATTR_READ_DEFAULT_GROUP, "MYSQL_ATTR_READ_DEFAULT_GROUP");
      break;
    case 82:
      HASH_RETURN(0x58A833E2336C6152LL, q_PDO_ATTR_SERVER_INFO, "ATTR_SERVER_INFO");
      break;
    case 86:
      HASH_RETURN(0x57B75F4773C81556LL, q_PDO_PARAM_EVT_NORMALIZE, "PARAM_EVT_NORMALIZE");
      break;
    case 91:
      HASH_RETURN(0x5495020CF262F15BLL, q_PDO_ATTR_CONNECTION_STATUS, "ATTR_CONNECTION_STATUS");
      HASH_RETURN(0x37888F551D85275BLL, q_PDO_ATTR_ORACLE_NULLS, "ATTR_ORACLE_NULLS");
      break;
    case 97:
      HASH_RETURN(0x416A0550A8F12E61LL, q_PDO_MYSQL_ATTR_FOUND_ROWS, "MYSQL_ATTR_FOUND_ROWS");
      break;
    case 101:
      HASH_RETURN(0x15A3522970275465LL, q_PDO_FETCH_ORI_NEXT, "FETCH_ORI_NEXT");
      break;
    case 104:
      HASH_RETURN(0x162EAA2134F1C068LL, q_PDO_ATTR_FETCH_TABLE_NAMES, "ATTR_FETCH_TABLE_NAMES");
      break;
    case 111:
      HASH_RETURN(0x350E9275757FD66FLL, q_PDO_FETCH_ORI_REL, "FETCH_ORI_REL");
      break;
    case 112:
      HASH_RETURN(0x6870D9DE66F43D70LL, q_PDO_FETCH_ASSOC, "FETCH_ASSOC");
      break;
    case 113:
      HASH_RETURN(0x713C8339790FC071LL, q_PDO_ATTR_CURSOR_NAME, "ATTR_CURSOR_NAME");
      break;
    case 116:
      HASH_RETURN(0x1FB97A35B6711374LL, q_PDO_ATTR_MAX_COLUMN_LEN, "ATTR_MAX_COLUMN_LEN");
      break;
    case 117:
      HASH_RETURN(0x0E51487F9370EE75LL, q_PDO_ATTR_AUTOCOMMIT, "ATTR_AUTOCOMMIT");
      break;
    case 121:
      HASH_RETURN(0x630122BA9EC73379LL, q_PDO_PARAM_NULL, "PARAM_NULL");
      HASH_RETURN(0x05B00276031D7D79LL, q_PDO_PARAM_EVT_ALLOC, "PARAM_EVT_ALLOC");
      break;
    case 125:
      HASH_RETURN(0x500C039681520C7DLL, q_PDO_PARAM_BOOL, "PARAM_BOOL");
      break;
    case 126:
      HASH_RETURN(0x5CF4F38A0D7D087ELL, q_PDO_NULL_NATURAL, "NULL_NATURAL");
      break;
    case 131:
      HASH_RETURN(0x3F414F2735132983LL, q_PDO_PARAM_INT, "PARAM_INT");
      break;
    case 132:
      HASH_RETURN(0x2011B5A528057784LL, q_PDO_FETCH_NUM, "FETCH_NUM");
      break;
    case 133:
      HASH_RETURN(0x5451E44C627DD885LL, q_PDO_FETCH_ORI_PRIOR, "FETCH_ORI_PRIOR");
      break;
    case 134:
      HASH_RETURN(0x1B8BA5EEAABCB786LL, q_PDO_PARAM_EVT_EXEC_POST, "PARAM_EVT_EXEC_POST");
      HASH_RETURN(0x1B51C692B91D7486LL, q_PDO_MYSQL_ATTR_USE_BUFFERED_QUERY, "MYSQL_ATTR_USE_BUFFERED_QUERY");
      break;
    case 136:
      HASH_RETURN(0x7E64209D5A925F88LL, q_PDO_PARAM_STR, "PARAM_STR");
      break;
    case 138:
      HASH_RETURN(0x45AB9806DE21EA8ALL, q_PDO_ATTR_CURSOR, "ATTR_CURSOR");
      break;
    case 141:
      HASH_RETURN(0x0EDB017494A81E8DLL, q_PDO_ATTR_DRIVER_NAME, "ATTR_DRIVER_NAME");
      break;
    case 142:
      HASH_RETURN(0x126B3038F3355A8ELL, q_PDO_FETCH_USE_DEFAULT, "FETCH_USE_DEFAULT");
      break;
    case 143:
      HASH_RETURN(0x1F200B094608BE8FLL, q_PDO_ATTR_SERVER_VERSION, "ATTR_SERVER_VERSION");
      HASH_RETURN(0x1175C5F56147488FLL, q_PDO_MYSQL_ATTR_DIRECT_QUERY, "MYSQL_ATTR_DIRECT_QUERY");
      break;
    case 150:
      HASH_RETURN(0x25BE9238386C2796LL, q_PDO_FETCH_PROPS_LATE, "FETCH_PROPS_LATE");
      break;
    case 153:
      HASH_RETURN(0x657BEA5F741C4999LL, q_PDO_FETCH_COLUMN, "FETCH_COLUMN");
      HASH_RETURN(0x18B801DE8D8C9099LL, q_PDO_FETCH_CLASSTYPE, "FETCH_CLASSTYPE");
      break;
    case 156:
      HASH_RETURN(0x1EC178DF86F4FD9CLL, q_PDO_FETCH_SERIALIZE, "FETCH_SERIALIZE");
      break;
    case 160:
      HASH_RETURN(0x052245CE02FBF4A0LL, q_PDO_MYSQL_ATTR_LOCAL_INFILE, "MYSQL_ATTR_LOCAL_INFILE");
      break;
    case 162:
      HASH_RETURN(0x28D5B850B76FEEA2LL, q_PDO_FETCH_BOTH, "FETCH_BOTH");
      HASH_RETURN(0x0D0BCCC6768A88A2LL, q_PDO_FETCH_KEY_PAIR, "FETCH_KEY_PAIR");
      break;
    case 164:
      HASH_RETURN(0x6851B7545234FCA4LL, q_PDO_PARAM_EVT_FETCH_PRE, "PARAM_EVT_FETCH_PRE");
      break;
    case 168:
      HASH_RETURN(0x167DD614E842FAA8LL, q_PDO_CURSOR_FWDONLY, "CURSOR_FWDONLY");
      break;
    case 169:
      HASH_RETURN(0x6AEB66DE7A454FA9LL, q_PDO_FETCH_ORI_FIRST, "FETCH_ORI_FIRST");
      break;
    case 170:
      HASH_RETURN(0x392400A66B305EAALL, q_PDO_CURSOR_SCROLL, "CURSOR_SCROLL");
      break;
    case 171:
      HASH_RETURN(0x2F6AE87AF5701AABLL, q_PDO_FETCH_ORI_LAST, "FETCH_ORI_LAST");
      break;
    case 180:
      HASH_RETURN(0x56D59339A0F5D8B4LL, q_PDO_ATTR_PERSISTENT, "ATTR_PERSISTENT");
      break;
    case 184:
      HASH_RETURN(0x08657D6005DD08B8LL, q_PDO_NULL_EMPTY_STRING, "NULL_EMPTY_STRING");
      break;
    case 197:
      HASH_RETURN(0x60CE39F6493319C5LL, q_PDO_ATTR_STRINGIFY_FETCHES, "ATTR_STRINGIFY_FETCHES");
      break;
    case 198:
      HASH_RETURN(0x61BD1667BB46C9C6LL, q_PDO_MYSQL_ATTR_READ_DEFAULT_FILE, "MYSQL_ATTR_READ_DEFAULT_FILE");
      break;
    case 200:
      HASH_RETURN(0x30D00303975C98C8LL, q_PDO_FETCH_FUNC, "FETCH_FUNC");
      HASH_RETURN(0x47D4494BE4FA26C8LL, q_PDO_FETCH_ORI_ABS, "FETCH_ORI_ABS");
      break;
    case 202:
      HASH_RETURN(0x29B68A596E0615CALL, q_PDO_NULL_TO_STRING, "NULL_TO_STRING");
      break;
    case 203:
      HASH_RETURN(0x73FAA1AA068D19CBLL, q_PDO_MYSQL_ATTR_MAX_BUFFER_SIZE, "MYSQL_ATTR_MAX_BUFFER_SIZE");
      break;
    case 208:
      HASH_RETURN(0x439351C7C64634D0LL, q_PDO_FETCH_CLASS, "FETCH_CLASS");
      break;
    case 209:
      HASH_RETURN(0x5C75BB222F23C4D1LL, q_PDO_FETCH_LAZY, "FETCH_LAZY");
      break;
    case 211:
      HASH_RETURN(0x57F9152D7EC3A5D3LL, q_PDO_MYSQL_ATTR_COMPRESS, "MYSQL_ATTR_COMPRESS");
      break;
    case 220:
      HASH_RETURN(0x4D1DDF7F772C54DCLL, q_PDO_ERRMODE_WARNING, "ERRMODE_WARNING");
      break;
    case 235:
      HASH_RETURN(0x2E4175EAAB1F75EBLL, q_PDO_ERRMODE_SILENT, "ERRMODE_SILENT");
      break;
    case 245:
      HASH_RETURN(0x16017F3F58821EF5LL, q_PDO_ERR_NONE, "ERR_NONE");
      break;
    case 246:
      HASH_RETURN(0x674F9B0D2030C3F6LL, q_PDO_PARAM_LOB, "PARAM_LOB");
      break;
    case 247:
      HASH_RETURN(0x16EC9F213D7F57F7LL, q_PDO_FETCH_NAMED, "FETCH_NAMED");
      break;
    case 248:
      HASH_RETURN(0x6C0021FD5D20A1F8LL, q_PDO_PARAM_INPUT_OUTPUT, "PARAM_INPUT_OUTPUT");
      break;
    case 251:
      HASH_RETURN(0x13EC16B8F7B7B1FBLL, q_PDO_MYSQL_ATTR_IGNORE_SPACE, "MYSQL_ATTR_IGNORE_SPACE");
      break;
    case 253:
      HASH_RETURN(0x51938FCA0AE827FDLL, q_PDO_PARAM_STMT, "PARAM_STMT");
      break;
    case 254:
      HASH_RETURN(0x56335EC3392D8EFELL, q_PDO_PARAM_EVT_FREE, "PARAM_EVT_FREE");
      break;
    default:
      break;
  }
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_PDO
IMPLEMENT_CLASS(PDO)
ObjectData *c_PDO::cloneImpl() {
  ObjectData *obj = coo_PDO();
  c_PDO::cloneSet(obj);
  return obj;
}
void c_PDO::cloneSet(ObjectData *cl) {
  c_PDO *clone = static_cast<c_PDO*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_PDO::ci_errorcode((void*)&c_PDO::i_errorcode, (void*)&c_PDO::ifa_errorcode, 0, 4, 0x0000000000000000LL);
CallInfo c_PDO::ci_getattribute((void*)&c_PDO::i_getattribute, (void*)&c_PDO::ifa_getattribute, 1, 4, 0x0000000000000000LL);
CallInfo c_PDO::ci_exec((void*)&c_PDO::i_exec, (void*)&c_PDO::ifa_exec, 1, 4, 0x0000000000000000LL);
CallInfo c_PDO::ci_lastinsertid((void*)&c_PDO::i_lastinsertid, (void*)&c_PDO::ifa_lastinsertid, 1, 4, 0x0000000000000000LL);
CallInfo c_PDO::ci___destruct((void*)&c_PDO::i___destruct, (void*)&c_PDO::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_PDO::ci___wakeup((void*)&c_PDO::i___wakeup, (void*)&c_PDO::ifa___wakeup, 0, 4, 0x0000000000000000LL);
CallInfo c_PDO::ci___construct((void*)&c_PDO::i___construct, (void*)&c_PDO::ifa___construct, 4, 4, 0x0000000000000000LL);
CallInfo c_PDO::ci_query((void*)&c_PDO::i_query, (void*)&c_PDO::ifa_query, 1, 4, 0x0000000000000000LL);
CallInfo c_PDO::ci_rollback((void*)&c_PDO::i_rollback, (void*)&c_PDO::ifa_rollback, 0, 4, 0x0000000000000000LL);
CallInfo c_PDO::ci_commit((void*)&c_PDO::i_commit, (void*)&c_PDO::ifa_commit, 0, 4, 0x0000000000000000LL);
CallInfo c_PDO::ci_getavailabledrivers((void*)&c_PDO::i_getavailabledrivers, (void*)&c_PDO::ifa_getavailabledrivers, 0, 12, 0x0000000000000000LL);
CallInfo c_PDO::ci_quote((void*)&c_PDO::i_quote, (void*)&c_PDO::ifa_quote, 2, 4, 0x0000000000000000LL);
CallInfo c_PDO::ci_setattribute((void*)&c_PDO::i_setattribute, (void*)&c_PDO::ifa_setattribute, 2, 4, 0x0000000000000000LL);
CallInfo c_PDO::ci_begintransaction((void*)&c_PDO::i_begintransaction, (void*)&c_PDO::ifa_begintransaction, 0, 4, 0x0000000000000000LL);
CallInfo c_PDO::ci_prepare((void*)&c_PDO::i_prepare, (void*)&c_PDO::ifa_prepare, 2, 4, 0x0000000000000000LL);
CallInfo c_PDO::ci_errorinfo((void*)&c_PDO::i_errorinfo, (void*)&c_PDO::ifa_errorinfo, 0, 4, 0x0000000000000000LL);
CallInfo c_PDO::ci___sleep((void*)&c_PDO::i___sleep, (void*)&c_PDO::ifa___sleep, 0, 4, 0x0000000000000000LL);
Variant c_PDO::i_errorcode(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_errorcode, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("errorcode", 0, 1);
  return (self->t_errorcode());
}
Variant c_PDO::i_getattribute(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getattribute, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getattribute", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getattribute(arg0));
  }
}
Variant c_PDO::i_exec(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_exec, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("exec", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_exec(arg0));
  }
}
Variant c_PDO::i_lastinsertid(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_lastinsertid, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("lastinsertid", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_lastinsertid());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_lastinsertid(arg0));
  }
}
Variant c_PDO::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_PDO::i___wakeup(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___wakeup, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__wakeup", 0, 1);
  return (self->t___wakeup());
}
Variant c_PDO::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("__construct", count, 1, 4, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t___construct(arg0), null);
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t___construct(arg0, arg1), null);
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t___construct(arg0, arg1, arg2), null);
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___construct(arg0, arg1, arg2, arg3), null);
  }
}
Variant c_PDO::i_query(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_query, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("query", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_query(arg0));
  }
}
Variant c_PDO::i_rollback(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_rollback, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("rollback", 0, 1);
  return (self->t_rollback());
}
Variant c_PDO::i_commit(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_commit, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("commit", 0, 1);
  return (self->t_commit());
}
Variant c_PDO::i_getavailabledrivers(MethodCallPackage &mcp, CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getavailabledrivers", 0, 1);
  return (c_PDO::t_getavailabledrivers());
}
Variant c_PDO::i_quote(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_quote, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("quote", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_quote(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_quote(arg0, arg1));
  }
}
Variant c_PDO::i_setattribute(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setattribute, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("setattribute", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_setattribute(arg0, arg1));
  }
}
Variant c_PDO::i_begintransaction(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_begintransaction, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("begintransaction", 0, 1);
  return (self->t_begintransaction());
}
Variant c_PDO::i_prepare(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_prepare, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("prepare", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_prepare(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_prepare(arg0, arg1));
  }
}
Variant c_PDO::i_errorinfo(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_errorinfo, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("errorinfo", 0, 1);
  return (self->t_errorinfo());
}
Variant c_PDO::i___sleep(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___sleep, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__sleep", 0, 1);
  return (self->t___sleep());
}
Variant c_PDO::ifa_errorcode(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_errorcode, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("errorcode", 0, 1);
  return (self->t_errorcode());
}
Variant c_PDO::ifa_getattribute(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getattribute, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getattribute", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_getattribute(arg0));
}
Variant c_PDO::ifa_exec(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_exec, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("exec", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_exec(arg0));
}
Variant c_PDO::ifa_lastinsertid(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_lastinsertid, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("lastinsertid", 1, 1);
  if (count <= 0) return (self->t_lastinsertid());
  CVarRef arg0(a0);
  return (self->t_lastinsertid(arg0));
}
Variant c_PDO::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_PDO::ifa___wakeup(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___wakeup, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__wakeup", 0, 1);
  return (self->t___wakeup());
}
Variant c_PDO::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("__construct", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t___construct(arg0), null);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t___construct(arg0, arg1), null);
  CVarRef arg2(a2);
  if (count <= 3) return (self->t___construct(arg0, arg1, arg2), null);
  CVarRef arg3(a3);
  return (self->t___construct(arg0, arg1, arg2, arg3), null);
}
Variant c_PDO::ifa_query(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_query, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("query", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_query(arg0));
}
Variant c_PDO::ifa_rollback(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_rollback, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("rollback", 0, 1);
  return (self->t_rollback());
}
Variant c_PDO::ifa_commit(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_commit, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("commit", 0, 1);
  return (self->t_commit());
}
Variant c_PDO::ifa_getavailabledrivers(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getavailabledrivers", 0, 1);
  return (c_PDO::t_getavailabledrivers());
}
Variant c_PDO::ifa_quote(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_quote, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("quote", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_quote(arg0));
  CVarRef arg1(a1);
  return (self->t_quote(arg0, arg1));
}
Variant c_PDO::ifa_setattribute(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setattribute, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("setattribute", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_setattribute(arg0, arg1));
}
Variant c_PDO::ifa_begintransaction(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_begintransaction, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("begintransaction", 0, 1);
  return (self->t_begintransaction());
}
Variant c_PDO::ifa_prepare(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_prepare, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("prepare", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_prepare(arg0));
  CVarRef arg1(a1);
  return (self->t_prepare(arg0, arg1));
}
Variant c_PDO::ifa_errorinfo(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_errorinfo, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("errorinfo", 0, 1);
  return (self->t_errorinfo());
}
Variant c_PDO::ifa___sleep(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___sleep, coo_PDO);
  }
  c_PDO *self ATTRIBUTE_UNUSED (static_cast<c_PDO*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__sleep", 0, 1);
  return (self->t___sleep());
}
const MethodCallInfoTable c_PDO::s_call_info_table[] = {
  { 0x6D0664CC2372F2C7LL, 1, 9, "errorcode", &c_PDO::ci_errorcode },
  { 0x1D5B8B8144F4AB8ALL, 1, 12, "setattribute", &c_PDO::ci_setattribute },
  { 0x4F1D1ED7B087208CLL, 1, 4, "exec", &c_PDO::ci_exec },
  { 0x7FF4D594AC38340ELL, 1, 19, "getavailabledrivers", &c_PDO::ci_getavailabledrivers },
  { 0x25466EABBA2D7C12LL, 1, 12, "lastinsertid", &c_PDO::ci_lastinsertid },
  { 0x4389F50CAA085CDCLL, 1, 8, "__wakeup", &c_PDO::ci___wakeup },
  { 0x1DDD412E7F04605ELL, 1, 9, "errorinfo", &c_PDO::ci_errorinfo },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_PDO::ci___construct },
  { 0x24D23BE465E3F324LL, 1, 6, "commit", &c_PDO::ci_commit },
  { 0x49F89C466612FC28LL, 1, 12, "getattribute", &c_PDO::ci_getattribute },
  { 0x61D1244DDADBC02DLL, 1, 7, "__sleep", &c_PDO::ci___sleep },
  { 0x1740B14E849464EELL, 1, 5, "quote", &c_PDO::ci_quote },
  { 0x540020AE4BA591AFLL, 1, 7, "prepare", &c_PDO::ci_prepare },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_PDO::ci___destruct },
  { 0x374B46BC6D79EC36LL, 1, 8, "rollback", &c_PDO::ci_rollback },
  { 0x356758D4414DA377LL, 1, 5, "query", &c_PDO::ci_query },
  { 0x0DE392135C33E23BLL, 1, 16, "begintransaction", &c_PDO::ci_begintransaction },
  { 0, 1, 0, 0 }
};
const int c_PDO::s_call_info_index[] = {
  63,
  -1,-1,-1,-1,-1,-1,-1,0,
  -1,-1,1,-1,2,-1,3,-1,
  -1,-1,4,-1,-1,-1,-1,-1,
  -1,-1,-1,-1,5,-1,6,7,
  -1,-1,-1,-1,8,-1,-1,-1,
  9,-1,-1,-1,-1,10,11,12,
  -1,-1,-1,13,-1,-1,14,15,
  -1,-1,-1,16,-1,-1,-1,-1,

};
c_PDO *c_PDO::create(String a0, String a1, String a2, Array a3) {
  CountableHelper h(this);
  init();
  t___construct(a0, a1, a2, a3);
  return this;
}
void c_PDO::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 4)) throw_wrong_arguments("__construct", count, 1, 4, 2);
  do {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) {
      (t___construct(arg0));
      break;
    }
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) {
      (t___construct(arg0, arg1));
      break;
    }
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) {
      (t___construct(arg0, arg1, arg2));
      break;
    }
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    (t___construct(arg0, arg1, arg2, arg3));
  } while (false);
}
void c_PDO::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_PDO::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_PDO = {
  c_PDO::os_getInit,
  c_PDO::os_get,
  c_PDO::os_lval,
  c_PDO::os_invoke,
  c_PDO::os_constant,
  (ObjectData*(*)(ObjectData*))coo_PDO,
  c_PDO::s_call_info_table,c_PDO::s_call_info_index,
  "PDO",
  0
};
ObjectData *coo_ImageSprite() {
  return NEWOBJ(c_ImageSprite)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_ImageSprite
Variant c_ImageSprite::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_ImageSprite
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_ImageSprite
Variant c_ImageSprite::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_ImageSprite
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_ImageSprite
Variant &c_ImageSprite::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_ImageSprite
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_ImageSprite
Variant * c_ImageSprite::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_ImageSprite
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_ImageSprite
Variant * c_ImageSprite::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_ImageSprite
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_ImageSprite
Variant * c_ImageSprite::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_ImageSprite
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_ImageSprite
Variant c_ImageSprite::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_ImageSprite
IMPLEMENT_CLASS(ImageSprite)
ObjectData *c_ImageSprite::cloneImpl() {
  ObjectData *obj = coo_ImageSprite();
  c_ImageSprite::cloneSet(obj);
  return obj;
}
void c_ImageSprite::cloneSet(ObjectData *cl) {
  c_ImageSprite *clone = static_cast<c_ImageSprite*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_ImageSprite::ci_addstring((void*)&c_ImageSprite::i_addstring, (void*)&c_ImageSprite::ifa_addstring, 3, 4, 0x0000000000000000LL);
CallInfo c_ImageSprite::ci_loaddims((void*)&c_ImageSprite::i_loaddims, (void*)&c_ImageSprite::ifa_loaddims, 1, 4, 0x0000000000000000LL);
CallInfo c_ImageSprite::ci___destruct((void*)&c_ImageSprite::i___destruct, (void*)&c_ImageSprite::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_ImageSprite::ci_mapping((void*)&c_ImageSprite::i_mapping, (void*)&c_ImageSprite::ifa_mapping, 0, 4, 0x0000000000000000LL);
CallInfo c_ImageSprite::ci___construct((void*)&c_ImageSprite::i___construct, (void*)&c_ImageSprite::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_ImageSprite::ci_css((void*)&c_ImageSprite::i_css, (void*)&c_ImageSprite::ifa_css, 4, 4, 0x0000000000000000LL);
CallInfo c_ImageSprite::ci_output((void*)&c_ImageSprite::i_output, (void*)&c_ImageSprite::ifa_output, 3, 4, 0x0000000000000000LL);
CallInfo c_ImageSprite::ci_loadimages((void*)&c_ImageSprite::i_loadimages, (void*)&c_ImageSprite::ifa_loadimages, 1, 4, 0x0000000000000000LL);
CallInfo c_ImageSprite::ci_clear((void*)&c_ImageSprite::i_clear, (void*)&c_ImageSprite::ifa_clear, 1, 4, 0x0000000000000000LL);
CallInfo c_ImageSprite::ci_geterrors((void*)&c_ImageSprite::i_geterrors, (void*)&c_ImageSprite::ifa_geterrors, 0, 4, 0x0000000000000000LL);
CallInfo c_ImageSprite::ci_addurl((void*)&c_ImageSprite::i_addurl, (void*)&c_ImageSprite::ifa_addurl, 3, 4, 0x0000000000000000LL);
CallInfo c_ImageSprite::ci_addfile((void*)&c_ImageSprite::i_addfile, (void*)&c_ImageSprite::ifa_addfile, 2, 4, 0x0000000000000000LL);
Variant c_ImageSprite::i_addstring(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_addstring, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("addstring", count, 2, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_addstring(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_addstring(arg0, arg1, arg2));
  }
}
Variant c_ImageSprite::i_loaddims(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_loaddims, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("loaddims", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_loaddims());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_loaddims(arg0));
  }
}
Variant c_ImageSprite::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_ImageSprite::i_mapping(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_mapping, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("mapping", 0, 1);
  return (self->t_mapping());
}
Variant c_ImageSprite::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_ImageSprite::i_css(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_css, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("css", count, 1, 4, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_css(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_css(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_css(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_css(arg0, arg1, arg2, arg3));
  }
}
Variant c_ImageSprite::i_output(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_output, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("output", 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_output());
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_output(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_output(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_output(arg0, arg1, arg2));
  }
}
Variant c_ImageSprite::i_loadimages(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_loadimages, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("loadimages", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_loadimages());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_loadimages(arg0));
  }
}
Variant c_ImageSprite::i_clear(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_clear, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("clear", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_clear());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_clear(arg0));
  }
}
Variant c_ImageSprite::i_geterrors(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_geterrors, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("geterrors", 0, 1);
  return (self->t_geterrors());
}
Variant c_ImageSprite::i_addurl(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_addurl, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("addurl", count, 1, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_addurl(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_addurl(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_addurl(arg0, arg1, arg2));
  }
}
Variant c_ImageSprite::i_addfile(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_addfile, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("addfile", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_addfile(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_addfile(arg0, arg1));
  }
}
Variant c_ImageSprite::ifa_addstring(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_addstring, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("addstring", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_addstring(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_addstring(arg0, arg1, arg2));
}
Variant c_ImageSprite::ifa_loaddims(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_loaddims, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("loaddims", 1, 1);
  if (count <= 0) return (self->t_loaddims());
  CVarRef arg0(a0);
  return (self->t_loaddims(arg0));
}
Variant c_ImageSprite::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_ImageSprite::ifa_mapping(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_mapping, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("mapping", 0, 1);
  return (self->t_mapping());
}
Variant c_ImageSprite::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_ImageSprite::ifa_css(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_css, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("css", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_css(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_css(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_css(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (self->t_css(arg0, arg1, arg2, arg3));
}
Variant c_ImageSprite::ifa_output(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_output, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("output", 3, 1);
  if (count <= 0) return (self->t_output());
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_output(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_output(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_output(arg0, arg1, arg2));
}
Variant c_ImageSprite::ifa_loadimages(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_loadimages, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("loadimages", 1, 1);
  if (count <= 0) return (self->t_loadimages());
  CVarRef arg0(a0);
  return (self->t_loadimages(arg0));
}
Variant c_ImageSprite::ifa_clear(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_clear, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("clear", 1, 1);
  if (count <= 0) return (self->t_clear());
  CVarRef arg0(a0);
  return (self->t_clear(arg0));
}
Variant c_ImageSprite::ifa_geterrors(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_geterrors, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("geterrors", 0, 1);
  return (self->t_geterrors());
}
Variant c_ImageSprite::ifa_addurl(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_addurl, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("addurl", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_addurl(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_addurl(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_addurl(arg0, arg1, arg2));
}
Variant c_ImageSprite::ifa_addfile(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_addfile, coo_ImageSprite);
  }
  c_ImageSprite *self ATTRIBUTE_UNUSED (static_cast<c_ImageSprite*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("addfile", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_addfile(arg0));
  CVarRef arg1(a1);
  return (self->t_addfile(arg0, arg1));
}
const MethodCallInfoTable c_ImageSprite::s_call_info_table[] = {
  { 0x05D2634BA4310200LL, 1, 9, "getErrors", &c_ImageSprite::ci_geterrors },
  { 0x6A37A496C57D57A2LL, 1, 8, "loadDims", &c_ImageSprite::ci_loaddims },
  { 0x31DA235C5A226667LL, 1, 5, "clear", &c_ImageSprite::ci_clear },
  { 0x13A96E5A21D1906FLL, 1, 7, "addFile", &c_ImageSprite::ci_addfile },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_ImageSprite::ci___destruct },
  { 0x305D94BB2EC0B554LL, 1, 10, "loadImages", &c_ImageSprite::ci_loadimages },
  { 0x4D8226FDFA2CA297LL, 1, 7, "mapping", &c_ImageSprite::ci_mapping },
  { 0x386BF72B932D233ALL, 1, 9, "addString", &c_ImageSprite::ci_addstring },
  { 0x63388F643871547CLL, 1, 3, "css", &c_ImageSprite::ci_css },
  { 0x79CFC8610DC84A7DLL, 1, 6, "addUrl", &c_ImageSprite::ci_addurl },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_ImageSprite::ci___construct },
  { 0x07B89E83B77C677FLL, 0, 6, "output", &c_ImageSprite::ci_output },
  { 0, 1, 0, 0 }
};
const int c_ImageSprite::s_call_info_index[] = {
  31,
  0,-1,1,-1,-1,-1,-1,2,
  -1,-1,-1,-1,-1,-1,-1,3,
  -1,-1,-1,4,5,-1,-1,6,
  -1,-1,7,-1,8,9,-1,10,

};
c_ImageSprite *c_ImageSprite::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_ImageSprite::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_ImageSprite::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_ImageSprite::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_ImageSprite = {
  c_ImageSprite::os_getInit,
  c_ImageSprite::os_get,
  c_ImageSprite::os_lval,
  c_ImageSprite::os_invoke,
  c_ImageSprite::os_constant,
  (ObjectData*(*)(ObjectData*))coo_ImageSprite,
  c_ImageSprite::s_call_info_table,c_ImageSprite::s_call_info_index,
  "ImageSprite",
  0
};
ObjectData *coo_Continuation() {
  return NEWOBJ(c_Continuation)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_Continuation
Variant c_Continuation::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_Continuation
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_Continuation
Variant c_Continuation::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_Continuation
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_Continuation
Variant &c_Continuation::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_Continuation
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_Continuation
Variant * c_Continuation::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  CStrRef s = context.isNull() ? FrameInjection::GetClassName(false) : context;
  int64 hash = s->hash();
  switch (hash & 1) {
    case 0:
      HASH_GUARD_STRING(0x61DD21ABF790E9E2LL, Continuation) { return o_realPropPrivate(prop, flags); }
      break;
    default:
      break;
  }
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_Continuation
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_Continuation
Variant * c_Continuation::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_Continuation
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_Continuation
Variant * c_Continuation::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_Continuation
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_Continuation
Variant c_Continuation::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_Continuation
IMPLEMENT_CLASS(Continuation)
ObjectData *c_Continuation::cloneImpl() {
  ObjectData *obj = coo_Continuation();
  c_Continuation::cloneSet(obj);
  return obj;
}
void c_Continuation::cloneSet(ObjectData *cl) {
  c_Continuation *clone = static_cast<c_Continuation*>(cl);
  ObjectData::cloneSet(clone);
  clone->m_obj = m_obj;
  clone->m_args = m_args;
  clone->m_label = m_label;
  clone->m_index = m_index;
  clone->m_value.setWithRef(m_value);
  clone->m_received.setWithRef(m_received);
  clone->m_origFuncName = m_origFuncName;
  clone->m_called_class = m_called_class;
  clone->m_done = m_done;
  clone->m_running = m_running;
}
CallInfo c_Continuation::ci_raised((void*)&c_Continuation::i_raised, (void*)&c_Continuation::ifa_raised, 0, 4, 0x0000000000000000LL);
CallInfo c_Continuation::ci_next((void*)&c_Continuation::i_next, (void*)&c_Continuation::ifa_next, 0, 4, 0x0000000000000000LL);
CallInfo c_Continuation::ci_raise((void*)&c_Continuation::i_raise, (void*)&c_Continuation::ifa_raise, 1, 4, 0x0000000000000000LL);
CallInfo c_Continuation::ci_key((void*)&c_Continuation::i_key, (void*)&c_Continuation::ifa_key, 0, 4, 0x0000000000000000LL);
CallInfo c_Continuation::ci_getlabel((void*)&c_Continuation::i_getlabel, (void*)&c_Continuation::ifa_getlabel, 0, 4, 0x0000000000000000LL);
CallInfo c_Continuation::ci_valid((void*)&c_Continuation::i_valid, (void*)&c_Continuation::ifa_valid, 0, 4, 0x0000000000000000LL);
CallInfo c_Continuation::ci_get_args((void*)&c_Continuation::i_get_args, (void*)&c_Continuation::ifa_get_args, 0, 4, 0x0000000000000000LL);
CallInfo c_Continuation::ci___destruct((void*)&c_Continuation::i___destruct, (void*)&c_Continuation::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_Continuation::ci_getorigfuncname((void*)&c_Continuation::i_getorigfuncname, (void*)&c_Continuation::ifa_getorigfuncname, 0, 4, 0x0000000000000000LL);
CallInfo c_Continuation::ci_get_arg((void*)&c_Continuation::i_get_arg, (void*)&c_Continuation::ifa_get_arg, 1, 4, 0x0000000000000000LL);
CallInfo c_Continuation::ci___construct((void*)&c_Continuation::i___construct, (void*)&c_Continuation::ifa___construct, 6, 4, 0x0000000000000000LL);
CallInfo c_Continuation::ci_done((void*)&c_Continuation::i_done, (void*)&c_Continuation::ifa_done, 0, 4, 0x0000000000000000LL);
CallInfo c_Continuation::ci___clone((void*)&c_Continuation::i___clone, (void*)&c_Continuation::ifa___clone, 0, 4, 0x0000000000000000LL);
CallInfo c_Continuation::ci_num_args((void*)&c_Continuation::i_num_args, (void*)&c_Continuation::ifa_num_args, 0, 4, 0x0000000000000000LL);
CallInfo c_Continuation::ci_receive((void*)&c_Continuation::i_receive, (void*)&c_Continuation::ifa_receive, 0, 4, 0x0000000000000000LL);
CallInfo c_Continuation::ci_current((void*)&c_Continuation::i_current, (void*)&c_Continuation::ifa_current, 0, 4, 0x0000000000000000LL);
CallInfo c_Continuation::ci_send((void*)&c_Continuation::i_send, (void*)&c_Continuation::ifa_send, 1, 4, 0x0000000000000000LL);
CallInfo c_Continuation::ci_rewind((void*)&c_Continuation::i_rewind, (void*)&c_Continuation::ifa_rewind, 0, 4, 0x0000000000000000LL);
CallInfo c_Continuation::ci_update((void*)&c_Continuation::i_update, (void*)&c_Continuation::ifa_update, 2, 4, 0x0000000000000000LL);
Variant c_Continuation::i_raised(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_raised, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("raised", 0, 1);
  return (self->t_raised(), null);
}
Variant c_Continuation::i_next(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_next, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("next", 0, 1);
  return (self->t_next(), null);
}
Variant c_Continuation::i_raise(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_raise, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("raise", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_raise(arg0), null);
  }
}
Variant c_Continuation::i_key(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_key, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("key", 0, 1);
  return (self->t_key());
}
Variant c_Continuation::i_getlabel(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getlabel, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getlabel", 0, 1);
  return (self->t_getlabel());
}
Variant c_Continuation::i_valid(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_valid, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("valid", 0, 1);
  return (self->t_valid());
}
Variant c_Continuation::i_get_args(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_get_args, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("get_args", 0, 1);
  return (self->t_get_args());
}
Variant c_Continuation::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_Continuation::i_getorigfuncname(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getorigfuncname, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getorigfuncname", 0, 1);
  return (self->t_getorigfuncname());
}
Variant c_Continuation::i_get_arg(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_get_arg, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("get_arg", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_get_arg(arg0));
  }
}
Variant c_Continuation::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 4 || count > 6)) return throw_wrong_arguments("__construct", count, 4, 6, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (self->t___construct(arg0, arg1, arg2, arg3), null);
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 5) return (self->t___construct(arg0, arg1, arg2, arg3, arg4), null);
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___construct(arg0, arg1, arg2, arg3, arg4, arg5), null);
  }
}
Variant c_Continuation::i_done(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_done, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("done", 0, 1);
  return (self->t_done(), null);
}
Variant c_Continuation::i___clone(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___clone, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__clone", 0, 1);
  return (self->t___clone());
}
Variant c_Continuation::i_num_args(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_num_args, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("num_args", 0, 1);
  return (self->t_num_args());
}
Variant c_Continuation::i_receive(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_receive, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("receive", 0, 1);
  return (self->t_receive());
}
Variant c_Continuation::i_current(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_current, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("current", 0, 1);
  return (self->t_current());
}
Variant c_Continuation::i_send(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_send, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("send", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_send(arg0), null);
  }
}
Variant c_Continuation::i_rewind(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_rewind, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("rewind", 0, 1);
  return (self->t_rewind(), null);
}
Variant c_Continuation::i_update(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_update, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("update", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_update(arg0, arg1), null);
  }
}
Variant c_Continuation::ifa_raised(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_raised, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("raised", 0, 1);
  return (self->t_raised(), null);
}
Variant c_Continuation::ifa_next(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_next, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("next", 0, 1);
  return (self->t_next(), null);
}
Variant c_Continuation::ifa_raise(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_raise, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("raise", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_raise(arg0), null);
}
Variant c_Continuation::ifa_key(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_key, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("key", 0, 1);
  return (self->t_key());
}
Variant c_Continuation::ifa_getlabel(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getlabel, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getlabel", 0, 1);
  return (self->t_getlabel());
}
Variant c_Continuation::ifa_valid(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_valid, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("valid", 0, 1);
  return (self->t_valid());
}
Variant c_Continuation::ifa_get_args(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_get_args, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("get_args", 0, 1);
  return (self->t_get_args());
}
Variant c_Continuation::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_Continuation::ifa_getorigfuncname(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getorigfuncname, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getorigfuncname", 0, 1);
  return (self->t_getorigfuncname());
}
Variant c_Continuation::ifa_get_arg(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_get_arg, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("get_arg", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_get_arg(arg0));
}
Variant c_Continuation::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  if (UNLIKELY(count < 4)) return throw_wrong_arguments("__construct", count, 4, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  if (count <= 4) return (self->t___construct(arg0, arg1, arg2, arg3), null);
  CVarRef arg4(a4);
  if (count <= 5) return (self->t___construct(arg0, arg1, arg2, arg3, arg4), null);
  CVarRef arg5(a5);
  return (self->t___construct(arg0, arg1, arg2, arg3, arg4, arg5), null);
}
Variant c_Continuation::ifa_done(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_done, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("done", 0, 1);
  return (self->t_done(), null);
}
Variant c_Continuation::ifa___clone(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___clone, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__clone", 0, 1);
  return (self->t___clone());
}
Variant c_Continuation::ifa_num_args(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_num_args, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("num_args", 0, 1);
  return (self->t_num_args());
}
Variant c_Continuation::ifa_receive(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_receive, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("receive", 0, 1);
  return (self->t_receive());
}
Variant c_Continuation::ifa_current(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_current, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("current", 0, 1);
  return (self->t_current());
}
Variant c_Continuation::ifa_send(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_send, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("send", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_send(arg0), null);
}
Variant c_Continuation::ifa_rewind(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_rewind, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("rewind", 0, 1);
  return (self->t_rewind(), null);
}
Variant c_Continuation::ifa_update(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_update, coo_Continuation);
  }
  c_Continuation *self ATTRIBUTE_UNUSED (static_cast<c_Continuation*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("update", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_update(arg0, arg1), null);
}
const MethodCallInfoTable c_Continuation::s_call_info_table[] = {
  { 0x6413CB5154808C44LL, 1, 5, "valid", &c_Continuation::ci_valid },
  { 0x3E0170A7802E3888LL, 1, 4, "send", &c_Continuation::ci_send },
  { 0x46B58F7989D255CALL, 1, 6, "raised", &c_Continuation::ci_raised },
  { 0x0B7AD2197102D150LL, 1, 7, "receive", &c_Continuation::ci_receive },
  { 0x56EDB60C824E8C51LL, 1, 3, "key", &c_Continuation::ci_key },
  { 0x0F2CA10C0004BE9BLL, 1, 7, "__clone", &c_Continuation::ci___clone },
  { 0x5B3A4A72846B21DCLL, 1, 7, "current", &c_Continuation::ci_current },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_Continuation::ci___construct },
  { 0x1402C6C4A8D472A0LL, 1, 6, "update", &c_Continuation::ci_update },
  { 0x00AADC9BD6EEF867LL, 1, 5, "raise", &c_Continuation::ci_raise },
  { 0x5B300BEBB6379169LL, 1, 4, "done", &c_Continuation::ci_done },
  { 0x1670096FDE27AF6ALL, 1, 6, "rewind", &c_Continuation::ci_rewind },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_Continuation::ci___destruct },
  { 0x3C6D50F3BB8102B8LL, 1, 4, "next", &c_Continuation::ci_next },
  { 0x05B742E84600B778LL, 0, 8, "getLabel", &c_Continuation::ci_getlabel },
  { 0x5A90056E9F9DC839LL, 1, 8, "get_args", &c_Continuation::ci_get_args },
  { 0x2E51CF4A716D82BALL, 1, 15, "getOrigFuncName", &c_Continuation::ci_getorigfuncname },
  { 0x45F223F256990E3DLL, 1, 7, "get_arg", &c_Continuation::ci_get_arg },
  { 0x59E62E16AF84FCFDLL, 0, 8, "num_args", &c_Continuation::ci_num_args },
  { 0, 1, 0, 0 }
};
const int c_Continuation::s_call_info_index[] = {
  63,
  -1,-1,-1,-1,0,-1,-1,-1,
  1,-1,2,-1,-1,-1,-1,-1,
  3,4,-1,-1,-1,-1,-1,-1,
  -1,-1,-1,5,6,-1,-1,7,
  8,-1,-1,-1,-1,-1,-1,9,
  -1,10,11,-1,-1,-1,-1,-1,
  -1,-1,-1,12,-1,-1,-1,-1,
  13,15,16,-1,-1,17,-1,-1,

};
c_Continuation *c_Continuation::create(int64 a0, int64 a1, bool a2, String a3, Variant a4, Array a5) {
  CountableHelper h(this);
  init();
  t___construct(a0, a1, a2, a3, a4, a5);
  return this;
}
void c_Continuation::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 4 || count > 6)) throw_wrong_arguments("__construct", count, 4, 6, 2);
  do {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) {
      (t___construct(arg0, arg1, arg2, arg3));
      break;
    }
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 5) {
      (t___construct(arg0, arg1, arg2, arg3, arg4));
      break;
    }
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    (t___construct(arg0, arg1, arg2, arg3, arg4, arg5));
  } while (false);
}
void c_Continuation::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_Continuation::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_Continuation = {
  c_Continuation::os_getInit,
  c_Continuation::os_get,
  c_Continuation::os_lval,
  c_Continuation::os_invoke,
  c_Continuation::os_constant,
  (ObjectData*(*)(ObjectData*))coo_Continuation,
  c_Continuation::s_call_info_table,c_Continuation::s_call_info_index,
  "Continuation",
  0
};
ObjectData *coo_DOMEntity() {
  return NEWOBJ(c_DOMEntity)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMEntity
Variant c_DOMEntity::os_getInit(CStrRef s) {
  return c_DOMNode::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMEntity
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMEntity
Variant c_DOMEntity::os_get(CStrRef s) {
  return c_DOMNode::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMEntity
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMEntity
Variant &c_DOMEntity::os_lval(CStrRef s) {
  return c_DOMNode::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMEntity
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DOMEntity
Variant * c_DOMEntity::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DOMEntity
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMEntity
Variant * c_DOMEntity::o_realPropPublic(CStrRef s, int flags) const {
  return c_DOMNode::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMEntity
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMEntity
Variant * c_DOMEntity::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMEntity
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMEntity
Variant c_DOMEntity::os_constant(const char *s) {
  return c_DOMNode::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMEntity
IMPLEMENT_CLASS(DOMEntity)
ObjectData *c_DOMEntity::cloneImpl() {
  ObjectData *obj = coo_DOMEntity();
  c_DOMEntity::cloneSet(obj);
  return obj;
}
void c_DOMEntity::cloneSet(ObjectData *cl) {
  c_DOMEntity *clone = static_cast<c_DOMEntity*>(cl);
  c_DOMNode::cloneSet(clone);
}
CallInfo c_DOMEntity::ci___destruct((void*)&c_DOMEntity::i___destruct, (void*)&c_DOMEntity::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMEntity::ci___set((void*)&c_DOMEntity::i___set, (void*)&c_DOMEntity::ifa___set, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMEntity::ci___construct((void*)&c_DOMEntity::i___construct, (void*)&c_DOMEntity::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMEntity::ci___get((void*)&c_DOMEntity::i___get, (void*)&c_DOMEntity::ifa___get, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMEntity::ci___isset((void*)&c_DOMEntity::i___isset, (void*)&c_DOMEntity::ifa___isset, 1, 4, 0x0000000000000000LL);
Variant c_DOMEntity::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_DOMEntity);
  }
  c_DOMEntity *self ATTRIBUTE_UNUSED (static_cast<c_DOMEntity*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMEntity::i___set(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___set, coo_DOMEntity);
  }
  c_DOMEntity *self ATTRIBUTE_UNUSED (static_cast<c_DOMEntity*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___set(arg0, arg1));
  }
}
Variant c_DOMEntity::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_DOMEntity);
  }
  c_DOMEntity *self ATTRIBUTE_UNUSED (static_cast<c_DOMEntity*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DOMEntity::i___get(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___get, coo_DOMEntity);
  }
  c_DOMEntity *self ATTRIBUTE_UNUSED (static_cast<c_DOMEntity*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___get(arg0));
  }
}
Variant c_DOMEntity::i___isset(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___isset, coo_DOMEntity);
  }
  c_DOMEntity *self ATTRIBUTE_UNUSED (static_cast<c_DOMEntity*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___isset(arg0));
  }
}
Variant c_DOMEntity::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_DOMEntity);
  }
  c_DOMEntity *self ATTRIBUTE_UNUSED (static_cast<c_DOMEntity*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMEntity::ifa___set(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___set, coo_DOMEntity);
  }
  c_DOMEntity *self ATTRIBUTE_UNUSED (static_cast<c_DOMEntity*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t___set(arg0, arg1));
}
Variant c_DOMEntity::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_DOMEntity);
  }
  c_DOMEntity *self ATTRIBUTE_UNUSED (static_cast<c_DOMEntity*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DOMEntity::ifa___get(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___get, coo_DOMEntity);
  }
  c_DOMEntity *self ATTRIBUTE_UNUSED (static_cast<c_DOMEntity*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___get(arg0));
}
Variant c_DOMEntity::ifa___isset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___isset, coo_DOMEntity);
  }
  c_DOMEntity *self ATTRIBUTE_UNUSED (static_cast<c_DOMEntity*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___isset(arg0));
}
const MethodCallInfoTable c_DOMEntity::s_call_info_table[] = {
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_DOMEntity::ci___destruct },
  { 0x52F3DAD783340395LL, 1, 5, "__set", &c_DOMEntity::ci___set },
  { 0x4FE08FDDAE2178EELL, 1, 7, "__isset", &c_DOMEntity::ci___isset },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_DOMEntity::ci___construct },
  { 0x26B6E00C74FA338FLL, 0, 5, "__get", &c_DOMEntity::ci___get },
  { 0, 1, 0, 0 }
};
const int c_DOMEntity::s_call_info_index[] = {
  15,
  -1,-1,-1,0,-1,1,-1,-1,
  -1,-1,-1,-1,-1,-1,2,3,

};
c_DOMEntity *c_DOMEntity::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_DOMEntity::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_DOMEntity::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DOMEntity::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_DOMEntity = {
  c_DOMEntity::os_getInit,
  c_DOMEntity::os_get,
  c_DOMEntity::os_lval,
  c_DOMEntity::os_invoke,
  c_DOMEntity::os_constant,
  (ObjectData*(*)(ObjectData*))coo_DOMEntity,
  c_DOMEntity::s_call_info_table,c_DOMEntity::s_call_info_index,
  "DOMEntity",
  &cw_DOMNode
};
ObjectData *coo_XMLWriter() {
  return NEWOBJ(c_XMLWriter)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_XMLWriter
Variant c_XMLWriter::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_XMLWriter
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_XMLWriter
Variant c_XMLWriter::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_XMLWriter
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_XMLWriter
Variant &c_XMLWriter::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_XMLWriter
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_XMLWriter
Variant * c_XMLWriter::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_XMLWriter
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_XMLWriter
Variant * c_XMLWriter::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_XMLWriter
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_XMLWriter
Variant * c_XMLWriter::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_XMLWriter
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_XMLWriter
Variant c_XMLWriter::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_XMLWriter
IMPLEMENT_CLASS(XMLWriter)
ObjectData *c_XMLWriter::cloneImpl() {
  ObjectData *obj = coo_XMLWriter();
  c_XMLWriter::cloneSet(obj);
  return obj;
}
void c_XMLWriter::cloneSet(ObjectData *cl) {
  c_XMLWriter *clone = static_cast<c_XMLWriter*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_XMLWriter::ci_writeelementns((void*)&c_XMLWriter::i_writeelementns, (void*)&c_XMLWriter::ifa_writeelementns, 4, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_outputmemory((void*)&c_XMLWriter::i_outputmemory, (void*)&c_XMLWriter::ifa_outputmemory, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_enddtdattlist((void*)&c_XMLWriter::i_enddtdattlist, (void*)&c_XMLWriter::ifa_enddtdattlist, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_fullendelement((void*)&c_XMLWriter::i_fullendelement, (void*)&c_XMLWriter::ifa_fullendelement, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_startdocument((void*)&c_XMLWriter::i_startdocument, (void*)&c_XMLWriter::ifa_startdocument, 3, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_startdtdentity((void*)&c_XMLWriter::i_startdtdentity, (void*)&c_XMLWriter::ifa_startdtdentity, 2, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_endcdata((void*)&c_XMLWriter::i_endcdata, (void*)&c_XMLWriter::ifa_endcdata, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_writecomment((void*)&c_XMLWriter::i_writecomment, (void*)&c_XMLWriter::ifa_writecomment, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_writeattribute((void*)&c_XMLWriter::i_writeattribute, (void*)&c_XMLWriter::ifa_writeattribute, 2, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_endcomment((void*)&c_XMLWriter::i_endcomment, (void*)&c_XMLWriter::ifa_endcomment, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci___destruct((void*)&c_XMLWriter::i___destruct, (void*)&c_XMLWriter::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_writedtd((void*)&c_XMLWriter::i_writedtd, (void*)&c_XMLWriter::ifa_writedtd, 4, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci___construct((void*)&c_XMLWriter::i___construct, (void*)&c_XMLWriter::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_enddtdentity((void*)&c_XMLWriter::i_enddtdentity, (void*)&c_XMLWriter::ifa_enddtdentity, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_startattributens((void*)&c_XMLWriter::i_startattributens, (void*)&c_XMLWriter::ifa_startattributens, 3, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_startelement((void*)&c_XMLWriter::i_startelement, (void*)&c_XMLWriter::ifa_startelement, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_startelementns((void*)&c_XMLWriter::i_startelementns, (void*)&c_XMLWriter::ifa_startelementns, 3, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_startdtdelement((void*)&c_XMLWriter::i_startdtdelement, (void*)&c_XMLWriter::ifa_startdtdelement, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_enddocument((void*)&c_XMLWriter::i_enddocument, (void*)&c_XMLWriter::ifa_enddocument, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_writecdata((void*)&c_XMLWriter::i_writecdata, (void*)&c_XMLWriter::ifa_writecdata, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_writedtdelement((void*)&c_XMLWriter::i_writedtdelement, (void*)&c_XMLWriter::ifa_writedtdelement, 2, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_writeattributens((void*)&c_XMLWriter::i_writeattributens, (void*)&c_XMLWriter::ifa_writeattributens, 4, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_writepi((void*)&c_XMLWriter::i_writepi, (void*)&c_XMLWriter::ifa_writepi, 2, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_setindentstring((void*)&c_XMLWriter::i_setindentstring, (void*)&c_XMLWriter::ifa_setindentstring, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_startattribute((void*)&c_XMLWriter::i_startattribute, (void*)&c_XMLWriter::ifa_startattribute, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_writeelement((void*)&c_XMLWriter::i_writeelement, (void*)&c_XMLWriter::ifa_writeelement, 2, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_endelement((void*)&c_XMLWriter::i_endelement, (void*)&c_XMLWriter::ifa_endelement, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_writeraw((void*)&c_XMLWriter::i_writeraw, (void*)&c_XMLWriter::ifa_writeraw, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_writedtdentity((void*)&c_XMLWriter::i_writedtdentity, (void*)&c_XMLWriter::ifa_writedtdentity, 6, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_endpi((void*)&c_XMLWriter::i_endpi, (void*)&c_XMLWriter::ifa_endpi, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_startdtd((void*)&c_XMLWriter::i_startdtd, (void*)&c_XMLWriter::ifa_startdtd, 3, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_setindent((void*)&c_XMLWriter::i_setindent, (void*)&c_XMLWriter::ifa_setindent, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_enddtdelement((void*)&c_XMLWriter::i_enddtdelement, (void*)&c_XMLWriter::ifa_enddtdelement, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_startdtdattlist((void*)&c_XMLWriter::i_startdtdattlist, (void*)&c_XMLWriter::ifa_startdtdattlist, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_startcdata((void*)&c_XMLWriter::i_startcdata, (void*)&c_XMLWriter::ifa_startcdata, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_writedtdattlist((void*)&c_XMLWriter::i_writedtdattlist, (void*)&c_XMLWriter::ifa_writedtdattlist, 2, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_enddtd((void*)&c_XMLWriter::i_enddtd, (void*)&c_XMLWriter::ifa_enddtd, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_openuri((void*)&c_XMLWriter::i_openuri, (void*)&c_XMLWriter::ifa_openuri, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_openmemory((void*)&c_XMLWriter::i_openmemory, (void*)&c_XMLWriter::ifa_openmemory, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_endattribute((void*)&c_XMLWriter::i_endattribute, (void*)&c_XMLWriter::ifa_endattribute, 0, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_startpi((void*)&c_XMLWriter::i_startpi, (void*)&c_XMLWriter::ifa_startpi, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_text((void*)&c_XMLWriter::i_text, (void*)&c_XMLWriter::ifa_text, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_flush((void*)&c_XMLWriter::i_flush, (void*)&c_XMLWriter::ifa_flush, 1, 4, 0x0000000000000000LL);
CallInfo c_XMLWriter::ci_startcomment((void*)&c_XMLWriter::i_startcomment, (void*)&c_XMLWriter::ifa_startcomment, 0, 4, 0x0000000000000000LL);
Variant c_XMLWriter::i_writeelementns(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_writeelementns, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("writeelementns", count, 3, 4, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_writeelementns(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_writeelementns(arg0, arg1, arg2, arg3));
  }
}
Variant c_XMLWriter::i_outputmemory(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_outputmemory, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("outputmemory", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_outputmemory());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_outputmemory(arg0));
  }
}
Variant c_XMLWriter::i_enddtdattlist(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_enddtdattlist, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("enddtdattlist", 0, 1);
  return (self->t_enddtdattlist());
}
Variant c_XMLWriter::i_fullendelement(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_fullendelement, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("fullendelement", 0, 1);
  return (self->t_fullendelement());
}
Variant c_XMLWriter::i_startdocument(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_startdocument, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("startdocument", 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_startdocument());
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_startdocument(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_startdocument(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_startdocument(arg0, arg1, arg2));
  }
}
Variant c_XMLWriter::i_startdtdentity(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_startdtdentity, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("startdtdentity", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_startdtdentity(arg0, arg1));
  }
}
Variant c_XMLWriter::i_endcdata(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_endcdata, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("endcdata", 0, 1);
  return (self->t_endcdata());
}
Variant c_XMLWriter::i_writecomment(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_writecomment, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("writecomment", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_writecomment(arg0));
  }
}
Variant c_XMLWriter::i_writeattribute(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_writeattribute, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("writeattribute", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_writeattribute(arg0, arg1));
  }
}
Variant c_XMLWriter::i_endcomment(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_endcomment, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("endcomment", 0, 1);
  return (self->t_endcomment());
}
Variant c_XMLWriter::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_XMLWriter::i_writedtd(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_writedtd, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("writedtd", count, 1, 4, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_writedtd(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_writedtd(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_writedtd(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_writedtd(arg0, arg1, arg2, arg3));
  }
}
Variant c_XMLWriter::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_XMLWriter::i_enddtdentity(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_enddtdentity, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("enddtdentity", 0, 1);
  return (self->t_enddtdentity());
}
Variant c_XMLWriter::i_startattributens(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_startattributens, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("startattributens", count, 3, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_startattributens(arg0, arg1, arg2));
  }
}
Variant c_XMLWriter::i_startelement(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_startelement, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("startelement", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_startelement(arg0));
  }
}
Variant c_XMLWriter::i_startelementns(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_startelementns, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("startelementns", count, 3, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_startelementns(arg0, arg1, arg2));
  }
}
Variant c_XMLWriter::i_startdtdelement(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_startdtdelement, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("startdtdelement", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_startdtdelement(arg0));
  }
}
Variant c_XMLWriter::i_enddocument(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_enddocument, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("enddocument", 0, 1);
  return (self->t_enddocument());
}
Variant c_XMLWriter::i_writecdata(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_writecdata, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("writecdata", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_writecdata(arg0));
  }
}
Variant c_XMLWriter::i_writedtdelement(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_writedtdelement, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("writedtdelement", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_writedtdelement(arg0, arg1));
  }
}
Variant c_XMLWriter::i_writeattributens(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_writeattributens, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("writeattributens", count, 4, 4, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_writeattributens(arg0, arg1, arg2, arg3));
  }
}
Variant c_XMLWriter::i_writepi(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_writepi, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("writepi", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_writepi(arg0, arg1));
  }
}
Variant c_XMLWriter::i_setindentstring(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setindentstring, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setindentstring", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_setindentstring(arg0));
  }
}
Variant c_XMLWriter::i_startattribute(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_startattribute, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("startattribute", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_startattribute(arg0));
  }
}
Variant c_XMLWriter::i_writeelement(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_writeelement, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("writeelement", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_writeelement(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_writeelement(arg0, arg1));
  }
}
Variant c_XMLWriter::i_endelement(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_endelement, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("endelement", 0, 1);
  return (self->t_endelement());
}
Variant c_XMLWriter::i_writeraw(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_writeraw, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("writeraw", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_writeraw(arg0));
  }
}
Variant c_XMLWriter::i_writedtdentity(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_writedtdentity, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 6)) return throw_wrong_arguments("writedtdentity", count, 2, 6, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_writedtdentity(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_writedtdentity(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (self->t_writedtdentity(arg0, arg1, arg2, arg3));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 5) return (self->t_writedtdentity(arg0, arg1, arg2, arg3, arg4));
    CVarRef arg5((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_writedtdentity(arg0, arg1, arg2, arg3, arg4, arg5));
  }
}
Variant c_XMLWriter::i_endpi(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_endpi, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("endpi", 0, 1);
  return (self->t_endpi());
}
Variant c_XMLWriter::i_startdtd(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_startdtd, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("startdtd", count, 1, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_startdtd(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_startdtd(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_startdtd(arg0, arg1, arg2));
  }
}
Variant c_XMLWriter::i_setindent(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setindent, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setindent", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_setindent(arg0));
  }
}
Variant c_XMLWriter::i_enddtdelement(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_enddtdelement, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("enddtdelement", 0, 1);
  return (self->t_enddtdelement());
}
Variant c_XMLWriter::i_startdtdattlist(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_startdtdattlist, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("startdtdattlist", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_startdtdattlist(arg0));
  }
}
Variant c_XMLWriter::i_startcdata(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_startcdata, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("startcdata", 0, 1);
  return (self->t_startcdata());
}
Variant c_XMLWriter::i_writedtdattlist(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_writedtdattlist, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("writedtdattlist", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_writedtdattlist(arg0, arg1));
  }
}
Variant c_XMLWriter::i_enddtd(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_enddtd, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("enddtd", 0, 1);
  return (self->t_enddtd());
}
Variant c_XMLWriter::i_openuri(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_openuri, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("openuri", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_openuri(arg0));
  }
}
Variant c_XMLWriter::i_openmemory(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_openmemory, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("openmemory", 0, 1);
  return (self->t_openmemory());
}
Variant c_XMLWriter::i_endattribute(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_endattribute, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("endattribute", 0, 1);
  return (self->t_endattribute());
}
Variant c_XMLWriter::i_startpi(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_startpi, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("startpi", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_startpi(arg0));
  }
}
Variant c_XMLWriter::i_text(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_text, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("text", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_text(arg0));
  }
}
Variant c_XMLWriter::i_flush(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_flush, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("flush", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_flush());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_flush(arg0));
  }
}
Variant c_XMLWriter::i_startcomment(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_startcomment, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("startcomment", 0, 1);
  return (self->t_startcomment());
}
Variant c_XMLWriter::ifa_writeelementns(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_writeelementns, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count < 3 || count > 4)) return throw_wrong_arguments("writeelementns", count, 3, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_writeelementns(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (self->t_writeelementns(arg0, arg1, arg2, arg3));
}
Variant c_XMLWriter::ifa_outputmemory(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_outputmemory, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("outputmemory", 1, 1);
  if (count <= 0) return (self->t_outputmemory());
  CVarRef arg0(a0);
  return (self->t_outputmemory(arg0));
}
Variant c_XMLWriter::ifa_enddtdattlist(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_enddtdattlist, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("enddtdattlist", 0, 1);
  return (self->t_enddtdattlist());
}
Variant c_XMLWriter::ifa_fullendelement(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_fullendelement, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("fullendelement", 0, 1);
  return (self->t_fullendelement());
}
Variant c_XMLWriter::ifa_startdocument(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_startdocument, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count > 3)) return throw_toomany_arguments("startdocument", 3, 1);
  if (count <= 0) return (self->t_startdocument());
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_startdocument(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_startdocument(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_startdocument(arg0, arg1, arg2));
}
Variant c_XMLWriter::ifa_startdtdentity(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_startdtdentity, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("startdtdentity", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_startdtdentity(arg0, arg1));
}
Variant c_XMLWriter::ifa_endcdata(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_endcdata, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("endcdata", 0, 1);
  return (self->t_endcdata());
}
Variant c_XMLWriter::ifa_writecomment(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_writecomment, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("writecomment", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_writecomment(arg0));
}
Variant c_XMLWriter::ifa_writeattribute(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_writeattribute, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("writeattribute", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_writeattribute(arg0, arg1));
}
Variant c_XMLWriter::ifa_endcomment(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_endcomment, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("endcomment", 0, 1);
  return (self->t_endcomment());
}
Variant c_XMLWriter::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_XMLWriter::ifa_writedtd(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_writedtd, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 4)) return throw_wrong_arguments("writedtd", count, 1, 4, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_writedtd(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_writedtd(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_writedtd(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (self->t_writedtd(arg0, arg1, arg2, arg3));
}
Variant c_XMLWriter::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_XMLWriter::ifa_enddtdentity(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_enddtdentity, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("enddtdentity", 0, 1);
  return (self->t_enddtdentity());
}
Variant c_XMLWriter::ifa_startattributens(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_startattributens, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("startattributens", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (self->t_startattributens(arg0, arg1, arg2));
}
Variant c_XMLWriter::ifa_startelement(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_startelement, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("startelement", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_startelement(arg0));
}
Variant c_XMLWriter::ifa_startelementns(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_startelementns, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("startelementns", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (self->t_startelementns(arg0, arg1, arg2));
}
Variant c_XMLWriter::ifa_startdtdelement(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_startdtdelement, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("startdtdelement", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_startdtdelement(arg0));
}
Variant c_XMLWriter::ifa_enddocument(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_enddocument, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("enddocument", 0, 1);
  return (self->t_enddocument());
}
Variant c_XMLWriter::ifa_writecdata(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_writecdata, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("writecdata", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_writecdata(arg0));
}
Variant c_XMLWriter::ifa_writedtdelement(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_writedtdelement, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("writedtdelement", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_writedtdelement(arg0, arg1));
}
Variant c_XMLWriter::ifa_writeattributens(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_writeattributens, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count != 4)) return throw_wrong_arguments("writeattributens", count, 4, 4, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  CVarRef arg3(a3);
  return (self->t_writeattributens(arg0, arg1, arg2, arg3));
}
Variant c_XMLWriter::ifa_writepi(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_writepi, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("writepi", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_writepi(arg0, arg1));
}
Variant c_XMLWriter::ifa_setindentstring(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setindentstring, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setindentstring", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_setindentstring(arg0));
}
Variant c_XMLWriter::ifa_startattribute(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_startattribute, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("startattribute", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_startattribute(arg0));
}
Variant c_XMLWriter::ifa_writeelement(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_writeelement, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("writeelement", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_writeelement(arg0));
  CVarRef arg1(a1);
  return (self->t_writeelement(arg0, arg1));
}
Variant c_XMLWriter::ifa_endelement(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_endelement, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("endelement", 0, 1);
  return (self->t_endelement());
}
Variant c_XMLWriter::ifa_writeraw(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_writeraw, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("writeraw", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_writeraw(arg0));
}
Variant c_XMLWriter::ifa_writedtdentity(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_writedtdentity, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count < 2)) return throw_wrong_arguments("writedtdentity", count, 2, 6, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_writedtdentity(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_writedtdentity(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (self->t_writedtdentity(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  if (count <= 5) return (self->t_writedtdentity(arg0, arg1, arg2, arg3, arg4));
  CVarRef arg5(a5);
  return (self->t_writedtdentity(arg0, arg1, arg2, arg3, arg4, arg5));
}
Variant c_XMLWriter::ifa_endpi(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_endpi, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("endpi", 0, 1);
  return (self->t_endpi());
}
Variant c_XMLWriter::ifa_startdtd(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_startdtd, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("startdtd", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_startdtd(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_startdtd(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_startdtd(arg0, arg1, arg2));
}
Variant c_XMLWriter::ifa_setindent(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setindent, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setindent", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_setindent(arg0));
}
Variant c_XMLWriter::ifa_enddtdelement(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_enddtdelement, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("enddtdelement", 0, 1);
  return (self->t_enddtdelement());
}
Variant c_XMLWriter::ifa_startdtdattlist(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_startdtdattlist, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("startdtdattlist", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_startdtdattlist(arg0));
}
Variant c_XMLWriter::ifa_startcdata(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_startcdata, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("startcdata", 0, 1);
  return (self->t_startcdata());
}
Variant c_XMLWriter::ifa_writedtdattlist(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_writedtdattlist, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("writedtdattlist", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_writedtdattlist(arg0, arg1));
}
Variant c_XMLWriter::ifa_enddtd(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_enddtd, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("enddtd", 0, 1);
  return (self->t_enddtd());
}
Variant c_XMLWriter::ifa_openuri(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_openuri, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("openuri", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_openuri(arg0));
}
Variant c_XMLWriter::ifa_openmemory(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_openmemory, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("openmemory", 0, 1);
  return (self->t_openmemory());
}
Variant c_XMLWriter::ifa_endattribute(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_endattribute, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("endattribute", 0, 1);
  return (self->t_endattribute());
}
Variant c_XMLWriter::ifa_startpi(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_startpi, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("startpi", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_startpi(arg0));
}
Variant c_XMLWriter::ifa_text(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_text, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("text", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_text(arg0));
}
Variant c_XMLWriter::ifa_flush(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_flush, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("flush", 1, 1);
  if (count <= 0) return (self->t_flush());
  CVarRef arg0(a0);
  return (self->t_flush(arg0));
}
Variant c_XMLWriter::ifa_startcomment(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_startcomment, coo_XMLWriter);
  }
  c_XMLWriter *self ATTRIBUTE_UNUSED (static_cast<c_XMLWriter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("startcomment", 0, 1);
  return (self->t_startcomment());
}
const MethodCallInfoTable c_XMLWriter::s_call_info_table[] = {
  { 0x1EBCBEA66B6B0982LL, 1, 10, "writeCData", &c_XMLWriter::ci_writecdata },
  { 0x55E29E84E96ACF83LL, 1, 8, "startDTD", &c_XMLWriter::ci_startdtd },
  { 0x7C1FF8A79BAB3608LL, 1, 8, "writeDTD", &c_XMLWriter::ci_writedtd },
  { 0x119CC9E7C3E7EF0ELL, 1, 10, "openMemory", &c_XMLWriter::ci_openmemory },
  { 0x0A7FE14C41766610LL, 1, 8, "endCData", &c_XMLWriter::ci_endcdata },
  { 0x75F8C992981A4093LL, 1, 12, "writeComment", &c_XMLWriter::ci_writecomment },
  { 0x5A7AE5A26994FF13LL, 0, 14, "startAttribute", &c_XMLWriter::ci_startattribute },
  { 0x337EFFF3783B919CLL, 1, 12, "writeElement", &c_XMLWriter::ci_writeelement },
  { 0x4D26D167066BB11DLL, 1, 4, "text", &c_XMLWriter::ci_text },
  { 0x7DF0368A44C01B20LL, 1, 10, "startCData", &c_XMLWriter::ci_startcdata },
  { 0x5D49A460168D5C21LL, 1, 5, "endPI", &c_XMLWriter::ci_endpi },
  { 0x1D81ABDC9890C5A9LL, 1, 15, "writeDTDAttlist", &c_XMLWriter::ci_writedtdattlist },
  { 0x0DEAF425F1AD73ABLL, 1, 15, "setIndentString", &c_XMLWriter::ci_setindentstring },
  { 0x78A7A5D96EF2F4AFLL, 1, 10, "endElement", &c_XMLWriter::ci_endelement },
  { 0x75B357D89DDE6EB5LL, 1, 10, "endComment", &c_XMLWriter::ci_endcomment },
  { 0x4B0F1F6361A59C37LL, 1, 8, "writeRaw", &c_XMLWriter::ci_writeraw },
  { 0x7FC89CF1AFFB1E38LL, 1, 13, "startDocument", &c_XMLWriter::ci_startdocument },
  { 0x0D155D1E5C6641BALL, 1, 12, "outputMemory", &c_XMLWriter::ci_outputmemory },
  { 0x1FBE635680ADB7BELL, 1, 7, "openURI", &c_XMLWriter::ci_openuri },
  { 0x275896BFD7A77144LL, 1, 6, "endDTD", &c_XMLWriter::ci_enddtd },
  { 0x5D4650E5C0DAEE46LL, 1, 14, "writeDTDEntity", &c_XMLWriter::ci_writedtdentity },
  { 0x017687FD7029CCC7LL, 1, 13, "endDTDElement", &c_XMLWriter::ci_enddtdelement },
  { 0x3954A2C0306CCCCBLL, 1, 14, "writeAttribute", &c_XMLWriter::ci_writeattribute },
  { 0x7C43ECE80FF886CBLL, 0, 12, "endAttribute", &c_XMLWriter::ci_endattribute },
  { 0x4F1D890D5B36D24DLL, 1, 16, "startAttributens", &c_XMLWriter::ci_startattributens },
  { 0x1357CA1E92397452LL, 1, 15, "writeDTDElement", &c_XMLWriter::ci_writedtdelement },
  { 0x154AE94AEFAC7C54LL, 1, 16, "writeAttributeNS", &c_XMLWriter::ci_writeattributens },
  { 0x4520735705A382D6LL, 1, 12, "endDTDEntity", &c_XMLWriter::ci_enddtdentity },
  { 0x37D51A94C6EE8F56LL, 0, 7, "writePI", &c_XMLWriter::ci_writepi },
  { 0x24A376E9310BF058LL, 1, 14, "writeElementNS", &c_XMLWriter::ci_writeelementns },
  { 0x390B6C01AE7C4159LL, 1, 7, "startPI", &c_XMLWriter::ci_startpi },
  { 0x0DC5AC1E0A2F63DCLL, 1, 11, "endDocument", &c_XMLWriter::ci_enddocument },
  { 0x75A033B824EA1ADDLL, 1, 14, "startDTDEntity", &c_XMLWriter::ci_startdtdentity },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_XMLWriter::ci___construct },
  { 0x55BFFBE5717EFD62LL, 1, 12, "startElement", &c_XMLWriter::ci_startelement },
  { 0x349B7446B5EE65E5LL, 1, 9, "setIndent", &c_XMLWriter::ci_setindent },
  { 0x608A2D39DE12E169LL, 1, 14, "startElementNS", &c_XMLWriter::ci_startelementns },
  { 0x0CBB10FA542B7D70LL, 1, 15, "startDTDAttlist", &c_XMLWriter::ci_startdtdattlist },
  { 0x496175DBD52E1771LL, 1, 13, "endDTDAttlist", &c_XMLWriter::ci_enddtdattlist },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_XMLWriter::ci___destruct },
  { 0x451436438EBA2AF8LL, 1, 15, "startDTDElement", &c_XMLWriter::ci_startdtdelement },
  { 0x6A3D9F8EDB005E7ALL, 1, 5, "flush", &c_XMLWriter::ci_flush },
  { 0x3174CCE00BFB9FFELL, 1, 14, "fullEndElement", &c_XMLWriter::ci_fullendelement },
  { 0x6A8CC27A7F0466FFLL, 1, 12, "startComment", &c_XMLWriter::ci_startcomment },
  { 0, 1, 0, 0 }
};
const int c_XMLWriter::s_call_info_index[] = {
  127,
  -1,-1,0,1,-1,-1,-1,-1,
  2,-1,-1,-1,-1,-1,3,-1,
  4,-1,-1,5,-1,-1,-1,-1,
  -1,-1,-1,-1,7,8,-1,-1,
  9,10,-1,-1,-1,-1,-1,-1,
  -1,11,-1,12,-1,-1,-1,13,
  -1,-1,-1,-1,-1,14,-1,15,
  16,-1,17,-1,-1,-1,18,-1,
  -1,-1,-1,-1,19,-1,20,21,
  -1,-1,-1,22,-1,24,-1,-1,
  -1,-1,25,-1,26,-1,27,-1,
  29,30,-1,-1,31,32,-1,33,
  -1,-1,34,-1,-1,35,-1,-1,
  -1,36,-1,-1,-1,-1,-1,-1,
  37,38,-1,39,-1,-1,-1,-1,
  40,-1,41,-1,-1,-1,42,43,

};
c_XMLWriter *c_XMLWriter::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_XMLWriter::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_XMLWriter::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_XMLWriter::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_XMLWriter = {
  c_XMLWriter::os_getInit,
  c_XMLWriter::os_get,
  c_XMLWriter::os_lval,
  c_XMLWriter::os_invoke,
  c_XMLWriter::os_constant,
  (ObjectData*(*)(ObjectData*))coo_XMLWriter,
  c_XMLWriter::s_call_info_table,c_XMLWriter::s_call_info_index,
  "XMLWriter",
  0
};
ObjectData *coo_DOMXPath() {
  return NEWOBJ(c_DOMXPath)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMXPath
Variant c_DOMXPath::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMXPath
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMXPath
Variant c_DOMXPath::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMXPath
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMXPath
Variant &c_DOMXPath::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMXPath
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DOMXPath
Variant * c_DOMXPath::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DOMXPath
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMXPath
Variant * c_DOMXPath::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMXPath
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMXPath
Variant * c_DOMXPath::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMXPath
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMXPath
Variant c_DOMXPath::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMXPath
IMPLEMENT_CLASS_NO_DEFAULT_SWEEP(DOMXPath)
ObjectData *c_DOMXPath::cloneImpl() {
  ObjectData *obj = coo_DOMXPath();
  c_DOMXPath::cloneSet(obj);
  return obj;
}
void c_DOMXPath::cloneSet(ObjectData *cl) {
  c_DOMXPath *clone = static_cast<c_DOMXPath*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_DOMXPath::ci___destruct((void*)&c_DOMXPath::i___destruct, (void*)&c_DOMXPath::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMXPath::ci___set((void*)&c_DOMXPath::i___set, (void*)&c_DOMXPath::ifa___set, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMXPath::ci___construct((void*)&c_DOMXPath::i___construct, (void*)&c_DOMXPath::ifa___construct, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMXPath::ci_query((void*)&c_DOMXPath::i_query, (void*)&c_DOMXPath::ifa_query, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMXPath::ci_evaluate((void*)&c_DOMXPath::i_evaluate, (void*)&c_DOMXPath::ifa_evaluate, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMXPath::ci_registerphpfunctions((void*)&c_DOMXPath::i_registerphpfunctions, (void*)&c_DOMXPath::ifa_registerphpfunctions, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMXPath::ci___get((void*)&c_DOMXPath::i___get, (void*)&c_DOMXPath::ifa___get, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMXPath::ci_registernamespace((void*)&c_DOMXPath::i_registernamespace, (void*)&c_DOMXPath::ifa_registernamespace, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMXPath::ci___isset((void*)&c_DOMXPath::i___isset, (void*)&c_DOMXPath::ifa___isset, 1, 4, 0x0000000000000000LL);
Variant c_DOMXPath::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_DOMXPath);
  }
  c_DOMXPath *self ATTRIBUTE_UNUSED (static_cast<c_DOMXPath*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMXPath::i___set(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___set, coo_DOMXPath);
  }
  c_DOMXPath *self ATTRIBUTE_UNUSED (static_cast<c_DOMXPath*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___set(arg0, arg1));
  }
}
Variant c_DOMXPath::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_DOMXPath);
  }
  c_DOMXPath *self ATTRIBUTE_UNUSED (static_cast<c_DOMXPath*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__construct", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___construct(arg0), null);
  }
}
Variant c_DOMXPath::i_query(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_query, coo_DOMXPath);
  }
  c_DOMXPath *self ATTRIBUTE_UNUSED (static_cast<c_DOMXPath*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("query", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_query(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_query(arg0, arg1));
  }
}
Variant c_DOMXPath::i_evaluate(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_evaluate, coo_DOMXPath);
  }
  c_DOMXPath *self ATTRIBUTE_UNUSED (static_cast<c_DOMXPath*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("evaluate", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_evaluate(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_evaluate(arg0, arg1));
  }
}
Variant c_DOMXPath::i_registerphpfunctions(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_registerphpfunctions, coo_DOMXPath);
  }
  c_DOMXPath *self ATTRIBUTE_UNUSED (static_cast<c_DOMXPath*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("registerphpfunctions", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_registerphpfunctions());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_registerphpfunctions(arg0));
  }
}
Variant c_DOMXPath::i___get(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___get, coo_DOMXPath);
  }
  c_DOMXPath *self ATTRIBUTE_UNUSED (static_cast<c_DOMXPath*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___get(arg0));
  }
}
Variant c_DOMXPath::i_registernamespace(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_registernamespace, coo_DOMXPath);
  }
  c_DOMXPath *self ATTRIBUTE_UNUSED (static_cast<c_DOMXPath*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("registernamespace", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_registernamespace(arg0, arg1));
  }
}
Variant c_DOMXPath::i___isset(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___isset, coo_DOMXPath);
  }
  c_DOMXPath *self ATTRIBUTE_UNUSED (static_cast<c_DOMXPath*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___isset(arg0));
  }
}
Variant c_DOMXPath::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_DOMXPath);
  }
  c_DOMXPath *self ATTRIBUTE_UNUSED (static_cast<c_DOMXPath*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMXPath::ifa___set(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___set, coo_DOMXPath);
  }
  c_DOMXPath *self ATTRIBUTE_UNUSED (static_cast<c_DOMXPath*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t___set(arg0, arg1));
}
Variant c_DOMXPath::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_DOMXPath);
  }
  c_DOMXPath *self ATTRIBUTE_UNUSED (static_cast<c_DOMXPath*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__construct", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___construct(arg0), null);
}
Variant c_DOMXPath::ifa_query(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_query, coo_DOMXPath);
  }
  c_DOMXPath *self ATTRIBUTE_UNUSED (static_cast<c_DOMXPath*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("query", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_query(arg0));
  CVarRef arg1(a1);
  return (self->t_query(arg0, arg1));
}
Variant c_DOMXPath::ifa_evaluate(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_evaluate, coo_DOMXPath);
  }
  c_DOMXPath *self ATTRIBUTE_UNUSED (static_cast<c_DOMXPath*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("evaluate", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_evaluate(arg0));
  CVarRef arg1(a1);
  return (self->t_evaluate(arg0, arg1));
}
Variant c_DOMXPath::ifa_registerphpfunctions(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_registerphpfunctions, coo_DOMXPath);
  }
  c_DOMXPath *self ATTRIBUTE_UNUSED (static_cast<c_DOMXPath*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("registerphpfunctions", 1, 1);
  if (count <= 0) return (self->t_registerphpfunctions());
  CVarRef arg0(a0);
  return (self->t_registerphpfunctions(arg0));
}
Variant c_DOMXPath::ifa___get(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___get, coo_DOMXPath);
  }
  c_DOMXPath *self ATTRIBUTE_UNUSED (static_cast<c_DOMXPath*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___get(arg0));
}
Variant c_DOMXPath::ifa_registernamespace(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_registernamespace, coo_DOMXPath);
  }
  c_DOMXPath *self ATTRIBUTE_UNUSED (static_cast<c_DOMXPath*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("registernamespace", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_registernamespace(arg0, arg1));
}
Variant c_DOMXPath::ifa___isset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___isset, coo_DOMXPath);
  }
  c_DOMXPath *self ATTRIBUTE_UNUSED (static_cast<c_DOMXPath*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___isset(arg0));
}
const MethodCallInfoTable c_DOMXPath::s_call_info_table[] = {
  { 0x144FADF6B374AB82LL, 1, 20, "registerPHPFunctions", &c_DOMXPath::ci_registerphpfunctions },
  { 0x47ACFB6D8681B0E8LL, 1, 17, "registerNamespace", &c_DOMXPath::ci_registernamespace },
  { 0x4FE08FDDAE2178EELL, 1, 7, "__isset", &c_DOMXPath::ci___isset },
  { 0x2443593B6F3C912FLL, 1, 8, "evaluate", &c_DOMXPath::ci_evaluate },
  { 0x26B6E00C74FA338FLL, 0, 5, "__get", &c_DOMXPath::ci___get },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_DOMXPath::ci___destruct },
  { 0x52F3DAD783340395LL, 1, 5, "__set", &c_DOMXPath::ci___set },
  { 0x356758D4414DA377LL, 1, 5, "query", &c_DOMXPath::ci_query },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_DOMXPath::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_DOMXPath::s_call_info_index[] = {
  31,
  -1,-1,0,-1,-1,-1,-1,-1,
  1,-1,-1,-1,-1,-1,2,3,
  -1,-1,-1,5,-1,6,-1,7,
  -1,-1,-1,-1,-1,-1,-1,8,

};
c_DOMXPath *c_DOMXPath::create(Variant a0) {
  CountableHelper h(this);
  init();
  t___construct(a0);
  return this;
}
void c_DOMXPath::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) throw_wrong_arguments("__construct", count, 1, 1, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    (t___construct(arg0));
  }
}
void c_DOMXPath::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DOMXPath::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_DOMXPath = {
  c_DOMXPath::os_getInit,
  c_DOMXPath::os_get,
  c_DOMXPath::os_lval,
  c_DOMXPath::os_invoke,
  c_DOMXPath::os_constant,
  (ObjectData*(*)(ObjectData*))coo_DOMXPath,
  c_DOMXPath::s_call_info_table,c_DOMXPath::s_call_info_index,
  "DOMXPath",
  0
};
ObjectData *coo_SoapServer() {
  return NEWOBJ(c_SoapServer)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_SoapServer
Variant c_SoapServer::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_SoapServer
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_SoapServer
Variant c_SoapServer::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_SoapServer
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_SoapServer
Variant &c_SoapServer::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_SoapServer
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_SoapServer
Variant * c_SoapServer::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_SoapServer
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_SoapServer
Variant * c_SoapServer::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_SoapServer
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_SoapServer
Variant * c_SoapServer::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_SoapServer
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_SoapServer
Variant c_SoapServer::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_SoapServer
IMPLEMENT_CLASS(SoapServer)
ObjectData *c_SoapServer::cloneImpl() {
  ObjectData *obj = coo_SoapServer();
  c_SoapServer::cloneSet(obj);
  return obj;
}
void c_SoapServer::cloneSet(ObjectData *cl) {
  c_SoapServer *clone = static_cast<c_SoapServer*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_SoapServer::ci_addfunction((void*)&c_SoapServer::i_addfunction, (void*)&c_SoapServer::ifa_addfunction, 1, 4, 0x0000000000000000LL);
CallInfo c_SoapServer::ci___destruct((void*)&c_SoapServer::i___destruct, (void*)&c_SoapServer::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_SoapServer::ci___construct((void*)&c_SoapServer::i___construct, (void*)&c_SoapServer::ifa___construct, 2, 4, 0x0000000000000000LL);
CallInfo c_SoapServer::ci_getfunctions((void*)&c_SoapServer::i_getfunctions, (void*)&c_SoapServer::ifa_getfunctions, 0, 4, 0x0000000000000000LL);
CallInfo c_SoapServer::ci_addsoapheader((void*)&c_SoapServer::i_addsoapheader, (void*)&c_SoapServer::ifa_addsoapheader, 1, 4, 0x0000000000000000LL);
CallInfo c_SoapServer::ci_setpersistence((void*)&c_SoapServer::i_setpersistence, (void*)&c_SoapServer::ifa_setpersistence, 1, 4, 0x0000000000000000LL);
CallInfo c_SoapServer::ci_handle((void*)&c_SoapServer::i_handle, (void*)&c_SoapServer::ifa_handle, 1, 4, 0x0000000000000000LL);
CallInfo c_SoapServer::ci_setobject((void*)&c_SoapServer::i_setobject, (void*)&c_SoapServer::ifa_setobject, 1, 4, 0x0000000000000000LL);
CallInfo c_SoapServer::ci_fault((void*)&c_SoapServer::i_fault, (void*)&c_SoapServer::ifa_fault, 5, 4, 0x0000000000000000LL);
CallInfo c_SoapServer::ci_setclass((void*)&c_SoapServer::i_setclass, (void*)&c_SoapServer::ifa_setclass, 1, 5, 0x0000000000000000LL);
Variant c_SoapServer::i_addfunction(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_addfunction, coo_SoapServer);
  }
  c_SoapServer *self ATTRIBUTE_UNUSED (static_cast<c_SoapServer*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("addfunction", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_addfunction(arg0), null);
  }
}
Variant c_SoapServer::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_SoapServer);
  }
  c_SoapServer *self ATTRIBUTE_UNUSED (static_cast<c_SoapServer*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_SoapServer::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_SoapServer);
  }
  c_SoapServer *self ATTRIBUTE_UNUSED (static_cast<c_SoapServer*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("__construct", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t___construct(arg0), null);
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___construct(arg0, arg1), null);
  }
}
Variant c_SoapServer::i_getfunctions(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getfunctions, coo_SoapServer);
  }
  c_SoapServer *self ATTRIBUTE_UNUSED (static_cast<c_SoapServer*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getfunctions", 0, 1);
  return (self->t_getfunctions());
}
Variant c_SoapServer::i_addsoapheader(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_addsoapheader, coo_SoapServer);
  }
  c_SoapServer *self ATTRIBUTE_UNUSED (static_cast<c_SoapServer*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("addsoapheader", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_addsoapheader(arg0), null);
  }
}
Variant c_SoapServer::i_setpersistence(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setpersistence, coo_SoapServer);
  }
  c_SoapServer *self ATTRIBUTE_UNUSED (static_cast<c_SoapServer*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setpersistence", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_setpersistence(arg0), null);
  }
}
Variant c_SoapServer::i_handle(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_handle, coo_SoapServer);
  }
  c_SoapServer *self ATTRIBUTE_UNUSED (static_cast<c_SoapServer*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("handle", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_handle(), null);
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_handle(arg0), null);
  }
}
Variant c_SoapServer::i_setobject(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setobject, coo_SoapServer);
  }
  c_SoapServer *self ATTRIBUTE_UNUSED (static_cast<c_SoapServer*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setobject", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_setobject(arg0), null);
  }
}
Variant c_SoapServer::i_fault(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_fault, coo_SoapServer);
  }
  c_SoapServer *self ATTRIBUTE_UNUSED (static_cast<c_SoapServer*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 5)) return throw_wrong_arguments("fault", count, 2, 5, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_fault(arg0, arg1), null);
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_fault(arg0, arg1, arg2), null);
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (self->t_fault(arg0, arg1, arg2, arg3), null);
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_fault(arg0, arg1, arg2, arg3, arg4), null);
  }
}
Variant c_SoapServer::i_setclass(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setclass, coo_SoapServer);
  }
  c_SoapServer *self ATTRIBUTE_UNUSED (static_cast<c_SoapServer*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("setclass", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (self->t_setclass(count, arg0, p), null);
  }
}
Variant c_SoapServer::ifa_addfunction(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_addfunction, coo_SoapServer);
  }
  c_SoapServer *self ATTRIBUTE_UNUSED (static_cast<c_SoapServer*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("addfunction", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_addfunction(arg0), null);
}
Variant c_SoapServer::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_SoapServer);
  }
  c_SoapServer *self ATTRIBUTE_UNUSED (static_cast<c_SoapServer*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_SoapServer::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_SoapServer);
  }
  c_SoapServer *self ATTRIBUTE_UNUSED (static_cast<c_SoapServer*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("__construct", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t___construct(arg0), null);
  CVarRef arg1(a1);
  return (self->t___construct(arg0, arg1), null);
}
Variant c_SoapServer::ifa_getfunctions(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getfunctions, coo_SoapServer);
  }
  c_SoapServer *self ATTRIBUTE_UNUSED (static_cast<c_SoapServer*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getfunctions", 0, 1);
  return (self->t_getfunctions());
}
Variant c_SoapServer::ifa_addsoapheader(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_addsoapheader, coo_SoapServer);
  }
  c_SoapServer *self ATTRIBUTE_UNUSED (static_cast<c_SoapServer*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("addsoapheader", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_addsoapheader(arg0), null);
}
Variant c_SoapServer::ifa_setpersistence(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setpersistence, coo_SoapServer);
  }
  c_SoapServer *self ATTRIBUTE_UNUSED (static_cast<c_SoapServer*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setpersistence", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_setpersistence(arg0), null);
}
Variant c_SoapServer::ifa_handle(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_handle, coo_SoapServer);
  }
  c_SoapServer *self ATTRIBUTE_UNUSED (static_cast<c_SoapServer*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("handle", 1, 1);
  if (count <= 0) return (self->t_handle(), null);
  CVarRef arg0(a0);
  return (self->t_handle(arg0), null);
}
Variant c_SoapServer::ifa_setobject(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setobject, coo_SoapServer);
  }
  c_SoapServer *self ATTRIBUTE_UNUSED (static_cast<c_SoapServer*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setobject", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_setobject(arg0), null);
}
Variant c_SoapServer::ifa_fault(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_fault, coo_SoapServer);
  }
  c_SoapServer *self ATTRIBUTE_UNUSED (static_cast<c_SoapServer*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 5)) return throw_wrong_arguments("fault", count, 2, 5, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_fault(arg0, arg1), null);
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_fault(arg0, arg1, arg2), null);
  CVarRef arg3(a3);
  if (count <= 4) return (self->t_fault(arg0, arg1, arg2, arg3), null);
  CVarRef arg4(a4);
  return (self->t_fault(arg0, arg1, arg2, arg3, arg4), null);
}
Variant c_SoapServer::ifa_setclass(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setclass, coo_SoapServer);
  }
  c_SoapServer *self ATTRIBUTE_UNUSED (static_cast<c_SoapServer*>(mcp.obj));
  if (UNLIKELY(count < 1)) return throw_missing_arguments("setclass", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (self->t_setclass(count, arg0, p), null);
}
const MethodCallInfoTable c_SoapServer::s_call_info_table[] = {
  { 0x758A4E04590FE203LL, 1, 5, "fault", &c_SoapServer::ci_fault },
  { 0x5E77DD94E0A69328LL, 1, 14, "setpersistence", &c_SoapServer::ci_setpersistence },
  { 0x652BDFA6E22F17AFLL, 1, 12, "getfunctions", &c_SoapServer::ci_getfunctions },
  { 0x5C4CA333F4541532LL, 1, 6, "handle", &c_SoapServer::ci_handle },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_SoapServer::ci___destruct },
  { 0x597B151CC4F70834LL, 1, 8, "setclass", &c_SoapServer::ci_setclass },
  { 0x559622F84FE626B9LL, 1, 9, "setobject", &c_SoapServer::ci_setobject },
  { 0x278B0E6CCA74963ELL, 1, 13, "addsoapheader", &c_SoapServer::ci_addsoapheader },
  { 0x48B5852A397D2D9FLL, 1, 11, "addfunction", &c_SoapServer::ci_addfunction },
  { 0x0D31D0AC229C615FLL, 0, 11, "__construct", &c_SoapServer::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_SoapServer::s_call_info_index[] = {
  31,
  -1,-1,-1,0,-1,-1,-1,-1,
  1,-1,-1,-1,-1,-1,-1,2,
  -1,-1,3,4,5,-1,-1,-1,
  -1,6,-1,-1,-1,-1,7,8,

};
c_SoapServer *c_SoapServer::create(Variant a0, Array a1) {
  CountableHelper h(this);
  init();
  t___construct(a0, a1);
  return this;
}
void c_SoapServer::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) throw_wrong_arguments("__construct", count, 1, 2, 2);
  do {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) {
      (t___construct(arg0));
      break;
    }
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    (t___construct(arg0, arg1));
  } while (false);
}
void c_SoapServer::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_SoapServer::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_SoapServer = {
  c_SoapServer::os_getInit,
  c_SoapServer::os_get,
  c_SoapServer::os_lval,
  c_SoapServer::os_invoke,
  c_SoapServer::os_constant,
  (ObjectData*(*)(ObjectData*))coo_SoapServer,
  c_SoapServer::s_call_info_table,c_SoapServer::s_call_info_index,
  "SoapServer",
  0
};
ObjectData *coo_DOMNode() {
  return NEWOBJ(c_DOMNode)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMNode
Variant c_DOMNode::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMNode
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMNode
Variant c_DOMNode::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMNode
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMNode
Variant &c_DOMNode::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMNode
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DOMNode
Variant * c_DOMNode::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DOMNode
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMNode
Variant * c_DOMNode::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMNode
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMNode
Variant * c_DOMNode::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMNode
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMNode
Variant c_DOMNode::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMNode
IMPLEMENT_CLASS(DOMNode)
ObjectData *c_DOMNode::cloneImpl() {
  ObjectData *obj = coo_DOMNode();
  c_DOMNode::cloneSet(obj);
  return obj;
}
void c_DOMNode::cloneSet(ObjectData *cl) {
  c_DOMNode *clone = static_cast<c_DOMNode*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_DOMNode::ci_getlineno((void*)&c_DOMNode::i_getlineno, (void*)&c_DOMNode::ifa_getlineno, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMNode::ci_insertbefore((void*)&c_DOMNode::i_insertbefore, (void*)&c_DOMNode::ifa_insertbefore, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMNode::ci_isdefaultnamespace((void*)&c_DOMNode::i_isdefaultnamespace, (void*)&c_DOMNode::ifa_isdefaultnamespace, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMNode::ci_lookupnamespaceuri((void*)&c_DOMNode::i_lookupnamespaceuri, (void*)&c_DOMNode::ifa_lookupnamespaceuri, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMNode::ci_appendchild((void*)&c_DOMNode::i_appendchild, (void*)&c_DOMNode::ifa_appendchild, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMNode::ci___destruct((void*)&c_DOMNode::i___destruct, (void*)&c_DOMNode::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMNode::ci___set((void*)&c_DOMNode::i___set, (void*)&c_DOMNode::ifa___set, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMNode::ci_clonenode((void*)&c_DOMNode::i_clonenode, (void*)&c_DOMNode::ifa_clonenode, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMNode::ci___construct((void*)&c_DOMNode::i___construct, (void*)&c_DOMNode::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMNode::ci_replacechild((void*)&c_DOMNode::i_replacechild, (void*)&c_DOMNode::ifa_replacechild, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMNode::ci_c14n((void*)&c_DOMNode::i_c14n, (void*)&c_DOMNode::ifa_c14n, 4, 4, 0x0000000000000000LL);
CallInfo c_DOMNode::ci_hasattributes((void*)&c_DOMNode::i_hasattributes, (void*)&c_DOMNode::ifa_hasattributes, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMNode::ci_lookupprefix((void*)&c_DOMNode::i_lookupprefix, (void*)&c_DOMNode::ifa_lookupprefix, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMNode::ci_normalize((void*)&c_DOMNode::i_normalize, (void*)&c_DOMNode::ifa_normalize, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMNode::ci_getnodepath((void*)&c_DOMNode::i_getnodepath, (void*)&c_DOMNode::ifa_getnodepath, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMNode::ci_c14nfile((void*)&c_DOMNode::i_c14nfile, (void*)&c_DOMNode::ifa_c14nfile, 5, 4, 0x0000000000000000LL);
CallInfo c_DOMNode::ci_issamenode((void*)&c_DOMNode::i_issamenode, (void*)&c_DOMNode::ifa_issamenode, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMNode::ci_removechild((void*)&c_DOMNode::i_removechild, (void*)&c_DOMNode::ifa_removechild, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMNode::ci___get((void*)&c_DOMNode::i___get, (void*)&c_DOMNode::ifa___get, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMNode::ci_issupported((void*)&c_DOMNode::i_issupported, (void*)&c_DOMNode::ifa_issupported, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMNode::ci___isset((void*)&c_DOMNode::i___isset, (void*)&c_DOMNode::ifa___isset, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMNode::ci_haschildnodes((void*)&c_DOMNode::i_haschildnodes, (void*)&c_DOMNode::ifa_haschildnodes, 0, 4, 0x0000000000000000LL);
Variant c_DOMNode::i_getlineno(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getlineno, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getlineno", 0, 1);
  return (self->t_getlineno());
}
Variant c_DOMNode::i_insertbefore(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_insertbefore, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("insertbefore", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_insertbefore(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_insertbefore(arg0, arg1));
  }
}
Variant c_DOMNode::i_isdefaultnamespace(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_isdefaultnamespace, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("isdefaultnamespace", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_isdefaultnamespace(arg0));
  }
}
Variant c_DOMNode::i_lookupnamespaceuri(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_lookupnamespaceuri, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("lookupnamespaceuri", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_lookupnamespaceuri(arg0));
  }
}
Variant c_DOMNode::i_appendchild(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_appendchild, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("appendchild", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_appendchild(arg0));
  }
}
Variant c_DOMNode::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMNode::i___set(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___set, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___set(arg0, arg1));
  }
}
Variant c_DOMNode::i_clonenode(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_clonenode, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("clonenode", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_clonenode());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_clonenode(arg0));
  }
}
Variant c_DOMNode::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DOMNode::i_replacechild(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_replacechild, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("replacechild", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_replacechild(arg0, arg1));
  }
}
Variant c_DOMNode::i_c14n(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_c14n, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 4)) return throw_toomany_arguments("c14n", 4, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_c14n());
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_c14n(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_c14n(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_c14n(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_c14n(arg0, arg1, arg2, arg3));
  }
}
Variant c_DOMNode::i_hasattributes(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_hasattributes, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("hasattributes", 0, 1);
  return (self->t_hasattributes());
}
Variant c_DOMNode::i_lookupprefix(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_lookupprefix, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("lookupprefix", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_lookupprefix(arg0));
  }
}
Variant c_DOMNode::i_normalize(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_normalize, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("normalize", 0, 1);
  return (self->t_normalize(), null);
}
Variant c_DOMNode::i_getnodepath(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getnodepath, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getnodepath", 0, 1);
  return (self->t_getnodepath());
}
Variant c_DOMNode::i_c14nfile(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_c14nfile, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 5)) return throw_wrong_arguments("c14nfile", count, 1, 5, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_c14nfile(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_c14nfile(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 3) return (self->t_c14nfile(arg0, arg1, arg2));
    CVarRef arg3((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 4) return (self->t_c14nfile(arg0, arg1, arg2, arg3));
    CVarRef arg4((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_c14nfile(arg0, arg1, arg2, arg3, arg4));
  }
}
Variant c_DOMNode::i_issamenode(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_issamenode, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("issamenode", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_issamenode(arg0));
  }
}
Variant c_DOMNode::i_removechild(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_removechild, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("removechild", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_removechild(arg0));
  }
}
Variant c_DOMNode::i___get(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___get, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___get(arg0));
  }
}
Variant c_DOMNode::i_issupported(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_issupported, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("issupported", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_issupported(arg0, arg1));
  }
}
Variant c_DOMNode::i___isset(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___isset, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___isset(arg0));
  }
}
Variant c_DOMNode::i_haschildnodes(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_haschildnodes, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("haschildnodes", 0, 1);
  return (self->t_haschildnodes());
}
Variant c_DOMNode::ifa_getlineno(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getlineno, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getlineno", 0, 1);
  return (self->t_getlineno());
}
Variant c_DOMNode::ifa_insertbefore(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_insertbefore, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("insertbefore", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_insertbefore(arg0));
  CVarRef arg1(a1);
  return (self->t_insertbefore(arg0, arg1));
}
Variant c_DOMNode::ifa_isdefaultnamespace(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isdefaultnamespace, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("isdefaultnamespace", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_isdefaultnamespace(arg0));
}
Variant c_DOMNode::ifa_lookupnamespaceuri(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_lookupnamespaceuri, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("lookupnamespaceuri", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_lookupnamespaceuri(arg0));
}
Variant c_DOMNode::ifa_appendchild(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_appendchild, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("appendchild", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_appendchild(arg0));
}
Variant c_DOMNode::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMNode::ifa___set(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___set, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t___set(arg0, arg1));
}
Variant c_DOMNode::ifa_clonenode(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_clonenode, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("clonenode", 1, 1);
  if (count <= 0) return (self->t_clonenode());
  CVarRef arg0(a0);
  return (self->t_clonenode(arg0));
}
Variant c_DOMNode::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_DOMNode::ifa_replacechild(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_replacechild, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("replacechild", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_replacechild(arg0, arg1));
}
Variant c_DOMNode::ifa_c14n(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_c14n, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  if (UNLIKELY(count > 4)) return throw_toomany_arguments("c14n", 4, 1);
  if (count <= 0) return (self->t_c14n());
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_c14n(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_c14n(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_c14n(arg0, arg1, arg2));
  CVarRef arg3(a3);
  return (self->t_c14n(arg0, arg1, arg2, arg3));
}
Variant c_DOMNode::ifa_hasattributes(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_hasattributes, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("hasattributes", 0, 1);
  return (self->t_hasattributes());
}
Variant c_DOMNode::ifa_lookupprefix(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_lookupprefix, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("lookupprefix", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_lookupprefix(arg0));
}
Variant c_DOMNode::ifa_normalize(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_normalize, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("normalize", 0, 1);
  return (self->t_normalize(), null);
}
Variant c_DOMNode::ifa_getnodepath(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getnodepath, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("getnodepath", 0, 1);
  return (self->t_getnodepath());
}
Variant c_DOMNode::ifa_c14nfile(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_c14nfile, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 5)) return throw_wrong_arguments("c14nfile", count, 1, 5, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_c14nfile(arg0));
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_c14nfile(arg0, arg1));
  CVarRef arg2(a2);
  if (count <= 3) return (self->t_c14nfile(arg0, arg1, arg2));
  CVarRef arg3(a3);
  if (count <= 4) return (self->t_c14nfile(arg0, arg1, arg2, arg3));
  CVarRef arg4(a4);
  return (self->t_c14nfile(arg0, arg1, arg2, arg3, arg4));
}
Variant c_DOMNode::ifa_issamenode(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_issamenode, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("issamenode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_issamenode(arg0));
}
Variant c_DOMNode::ifa_removechild(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_removechild, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("removechild", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_removechild(arg0));
}
Variant c_DOMNode::ifa___get(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___get, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___get(arg0));
}
Variant c_DOMNode::ifa_issupported(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_issupported, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("issupported", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_issupported(arg0, arg1));
}
Variant c_DOMNode::ifa___isset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___isset, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___isset(arg0));
}
Variant c_DOMNode::ifa_haschildnodes(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_haschildnodes, coo_DOMNode);
  }
  c_DOMNode *self ATTRIBUTE_UNUSED (static_cast<c_DOMNode*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("haschildnodes", 0, 1);
  return (self->t_haschildnodes());
}
const MethodCallInfoTable c_DOMNode::s_call_info_table[] = {
  { 0x69797649716AE343LL, 1, 11, "getNodePath", &c_DOMNode::ci_getnodepath },
  { 0x77570221C582ED8ALL, 1, 4, "c14n", &c_DOMNode::ci_c14n },
  { 0x1C51CE3C2356D08ELL, 1, 12, "replaceChild", &c_DOMNode::ci_replacechild },
  { 0x0B44A59A023E75CFLL, 1, 11, "appendChild", &c_DOMNode::ci_appendchild },
  { 0x26B6E00C74FA338FLL, 0, 5, "__get", &c_DOMNode::ci___get },
  { 0x4F615934A04E3092LL, 1, 9, "cloneNode", &c_DOMNode::ci_clonenode },
  { 0x52F3DAD783340395LL, 1, 5, "__set", &c_DOMNode::ci___set },
  { 0x58F8D846AF9E5D18LL, 1, 9, "getLineNo", &c_DOMNode::ci_getlineno },
  { 0x11A2D4B742CB6C5ALL, 1, 9, "normalize", &c_DOMNode::ci_normalize },
  { 0x28D1E151A83B8F5DLL, 1, 18, "lookupNamespaceUri", &c_DOMNode::ci_lookupnamespaceuri },
  { 0x72044C28B65364DDLL, 0, 11, "removeChild", &c_DOMNode::ci_removechild },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_DOMNode::ci___construct },
  { 0x599DE23996CB7D61LL, 1, 12, "lookupPrefix", &c_DOMNode::ci_lookupprefix },
  { 0x643EFC8E9378F664LL, 1, 18, "isDefaultNamespace", &c_DOMNode::ci_isdefaultnamespace },
  { 0x4FE08FDDAE2178EELL, 1, 7, "__isset", &c_DOMNode::ci___isset },
  { 0x102549E9CA2EC6EFLL, 1, 10, "isSameNode", &c_DOMNode::ci_issamenode },
  { 0x3CFA6EECF6F5AEB1LL, 1, 13, "hasAttributes", &c_DOMNode::ci_hasattributes },
  { 0x076FF0CF9185C433LL, 1, 12, "insertBefore", &c_DOMNode::ci_insertbefore },
  { 0x7F974836AACC1EF3LL, 0, 10, "__destruct", &c_DOMNode::ci___destruct },
  { 0x1D1768A6CF365A75LL, 1, 8, "c14nfile", &c_DOMNode::ci_c14nfile },
  { 0x279AA1B214B7677ALL, 1, 11, "isSupported", &c_DOMNode::ci_issupported },
  { 0x5F63574EA50595FALL, 0, 13, "hasChildNodes", &c_DOMNode::ci_haschildnodes },
  { 0, 1, 0, 0 }
};
const int c_DOMNode::s_call_info_index[] = {
  63,
  -1,-1,-1,0,-1,-1,-1,-1,
  -1,-1,1,-1,-1,-1,2,3,
  -1,-1,5,-1,-1,6,-1,-1,
  7,-1,8,-1,-1,9,-1,11,
  -1,12,-1,-1,13,-1,-1,-1,
  -1,-1,-1,-1,-1,-1,14,15,
  -1,16,-1,17,-1,19,-1,-1,
  -1,-1,20,-1,-1,-1,-1,-1,

};
c_DOMNode *c_DOMNode::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_DOMNode::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_DOMNode::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DOMNode::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_DOMNode = {
  c_DOMNode::os_getInit,
  c_DOMNode::os_get,
  c_DOMNode::os_lval,
  c_DOMNode::os_invoke,
  c_DOMNode::os_constant,
  (ObjectData*(*)(ObjectData*))coo_DOMNode,
  c_DOMNode::s_call_info_table,c_DOMNode::s_call_info_index,
  "DOMNode",
  0
};
ObjectData *coo_SpoofChecker() {
  return NEWOBJ(c_SpoofChecker)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_SpoofChecker
Variant c_SpoofChecker::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_SpoofChecker
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_SpoofChecker
Variant c_SpoofChecker::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_SpoofChecker
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_SpoofChecker
Variant &c_SpoofChecker::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_SpoofChecker
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_SpoofChecker
Variant * c_SpoofChecker::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_SpoofChecker
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_SpoofChecker
Variant * c_SpoofChecker::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_SpoofChecker
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_SpoofChecker
Variant * c_SpoofChecker::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_SpoofChecker
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_SpoofChecker
Variant c_SpoofChecker::os_constant(const char *s) {
  int64 hash = hash_string(s);
  switch (hash & 15) {
    case 1:
      HASH_RETURN(0x76DAF4F4BD608481LL, q_SpoofChecker_SINGLE_SCRIPT_CONFUSABLE, "SINGLE_SCRIPT_CONFUSABLE");
      break;
    case 2:
      HASH_RETURN(0x330C21B4435FDA12LL, q_SpoofChecker_WHOLE_SCRIPT_CONFUSABLE, "WHOLE_SCRIPT_CONFUSABLE");
      break;
    case 5:
      HASH_RETURN(0x33D91DB93B53D955LL, q_SpoofChecker_CHAR_LIMIT, "CHAR_LIMIT");
      break;
    case 6:
      HASH_RETURN(0x727F3BA1A7798546LL, q_SpoofChecker_INVISIBLE, "INVISIBLE");
      break;
    case 10:
      HASH_RETURN(0x7244AE82909D364ALL, q_SpoofChecker_SINGLE_SCRIPT, "SINGLE_SCRIPT");
      break;
    case 12:
      HASH_RETURN(0x5A4E3956DA2E533CLL, q_SpoofChecker_ANY_CASE, "ANY_CASE");
      break;
    case 15:
      HASH_RETURN(0x3189877F80D9ABBFLL, q_SpoofChecker_MIXED_SCRIPT_CONFUSABLE, "MIXED_SCRIPT_CONFUSABLE");
      break;
    default:
      break;
  }
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_SpoofChecker
IMPLEMENT_CLASS(SpoofChecker)
ObjectData *c_SpoofChecker::cloneImpl() {
  ObjectData *obj = coo_SpoofChecker();
  c_SpoofChecker::cloneSet(obj);
  return obj;
}
void c_SpoofChecker::cloneSet(ObjectData *cl) {
  c_SpoofChecker *clone = static_cast<c_SpoofChecker*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_SpoofChecker::ci_setallowedlocales((void*)&c_SpoofChecker::i_setallowedlocales, (void*)&c_SpoofChecker::ifa_setallowedlocales, 1, 4, 0x0000000000000000LL);
CallInfo c_SpoofChecker::ci___destruct((void*)&c_SpoofChecker::i___destruct, (void*)&c_SpoofChecker::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_SpoofChecker::ci___construct((void*)&c_SpoofChecker::i___construct, (void*)&c_SpoofChecker::ifa___construct, 0, 4, 0x0000000000000000LL);
CallInfo c_SpoofChecker::ci_areconfusable((void*)&c_SpoofChecker::i_areconfusable, (void*)&c_SpoofChecker::ifa_areconfusable, 3, 4, 0x0000000000000004LL);
CallInfo c_SpoofChecker::ci_setchecks((void*)&c_SpoofChecker::i_setchecks, (void*)&c_SpoofChecker::ifa_setchecks, 1, 4, 0x0000000000000000LL);
CallInfo c_SpoofChecker::ci_issuspicious((void*)&c_SpoofChecker::i_issuspicious, (void*)&c_SpoofChecker::ifa_issuspicious, 2, 4, 0x0000000000000002LL);
Variant c_SpoofChecker::i_setallowedlocales(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setallowedlocales, coo_SpoofChecker);
  }
  c_SpoofChecker *self ATTRIBUTE_UNUSED (static_cast<c_SpoofChecker*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setallowedlocales", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_setallowedlocales(arg0), null);
  }
}
Variant c_SpoofChecker::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_SpoofChecker);
  }
  c_SpoofChecker *self ATTRIBUTE_UNUSED (static_cast<c_SpoofChecker*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_SpoofChecker::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_SpoofChecker);
  }
  c_SpoofChecker *self ATTRIBUTE_UNUSED (static_cast<c_SpoofChecker*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_SpoofChecker::i_areconfusable(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_areconfusable, coo_SpoofChecker);
  }
  c_SpoofChecker *self ATTRIBUTE_UNUSED (static_cast<c_SpoofChecker*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("areconfusable", count, 2, 3, 1);
  const_cast<Array&>(params).escalate(true);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_areconfusable(arg0, arg1));
    VRefParam arg2(vref(ad->getValueRef(pos = ad->iter_advance(pos))));
    return (self->t_areconfusable(arg0, arg1, arg2));
  }
}
Variant c_SpoofChecker::i_setchecks(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setchecks, coo_SpoofChecker);
  }
  c_SpoofChecker *self ATTRIBUTE_UNUSED (static_cast<c_SpoofChecker*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setchecks", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_setchecks(arg0), null);
  }
}
Variant c_SpoofChecker::i_issuspicious(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_issuspicious, coo_SpoofChecker);
  }
  c_SpoofChecker *self ATTRIBUTE_UNUSED (static_cast<c_SpoofChecker*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("issuspicious", count, 1, 2, 1);
  const_cast<Array&>(params).escalate(true);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_issuspicious(arg0));
    VRefParam arg1(vref(ad->getValueRef(pos = ad->iter_advance(pos))));
    return (self->t_issuspicious(arg0, arg1));
  }
}
Variant c_SpoofChecker::ifa_setallowedlocales(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setallowedlocales, coo_SpoofChecker);
  }
  c_SpoofChecker *self ATTRIBUTE_UNUSED (static_cast<c_SpoofChecker*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setallowedlocales", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_setallowedlocales(arg0), null);
}
Variant c_SpoofChecker::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_SpoofChecker);
  }
  c_SpoofChecker *self ATTRIBUTE_UNUSED (static_cast<c_SpoofChecker*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_SpoofChecker::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_SpoofChecker);
  }
  c_SpoofChecker *self ATTRIBUTE_UNUSED (static_cast<c_SpoofChecker*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_SpoofChecker::ifa_areconfusable(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_areconfusable, coo_SpoofChecker);
  }
  c_SpoofChecker *self ATTRIBUTE_UNUSED (static_cast<c_SpoofChecker*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("areconfusable", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_areconfusable(arg0, arg1));
  VRefParam arg2(vref(a2));
  return (self->t_areconfusable(arg0, arg1, arg2));
}
Variant c_SpoofChecker::ifa_setchecks(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setchecks, coo_SpoofChecker);
  }
  c_SpoofChecker *self ATTRIBUTE_UNUSED (static_cast<c_SpoofChecker*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setchecks", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_setchecks(arg0), null);
}
Variant c_SpoofChecker::ifa_issuspicious(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_issuspicious, coo_SpoofChecker);
  }
  c_SpoofChecker *self ATTRIBUTE_UNUSED (static_cast<c_SpoofChecker*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("issuspicious", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_issuspicious(arg0));
  VRefParam arg1(vref(a1));
  return (self->t_issuspicious(arg0, arg1));
}
const MethodCallInfoTable c_SpoofChecker::s_call_info_table[] = {
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_SpoofChecker::ci___destruct },
  { 0x1C4B9989F874FF63LL, 0, 9, "setChecks", &c_SpoofChecker::ci_setchecks },
  { 0x62F3987BECE73BD9LL, 1, 13, "areConfusable", &c_SpoofChecker::ci_areconfusable },
  { 0x63D87072B612B4AALL, 1, 12, "isSuspicious", &c_SpoofChecker::ci_issuspicious },
  { 0x35C46288CF1204BDLL, 1, 17, "setAllowedLocales", &c_SpoofChecker::ci_setallowedlocales },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_SpoofChecker::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_SpoofChecker::s_call_info_index[] = {
  15,
  -1,-1,-1,0,-1,-1,-1,-1,
  -1,2,3,-1,-1,4,-1,5,

};
c_SpoofChecker *c_SpoofChecker::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_SpoofChecker::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_SpoofChecker::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_SpoofChecker::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_SpoofChecker = {
  c_SpoofChecker::os_getInit,
  c_SpoofChecker::os_get,
  c_SpoofChecker::os_lval,
  c_SpoofChecker::os_invoke,
  c_SpoofChecker::os_constant,
  (ObjectData*(*)(ObjectData*))coo_SpoofChecker,
  c_SpoofChecker::s_call_info_table,c_SpoofChecker::s_call_info_index,
  "SpoofChecker",
  0
};
ObjectData *coo_DOMDocument() {
  return NEWOBJ(c_DOMDocument)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMDocument
Variant c_DOMDocument::os_getInit(CStrRef s) {
  return c_DOMNode::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMDocument
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMDocument
Variant c_DOMDocument::os_get(CStrRef s) {
  return c_DOMNode::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMDocument
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMDocument
Variant &c_DOMDocument::os_lval(CStrRef s) {
  return c_DOMNode::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMDocument
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DOMDocument
Variant * c_DOMDocument::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DOMDocument
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMDocument
Variant * c_DOMDocument::o_realPropPublic(CStrRef s, int flags) const {
  return c_DOMNode::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMDocument
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMDocument
Variant * c_DOMDocument::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMDocument
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMDocument
Variant c_DOMDocument::os_constant(const char *s) {
  return c_DOMNode::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMDocument
IMPLEMENT_CLASS_NO_DEFAULT_SWEEP(DOMDocument)
ObjectData *c_DOMDocument::cloneImpl() {
  ObjectData *obj = coo_DOMDocument();
  c_DOMDocument::cloneSet(obj);
  return obj;
}
void c_DOMDocument::cloneSet(ObjectData *cl) {
  c_DOMDocument *clone = static_cast<c_DOMDocument*>(cl);
  c_DOMNode::cloneSet(clone);
}
CallInfo c_DOMDocument::ci_getelementsbytagname((void*)&c_DOMDocument::i_getelementsbytagname, (void*)&c_DOMDocument::ifa_getelementsbytagname, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_createcdatasection((void*)&c_DOMDocument::i_createcdatasection, (void*)&c_DOMDocument::ifa_createcdatasection, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_validate((void*)&c_DOMDocument::i_validate, (void*)&c_DOMDocument::ifa_validate, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_getelementsbytagnamens((void*)&c_DOMDocument::i_getelementsbytagnamens, (void*)&c_DOMDocument::ifa_getelementsbytagnamens, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_schemavalidatesource((void*)&c_DOMDocument::i_schemavalidatesource, (void*)&c_DOMDocument::ifa_schemavalidatesource, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_relaxngvalidate((void*)&c_DOMDocument::i_relaxngvalidate, (void*)&c_DOMDocument::ifa_relaxngvalidate, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_loadhtml((void*)&c_DOMDocument::i_loadhtml, (void*)&c_DOMDocument::ifa_loadhtml, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_createentityreference((void*)&c_DOMDocument::i_createentityreference, (void*)&c_DOMDocument::ifa_createentityreference, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_schemavalidate((void*)&c_DOMDocument::i_schemavalidate, (void*)&c_DOMDocument::ifa_schemavalidate, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci___destruct((void*)&c_DOMDocument::i___destruct, (void*)&c_DOMDocument::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci___set((void*)&c_DOMDocument::i___set, (void*)&c_DOMDocument::ifa___set, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_savexml((void*)&c_DOMDocument::i_savexml, (void*)&c_DOMDocument::ifa_savexml, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_createprocessinginstruction((void*)&c_DOMDocument::i_createprocessinginstruction, (void*)&c_DOMDocument::ifa_createprocessinginstruction, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci___construct((void*)&c_DOMDocument::i___construct, (void*)&c_DOMDocument::ifa___construct, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_registernodeclass((void*)&c_DOMDocument::i_registernodeclass, (void*)&c_DOMDocument::ifa_registernodeclass, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_load((void*)&c_DOMDocument::i_load, (void*)&c_DOMDocument::ifa_load, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_createattributens((void*)&c_DOMDocument::i_createattributens, (void*)&c_DOMDocument::ifa_createattributens, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_createelement((void*)&c_DOMDocument::i_createelement, (void*)&c_DOMDocument::ifa_createelement, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_createelementns((void*)&c_DOMDocument::i_createelementns, (void*)&c_DOMDocument::ifa_createelementns, 3, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_importnode((void*)&c_DOMDocument::i_importnode, (void*)&c_DOMDocument::ifa_importnode, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_relaxngvalidatesource((void*)&c_DOMDocument::i_relaxngvalidatesource, (void*)&c_DOMDocument::ifa_relaxngvalidatesource, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_createtextnode((void*)&c_DOMDocument::i_createtextnode, (void*)&c_DOMDocument::ifa_createtextnode, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_savehtml((void*)&c_DOMDocument::i_savehtml, (void*)&c_DOMDocument::ifa_savehtml, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_loadxml((void*)&c_DOMDocument::i_loadxml, (void*)&c_DOMDocument::ifa_loadxml, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_save((void*)&c_DOMDocument::i_save, (void*)&c_DOMDocument::ifa_save, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_createattribute((void*)&c_DOMDocument::i_createattribute, (void*)&c_DOMDocument::ifa_createattribute, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_xinclude((void*)&c_DOMDocument::i_xinclude, (void*)&c_DOMDocument::ifa_xinclude, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci___get((void*)&c_DOMDocument::i___get, (void*)&c_DOMDocument::ifa___get, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_loadhtmlfile((void*)&c_DOMDocument::i_loadhtmlfile, (void*)&c_DOMDocument::ifa_loadhtmlfile, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_savehtmlfile((void*)&c_DOMDocument::i_savehtmlfile, (void*)&c_DOMDocument::ifa_savehtmlfile, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_getelementbyid((void*)&c_DOMDocument::i_getelementbyid, (void*)&c_DOMDocument::ifa_getelementbyid, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci___isset((void*)&c_DOMDocument::i___isset, (void*)&c_DOMDocument::ifa___isset, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_createcomment((void*)&c_DOMDocument::i_createcomment, (void*)&c_DOMDocument::ifa_createcomment, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_normalizedocument((void*)&c_DOMDocument::i_normalizedocument, (void*)&c_DOMDocument::ifa_normalizedocument, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMDocument::ci_createdocumentfragment((void*)&c_DOMDocument::i_createdocumentfragment, (void*)&c_DOMDocument::ifa_createdocumentfragment, 0, 4, 0x0000000000000000LL);
Variant c_DOMDocument::i_getelementsbytagname(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getelementsbytagname, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getelementsbytagname", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getelementsbytagname(arg0));
  }
}
Variant c_DOMDocument::i_createcdatasection(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_createcdatasection, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("createcdatasection", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_createcdatasection(arg0));
  }
}
Variant c_DOMDocument::i_validate(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_validate, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("validate", 0, 1);
  return (self->t_validate());
}
Variant c_DOMDocument::i_getelementsbytagnamens(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getelementsbytagnamens, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("getelementsbytagnamens", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_getelementsbytagnamens(arg0, arg1));
  }
}
Variant c_DOMDocument::i_schemavalidatesource(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_schemavalidatesource, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("schemavalidatesource", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_schemavalidatesource(arg0));
  }
}
Variant c_DOMDocument::i_relaxngvalidate(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_relaxngvalidate, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("relaxngvalidate", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_relaxngvalidate(arg0));
  }
}
Variant c_DOMDocument::i_loadhtml(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_loadhtml, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("loadhtml", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_loadhtml(arg0));
  }
}
Variant c_DOMDocument::i_createentityreference(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_createentityreference, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("createentityreference", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_createentityreference(arg0));
  }
}
Variant c_DOMDocument::i_schemavalidate(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_schemavalidate, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("schemavalidate", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_schemavalidate(arg0));
  }
}
Variant c_DOMDocument::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMDocument::i___set(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___set, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___set(arg0, arg1));
  }
}
Variant c_DOMDocument::i_savexml(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_savexml, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("savexml", 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_savexml());
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_savexml(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_savexml(arg0, arg1));
  }
}
Variant c_DOMDocument::i_createprocessinginstruction(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_createprocessinginstruction, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("createprocessinginstruction", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_createprocessinginstruction(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_createprocessinginstruction(arg0, arg1));
  }
}
Variant c_DOMDocument::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("__construct", 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t___construct(), null);
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t___construct(arg0), null);
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___construct(arg0, arg1), null);
  }
}
Variant c_DOMDocument::i_registernodeclass(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_registernodeclass, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("registernodeclass", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_registernodeclass(arg0, arg1));
  }
}
Variant c_DOMDocument::i_load(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_load, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("load", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_load(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_load(arg0, arg1));
  }
}
Variant c_DOMDocument::i_createattributens(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_createattributens, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("createattributens", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_createattributens(arg0, arg1));
  }
}
Variant c_DOMDocument::i_createelement(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_createelement, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("createelement", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_createelement(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_createelement(arg0, arg1));
  }
}
Variant c_DOMDocument::i_createelementns(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_createelementns, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("createelementns", count, 2, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t_createelementns(arg0, arg1));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_createelementns(arg0, arg1, arg2));
  }
}
Variant c_DOMDocument::i_importnode(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_importnode, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("importnode", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_importnode(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_importnode(arg0, arg1));
  }
}
Variant c_DOMDocument::i_relaxngvalidatesource(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_relaxngvalidatesource, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("relaxngvalidatesource", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_relaxngvalidatesource(arg0));
  }
}
Variant c_DOMDocument::i_createtextnode(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_createtextnode, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("createtextnode", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_createtextnode(arg0));
  }
}
Variant c_DOMDocument::i_savehtml(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_savehtml, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("savehtml", 0, 1);
  return (self->t_savehtml());
}
Variant c_DOMDocument::i_loadxml(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_loadxml, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("loadxml", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_loadxml(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_loadxml(arg0, arg1));
  }
}
Variant c_DOMDocument::i_save(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_save, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("save", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_save(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_save(arg0, arg1));
  }
}
Variant c_DOMDocument::i_createattribute(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_createattribute, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("createattribute", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_createattribute(arg0));
  }
}
Variant c_DOMDocument::i_xinclude(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_xinclude, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("xinclude", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_xinclude());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_xinclude(arg0));
  }
}
Variant c_DOMDocument::i___get(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___get, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___get(arg0));
  }
}
Variant c_DOMDocument::i_loadhtmlfile(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_loadhtmlfile, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("loadhtmlfile", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_loadhtmlfile(arg0));
  }
}
Variant c_DOMDocument::i_savehtmlfile(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_savehtmlfile, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("savehtmlfile", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_savehtmlfile(arg0));
  }
}
Variant c_DOMDocument::i_getelementbyid(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getelementbyid, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getelementbyid", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getelementbyid(arg0));
  }
}
Variant c_DOMDocument::i___isset(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___isset, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___isset(arg0));
  }
}
Variant c_DOMDocument::i_createcomment(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_createcomment, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("createcomment", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_createcomment(arg0));
  }
}
Variant c_DOMDocument::i_normalizedocument(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_normalizedocument, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("normalizedocument", 0, 1);
  return (self->t_normalizedocument(), null);
}
Variant c_DOMDocument::i_createdocumentfragment(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_createdocumentfragment, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("createdocumentfragment", 0, 1);
  return (self->t_createdocumentfragment());
}
Variant c_DOMDocument::ifa_getelementsbytagname(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getelementsbytagname, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getelementsbytagname", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_getelementsbytagname(arg0));
}
Variant c_DOMDocument::ifa_createcdatasection(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_createcdatasection, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("createcdatasection", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_createcdatasection(arg0));
}
Variant c_DOMDocument::ifa_validate(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_validate, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("validate", 0, 1);
  return (self->t_validate());
}
Variant c_DOMDocument::ifa_getelementsbytagnamens(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getelementsbytagnamens, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("getelementsbytagnamens", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_getelementsbytagnamens(arg0, arg1));
}
Variant c_DOMDocument::ifa_schemavalidatesource(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_schemavalidatesource, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("schemavalidatesource", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_schemavalidatesource(arg0));
}
Variant c_DOMDocument::ifa_relaxngvalidate(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_relaxngvalidate, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("relaxngvalidate", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_relaxngvalidate(arg0));
}
Variant c_DOMDocument::ifa_loadhtml(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_loadhtml, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("loadhtml", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_loadhtml(arg0));
}
Variant c_DOMDocument::ifa_createentityreference(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_createentityreference, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("createentityreference", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_createentityreference(arg0));
}
Variant c_DOMDocument::ifa_schemavalidate(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_schemavalidate, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("schemavalidate", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_schemavalidate(arg0));
}
Variant c_DOMDocument::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMDocument::ifa___set(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___set, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t___set(arg0, arg1));
}
Variant c_DOMDocument::ifa_savexml(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_savexml, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("savexml", 2, 1);
  if (count <= 0) return (self->t_savexml());
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_savexml(arg0));
  CVarRef arg1(a1);
  return (self->t_savexml(arg0, arg1));
}
Variant c_DOMDocument::ifa_createprocessinginstruction(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_createprocessinginstruction, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("createprocessinginstruction", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_createprocessinginstruction(arg0));
  CVarRef arg1(a1);
  return (self->t_createprocessinginstruction(arg0, arg1));
}
Variant c_DOMDocument::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count > 2)) return throw_toomany_arguments("__construct", 2, 1);
  if (count <= 0) return (self->t___construct(), null);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t___construct(arg0), null);
  CVarRef arg1(a1);
  return (self->t___construct(arg0, arg1), null);
}
Variant c_DOMDocument::ifa_registernodeclass(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_registernodeclass, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("registernodeclass", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_registernodeclass(arg0, arg1));
}
Variant c_DOMDocument::ifa_load(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_load, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("load", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_load(arg0));
  CVarRef arg1(a1);
  return (self->t_load(arg0, arg1));
}
Variant c_DOMDocument::ifa_createattributens(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_createattributens, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("createattributens", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_createattributens(arg0, arg1));
}
Variant c_DOMDocument::ifa_createelement(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_createelement, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("createelement", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_createelement(arg0));
  CVarRef arg1(a1);
  return (self->t_createelement(arg0, arg1));
}
Variant c_DOMDocument::ifa_createelementns(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_createelementns, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count < 2 || count > 3)) return throw_wrong_arguments("createelementns", count, 2, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t_createelementns(arg0, arg1));
  CVarRef arg2(a2);
  return (self->t_createelementns(arg0, arg1, arg2));
}
Variant c_DOMDocument::ifa_importnode(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_importnode, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("importnode", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_importnode(arg0));
  CVarRef arg1(a1);
  return (self->t_importnode(arg0, arg1));
}
Variant c_DOMDocument::ifa_relaxngvalidatesource(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_relaxngvalidatesource, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("relaxngvalidatesource", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_relaxngvalidatesource(arg0));
}
Variant c_DOMDocument::ifa_createtextnode(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_createtextnode, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("createtextnode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_createtextnode(arg0));
}
Variant c_DOMDocument::ifa_savehtml(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_savehtml, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("savehtml", 0, 1);
  return (self->t_savehtml());
}
Variant c_DOMDocument::ifa_loadxml(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_loadxml, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("loadxml", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_loadxml(arg0));
  CVarRef arg1(a1);
  return (self->t_loadxml(arg0, arg1));
}
Variant c_DOMDocument::ifa_save(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_save, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("save", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_save(arg0));
  CVarRef arg1(a1);
  return (self->t_save(arg0, arg1));
}
Variant c_DOMDocument::ifa_createattribute(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_createattribute, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("createattribute", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_createattribute(arg0));
}
Variant c_DOMDocument::ifa_xinclude(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_xinclude, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("xinclude", 1, 1);
  if (count <= 0) return (self->t_xinclude());
  CVarRef arg0(a0);
  return (self->t_xinclude(arg0));
}
Variant c_DOMDocument::ifa___get(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___get, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___get(arg0));
}
Variant c_DOMDocument::ifa_loadhtmlfile(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_loadhtmlfile, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("loadhtmlfile", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_loadhtmlfile(arg0));
}
Variant c_DOMDocument::ifa_savehtmlfile(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_savehtmlfile, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("savehtmlfile", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_savehtmlfile(arg0));
}
Variant c_DOMDocument::ifa_getelementbyid(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getelementbyid, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getelementbyid", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_getelementbyid(arg0));
}
Variant c_DOMDocument::ifa___isset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___isset, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___isset(arg0));
}
Variant c_DOMDocument::ifa_createcomment(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_createcomment, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("createcomment", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_createcomment(arg0));
}
Variant c_DOMDocument::ifa_normalizedocument(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_normalizedocument, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("normalizedocument", 0, 1);
  return (self->t_normalizedocument(), null);
}
Variant c_DOMDocument::ifa_createdocumentfragment(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_createdocumentfragment, coo_DOMDocument);
  }
  c_DOMDocument *self ATTRIBUTE_UNUSED (static_cast<c_DOMDocument*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("createdocumentfragment", 0, 1);
  return (self->t_createdocumentfragment());
}
const MethodCallInfoTable c_DOMDocument::s_call_info_table[] = {
  { 0x515FE7746601E385LL, 1, 14, "getElementById", &c_DOMDocument::ci_getelementbyid },
  { 0x142A28F8CE4A4E8ALL, 1, 8, "xinclude", &c_DOMDocument::ci_xinclude },
  { 0x0D128C363EBF7F0DLL, 1, 18, "createCDATASection", &c_DOMDocument::ci_createcdatasection },
  { 0x26B6E00C74FA338FLL, 1, 5, "__get", &c_DOMDocument::ci___get },
  { 0x69C6F7D584EC5011LL, 1, 20, "schemaValidateSource", &c_DOMDocument::ci_schemavalidatesource },
  { 0x04F8F7CEA46D0514LL, 1, 4, "save", &c_DOMDocument::ci_save },
  { 0x52F3DAD783340395LL, 1, 5, "__set", &c_DOMDocument::ci___set },
  { 0x2FC58024A75AEB15LL, 0, 17, "createAttributens", &c_DOMDocument::ci_createattributens },
  { 0x1A78385D7CD10A1CLL, 1, 15, "relaxNGValidate", &c_DOMDocument::ci_relaxngvalidate },
  { 0x1B0F4D437C8404A2LL, 1, 8, "loadHTML", &c_DOMDocument::ci_loadhtml },
  { 0x4C40B0F935B39FA2LL, 0, 13, "createElement", &c_DOMDocument::ci_createelement },
  { 0x1304C35F6E006FACLL, 1, 21, "relaxNGValidateSource", &c_DOMDocument::ci_relaxngvalidatesource },
  { 0x2BFDE9CF0FE9A82CLL, 0, 15, "createAttribute", &c_DOMDocument::ci_createattribute },
  { 0x4A6C6D9AB88CD42FLL, 1, 10, "importNode", &c_DOMDocument::ci_importnode },
  { 0x5FE94CA513F14AAFLL, 0, 12, "loadHTMLFile", &c_DOMDocument::ci_loadhtmlfile },
  { 0x20E2B2FD2B7AE431LL, 1, 7, "loadXML", &c_DOMDocument::ci_loadxml },
  { 0x7A9C4709CAD09832LL, 1, 21, "createEntityReference", &c_DOMDocument::ci_createentityreference },
  { 0x1CA408E02262F737LL, 1, 8, "validate", &c_DOMDocument::ci_validate },
  { 0x29C79E90C6FCC0C7LL, 1, 13, "createComment", &c_DOMDocument::ci_createcomment },
  { 0x7EB8C68BABDC5648LL, 1, 14, "schemaValidate", &c_DOMDocument::ci_schemavalidate },
  { 0x3FFA3F55ECAB93CALL, 1, 20, "getElementsByTagName", &c_DOMDocument::ci_getelementsbytagname },
  { 0x1A9CC561CA4817CALL, 0, 22, "getElementsByTagNameNS", &c_DOMDocument::ci_getelementsbytagnamens },
  { 0x35C0FF513ED3054DLL, 1, 12, "saveHTMLFile", &c_DOMDocument::ci_savehtmlfile },
  { 0x21F3F1C9058310D3LL, 1, 8, "saveHTML", &c_DOMDocument::ci_savehtml },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_DOMDocument::ci___construct },
  { 0x79B7A5774A0943DFLL, 0, 4, "load", &c_DOMDocument::ci_load },
  { 0x26D66F56DDDC32E5LL, 1, 7, "saveXML", &c_DOMDocument::ci_savexml },
  { 0x0AC931EAB2FE3D6ALL, 1, 17, "normalizeDocument", &c_DOMDocument::ci_normalizedocument },
  { 0x05EA36F416B7EBEBLL, 1, 15, "createElementNS", &c_DOMDocument::ci_createelementns },
  { 0x2A99431FC6E7BA6DLL, 1, 27, "createProcessingInstruction", &c_DOMDocument::ci_createprocessinginstruction },
  { 0x4FE08FDDAE2178EELL, 1, 7, "__isset", &c_DOMDocument::ci___isset },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_DOMDocument::ci___destruct },
  { 0x615771958E1EB375LL, 1, 17, "registerNodeClass", &c_DOMDocument::ci_registernodeclass },
  { 0x44FD8C24F4EA46F8LL, 1, 22, "createDocumentFragment", &c_DOMDocument::ci_createdocumentfragment },
  { 0x6056A5BB9855D7FBLL, 1, 14, "createTextNode", &c_DOMDocument::ci_createtextnode },
  { 0, 1, 0, 0 }
};
const int c_DOMDocument::s_call_info_index[] = {
  127,
  -1,-1,-1,-1,-1,0,-1,-1,
  -1,-1,1,-1,-1,2,-1,3,
  -1,4,-1,-1,5,6,-1,-1,
  -1,-1,-1,-1,8,-1,-1,-1,
  -1,-1,9,-1,-1,-1,-1,-1,
  -1,-1,-1,-1,11,-1,-1,13,
  -1,15,16,-1,-1,-1,-1,17,
  -1,-1,-1,-1,-1,-1,-1,-1,
  -1,-1,-1,-1,-1,-1,-1,18,
  19,-1,20,-1,-1,22,-1,-1,
  -1,-1,-1,23,-1,-1,-1,-1,
  -1,-1,-1,-1,-1,-1,-1,24,
  -1,-1,-1,-1,-1,26,-1,-1,
  -1,-1,27,28,-1,29,30,-1,
  -1,-1,-1,31,-1,32,-1,-1,
  33,-1,-1,34,-1,-1,-1,-1,

};
c_DOMDocument *c_DOMDocument::create(String a0, String a1) {
  CountableHelper h(this);
  init();
  t___construct(a0, a1);
  return this;
}
void c_DOMDocument::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 2)) throw_toomany_arguments("__construct", 2, 2);
  do {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) {
      (t___construct());
      break;
    }
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) {
      (t___construct(arg0));
      break;
    }
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    (t___construct(arg0, arg1));
  } while (false);
}
void c_DOMDocument::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DOMDocument::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_DOMDocument = {
  c_DOMDocument::os_getInit,
  c_DOMDocument::os_get,
  c_DOMDocument::os_lval,
  c_DOMDocument::os_invoke,
  c_DOMDocument::os_constant,
  (ObjectData*(*)(ObjectData*))coo_DOMDocument,
  c_DOMDocument::s_call_info_table,c_DOMDocument::s_call_info_index,
  "DOMDocument",
  &cw_DOMNode
};
ObjectData *coo_LibXMLError() {
  return NEWOBJ(c_LibXMLError)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_LibXMLError
Variant c_LibXMLError::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_LibXMLError
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_LibXMLError
Variant c_LibXMLError::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_LibXMLError
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_LibXMLError
Variant &c_LibXMLError::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_LibXMLError
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_LibXMLError
Variant * c_LibXMLError::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_LibXMLError
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_LibXMLError
Variant * c_LibXMLError::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_LibXMLError
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_LibXMLError
Variant * c_LibXMLError::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_LibXMLError
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_LibXMLError
Variant c_LibXMLError::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_LibXMLError
IMPLEMENT_CLASS(LibXMLError)
ObjectData *c_LibXMLError::cloneImpl() {
  ObjectData *obj = coo_LibXMLError();
  c_LibXMLError::cloneSet(obj);
  return obj;
}
void c_LibXMLError::cloneSet(ObjectData *cl) {
  c_LibXMLError *clone = static_cast<c_LibXMLError*>(cl);
  ObjectData::cloneSet(clone);
}
CallInfo c_LibXMLError::ci___destruct((void*)&c_LibXMLError::i___destruct, (void*)&c_LibXMLError::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_LibXMLError::ci___construct((void*)&c_LibXMLError::i___construct, (void*)&c_LibXMLError::ifa___construct, 0, 4, 0x0000000000000000LL);
Variant c_LibXMLError::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_LibXMLError);
  }
  c_LibXMLError *self ATTRIBUTE_UNUSED (static_cast<c_LibXMLError*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_LibXMLError::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_LibXMLError);
  }
  c_LibXMLError *self ATTRIBUTE_UNUSED (static_cast<c_LibXMLError*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
Variant c_LibXMLError::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_LibXMLError);
  }
  c_LibXMLError *self ATTRIBUTE_UNUSED (static_cast<c_LibXMLError*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_LibXMLError::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_LibXMLError);
  }
  c_LibXMLError *self ATTRIBUTE_UNUSED (static_cast<c_LibXMLError*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__construct", 0, 1);
  return (self->t___construct(), null);
}
const MethodCallInfoTable c_LibXMLError::s_call_info_table[] = {
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_LibXMLError::ci___destruct },
  { 0x0D31D0AC229C615FLL, 0, 11, "__construct", &c_LibXMLError::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_LibXMLError::s_call_info_index[] = {
  3,
  -1,-1,-1,0,
};
c_LibXMLError *c_LibXMLError::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
void c_LibXMLError::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) throw_toomany_arguments("__construct", 0, 2);
  (t___construct());
}
void c_LibXMLError::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_LibXMLError::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_LibXMLError = {
  c_LibXMLError::os_getInit,
  c_LibXMLError::os_get,
  c_LibXMLError::os_lval,
  c_LibXMLError::os_invoke,
  c_LibXMLError::os_constant,
  (ObjectData*(*)(ObjectData*))coo_LibXMLError,
  c_LibXMLError::s_call_info_table,c_LibXMLError::s_call_info_index,
  "LibXMLError",
  0
};
ObjectData *coo_DOMElement() {
  return NEWOBJ(c_DOMElement)();
}
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMElement
Variant c_DOMElement::os_getInit(CStrRef s) {
  return c_DOMNode::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DOMElement
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMElement
Variant c_DOMElement::os_get(CStrRef s) {
  return c_DOMNode::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DOMElement
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMElement
Variant &c_DOMElement::os_lval(CStrRef s) {
  return c_DOMNode::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DOMElement
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DOMElement
Variant * c_DOMElement::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DOMElement
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMElement
Variant * c_DOMElement::o_realPropPublic(CStrRef s, int flags) const {
  return c_DOMNode::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DOMElement
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMElement
Variant * c_DOMElement::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DOMElement
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMElement
Variant c_DOMElement::os_constant(const char *s) {
  return c_DOMNode::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DOMElement
IMPLEMENT_CLASS(DOMElement)
ObjectData *c_DOMElement::cloneImpl() {
  ObjectData *obj = coo_DOMElement();
  c_DOMElement::cloneSet(obj);
  return obj;
}
void c_DOMElement::cloneSet(ObjectData *cl) {
  c_DOMElement *clone = static_cast<c_DOMElement*>(cl);
  c_DOMNode::cloneSet(clone);
}
CallInfo c_DOMElement::ci_getelementsbytagname((void*)&c_DOMElement::i_getelementsbytagname, (void*)&c_DOMElement::ifa_getelementsbytagname, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMElement::ci_setidattributens((void*)&c_DOMElement::i_setidattributens, (void*)&c_DOMElement::ifa_setidattributens, 3, 4, 0x0000000000000000LL);
CallInfo c_DOMElement::ci_getattribute((void*)&c_DOMElement::i_getattribute, (void*)&c_DOMElement::ifa_getattribute, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMElement::ci_getelementsbytagnamens((void*)&c_DOMElement::i_getelementsbytagnamens, (void*)&c_DOMElement::ifa_getelementsbytagnamens, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMElement::ci_getattributenodens((void*)&c_DOMElement::i_getattributenodens, (void*)&c_DOMElement::ifa_getattributenodens, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMElement::ci___destruct((void*)&c_DOMElement::i___destruct, (void*)&c_DOMElement::ifa___destruct, 0, 4, 0x0000000000000000LL);
CallInfo c_DOMElement::ci___set((void*)&c_DOMElement::i___set, (void*)&c_DOMElement::ifa___set, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMElement::ci___construct((void*)&c_DOMElement::i___construct, (void*)&c_DOMElement::ifa___construct, 3, 4, 0x0000000000000000LL);
CallInfo c_DOMElement::ci_hasattribute((void*)&c_DOMElement::i_hasattribute, (void*)&c_DOMElement::ifa_hasattribute, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMElement::ci_hasattributens((void*)&c_DOMElement::i_hasattributens, (void*)&c_DOMElement::ifa_hasattributens, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMElement::ci_setattributenodens((void*)&c_DOMElement::i_setattributenodens, (void*)&c_DOMElement::ifa_setattributenodens, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMElement::ci_setattributens((void*)&c_DOMElement::i_setattributens, (void*)&c_DOMElement::ifa_setattributens, 3, 4, 0x0000000000000000LL);
CallInfo c_DOMElement::ci_getattributens((void*)&c_DOMElement::i_getattributens, (void*)&c_DOMElement::ifa_getattributens, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMElement::ci_removeattributens((void*)&c_DOMElement::i_removeattributens, (void*)&c_DOMElement::ifa_removeattributens, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMElement::ci_getattributenode((void*)&c_DOMElement::i_getattributenode, (void*)&c_DOMElement::ifa_getattributenode, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMElement::ci_setidattribute((void*)&c_DOMElement::i_setidattribute, (void*)&c_DOMElement::ifa_setidattribute, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMElement::ci_setidattributenode((void*)&c_DOMElement::i_setidattributenode, (void*)&c_DOMElement::ifa_setidattributenode, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMElement::ci_setattribute((void*)&c_DOMElement::i_setattribute, (void*)&c_DOMElement::ifa_setattribute, 2, 4, 0x0000000000000000LL);
CallInfo c_DOMElement::ci_removeattributenode((void*)&c_DOMElement::i_removeattributenode, (void*)&c_DOMElement::ifa_removeattributenode, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMElement::ci___get((void*)&c_DOMElement::i___get, (void*)&c_DOMElement::ifa___get, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMElement::ci_removeattribute((void*)&c_DOMElement::i_removeattribute, (void*)&c_DOMElement::ifa_removeattribute, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMElement::ci___isset((void*)&c_DOMElement::i___isset, (void*)&c_DOMElement::ifa___isset, 1, 4, 0x0000000000000000LL);
CallInfo c_DOMElement::ci_setattributenode((void*)&c_DOMElement::i_setattributenode, (void*)&c_DOMElement::ifa_setattributenode, 1, 4, 0x0000000000000000LL);
Variant c_DOMElement::i_getelementsbytagname(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getelementsbytagname, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getelementsbytagname", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getelementsbytagname(arg0));
  }
}
Variant c_DOMElement::i_setidattributens(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setidattributens, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("setidattributens", count, 3, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_setidattributens(arg0, arg1, arg2));
  }
}
Variant c_DOMElement::i_getattribute(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getattribute, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getattribute", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getattribute(arg0));
  }
}
Variant c_DOMElement::i_getelementsbytagnamens(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getelementsbytagnamens, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("getelementsbytagnamens", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_getelementsbytagnamens(arg0, arg1));
  }
}
Variant c_DOMElement::i_getattributenodens(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getattributenodens, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("getattributenodens", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_getattributenodens(arg0, arg1));
  }
}
Variant c_DOMElement::i___destruct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___destruct, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMElement::i___set(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___set, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___set(arg0, arg1));
  }
}
Variant c_DOMElement::i___construct(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___construct, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("__construct", count, 1, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t___construct(arg0), null);
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) return (self->t___construct(arg0, arg1), null);
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___construct(arg0, arg1, arg2), null);
  }
}
Variant c_DOMElement::i_hasattribute(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_hasattribute, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hasattribute", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_hasattribute(arg0));
  }
}
Variant c_DOMElement::i_hasattributens(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_hasattributens, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hasattributens", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_hasattributens(arg0, arg1));
  }
}
Variant c_DOMElement::i_setattributenodens(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setattributenodens, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setattributenodens", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_setattributenodens(arg0));
  }
}
Variant c_DOMElement::i_setattributens(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setattributens, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("setattributens", count, 3, 3, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_setattributens(arg0, arg1, arg2));
  }
}
Variant c_DOMElement::i_getattributens(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getattributens, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("getattributens", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_getattributens(arg0, arg1));
  }
}
Variant c_DOMElement::i_removeattributens(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_removeattributens, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("removeattributens", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_removeattributens(arg0, arg1));
  }
}
Variant c_DOMElement::i_getattributenode(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_getattributenode, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getattributenode", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getattributenode(arg0));
  }
}
Variant c_DOMElement::i_setidattribute(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setidattribute, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("setidattribute", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_setidattribute(arg0, arg1));
  }
}
Variant c_DOMElement::i_setidattributenode(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setidattributenode, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("setidattributenode", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_setidattributenode(arg0, arg1));
  }
}
Variant c_DOMElement::i_setattribute(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setattribute, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("setattribute", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_setattribute(arg0, arg1));
  }
}
Variant c_DOMElement::i_removeattributenode(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_removeattributenode, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("removeattributenode", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_removeattributenode(arg0));
  }
}
Variant c_DOMElement::i___get(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___get, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___get(arg0));
  }
}
Variant c_DOMElement::i_removeattribute(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_removeattribute, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("removeattribute", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_removeattribute(arg0));
  }
}
Variant c_DOMElement::i___isset(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i___isset, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___isset(arg0));
  }
}
Variant c_DOMElement::i_setattributenode(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_setattributenode, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setattributenode", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_setattributenode(arg0));
  }
}
Variant c_DOMElement::ifa_getelementsbytagname(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getelementsbytagname, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getelementsbytagname", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_getelementsbytagname(arg0));
}
Variant c_DOMElement::ifa_setidattributens(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setidattributens, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("setidattributens", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (self->t_setidattributens(arg0, arg1, arg2));
}
Variant c_DOMElement::ifa_getattribute(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getattribute, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getattribute", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_getattribute(arg0));
}
Variant c_DOMElement::ifa_getelementsbytagnamens(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getelementsbytagnamens, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("getelementsbytagnamens", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_getelementsbytagnamens(arg0, arg1));
}
Variant c_DOMElement::ifa_getattributenodens(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getattributenodens, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("getattributenodens", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_getattributenodens(arg0, arg1));
}
Variant c_DOMElement::ifa___destruct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___destruct, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("__destruct", 0, 1);
  return (self->t___destruct());
}
Variant c_DOMElement::ifa___set(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___set, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("__set", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t___set(arg0, arg1));
}
Variant c_DOMElement::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 3)) return throw_wrong_arguments("__construct", count, 1, 3, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t___construct(arg0), null);
  CVarRef arg1(a1);
  if (count <= 2) return (self->t___construct(arg0, arg1), null);
  CVarRef arg2(a2);
  return (self->t___construct(arg0, arg1, arg2), null);
}
Variant c_DOMElement::ifa_hasattribute(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_hasattribute, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("hasattribute", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_hasattribute(arg0));
}
Variant c_DOMElement::ifa_hasattributens(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_hasattributens, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("hasattributens", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_hasattributens(arg0, arg1));
}
Variant c_DOMElement::ifa_setattributenodens(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setattributenodens, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setattributenodens", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_setattributenodens(arg0));
}
Variant c_DOMElement::ifa_setattributens(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setattributens, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("setattributens", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (self->t_setattributens(arg0, arg1, arg2));
}
Variant c_DOMElement::ifa_getattributens(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getattributens, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("getattributens", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_getattributens(arg0, arg1));
}
Variant c_DOMElement::ifa_removeattributens(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_removeattributens, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("removeattributens", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_removeattributens(arg0, arg1));
}
Variant c_DOMElement::ifa_getattributenode(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getattributenode, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("getattributenode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_getattributenode(arg0));
}
Variant c_DOMElement::ifa_setidattribute(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setidattribute, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("setidattribute", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_setidattribute(arg0, arg1));
}
Variant c_DOMElement::ifa_setidattributenode(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setidattributenode, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("setidattributenode", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_setidattributenode(arg0, arg1));
}
Variant c_DOMElement::ifa_setattribute(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setattribute, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("setattribute", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_setattribute(arg0, arg1));
}
Variant c_DOMElement::ifa_removeattributenode(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_removeattributenode, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("removeattributenode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_removeattributenode(arg0));
}
Variant c_DOMElement::ifa___get(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___get, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__get", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___get(arg0));
}
Variant c_DOMElement::ifa_removeattribute(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_removeattribute, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("removeattribute", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_removeattribute(arg0));
}
Variant c_DOMElement::ifa___isset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___isset, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("__isset", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t___isset(arg0));
}
Variant c_DOMElement::ifa_setattributenode(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setattributenode, coo_DOMElement);
  }
  c_DOMElement *self ATTRIBUTE_UNUSED (static_cast<c_DOMElement*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("setattributenode", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_setattributenode(arg0));
}
const MethodCallInfoTable c_DOMElement::s_call_info_table[] = {
  { 0x3FFA3F55ECAB93CALL, 1, 20, "getElementsByTagName", &c_DOMElement::ci_getelementsbytagname },
  { 0x1A9CC561CA4817CALL, 0, 22, "getElementsByTagNameNS", &c_DOMElement::ci_getelementsbytagnamens },
  { 0x29D272CBBC0CDA4ALL, 0, 18, "setIDAttributeNode", &c_DOMElement::ci_setidattributenode },
  { 0x1D5B8B8144F4AB8ALL, 0, 12, "setAttribute", &c_DOMElement::ci_setattribute },
  { 0x26B6E00C74FA338FLL, 1, 5, "__get", &c_DOMElement::ci___get },
  { 0x710986B01E1A0890LL, 1, 17, "removeAttributeNS", &c_DOMElement::ci_removeattributens },
  { 0x31426AC6A851EE11LL, 1, 16, "setIDAttributeNS", &c_DOMElement::ci_setidattributens },
  { 0x482E3873306253D1LL, 0, 18, "setAttributeNodeNS", &c_DOMElement::ci_setattributenodens },
  { 0x52F3DAD783340395LL, 1, 5, "__set", &c_DOMElement::ci___set },
  { 0x5EF7C3A45311D955LL, 0, 14, "hasAttributeNS", &c_DOMElement::ci_hasattributens },
  { 0x6F83EC29E110D616LL, 1, 14, "setIDAttribute", &c_DOMElement::ci_setidattribute },
  { 0x62A40E71FAF19157LL, 1, 14, "setAttributeNS", &c_DOMElement::ci_setattributens },
  { 0x640FA60DDC80EC18LL, 1, 18, "getAttributeNodeNS", &c_DOMElement::ci_getattributenodens },
  { 0x34E103E06D3F0899LL, 1, 14, "getAttributeNS", &c_DOMElement::ci_getattributens },
  { 0x606827EF5CF34C5CLL, 1, 16, "setAttributeNode", &c_DOMElement::ci_setattributenode },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_DOMElement::ci___construct },
  { 0x49F89C466612FC28LL, 1, 12, "getAttribute", &c_DOMElement::ci_getattribute },
  { 0x1BFDB4272EA150EALL, 1, 19, "removeAttributeNode", &c_DOMElement::ci_removeattributenode },
  { 0x6471DF8BB944FFECLL, 1, 12, "hasAttribute", &c_DOMElement::ci_hasattribute },
  { 0x4FE08FDDAE2178EELL, 1, 7, "__isset", &c_DOMElement::ci___isset },
  { 0x47B96C0FC62E1E2FLL, 1, 15, "removeAttribute", &c_DOMElement::ci_removeattribute },
  { 0x7F974836AACC1EF3LL, 1, 10, "__destruct", &c_DOMElement::ci___destruct },
  { 0x343DF562BB5AB1FELL, 1, 16, "getAttributeNode", &c_DOMElement::ci_getattributenode },
  { 0, 1, 0, 0 }
};
const int c_DOMElement::s_call_info_index[] = {
  63,
  -1,-1,-1,-1,-1,-1,-1,-1,
  -1,-1,0,-1,-1,-1,-1,4,
  5,6,-1,-1,-1,8,10,11,
  12,13,-1,-1,14,-1,-1,15,
  -1,-1,-1,-1,-1,-1,-1,-1,
  16,-1,17,-1,18,-1,19,20,
  -1,-1,-1,21,-1,-1,-1,-1,
  -1,-1,-1,-1,-1,-1,22,-1,

};
c_DOMElement *c_DOMElement::create(String a0, String a1, String a2) {
  CountableHelper h(this);
  init();
  t___construct(a0, a1, a2);
  return this;
}
void c_DOMElement::dynConstruct(CArrRef params) {
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1 || count > 3)) throw_wrong_arguments("__construct", count, 1, 3, 2);
  do {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) {
      (t___construct(arg0));
      break;
    }
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count <= 2) {
      (t___construct(arg0, arg1));
      break;
    }
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    (t___construct(arg0, arg1, arg2));
  } while (false);
}
void c_DOMElement::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DOMElement::ci___construct;
  mcp.obj = this;
}
ObjectStaticCallbacks cw_DOMElement = {
  c_DOMElement::os_getInit,
  c_DOMElement::os_get,
  c_DOMElement::os_lval,
  c_DOMElement::os_invoke,
  c_DOMElement::os_constant,
  (ObjectData*(*)(ObjectData*))coo_DOMElement,
  c_DOMElement::s_call_info_table,c_DOMElement::s_call_info_index,
  "DOMElement",
  &cw_DOMNode
};
struct hashNodeCTD {
  int64 hash;
  const char *name;
  int64 ptv1;
  ObjectData*(* const ptr2)();
};
static const hashNodeCTD ctdBuckets[] = {
  {0xCDA860E5647C3908LL,"ImageSprite",(int64)&cw_ImageSprite,&coo_ImageSprite},
  {0xA1EF70351574EC09LL,"ReflectionFunction",(int64)&cw_ReflectionFunction,&coo_ReflectionFunction},
  {0xC365BE9E5A85E60BLL,"DOMNotation",(int64)&cw_DOMNotation,&coo_DOMNotation},
  {0x69EDCA1CC29CFE0BLL,"ErrorException",(int64)&cw_ErrorException,&coo_ErrorException},
  {0xE48FB595C359F411LL,"SpoofChecker",(int64)&cw_SpoofChecker,&coo_SpoofChecker},
  {0xF8B42582709BAF12LL,"DebuggerProxy",(int64)&cw_DebuggerProxy,&coo_DebuggerProxy},
  {0xEA76B9AABB7CC713LL,"SimpleXMLElement",(int64)&cw_SimpleXMLElement,&coo_SimpleXMLElement},
  {0xB2E5C767255D2515LL,"SoapFault",(int64)&cw_SoapFault,&coo_SoapFault},
  {0xDCBA5B52C68B501ALL,"DOMEntityReference",(int64)&cw_DOMEntityReference,&coo_DOMEntityReference},
  {0xB5A44A5E6AE2E71DLL,"ReflectionClass",(int64)&cw_ReflectionClass,&coo_ReflectionClass},
  {0xBDB8FB455A602A1ELL,"DateTime",(int64)&cw_DateTime,&coo_DateTime},
  {0x9C85D092180A6325LL,"XMLReader",(int64)&cw_XMLReader,&coo_XMLReader},
  {0xFE66D362EAB5BF2BLL,"SimpleXMLElementIterator",(int64)&cw_SimpleXMLElementIterator,&coo_SimpleXMLElementIterator},
  {0xDA1D16E68CA95F2FLL,"MutableArrayIterator",(int64)&cw_MutableArrayIterator,&coo_MutableArrayIterator},
  {0xFA394042E7488231LL,"FilterIterator",(int64)&cw_FilterIterator,&coo_FilterIterator},
  {0xB65899865E2EAA32LL,"RecursiveIteratorIterator",(int64)&cw_RecursiveIteratorIterator,&coo_RecursiveIteratorIterator},
  {0xC6D7EC2E443AFA34LL,"IteratorIterator",(int64)&cw_IteratorIterator,&coo_IteratorIterator},
  {0xF909270014376235LL,"SoapVar",(int64)&cw_SoapVar,&coo_SoapVar},
  {0xFFF7A8442616EF37LL,"DOMNodeIterator",(int64)&cw_DOMNodeIterator,&coo_DOMNodeIterator},
  {0xE72AD818DDE95538LL,"ReflectionException",(int64)&cw_ReflectionException,&coo_ReflectionException},
  {0x85DE30099B58533DLL,"GenericContinuation",(int64)&cw_GenericContinuation,&coo_GenericContinuation},
  {0x4C6991D3CF5CA03DLL,"Collator",(int64)&cw_Collator,&coo_Collator},
  {0xC9FC1A1F7B878C3ELL,"SoapServer",(int64)&cw_SoapServer,&coo_SoapServer},
  {0xA27C70ED5B143841LL,"OutOfBoundsException",(int64)&cw_OutOfBoundsException,&coo_OutOfBoundsException},
  {0xC83F5149CA964744LL,"EncodingMatch",(int64)&cw_EncodingMatch,&coo_EncodingMatch},
  {0x4253D8488B734244LL,"PDOStatement",(int64)&cw_PDOStatement,&coo_PDOStatement},
  {0x996F76C9C527B946LL,"DOMNamedNodeMap",(int64)&cw_DOMNamedNodeMap,&coo_DOMNamedNodeMap},
  {0x66282FC8E4EF4E46LL,"BadFunctionCallException",(int64)&cw_BadFunctionCallException,&coo_BadFunctionCallException},
  {0xDAA2EE582E0D3849LL,"UnexpectedValueException",(int64)&cw_UnexpectedValueException,&coo_UnexpectedValueException},
  {0xF2A49A22C192034ALL,"Memcached",(int64)&cw_Memcached,&coo_Memcached},
  {0xC860DC2F9B0E6D4BLL,"LogicException",(int64)&cw_LogicException,&coo_LogicException},
  {0x964F490DAC49174DLL,"DOMText",(int64)&cw_DOMText,&coo_DOMText},
  {0xB08D1D59986A3D4ELL,"SoapHeader",(int64)&cw_SoapHeader,&coo_SoapHeader},
  {0xDBA243B9FBA7A64FLL,"SplObjectStorage",(int64)&cw_SplObjectStorage,&coo_SplObjectStorage},
  {0xD2EA111229F87A50LL,"Normalizer",(int64)&cw_Normalizer,&coo_Normalizer},
  {0xB955263C51FB4A51LL,"GeneratorClosure",(int64)&cw_GeneratorClosure,&coo_GeneratorClosure},
  {0x82239AA5D64B1453LL,"DOMCharacterData",(int64)&cw_DOMCharacterData,&coo_DOMCharacterData},
  {0x6AF83706F76A9D53LL,"RangeException",(int64)&cw_RangeException,&coo_RangeException},
  {0xF754323897E8A15ELL,"DirectoryIterator",(int64)&cw_DirectoryIterator,&coo_DirectoryIterator},
  {0xF0EBB2CC1FBF9761LL,"DOMDocumentType",(int64)&cw_DOMDocumentType,&coo_DOMDocumentType},
  {0xF0747A09B3523662LL,"DOMNode",(int64)&cw_DOMNode,&coo_DOMNode},
  {0xFD1235273F521A63LL,"DebuggerClient",(int64)&cw_DebuggerClient,&coo_DebuggerClient},
  {0xAFF1EF6EBB3DA065LL,"XMLWriter",(int64)&cw_XMLWriter,&coo_XMLWriter},
  {0xFE07B9C27FE59D68LL,"DOMComment",(int64)&cw_DOMComment,&coo_DOMComment},
  {0x17A40D895C55D968LL,"SoapParam",(int64)&cw_SoapParam,&coo_SoapParam},
  {0xEA5B99D5B1A4566ALL,"DOMException",(int64)&cw_DOMException,&coo_DOMException},
  {0xBCAE91CFA2AAD16BLL,"LengthException",(int64)&cw_LengthException,&coo_LengthException},
  {0xB280F0C292E92A6CLL,"Closure",(int64)&cw_Closure,&coo_Closure},
  {0xBD5870E53BF89873LL,"ArrayIterator",(int64)&cw_ArrayIterator,&coo_ArrayIterator},
  {0x0B61E0BFCFA06573LL,"ReflectionExtension",(int64)&cw_ReflectionExtension,&coo_ReflectionExtension},
  {0x885A4F6FD393D475LL,"InvalidArgumentException",(int64)&cw_InvalidArgumentException,&coo_InvalidArgumentException},
  {0xC1A9F7D81254DD7ALL,"ReflectionObject",(int64)&cw_ReflectionObject,&coo_ReflectionObject},
  {0xFAD161197633B87DLL,"DOMDocumentFragment",(int64)&cw_DOMDocumentFragment,&coo_DOMDocumentFragment},
  {0x2E899D2A2572EF7DLL,"SQLite3Result",(int64)&cw_SQLite3Result,&coo_SQLite3Result},
  {0xD9B3EFD1CD987F80LL,"DOMProcessingInstruction",(int64)&cw_DOMProcessingInstruction,&coo_DOMProcessingInstruction},
  {0xB3BD46E935281082LL,"ReflectionFunctionAbstract",(int64)&cw_ReflectionFunctionAbstract,&coo_ReflectionFunctionAbstract},
  {0xA4DE53FD7D3E8383LL,"DateTimeZone",(int64)&cw_DateTimeZone,&coo_DateTimeZone},
  {0xF0D4A29DE6A7BA84LL,"DomainException",(int64)&cw_DomainException,&coo_DomainException},
  {0xA2500D8A3618ED87LL,"EncodingDetector",(int64)&cw_EncodingDetector,&coo_EncodingDetector},
  {0xB4C95AF311506C8FLL,"Directory",(int64)&cw_Directory,&coo_Directory},
  {0x86335FF83CDEA590LL,"BadMethodCallException",(int64)&cw_BadMethodCallException,&coo_BadMethodCallException},
  {0xAE7081C468A05993LL,"ReflectionParameter",(int64)&cw_ReflectionParameter,&coo_ReflectionParameter},
  {0xEFFDF8DF15CABE94LL,"DOMCDATASection",(int64)&cw_DOMCDATASection,&coo_DOMCDATASection},
  {0x6576EACCCE24D694LL,"__PHP_Incomplete_Class",(int64)&cw___PHP_Incomplete_Class,&coo___PHP_Incomplete_Class},
  {0x47D93E6F80B66A94LL,"Exception",(int64)&cw_Exception,&coo_Exception},
  {0xF1089C29FE923FA7LL,"SplFileInfo",(int64)&cw_SplFileInfo,&coo_SplFileInfo},
  {0xFD46DB2E09C6DBA8LL,"DOMXPath",(int64)&cw_DOMXPath,&coo_DOMXPath},
  {0x9D35C3EFD00E11A9LL,"SQLite3",(int64)&cw_SQLite3,&coo_SQLite3},
  {0xE7E31D42F2DFE4AALL,"Locale",(int64)&cw_Locale,&coo_Locale},
  {0x8A34015F67C804ADLL,"PDO",(int64)&cw_PDO,&coo_PDO},
  {0xAE650138BA043AAFLL,"DOMDocument",(int64)&cw_DOMDocument,&coo_DOMDocument},
  {0xC3BBC8F6F28E44B0LL,"ReflectionMethod",(int64)&cw_ReflectionMethod,&coo_ReflectionMethod},
  {0xEDD772FA3B20B8B1LL,"DOMNodeList",(int64)&cw_DOMNodeList,&coo_DOMNodeList},
  {0xDD8785ACD19F77BDLL,"PDOException",(int64)&cw_PDOException,&coo_PDOException},
  {0xC0B3C44077F5DDC3LL,"DOMElement",(int64)&cw_DOMElement,&coo_DOMElement},
  {0xAE363D51549781C8LL,"AppendIterator",(int64)&cw_AppendIterator,&coo_AppendIterator},
  {0xA53AC17234FC8CCBLL,"LibXMLError",(int64)&cw_LibXMLError,&coo_LibXMLError},
  {0xBC122DF8859C72D0LL,"Memcache",(int64)&cw_Memcache,&coo_Memcache},
  {0xD2E5CC58B841AED2LL,"SQLite3Stmt",(int64)&cw_SQLite3Stmt,&coo_SQLite3Stmt},
  {0x297ECCC7A259EDD2LL,"SplFileObject",(int64)&cw_SplFileObject,&coo_SplFileObject},
  {0xDE623FEAF7B068D4LL,"UnderflowException",(int64)&cw_UnderflowException,&coo_UnderflowException},
  {0xC64D3427431A6ED8LL,"RecursiveDirectoryIterator",(int64)&cw_RecursiveDirectoryIterator,&coo_RecursiveDirectoryIterator},
  {0x8E4CCE95F6A727D9LL,"OverflowException",(int64)&cw_OverflowException,&coo_OverflowException},
  {0xFA52EBE538182BDALL,"SoapClient",(int64)&cw_SoapClient,&coo_SoapClient},
  {0x9078CB3118A8B3DCLL,"RuntimeException",(int64)&cw_RuntimeException,&coo_RuntimeException},
  {0xE1DD21ABF790E9E2LL,"Continuation",(int64)&cw_Continuation,&coo_Continuation},
  {0xF5AA2571BDB659E4LL,"ReflectionProperty",(int64)&cw_ReflectionProperty,&coo_ReflectionProperty},
  {0xA97174231D4912F4LL,"DOMAttr",(int64)&cw_DOMAttr,&coo_DOMAttr},
  {0xBD69936178BA13F7LL,"stdClass",(int64)&cw_stdClass,&coo_stdClass},
  {0xE22D4DF07E2A01FCLL,"OutOfRangeException",(int64)&cw_OutOfRangeException,&coo_OutOfRangeException},
  {0xF4419B70A46387FDLL,"DOMImplementation",(int64)&cw_DOMImplementation,&coo_DOMImplementation},
  {0x3D290BF933ED12FDLL,"XhprofFrame",(int64)&cw_XhprofFrame,&coo_XhprofFrame},
  {0xE24835B2D74B86FFLL,"DOMEntity",(int64)&cw_DOMEntity,&coo_DOMEntity},
  { -1,0,0,0 } };
static const int ctdMapTable[] = {
  -1,-1,-1,-1,-1,-1,-1,-1,
  0,1,-1,2,-1,-1,-1,-1,
  -1,4,5,6,-1,7,-1,-1,
  -1,-1,8,-1,-1,9,10,-1,
  -1,-1,-1,-1,-1,11,-1,-1,
  -1,-1,-1,12,-1,-1,-1,13,
  -1,14,15,-1,16,17,-1,18,
  19,-1,-1,-1,-1,20,22,-1,
  -1,23,-1,-1,24,-1,26,-1,
  -1,28,29,30,-1,31,32,33,
  34,35,-1,36,-1,-1,-1,-1,
  -1,-1,-1,-1,-1,-1,38,-1,
  -1,39,40,41,-1,42,-1,-1,
  43,-1,45,46,47,-1,-1,-1,
  -1,-1,-1,48,-1,50,-1,-1,
  -1,-1,51,-1,-1,52,-1,-1,
  54,-1,55,56,57,-1,-1,58,
  -1,-1,-1,-1,-1,-1,-1,59,
  60,-1,-1,61,62,-1,-1,-1,
  -1,-1,-1,-1,-1,-1,-1,-1,
  -1,-1,-1,-1,-1,-1,-1,65,
  66,67,68,-1,-1,69,-1,70,
  71,72,-1,-1,-1,-1,-1,-1,
  -1,-1,-1,-1,-1,73,-1,-1,
  -1,-1,-1,74,-1,-1,-1,-1,
  75,-1,-1,76,-1,-1,-1,-1,
  77,-1,78,-1,80,-1,-1,-1,
  81,82,83,-1,84,-1,-1,-1,
  -1,-1,85,-1,86,-1,-1,-1,
  -1,-1,-1,-1,-1,-1,-1,-1,
  -1,-1,-1,-1,87,-1,-1,88,
  -1,-1,-1,-1,89,90,-1,92,

};

static const hashNodeCTD *
findCTD(CStrRef name) {
  int64 hash = name->hash();
  int o = ctdMapTable[hash & 255];
  if (UNLIKELY(o < 0)) return NULL;
  const hashNodeCTD *p = &ctdBuckets[o];
  int64 h = p->hash & (uint64(-1)>>1);
  do {
    if (h == hash && (LIKELY(p->name==name.data())||LIKELY(!strcasecmp(p->name, name.data())))) return p;
    h = (++p)->hash;
  } while (h >= 0);
  return NULL;
}
Variant get_builtin_class_var_init(CStrRef s, const char *var) {
  const hashNodeCTD *p = findCTD(s);
  if (p) {
    return ((const ObjectStaticCallbacks *)p->ptv1)->os_getInit(var);
  }
  return throw_missing_class(s);
}
ObjectData *create_builtin_object_only_no_init(CStrRef s, ObjectData* root /* = NULL*/) {
  const hashNodeCTD *p = findCTD(s);
  if (p) {
    return p->ptr2();
  }
  throw_missing_class(s);
  return 0;
}
Object create_builtin_object_only(CStrRef s, ObjectData* root /* = NULL*/) {
  Object r(create_builtin_object_only_no_init(s, root));
  r->init();
  return r;
}
bool get_call_info_static_method_builtin(MethodCallPackage &mcp) {
  StringData *s ATTRIBUTE_UNUSED (mcp.rootCls);
  const hashNodeCTD *p = findCTD(StrNR(s));
  const ObjectStaticCallbacks *osc=p?(const ObjectStaticCallbacks *)p->ptv1:0;
  return ObjectStaticCallbacks::GetCallInfo(osc,mcp,-1);
}
const ObjectStaticCallbacks * get_builtin_object_static_callbacks(CStrRef s) {
  const hashNodeCTD *p = findCTD(s);
  if (p) {
    return ((const ObjectStaticCallbacks *)p->ptv1);
  }
  return NULL;
}
Variant get_builtin_static_property(CStrRef s, const char *prop) {
  {
    const ObjectStaticCallbacks * cwo = get_builtin_object_static_callbacks(s);
    if (cwo) return cwo->os_get(prop);
  }
  return null;
}
Variant *get_builtin_static_property_lv(CStrRef s, const char *prop) {
  {
    const ObjectStaticCallbacks * cwo = get_builtin_object_static_callbacks(s);
    if (cwo) return &cwo->os_lval(prop);
  }
  return NULL;
}
Variant get_builtin_class_constant(CStrRef s, const char *constant, bool fatal /* = true */) {
  {
    const ObjectStaticCallbacks * cwo = get_builtin_object_static_callbacks(s);
    if (cwo) return cwo->os_constant(constant);
  }
  if (fatal) {
    raise_error("Couldn't find constant %s::%s", s.data(), constant);
  } else {
    raise_warning("Couldn't find constant %s::%s", s.data(), constant);
  }
  return null;
}

// Class tables
ClassPropTable cpt_Continuation;
ClassPropTable cpt_GenericContinuation;
static int ctInitializer() {
  const char *ctMapData[] = {
    (const char *)10, (const char *)10, (const char *)&cpt_Continuation, (const char *)NULL,
    (const char *)256, (const char *)&NAMSTR(s_sys_ssc9ae0c06, "\000Continuation\000obj"),
    (const char *)GET_PROPERTY_OFFSET(c_Continuation, m_obj),
    (const char *)9,
    (const char *)256, (const char *)&NAMSTR(s_sys_ss9621feb5, "\000Continuation\000args"),
    (const char *)GET_PROPERTY_OFFSET(c_Continuation, m_args),
    (const char *)8,
    (const char *)256, (const char *)&NAMSTR(s_sys_ss40877955, "\000Continuation\000label"),
    (const char *)GET_PROPERTY_OFFSET(c_Continuation, m_label),
    (const char *)4,
    (const char *)256, (const char *)&NAMSTR(s_sys_sscbecc3ad, "\000Continuation\000index"),
    (const char *)GET_PROPERTY_OFFSET(c_Continuation, m_index),
    (const char *)4,
    (const char *)256, (const char *)&NAMSTR(s_sys_ss4e65aff3, "\000Continuation\000value"),
    (const char *)GET_PROPERTY_OFFSET(c_Continuation, m_value),
    (const char *)10,
    (const char *)256, (const char *)&NAMSTR(s_sys_ss19136311, "\000Continuation\000received"),
    (const char *)GET_PROPERTY_OFFSET(c_Continuation, m_received),
    (const char *)10,
    (const char *)256, (const char *)&NAMSTR(s_sys_ss0a6d9bb5, "\000Continuation\000origFuncName"),
    (const char *)GET_PROPERTY_OFFSET(c_Continuation, m_origFuncName),
    (const char *)7,
    (const char *)256, (const char *)&NAMSTR(s_sys_ss07090831, "\000Continuation\000called_class"),
    (const char *)GET_PROPERTY_OFFSET(c_Continuation, m_called_class),
    (const char *)7,
    (const char *)256, (const char *)&NAMSTR(s_sys_ss837e9a25, "\000Continuation\000done"),
    (const char *)GET_PROPERTY_OFFSET(c_Continuation, m_done),
    (const char *)2,
    (const char *)256, (const char *)&NAMSTR(s_sys_ssde0dbfb2, "\000Continuation\000running"),
    (const char *)GET_PROPERTY_OFFSET(c_Continuation, m_running),
    (const char *)2,

    (const char *)1, (const char *)1, (const char *)&cpt_GenericContinuation, (const char *)&cpt_Continuation,
    (const char *)256, (const char *)&NAMSTR(s_sys_ss020cf65e, "\000GenericContinuation\000vars"),
    (const char *)GET_PROPERTY_OFFSET(c_GenericContinuation, m_vars),
    (const char *)8,

    NULL, NULL, NULL,
  };
  static ClassPropTableEntry entries[11];
  static ClassPropTableEntry *pentries[13];
  return ClassInfo::InitClassPropTable(ctMapData, entries, pentries);
}
static int ct_initializer = ctInitializer();

// o_getClassPropTable
const ClassPropTable *c_Closure::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_Collator::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_Continuation::o_getClassPropTable() const { return &cpt_Continuation; }
const ClassPropTable *c_DOMAttr::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_DOMCDATASection::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_DOMCharacterData::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_DOMComment::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_DOMDocument::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_DOMDocumentFragment::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_DOMDocumentType::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_DOMElement::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_DOMEntity::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_DOMEntityReference::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_DOMImplementation::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_DOMNamedNodeMap::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_DOMNode::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_DOMNodeIterator::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_DOMNodeList::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_DOMNotation::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_DOMProcessingInstruction::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_DOMText::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_DOMXPath::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_DateTime::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_DateTimeZone::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_DebuggerClient::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_DebuggerProxy::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_EncodingDetector::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_EncodingMatch::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_GeneratorClosure::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_GenericContinuation::o_getClassPropTable() const { return &cpt_GenericContinuation; }
const ClassPropTable *c_ImageSprite::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_LibXMLError::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_Locale::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_Memcache::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_Memcached::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_Normalizer::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_PDO::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_PDOStatement::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_SQLite3::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_SQLite3Result::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_SQLite3Stmt::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_SimpleXMLElement::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_SimpleXMLElementIterator::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_SoapClient::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_SoapHeader::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_SoapParam::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_SoapServer::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_SoapVar::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_SpoofChecker::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_XMLReader::o_getClassPropTable() const { return NULL; }
const ClassPropTable *c_XMLWriter::o_getClassPropTable() const { return NULL; }

///////////////////////////////////////////////////////////////////////////////
}
