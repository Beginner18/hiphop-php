// @generated by "idl.php inc simplexml.idl.php simplexml.inc"

#if EXT_TYPE == 0
"simplexml_load_string", T(Variant), S(0), "data", T(String), NULL, S(0), "class_name", T(String), "\"SimpleXMLElement\"", S(0), "options", T(Int64), "0", S(0), "ns", T(String), "\"\"", S(0), "is_prefix", T(Boolean), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.simplexml-load-string.php )\n *\n * Takes a well-formed XML string and returns it as an object.\n *\n * @data       string  A well-formed XML string\n * @class_name string  You may use this optional parameter so that\n *                     simplexml_load_string() will return an object of the\n *                     specified class. That class should extend the\n *                     SimpleXMLElement class.\n * @options    int     Since PHP 5.1.0 and Libxml 2.6.0, you may also use\n *                     the options parameter to specify additional Libxml\n *                     parameters.\n * @ns         string\n * @is_prefix  bool\n *\n * @return     mixed   Returns an object of class SimpleXMLElement with\n *                     properties containing the data held within the xml\n *                     document. On errors, it will return FALSE.\n */", 
"simplexml_load_file", T(Variant), S(0), "filename", T(String), NULL, S(0), "class_name", T(String), "\"SimpleXMLElement\"", S(0), "options", T(Int64), "0", S(0), "ns", T(String), "\"\"", S(0), "is_prefix", T(Boolean), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.simplexml-load-file.php\n * )\n *\n * Convert the well-formed XML document in the given file to an object.\n *\n * @filename   string  Path to the XML file Note: Libxml 2 unescapes the\n *                     URI, so if you want to pass e.g. b&c as the URI\n *                     parameter a, you have to call\n *                     simplexml_load_file(rawurlencode('http://example.com/\?a='\n *                     . urlencode('b&c'))). Since PHP 5.1.0 you don't need\n *                     to do this because PHP will do it for you.\n * @class_name string  You may use this optional parameter so that\n *                     simplexml_load_file() will return an object of the\n *                     specified class. That class should extend the\n *                     SimpleXMLElement class.\n * @options    int     Since PHP 5.1.0 and Libxml 2.6.0, you may also use\n *                     the options parameter to specify additional Libxml\n *                     parameters.\n * @ns         string\n * @is_prefix  bool\n *\n * @return     mixed   Returns an object of class SimpleXMLElement with\n *                     properties containing the data held within the XML\n *                     document. On errors, it will return FALSE.\n */", 
"libxml_get_errors", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.libxml-get-errors.php )\n *\n * Retrieve array of errors.\n *\n * @return     mixed   Returns an array with LibXMLError objects if there\n *                     are any errors in the buffer, or an empty array\n *                     otherwise.\n */", 
"libxml_get_last_error", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.libxml-get-last-error.php )\n *\n * Retrieve last error from libxml.\n *\n * @return     mixed   Returns a LibXMLError object if there is any error\n *                     in the buffer, FALSE otherwise.\n */", 
"libxml_clear_errors", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.libxml-clear-errors.php\n * )\n *\n * libxml_clear_errors() clears the libxml error buffer.\n *\n * @return     mixed   No value is returned.\n */", 
"libxml_use_internal_errors", T(Boolean), S(0), "use_errors", T(Variant), "null_variant", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.libxml-use-internal-errors.php )\n *\n * libxml_use_internal_errors() allows you to disable standard libxml\n * errors and enable user error handling.\n *\n * @use_errors mixed   Whether to enable user error handling.\n *\n * @return     bool    This function returns the previous value of\n *                     use_errors.\n */", 
"libxml_set_streams_context", T(Void), S(0), "streams_context", T(Object), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.libxml-set-streams-context.php )\n *\n * Sets the streams context for the next libxml document load or write.\n *\n * @streams_context\n *             resource\n *                     The stream context resource (created with\n *                     stream_context_create())\n *\n * @return     mixed   No value is returned.\n */", 
"libxml_disable_entity_loader", T(Boolean), S(0), "disable", T(Boolean), "true", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.libxml-disable-entity-loader.php )\n *\n * Disable/enable the ability to load external entities.\n *\n * @disable    bool    Disable (TRUE) or enable (FALSE) libxml extensions\n *                     (such as DOM, XMLWriter and XMLReader) to load\n *                     external entities.\n *\n * @return     bool    Returns the previous value.\n */", 

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2
"SimpleXMLElement", "", "arrayaccess","iteratoraggregate","countable",NULL, "__construct", T(Void), S(0), "data", T(String), NULL, S(0), "options", T(Int64), "0", S(0), "data_is_url", T(Boolean), "false", S(0), "ns", T(String), "\"\"", S(0), "is_prefix", T(Boolean), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.--construct.php )\n *\n *\n * @data       string\n * @options    int\n * @data_is_url\n *             bool\n * @ns         string\n * @is_prefix  bool\n *\n * @return     mixed\n */", S(16384),"offsetexists", T(Boolean), S(0), "index", T(Variant), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.offsetexists.php )\n *\n *\n * @index      mixed\n *\n * @return     bool\n */", S(16384),"offsetget", T(Variant), S(0), "index", T(Variant), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.offsetget.php )\n *\n *\n * @index      mixed\n *\n * @return     mixed\n */", S(16384),"offsetset", T(Void), S(0), "index", T(Variant), NULL, S(0), "newvalue", T(Variant), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.offsetset.php )\n *\n *\n * @index      mixed\n * @newvalue   mixed\n *\n * @return     mixed\n */", S(16384),"offsetunset", T(Void), S(0), "index", T(Variant), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.offsetunset.php )\n *\n *\n * @index      mixed\n *\n * @return     mixed\n */", S(16384),"getiterator", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.getiterator.php )\n *\n *\n * @return     mixed\n */", S(16384),"count", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.count.php )\n *\n * This method counts the number of children of an element.\n *\n * @return     int     Returns the number of elements of an element.\n */", S(16384),"xpath", T(Variant), S(0), "path", T(String), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.xpath.php )\n *\n *\n * @path       string  An XPath path\n *\n * @return     mixed   Returns an array of SimpleXMLElement objects or\n *                     FALSE in case of an error.\n */", S(16384),"registerxpathnamespace", T(Boolean), S(0), "prefix", T(String), NULL, S(0), "ns", T(String), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.registerxpathnamespace.php )\n *\n *\n * @prefix     string\n * @ns         string\n *\n * @return     bool\n */", S(16384),"asxml", T(Variant), S(0), "filename", T(String), "\"\"", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.asxml.php )\n *\n *\n * @filename   string\n *\n * @return     mixed\n */", S(16384),"getnamespaces", T(Array), S(0), "recursive", T(Boolean), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.getnamespaces.php )\n *\n *\n * @recursive  bool\n *\n * @return     map\n */", S(16384),"getdocnamespaces", T(Array), S(0), "recursive", T(Boolean), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.getdocnamespaces.php )\n *\n *\n * @recursive  bool\n *\n * @return     map\n */", S(16384),"children", T(Object), S(0), "ns", T(String), "\"\"", S(0), "is_prefix", T(Boolean), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.children.php )\n *\n *\n * @ns         string  An XML namespace.\n * @is_prefix  bool    If is_prefix is TRUE, ns will be regarded as a\n *                     prefix. If FALSE, ns will be regarded as a namespace\n *                     URL.\n *\n * @return     object  Returns a SimpleXMLElement element, whether the node\n *                     has children or not.\n */", S(16384),"getname", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.getname.php )\n *\n *\n * @return     string\n */", S(16384),"attributes", T(Object), S(0), "ns", T(String), "\"\"", S(0), "is_prefix", T(Boolean), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.attributes.php )\n *\n *\n * @ns         string  An optional namespace for the retrieved attributes\n * @is_prefix  bool    Default to FALSE\n *\n * @return     object\n */", S(16384),"addchild", T(Variant), S(0), "qname", T(String), NULL, S(0), "value", T(String), "null_string", S(0), "ns", T(String), "null_string", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.addchild.php )\n *\n *\n * @qname      string\n * @value      string\n * @ns         string\n *\n * @return     mixed\n */", S(16384),"addattribute", T(Void), S(0), "qname", T(String), NULL, S(0), "value", T(String), "null_string", S(0), "ns", T(String), "null_string", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.addattribute.php )\n *\n *\n * @qname      string\n * @value      string\n * @ns         string\n *\n * @return     mixed\n */", S(16384),"__tostring", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.--tostring.php )\n *\n *\n * @return     string\n */", S(16384),"__get", T(Variant), S(0), "name", T(Variant), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.--get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */", S(16384),"__set", T(Variant), S(0), "name", T(Variant), NULL, S(0), "value", T(Variant), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.--set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */", S(16384),"__isset", T(Boolean), S(0), "name", T(Variant), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.--isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */", S(16384),"__unset", T(Variant), S(0), "name", T(Variant), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.--unset.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/.simplexmlelement.php )\n *\n * Represents an element in XML document.\n *\n */", "LibXMLError", "", NULL, "__construct", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.--construct.php )\n *\n *\n * @return     mixed\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/.libxmlerror.php )\n *\n * Contains various information about errors thrown by libxml. The error\n * codes are described within the official \273 xmlError API documentation.\n *\n */", "SimpleXMLElementIterator", "", "iterator",NULL, "__construct", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.--construct.php )\n *\n *\n * @return     mixed\n */", S(16384),"current", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.current.php )\n *\n *\n * @return     mixed\n */", S(16384),"key", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.key.php )\n *\n *\n * @return     mixed\n */", S(16384),"next", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.next.php )\n *\n *\n * @return     mixed\n */", S(16384),"rewind", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.rewind.php )\n *\n *\n * @return     mixed\n */", S(16384),"valid", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.valid.php )\n *\n *\n * @return     mixed\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/.simplexmlelementiterator.php )\n *\n *\n */", 
#elif EXT_TYPE == 3

#endif
