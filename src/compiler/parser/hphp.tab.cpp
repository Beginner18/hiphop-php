/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010 Facebook, Inc. (http://www.facebook.com)          |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/
// @generated by HipHop Compiler

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 1

/* Substitute the variable and function names.  */
#define yyparse         Compilerparse
#define yylex           Compilerlex
#define yyerror         Compilererror
#define yylval          Compilerlval
#define yychar          Compilerchar
#define yydebug         Compilerdebug
#define yynerrs         Compilernerrs
#define yylloc          Compilerlloc

/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 1 "../../../src/util/parser/hphp.y"

#include "parser.h"
#include <util/util.h>
#include <util/logger.h>

// macros for bison
#define YYSTYPE HPHP::HPHP_PARSER_NS::Token
#define YYSTYPE_IS_TRIVIAL 1
#define YYLTYPE HPHP::Location
#define YYLTYPE_IS_TRIVIAL 1
#define YYERROR_VERBOSE
#define YYINITDEPTH 500
#define YYLEX_PARAM _p

#ifdef yyerror
#undef yyerror
#endif
#define yyerror _p->fatal

#ifdef YYLLOC_DEFAULT
# undef YYLLOC_DEFAULT
#endif
#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#define YYLLOC_DEFAULT(Current, Rhs, N)                                 \
  do                                                                    \
    if (YYID (N)) {                                                     \
      (Current).first(YYRHSLOC (Rhs, 1));                               \
      (Current).last (YYRHSLOC (Rhs, N));                               \
    } else {                                                            \
      (Current).line0 = (Current).line1 = YYRHSLOC (Rhs, 0).line1;      \
      (Current).char0 = (Current).char1 = YYRHSLOC (Rhs, 0).char1;      \
    }                                                                   \
  while (YYID (0));                                                     \
  _p->setRuleLocation(&Current);

#define YYCOPY(To, From, Count)                  \
  do {                                           \
    YYSIZE_T yyi;                                \
    for (yyi = 0; yyi < (Count); yyi++) {        \
      (To)[yyi] = (From)[yyi];                   \
    }                                            \
    if (From != From ## a) {                     \
      YYSTACK_FREE (From);                       \
    }                                            \
  }                                              \
  while (YYID (0))

#define YYCOPY_RESET(To, From, Count)           \
  do                                            \
    {                                           \
      YYSIZE_T yyi;                             \
      for (yyi = 0; yyi < (Count); yyi++) {     \
        (To)[yyi] = (From)[yyi];                \
        (From)[yyi].reset();                    \
      }                                         \
      if (From != From ## a) {                  \
        YYSTACK_FREE (From);                    \
      }                                         \
    }                                           \
  while (YYID (0))

#define YYTOKEN_RESET(From, Count)              \
  do                                            \
    {                                           \
      YYSIZE_T yyi;                             \
      for (yyi = 0; yyi < (Count); yyi++) {     \
        (From)[yyi].reset();                    \
      }                                         \
      if (From != From ## a) {                  \
        YYSTACK_FREE (From);                    \
      }                                         \
    }                                           \
  while (YYID (0))

# define YYSTACK_RELOCATE_RESET(Stack_alloc, Stack)                     \
  do                                                                    \
    {                                                                   \
      YYSIZE_T yynewbytes;                                              \
      YYCOPY_RESET (&yyptr->Stack_alloc, Stack, yysize);                \
      Stack = &yyptr->Stack_alloc;                                      \
      yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
      yyptr += yynewbytes / sizeof (*yyptr);                            \
    }                                                                   \
  while (YYID (0))

#define YYSTACK_CLEANUP                         \
  YYTOKEN_RESET (yyvs, yystacksize);            \
  if (yyvs != yyvsa) {                          \
    YYSTACK_FREE (yyvs);                        \
  }                                             \
  if (yyls != yylsa) {                          \
    YYSTACK_FREE (yyls);                        \
  }                                             \


// macros for rules
#define BEXP(e...) _p->onBinaryOpExp(e);
#define UEXP(e...) _p->onUnaryOpExp(e);

using namespace HPHP::HPHP_PARSER_NS;

///////////////////////////////////////////////////////////////////////////////

/**
 * XHP functions: They are defined here, so different parsers don't have to
 * handle XHP rules at all.
 */

static void no_gap(Parser *_p) {
  if (_p->scanner().hasGap()) {
    HPHP_PARSER_ERROR("XHP: bad spacing: %s", _p->getMessage(true).c_str());
  }
}

static void scalar_num(Parser *_p, Token &out, const char *num) {
  Token t;
  t.setText(num);
  _p->onScalar(out, T_LNUMBER, t);
}

static void scalar_num(Parser *_p, Token &out, int num) {
  Token t;
  t.setText(boost::lexical_cast<std::string>(num));
  _p->onScalar(out, T_LNUMBER, t);
}

static void scalar_null(Parser *_p, Token &out) {
  Token tnull; tnull.setText("null");
  _p->onConstantValue(out, tnull);
}

static void xhp_tag(Parser *_p, Token &out, Token &label, Token &body) {
  if (!_p->enableXHP()) {
    HPHP_PARSER_ERROR("XHP: not enabled: %s", _p->getMessage(true).c_str());
  }

  if (!body.text().empty() && body.text() != label.text()) {
    HPHP_PARSER_ERROR("XHP: mismatched tag: '%s' not the same as '%s': %s",
                      body.text().c_str(), label.text().c_str(),
                      _p->getMessage(true).c_str());
  }

  label.xhpLabel();
  Token name; _p->onName(name, label, Parser::StringName);
  _p->onNewObject(out, name, body);
}

static void xhp_attribute(Parser *_p, Token &out, Token &type, Token &label,
                          Token &def, Token &req) {
  Token num;  scalar_num(_p, num, type.num());
  Token arr1; _p->onArrayPair(arr1, 0, 0, num, 0);

  Token arr2;
  switch (type.num()) {
    case 5: /* class */ {
      Token cls; _p->onScalar(cls, T_CONSTANT_ENCAPSED_STRING, type);
      _p->onArrayPair(arr2, &arr1, 0, cls, 0);
      break;
    }
    case 7: /* enum */ {
      Token arr;   _p->onArray(arr, type);
      _p->onArrayPair(arr2, &arr1, 0, arr, 0);
      break;
    }
    default: {
      Token tnull; scalar_null(_p, tnull);
      _p->onArrayPair(arr2, &arr1, 0, tnull, 0);
      break;
    }
  }

  Token arr3; _p->onArrayPair(arr3, &arr2, 0, def, 0);
  Token arr4; _p->onArrayPair(arr4, &arr3, 0, req, 0);
  _p->onArray(out, arr4);
  out.setText(label);
}

static void xhp_attribute_list(Parser *_p, Token &out, Token *list,
                               Token &decl) {
  if (decl.num() == 0) {
    decl.xhpLabel();
    if (list) {
      out = *list;
      out.setText(list->text() + ":" + decl.text()); // avoiding vector<string>
    } else {
      out.setText(decl);
    }
  } else {
    Token name; _p->onScalar(name, T_CONSTANT_ENCAPSED_STRING, decl);
    _p->onArrayPair(out, list, &name, decl, 0);
    if (list) {
      out.setText(list->text());
    } else {
      out.setText("");
    }
  }
}

static void xhp_attribute_stmt(Parser *_p, Token &out, Token &attributes) {
  if (!_p->enableXHP()) {
    HPHP_PARSER_ERROR("XHP: not enabled: %s", _p->getMessage(true).c_str());
  }

  Token modifiers;
  Token fname; fname.setText("__xhpAttributeDeclaration");
  {
    Token m;
    Token m1; m1.setNum(T_PROTECTED); _p->onMemberModifier(m, NULL, m1);
    Token m2; m2.setNum(T_STATIC);    _p->onMemberModifier(modifiers, &m, m2);
  }
  _p->onMethodStart(fname, modifiers);

  std::vector<std::string> classes;
  HPHP::Util::split(':', attributes.text().c_str(), classes, true);
  Token arrAttributes; _p->onArray(arrAttributes, attributes);

  Token dummy;

  Token stmts0;
  {
    _p->onStatementListStart(stmts0);
  }
  Token stmts1;
  {
    // static $_ = -1;
    Token one;     scalar_num(_p, one, "1");
    Token mone;    UEXP(mone, one, '-', 1);
    Token var;     var.set(T_VARIABLE, "_");
    Token decl;    _p->onStaticVariable(decl, 0, var, &mone);
    Token sdecl;   _p->onStatic(sdecl, decl);
    _p->addStatement(stmts1, stmts0, sdecl);
  }
  Token stmts2;
  {
    // if ($_ === -1) {
    //   $_ = array_merge(parent::__xhpAttributeDeclaration(),
    //                    attributes);
    // }
    Token parent;  parent.set(T_STRING, "parent");
    Token cls;     _p->onName(cls, parent, Parser::StringName);
    Token fname;   fname.setText("__xhpAttributeDeclaration");
    Token param1;  _p->onCall(param1, 0, fname, dummy, &cls);
    Token params1; _p->onCallParam(params1, NULL, param1, 0);

    for (unsigned int i = 0; i < classes.size(); i++) {
      Token parent;  parent.set(T_STRING, classes[i]);
      Token cls;     _p->onName(cls, parent, Parser::StringName);
      Token fname;   fname.setText("__xhpAttributeDeclaration");
      Token param;   _p->onCall(param, 0, fname, dummy, &cls);

      Token params; _p->onCallParam(params, &params1, param, 0);
      params1 = params;
    }

    Token params2; _p->onCallParam(params2, &params1, arrAttributes, 0);

    Token name;    name.set(T_STRING, "array_merge");
    Token call;    _p->onCall(call, 0, name, params2, NULL);
    Token tvar;    tvar.set(T_VARIABLE, "_");
    Token var;     _p->onSimpleVariable(var, tvar);
    Token assign;  _p->onAssign(assign, var, call, 0);
    Token exp;     _p->onExpStatement(exp, assign);
    Token block;   _p->onBlock(block, exp);

    Token tvar2;   tvar2.set(T_VARIABLE, "_");
    Token var2;    _p->onSimpleVariable(var2, tvar2);
    Token one;     scalar_num(_p, one, "1");
    Token mone;    UEXP(mone, one, '-', 1);
    Token cond;    BEXP(cond, var2, mone, T_IS_IDENTICAL);
    Token dummy1, dummy2;
    Token sif;     _p->onIf(sif, cond, block, dummy1, dummy2);
    _p->addStatement(stmts2, stmts1, sif);
  }
  Token stmts3;
  {
    // return $_;
    Token tvar;    tvar.set(T_VARIABLE, "_");
    Token var;     _p->onSimpleVariable(var, tvar);
    Token ret;     _p->onReturn(ret, &var);
    _p->addStatement(stmts3, stmts2, ret);
  }
  Token stmt;
  {
    _p->finishStatement(stmt, stmts3);
    stmt = 1;
  }
  {
    Token params, ret, ref; ref = 1;
    _p->onMethod(out, modifiers, ret, ref, fname, params, stmt, false);
  }
}

static void xhp_collect_attributes(Parser *_p, Token &out, Token &stmts) {
  Token *attr = _p->xhpGetAttributes();
  if (attr) {
    Token stmt;
    xhp_attribute_stmt(_p, stmt, *attr);
    _p->onClassStatement(out, stmts, stmt);
  } else {
    out = stmts;
  }
}

static void xhp_category_stmt(Parser *_p, Token &out, Token &categories) {
  if (!_p->enableXHP()) {
    HPHP_PARSER_ERROR("XHP: not enabled: %s", _p->getMessage(true).c_str());
  }

  Token fname;     fname.setText("__xhpCategoryDeclaration");
  Token m1;        m1.setNum(T_PROTECTED);
  Token modifiers; _p->onMemberModifier(modifiers, 0, m1);
  _p->onMethodStart(fname, modifiers);

  Token stmts0;
  {
    _p->onStatementListStart(stmts0);
  }
  Token stmts1;
  {
    // static $_ = categories;
    Token arr;     _p->onArray(arr, categories);
    Token var;     var.set(T_VARIABLE, "_");
    Token decl;    _p->onStaticVariable(decl, 0, var, &arr);
    Token sdecl;   _p->onStatic(sdecl, decl);
    _p->addStatement(stmts1, stmts0, sdecl);
  }
  Token stmts2;
  {
    // return $_;
    Token tvar;    tvar.set(T_VARIABLE, "_");
    Token var;     _p->onSimpleVariable(var, tvar);
    Token ret;     _p->onReturn(ret, &var);
    _p->addStatement(stmts2, stmts1, ret);
  }
  Token stmt;
  {
    _p->finishStatement(stmt, stmts2);
    stmt = 1;
  }
  {
    Token params, ret, ref; ref = 1;
    _p->onMethod(out, modifiers, ret, ref, fname, params, stmt, false);
  }
}

static void xhp_children_decl_tag(Parser *_p, Token &arr, Token &tag) {
  Token num;  scalar_num(_p, num, tag.num());
  Token arr1; _p->onArrayPair(arr1, &arr, 0, num, 0);

  Token name;
  if (tag.num() == 3 || tag.num() == 4) {
    _p->onScalar(name, T_CONSTANT_ENCAPSED_STRING, tag);
  } else if (tag.num() >= 0) {
    scalar_null(_p, name);
  } else {
    HPHP_PARSER_ERROR("XHP: unknown children declaration: %s",
                      _p->getMessage(true).c_str());
  }
  Token arr2; _p->onArrayPair(arr2, &arr1, 0, name, 0);
  arr = arr2;
}

static void xhp_children_decl(Parser *_p, Token &out, Token &op1, int op,
                              Token *op2) {
  Token num; scalar_num(_p, num, op);
  Token arr; _p->onArrayPair(arr, 0, 0, num, 0);

  if (op2) {
    Token arr1; _p->onArrayPair(arr1, &arr,  0, op1,  0);
    Token arr2; _p->onArrayPair(arr2, &arr1, 0, *op2, 0);
    _p->onArray(out, arr2);
  } else {
    xhp_children_decl_tag(_p, arr, op1);
    _p->onArray(out, arr);
  }
}

static void xhp_children_paren(Parser *_p, Token &out, Token exp, int op) {
  Token num;  scalar_num(_p, num, op);
  Token arr1; _p->onArrayPair(arr1, 0, 0, num, 0);

  Token num5; scalar_num(_p, num5, 5);
  Token arr2; _p->onArrayPair(arr2, &arr1, 0, num5, 0);

  Token arr3; _p->onArrayPair(arr3, &arr2, 0, exp, 0);
  _p->onArray(out, arr3);
}

static void xhp_children_stmt(Parser *_p, Token &out, Token &children) {
  if (!_p->enableXHP()) {
    HPHP_PARSER_ERROR("XHP: not enabled: %s", _p->getMessage(true).c_str());
  }

  Token fname;     fname.setText("__xhpChildrenDeclaration");
  Token m1;        m1.setNum(T_PROTECTED);
  Token modifiers; _p->onMemberModifier(modifiers, 0, m1);
  _p->onMethodStart(fname, modifiers);

  Token stmts0;
  {
    _p->onStatementListStart(stmts0);
  }
  Token stmts1;
  {
    // static $_ = children;
    Token arr;
    if (children.num() == 2) {
      arr = children;
    } else if (children.num() >= 0) {
      scalar_num(_p, arr, children.num());
    } else {
      HPHP_PARSER_ERROR("XHP: XHP unknown children declaration: %s",
                        _p->getMessage(true).c_str());
    }
    Token var;     var.set(T_VARIABLE, "_");
    Token decl;    _p->onStaticVariable(decl, 0, var, &arr);
    Token sdecl;   _p->onStatic(sdecl, decl);
    _p->addStatement(stmts1, stmts0, sdecl);
  }
  Token stmts2;
  {
    // return $_;
    Token tvar;    tvar.set(T_VARIABLE, "_");
    Token var;     _p->onSimpleVariable(var, tvar);
    Token ret;     _p->onReturn(ret, &var);
    _p->addStatement(stmts2, stmts1, ret);
  }
  Token stmt;
  {
    _p->finishStatement(stmt, stmts2);
    stmt = 1;
  }
  {
    Token params, ret, ref; ref = 1;
    _p->onMethod(out, modifiers, ret, ref, fname, params, stmt, false);
  }
}

static void xhp_idx(Parser *_p, Token &out, Token &arr, Token &offset) {
  Token fname;   fname.setText("__xhp_idx");
  Token params1; _p->onCallParam(params1, NULL, arr, 0);
  Token params2; _p->onCallParam(params2, &params1, offset, 0);
  _p->onCall(out, 0, fname, params2, 0);
}

///////////////////////////////////////////////////////////////////////////////

static int yylex(YYSTYPE *token, HPHP::Location *loc, Parser *_p) {
  return _p->scan(token, loc);
}


/* Line 189 of yacc.c  */
#line 533 "hphp.tab.cpp"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     T_REQUIRE_ONCE = 258,
     T_REQUIRE = 259,
     T_EVAL = 260,
     T_INCLUDE_ONCE = 261,
     T_INCLUDE = 262,
     T_LOGICAL_OR = 263,
     T_LOGICAL_XOR = 264,
     T_LOGICAL_AND = 265,
     T_PRINT = 266,
     T_SR_EQUAL = 267,
     T_SL_EQUAL = 268,
     T_XOR_EQUAL = 269,
     T_OR_EQUAL = 270,
     T_AND_EQUAL = 271,
     T_MOD_EQUAL = 272,
     T_CONCAT_EQUAL = 273,
     T_DIV_EQUAL = 274,
     T_MUL_EQUAL = 275,
     T_MINUS_EQUAL = 276,
     T_PLUS_EQUAL = 277,
     T_BOOLEAN_OR = 278,
     T_BOOLEAN_AND = 279,
     T_IS_NOT_IDENTICAL = 280,
     T_IS_IDENTICAL = 281,
     T_IS_NOT_EQUAL = 282,
     T_IS_EQUAL = 283,
     T_IS_GREATER_OR_EQUAL = 284,
     T_IS_SMALLER_OR_EQUAL = 285,
     T_SR = 286,
     T_SL = 287,
     T_INSTANCEOF = 288,
     T_UNSET_CAST = 289,
     T_BOOL_CAST = 290,
     T_OBJECT_CAST = 291,
     T_ARRAY_CAST = 292,
     T_STRING_CAST = 293,
     T_DOUBLE_CAST = 294,
     T_INT_CAST = 295,
     T_DEC = 296,
     T_INC = 297,
     T_CLONE = 298,
     T_NEW = 299,
     T_EXIT = 300,
     T_IF = 301,
     T_ELSEIF = 302,
     T_ELSE = 303,
     T_ENDIF = 304,
     T_LNUMBER = 305,
     T_DNUMBER = 306,
     T_STRING = 307,
     T_STRING_VARNAME = 308,
     T_VARIABLE = 309,
     T_NUM_STRING = 310,
     T_INLINE_HTML = 311,
     T_CHARACTER = 312,
     T_BAD_CHARACTER = 313,
     T_ENCAPSED_AND_WHITESPACE = 314,
     T_CONSTANT_ENCAPSED_STRING = 315,
     T_ECHO = 316,
     T_DO = 317,
     T_WHILE = 318,
     T_ENDWHILE = 319,
     T_FOR = 320,
     T_ENDFOR = 321,
     T_FOREACH = 322,
     T_ENDFOREACH = 323,
     T_DECLARE = 324,
     T_ENDDECLARE = 325,
     T_AS = 326,
     T_SWITCH = 327,
     T_ENDSWITCH = 328,
     T_CASE = 329,
     T_DEFAULT = 330,
     T_BREAK = 331,
     T_GOTO = 332,
     T_CONTINUE = 333,
     T_FUNCTION = 334,
     T_CONST = 335,
     T_RETURN = 336,
     T_TRY = 337,
     T_CATCH = 338,
     T_THROW = 339,
     T_USE = 340,
     T_GLOBAL = 341,
     T_PUBLIC = 342,
     T_PROTECTED = 343,
     T_PRIVATE = 344,
     T_FINAL = 345,
     T_ABSTRACT = 346,
     T_STATIC = 347,
     T_VAR = 348,
     T_UNSET = 349,
     T_ISSET = 350,
     T_EMPTY = 351,
     T_HALT_COMPILER = 352,
     T_CLASS = 353,
     T_INTERFACE = 354,
     T_EXTENDS = 355,
     T_IMPLEMENTS = 356,
     T_OBJECT_OPERATOR = 357,
     T_DOUBLE_ARROW = 358,
     T_LIST = 359,
     T_ARRAY = 360,
     T_CLASS_C = 361,
     T_METHOD_C = 362,
     T_FUNC_C = 363,
     T_LINE = 364,
     T_FILE = 365,
     T_COMMENT = 366,
     T_DOC_COMMENT = 367,
     T_OPEN_TAG = 368,
     T_OPEN_TAG_WITH_ECHO = 369,
     T_CLOSE_TAG = 370,
     T_WHITESPACE = 371,
     T_START_HEREDOC = 372,
     T_END_HEREDOC = 373,
     T_DOLLAR_OPEN_CURLY_BRACES = 374,
     T_CURLY_OPEN = 375,
     T_PAAMAYIM_NEKUDOTAYIM = 376,
     T_NAMESPACE = 377,
     T_NS_C = 378,
     T_DIR = 379,
     T_NS_SEPARATOR = 380,
     T_YIELD = 381,
     T_XHP_LABEL = 382,
     T_XHP_TEXT = 383,
     T_XHP_ATTRIBUTE = 384,
     T_XHP_CATEGORY = 385,
     T_XHP_CATEGORY_LABEL = 386,
     T_XHP_CHILDREN = 387,
     T_XHP_ENUM = 388,
     T_XHP_REQUIRED = 389
   };
#endif



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef int YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int line0;
  int char0;
  int line1;
  int char1;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


/* Copy the second part of user declarations.  */


/* Line 264 of yacc.c  */
#line 722 "hphp.tab.cpp"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
struct yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (struct yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  3
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   7698

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  164
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  164
/* YYNRULES -- Number of rules.  */
#define YYNRULES  556
/* YYNRULES -- Number of states.  */
#define YYNSTATES  1012

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   389

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    48,   162,     2,   159,    47,    31,   163,
     154,   155,    45,    42,     8,    43,    44,    46,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    26,   156,
      36,    13,    37,    25,    51,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    61,     2,   161,    30,     2,   160,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   157,    29,   158,    50,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     9,    10,    11,    12,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    27,    28,
      32,    33,    34,    35,    38,    39,    40,    41,    49,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     8,     9,    11,    13,    15,    20,
      24,    30,    35,    39,    42,    46,    48,    50,    54,    57,
      62,    64,    68,    70,    73,    77,    83,    88,    91,    92,
      94,    96,    98,   101,   103,   106,   110,   118,   129,   130,
     137,   138,   147,   148,   159,   160,   167,   170,   174,   177,
     181,   184,   188,   192,   195,   199,   203,   207,   211,   215,
     219,   225,   227,   229,   230,   240,   241,   251,   257,   258,
     259,   260,   261,   279,   283,   287,   297,   298,   300,   304,
     306,   308,   309,   311,   312,   324,   325,   334,   335,   336,
     346,   347,   355,   357,   360,   363,   366,   367,   370,   371,
     374,   375,   377,   381,   384,   385,   387,   390,   392,   397,
     399,   404,   406,   411,   413,   418,   422,   428,   432,   437,
     442,   448,   454,   459,   460,   462,   464,   471,   472,   480,
     481,   484,   485,   489,   490,   492,   493,   496,   500,   506,
     511,   516,   522,   530,   537,   539,   541,   543,   545,   546,
     548,   549,   551,   553,   556,   560,   564,   569,   573,   575,
     577,   580,   585,   589,   595,   597,   601,   605,   611,   613,
     617,   620,   621,   624,   625,   626,   631,   632,   638,   641,
     642,   653,   654,   659,   663,   667,   669,   670,   675,   680,
     682,   684,   686,   688,   690,   692,   694,   699,   701,   703,
     707,   710,   711,   712,   716,   717,   719,   723,   725,   727,
     729,   731,   735,   740,   745,   750,   752,   754,   757,   760,
     763,   767,   771,   773,   775,   777,   779,   783,   785,   787,
     789,   790,   792,   795,   797,   799,   801,   803,   805,   807,
     811,   817,   819,   823,   829,   834,   838,   840,   842,   843,
     847,   849,   856,   860,   865,   872,   876,   879,   883,   887,
     891,   895,   899,   903,   907,   911,   915,   919,   923,   926,
     929,   932,   935,   939,   943,   947,   951,   955,   959,   963,
     967,   971,   975,   979,   983,   987,   991,   995,   999,  1002,
    1005,  1008,  1011,  1015,  1019,  1023,  1027,  1031,  1035,  1039,
    1043,  1047,  1051,  1057,  1062,  1064,  1067,  1070,  1073,  1076,
    1079,  1082,  1085,  1088,  1091,  1093,  1098,  1102,  1105,  1116,
    1121,  1123,  1128,  1129,  1133,  1138,  1140,  1143,  1148,  1150,
    1151,  1156,  1157,  1158,  1167,  1169,  1170,  1171,  1177,  1178,
    1181,  1182,  1184,  1186,  1190,  1192,  1196,  1198,  1200,  1201,
    1206,  1207,  1212,  1214,  1215,  1220,  1221,  1226,  1228,  1230,
    1232,  1234,  1236,  1238,  1240,  1242,  1244,  1246,  1248,  1250,
    1252,  1254,  1256,  1258,  1260,  1262,  1264,  1266,  1268,  1270,
    1272,  1274,  1276,  1278,  1280,  1282,  1284,  1286,  1288,  1290,
    1292,  1294,  1296,  1298,  1300,  1302,  1304,  1306,  1308,  1310,
    1312,  1314,  1316,  1318,  1320,  1322,  1324,  1326,  1328,  1330,
    1332,  1334,  1336,  1338,  1340,  1342,  1344,  1346,  1348,  1350,
    1352,  1354,  1356,  1358,  1360,  1362,  1364,  1366,  1371,  1376,
    1383,  1390,  1392,  1394,  1396,  1398,  1400,  1402,  1404,  1406,
    1407,  1413,  1415,  1418,  1419,  1422,  1425,  1429,  1430,  1434,
    1435,  1437,  1439,  1441,  1443,  1445,  1447,  1449,  1451,  1453,
    1455,  1458,  1461,  1466,  1468,  1472,  1476,  1478,  1480,  1482,
    1484,  1488,  1492,  1496,  1499,  1500,  1502,  1503,  1509,  1513,
    1517,  1519,  1521,  1523,  1525,  1527,  1529,  1530,  1531,  1539,
    1541,  1544,  1545,  1549,  1553,  1554,  1556,  1559,  1563,  1565,
    1567,  1569,  1572,  1574,  1579,  1584,  1586,  1588,  1593,  1595,
    1596,  1598,  1600,  1605,  1610,  1612,  1614,  1618,  1620,  1623,
    1626,  1630,  1637,  1638,  1640,  1645,  1648,  1649,  1655,  1659,
    1663,  1665,  1672,  1677,  1682,  1685,  1688,  1691,  1692,  1694,
    1699,  1703,  1707,  1714,  1718,  1720,  1722,  1724,  1729,  1734,
    1737,  1740,  1745,  1748,  1751,  1753,  1757
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     165,     0,    -1,   166,    -1,   166,   167,    -1,    -1,   175,
      -1,   192,    -1,   194,    -1,   116,   154,   155,   156,    -1,
     141,   170,   156,    -1,   141,   170,   157,   166,   158,    -1,
     141,   157,   166,   158,    -1,   104,   168,   156,    -1,   172,
     156,    -1,   168,     8,   169,    -1,   169,    -1,   170,    -1,
     170,    90,    71,    -1,   144,   170,    -1,   144,   170,    90,
      71,    -1,    71,    -1,   170,   144,    71,    -1,   170,    -1,
     144,   170,    -1,   141,   144,   170,    -1,   172,     8,    71,
      13,   292,    -1,    99,    71,    13,   292,    -1,   173,   174,
      -1,    -1,   175,    -1,   192,    -1,   194,    -1,   298,   156,
      -1,   176,    -1,    71,    26,    -1,   157,   173,   158,    -1,
      65,   154,   298,   155,   175,   214,   216,    -1,    65,   154,
     298,   155,    26,   173,   215,   217,    68,   156,    -1,    -1,
      82,   154,   298,   155,   177,   208,    -1,    -1,    81,   178,
     175,    82,   154,   298,   155,   156,    -1,    -1,    84,   154,
     257,   156,   257,   156,   257,   155,   179,   206,    -1,    -1,
      91,   154,   298,   155,   180,   211,    -1,    95,   156,    -1,
      95,   298,   156,    -1,    97,   156,    -1,    97,   298,   156,
      -1,   100,   156,    -1,   100,   259,   156,    -1,   100,   302,
     156,    -1,   145,   156,    -1,   145,   259,   156,    -1,   145,
     302,   156,    -1,   105,   224,   156,    -1,   111,   226,   156,
      -1,   220,   227,   156,    -1,    80,   256,   156,    -1,   113,
     154,   188,   155,   156,    -1,   156,    -1,    75,    -1,    -1,
      86,   154,   302,    90,   205,   204,   155,   181,   207,    -1,
      -1,    86,   154,   259,    90,   302,   204,   155,   182,   207,
      -1,    88,   154,   210,   155,   209,    -1,    -1,    -1,    -1,
      -1,   101,   157,   183,   173,   158,   184,   102,   154,   283,
      73,   155,   157,   185,   173,   158,   186,   187,    -1,   103,
     298,   156,    -1,    96,    71,   156,    -1,   187,   102,   154,
     283,    73,   155,   157,   173,   158,    -1,    -1,   189,    -1,
     188,     8,   189,    -1,   302,    -1,    31,    -1,    -1,    98,
      -1,    -1,   221,   191,   190,    71,   193,   154,   218,   155,
     157,   173,   158,    -1,    -1,   199,    71,   200,   195,   201,
     157,   228,   158,    -1,    -1,    -1,   199,   146,   200,   196,
     201,   157,   197,   229,   158,    -1,    -1,   118,    71,   198,
     202,   157,   228,   158,    -1,   117,    -1,   110,   117,    -1,
     109,   117,    -1,   119,   283,    -1,    -1,   120,   203,    -1,
      -1,   119,   203,    -1,    -1,   283,    -1,   203,     8,   283,
      -1,   122,   205,    -1,    -1,   302,    -1,    31,   302,    -1,
     175,    -1,    26,   173,    85,   156,    -1,   175,    -1,    26,
     173,    87,   156,    -1,   175,    -1,    26,   173,    83,   156,
      -1,   175,    -1,    26,   173,    89,   156,    -1,    71,    13,
     292,    -1,   210,     8,    71,    13,   292,    -1,   157,   212,
     158,    -1,   157,   156,   212,   158,    -1,    26,   212,    92,
     156,    -1,    26,   156,   212,    92,   156,    -1,   212,    93,
     298,   213,   173,    -1,   212,    94,   213,   173,    -1,    -1,
      26,    -1,   156,    -1,   214,    66,   154,   298,   155,   175,
      -1,    -1,   215,    66,   154,   298,   155,    26,   173,    -1,
      -1,    67,   175,    -1,    -1,    67,    26,   173,    -1,    -1,
     219,    -1,    -1,   221,    73,    -1,   221,    31,    73,    -1,
     221,    31,    73,    13,   292,    -1,   221,    73,    13,   292,
      -1,   219,     8,   221,    73,    -1,   219,     8,   221,    31,
      73,    -1,   219,     8,   221,    31,    73,    13,   292,    -1,
     219,     8,   221,    73,    13,   292,    -1,    71,    -1,   124,
      -1,   146,    -1,   220,    -1,    -1,   223,    -1,    -1,   259,
      -1,   302,    -1,    31,   300,    -1,   223,     8,   259,    -1,
     223,     8,   302,    -1,   223,     8,    31,   300,    -1,   224,
       8,   225,    -1,   225,    -1,    73,    -1,   159,   299,    -1,
     159,   157,   298,   158,    -1,   226,     8,    73,    -1,   226,
       8,    73,    13,   292,    -1,    73,    -1,    73,    13,   292,
      -1,   227,     8,    73,    -1,   227,     8,    73,    13,   298,
      -1,    73,    -1,    73,    13,   298,    -1,   228,   230,    -1,
      -1,   229,   230,    -1,    -1,    -1,   250,   231,   254,   156,
      -1,    -1,   252,   220,   232,   254,   156,    -1,   255,   156,
      -1,    -1,   251,   221,   191,   190,    71,   154,   233,   218,
     155,   249,    -1,    -1,   148,   234,   235,   156,    -1,   149,
     243,   156,    -1,   151,   245,   156,    -1,   237,    -1,    -1,
     235,     8,   236,   237,    -1,   238,   277,   240,   241,    -1,
     146,    -1,    56,    -1,    53,    -1,    58,    -1,    55,    -1,
     283,    -1,   112,    -1,   152,   157,   239,   158,    -1,    57,
      -1,   291,    -1,   239,     8,   291,    -1,    13,   292,    -1,
      -1,    -1,    51,   242,   153,    -1,    -1,   244,    -1,   243,
       8,   244,    -1,   150,    -1,   246,    -1,    71,    -1,   115,
      -1,   154,   247,   155,    -1,   154,   247,   155,    45,    -1,
     154,   247,   155,    25,    -1,   154,   247,   155,    42,    -1,
     246,    -1,   248,    -1,   248,    45,    -1,   248,    25,    -1,
     248,    42,    -1,   247,     8,   247,    -1,   247,    29,   247,
      -1,    71,    -1,   146,    -1,   150,    -1,   156,    -1,   157,
     173,   158,    -1,   252,    -1,   112,    -1,   252,    -1,    -1,
     253,    -1,   252,   253,    -1,   106,    -1,   107,    -1,   108,
      -1,   111,    -1,   110,    -1,   109,    -1,   254,     8,    73,
      -1,   254,     8,    73,    13,   292,    -1,    73,    -1,    73,
      13,   292,    -1,   255,     8,    71,    13,   292,    -1,    99,
      71,    13,   292,    -1,   256,     8,   298,    -1,   298,    -1,
     258,    -1,    -1,   258,     8,   298,    -1,   298,    -1,   123,
     154,   319,   155,    13,   298,    -1,   302,    13,   298,    -1,
     302,    13,    31,   302,    -1,   302,    13,    31,    63,   284,
     290,    -1,    63,   284,   290,    -1,    62,   298,    -1,   302,
      24,   298,    -1,   302,    23,   298,    -1,   302,    22,   298,
      -1,   302,    21,   298,    -1,   302,    20,   298,    -1,   302,
      19,   298,    -1,   302,    18,   298,    -1,   302,    17,   298,
      -1,   302,    16,   298,    -1,   302,    15,   298,    -1,   302,
      14,   298,    -1,   301,    60,    -1,    60,   301,    -1,   301,
      59,    -1,    59,   301,    -1,   298,    27,   298,    -1,   298,
      28,   298,    -1,   298,     9,   298,    -1,   298,    11,   298,
      -1,   298,    10,   298,    -1,   298,    29,   298,    -1,   298,
      31,   298,    -1,   298,    30,   298,    -1,   298,    44,   298,
      -1,   298,    42,   298,    -1,   298,    43,   298,    -1,   298,
      45,   298,    -1,   298,    46,   298,    -1,   298,    47,   298,
      -1,   298,    41,   298,    -1,   298,    40,   298,    -1,    42,
     298,    -1,    43,   298,    -1,    48,   298,    -1,    50,   298,
      -1,   298,    33,   298,    -1,   298,    32,   298,    -1,   298,
      35,   298,    -1,   298,    34,   298,    -1,   298,    36,   298,
      -1,   298,    39,   298,    -1,   298,    37,   298,    -1,   298,
      38,   298,    -1,   298,    49,   284,    -1,   154,   298,   155,
      -1,   298,    25,   298,    26,   298,    -1,   298,    25,    26,
     298,    -1,   325,    -1,    58,   298,    -1,    57,   298,    -1,
      56,   298,    -1,    55,   298,    -1,    54,   298,    -1,    53,
     298,    -1,    52,   298,    -1,    64,   289,    -1,    51,   298,
      -1,   294,    -1,   124,   154,   320,   155,    -1,   160,   322,
     160,    -1,    12,   298,    -1,   221,   191,   190,   154,   218,
     155,   260,   157,   173,   158,    -1,   298,    61,   314,   161,
      -1,   262,    -1,   104,   154,   261,   155,    -1,    -1,   261,
       8,    73,    -1,   261,     8,    31,    73,    -1,    73,    -1,
      31,    73,    -1,    36,   274,   263,    37,    -1,    46,    -1,
      -1,   268,    46,   264,   267,    -1,    -1,    -1,   268,    37,
     265,   270,    36,    46,   266,   267,    -1,   146,    -1,    -1,
      -1,   268,   271,    13,   269,   272,    -1,    -1,   270,   273,
      -1,    -1,   277,    -1,   147,    -1,   157,   298,   158,    -1,
     147,    -1,   157,   298,   158,    -1,   262,    -1,   280,    -1,
      -1,   274,    26,   275,   280,    -1,    -1,   274,    43,   276,
     280,    -1,   280,    -1,    -1,   277,    26,   278,   280,    -1,
      -1,   277,    43,   279,   280,    -1,    71,    -1,    64,    -1,
      98,    -1,    99,    -1,   100,    -1,   145,    -1,   101,    -1,
     102,    -1,   103,    -1,    65,    -1,    66,    -1,    68,    -1,
      67,    -1,    82,    -1,    83,    -1,    81,    -1,    84,    -1,
      85,    -1,    86,    -1,    87,    -1,    88,    -1,    89,    -1,
      49,    -1,    90,    -1,    91,    -1,    92,    -1,    93,    -1,
      94,    -1,    95,    -1,    97,    -1,    96,    -1,    80,    -1,
      12,    -1,   117,    -1,   118,    -1,   119,    -1,   120,    -1,
      63,    -1,    62,    -1,   112,    -1,     5,    -1,     7,    -1,
       6,    -1,     4,    -1,     3,    -1,   141,    -1,   104,    -1,
     105,    -1,   114,    -1,   115,    -1,   116,    -1,   111,    -1,
     110,    -1,   109,    -1,   108,    -1,   107,    -1,   106,    -1,
     113,    -1,   123,    -1,   124,    -1,     9,    -1,    11,    -1,
      10,    -1,   125,    -1,   127,    -1,   126,    -1,   128,    -1,
     129,    -1,   143,    -1,   142,    -1,   171,   154,   222,   155,
      -1,   308,   154,   222,   155,    -1,   282,   140,    71,   154,
     222,   155,    -1,   282,   140,   308,   154,   222,   155,    -1,
     283,    -1,   111,    -1,   312,    -1,   171,    -1,   146,    -1,
      71,    -1,   146,    -1,   285,    -1,    -1,   311,   286,   121,
     315,   287,    -1,   311,    -1,   287,   288,    -1,    -1,   121,
     315,    -1,   154,   155,    -1,   154,   298,   155,    -1,    -1,
     154,   222,   155,    -1,    -1,    69,    -1,    70,    -1,    79,
      -1,   128,    -1,   129,    -1,   125,    -1,   126,    -1,   127,
      -1,   291,    -1,   171,    -1,    42,   292,    -1,    43,   292,
      -1,   124,   154,   295,   155,    -1,   293,    -1,    71,   140,
      71,    -1,   146,   140,    71,    -1,   171,    -1,    72,    -1,
     327,    -1,   291,    -1,   162,   322,   162,    -1,   163,   322,
     163,    -1,   136,   322,   137,    -1,   297,   296,    -1,    -1,
       8,    -1,    -1,   297,     8,   292,   122,   292,    -1,   297,
       8,   292,    -1,   292,   122,   292,    -1,   292,    -1,   299,
      -1,   259,    -1,   302,    -1,   302,    -1,   302,    -1,    -1,
      -1,   310,   303,   121,   315,   307,   304,   305,    -1,   310,
      -1,   305,   306,    -1,    -1,   121,   315,   307,    -1,   154,
     222,   155,    -1,    -1,   312,    -1,   318,   312,    -1,   282,
     140,   308,    -1,   311,    -1,   281,    -1,   312,    -1,   318,
     312,    -1,   309,    -1,   312,    61,   314,   161,    -1,   312,
     157,   298,   158,    -1,   313,    -1,    73,    -1,   159,   157,
     298,   158,    -1,   298,    -1,    -1,   316,    -1,   308,    -1,
     316,    61,   314,   161,    -1,   316,   157,   298,   158,    -1,
     317,    -1,    71,    -1,   157,   298,   158,    -1,   159,    -1,
     318,   159,    -1,   319,     8,    -1,   319,     8,   302,    -1,
     319,     8,   123,   154,   319,   155,    -1,    -1,   302,    -1,
     123,   154,   319,   155,    -1,   321,   296,    -1,    -1,   321,
       8,   298,   122,   298,    -1,   321,     8,   298,    -1,   298,
     122,   298,    -1,   298,    -1,   321,     8,   298,   122,    31,
     300,    -1,   321,     8,    31,   300,    -1,   298,   122,    31,
     300,    -1,    31,   300,    -1,   322,   323,    -1,   322,    78,
      -1,    -1,    73,    -1,    73,    61,   324,   161,    -1,    73,
     121,    71,    -1,   138,   298,   158,    -1,   138,    72,    61,
     298,   161,   158,    -1,   139,   302,   158,    -1,    71,    -1,
      74,    -1,    73,    -1,   114,   154,   326,   155,    -1,   115,
     154,   302,   155,    -1,     7,   298,    -1,     6,   298,    -1,
       5,   154,   298,   155,    -1,     4,   298,    -1,     3,   298,
      -1,   302,    -1,   326,     8,   302,    -1,   282,   140,    71,
      -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   572,   572,   577,   579,   582,   583,   584,   585,   586,
     587,   589,   591,   592,   596,   598,   601,   602,   603,   604,
     608,   609,   613,   614,   615,   619,   621,   625,   627,   630,
     631,   632,   635,   636,   637,   641,   643,   648,   654,   654,
     658,   658,   663,   662,   667,   667,   671,   672,   674,   675,
     677,   678,   679,   681,   682,   683,   685,   686,   687,   688,
     689,   691,   693,   697,   695,   703,   701,   707,   710,   711,
     714,   715,   710,   718,   719,   725,   730,   734,   735,   738,
     742,   743,   747,   751,   750,   760,   759,   765,   767,   764,
     773,   773,   778,   779,   780,   783,   785,   788,   789,   792,
     793,   796,   797,   802,   803,   806,   807,   811,   812,   816,
     817,   821,   822,   826,   827,   832,   833,   838,   839,   840,
     841,   844,   847,   849,   852,   853,   857,   859,   862,   865,
     868,   869,   872,   873,   877,   878,   881,   882,   883,   885,
     887,   889,   891,   894,   899,   900,   901,   904,   905,   909,
     910,   913,   914,   915,   916,   918,   920,   925,   926,   929,
     930,   931,   935,   936,   938,   939,   943,   944,   945,   946,
     950,   952,   955,   958,   961,   961,   965,   964,   968,   972,
     970,   976,   976,   978,   980,   985,   987,   987,   992,   997,
    1001,  1002,  1003,  1004,  1005,  1006,  1007,  1009,  1013,  1014,
    1019,  1020,  1024,  1024,  1026,  1030,  1032,  1038,  1043,  1044,
    1046,  1050,  1051,  1052,  1053,  1057,  1058,  1059,  1060,  1061,
    1062,  1064,  1069,  1072,  1073,  1077,  1078,  1081,  1082,  1085,
    1086,  1089,  1090,  1094,  1095,  1096,  1097,  1098,  1099,  1102,
    1104,  1106,  1107,  1110,  1112,  1116,  1117,  1121,  1122,  1125,
    1126,  1130,  1132,  1133,  1134,  1137,  1139,  1140,  1141,  1142,
    1143,  1144,  1145,  1146,  1147,  1148,  1149,  1150,  1151,  1152,
    1153,  1154,  1155,  1156,  1157,  1158,  1159,  1160,  1161,  1162,
    1163,  1164,  1165,  1166,  1167,  1168,  1169,  1170,  1171,  1172,
    1173,  1174,  1175,  1176,  1177,  1178,  1179,  1180,  1182,  1183,
    1185,  1187,  1188,  1189,  1190,  1191,  1192,  1193,  1194,  1195,
    1196,  1197,  1198,  1199,  1200,  1201,  1202,  1203,  1204,  1208,
    1209,  1213,  1214,  1218,  1219,  1220,  1221,  1225,  1228,  1234,
    1234,  1240,  1241,  1240,  1249,  1250,  1254,  1253,  1256,  1259,
    1260,  1263,  1267,  1270,  1273,  1280,  1281,  1284,  1285,  1285,
    1287,  1287,  1291,  1292,  1292,  1294,  1294,  1298,  1299,  1300,
    1301,  1302,  1303,  1304,  1305,  1306,  1307,  1308,  1309,  1310,
    1311,  1312,  1313,  1314,  1315,  1316,  1317,  1318,  1319,  1320,
    1321,  1322,  1323,  1324,  1325,  1326,  1327,  1328,  1329,  1330,
    1331,  1332,  1333,  1334,  1335,  1336,  1337,  1338,  1339,  1340,
    1341,  1342,  1343,  1344,  1345,  1346,  1347,  1348,  1349,  1350,
    1351,  1352,  1353,  1354,  1355,  1356,  1357,  1358,  1359,  1360,
    1361,  1362,  1363,  1364,  1365,  1366,  1367,  1371,  1373,  1375,
    1379,  1385,  1386,  1387,  1391,  1392,  1395,  1396,  1398,  1401,
    1401,  1404,  1407,  1409,  1412,  1416,  1417,  1418,  1422,  1424,
    1428,  1429,  1430,  1432,  1433,  1434,  1435,  1436,  1439,  1440,
    1441,  1442,  1443,  1445,  1448,  1450,  1455,  1456,  1457,  1458,
    1459,  1460,  1461,  1466,  1468,  1471,  1472,  1475,  1478,  1480,
    1482,  1486,  1487,  1490,  1493,  1496,  1499,  1501,  1499,  1503,
    1507,  1509,  1512,  1516,  1518,  1522,  1523,  1527,  1533,  1534,
    1537,  1538,  1540,  1543,  1545,  1546,  1549,  1550,  1553,  1554,
    1558,  1559,  1562,  1563,  1564,  1567,  1568,  1572,  1573,  1577,
    1578,  1579,  1581,  1582,  1583,  1587,  1589,  1592,  1594,  1595,
    1596,  1597,  1600,  1602,  1603,  1607,  1608,  1610,  1613,  1614,
    1616,  1618,  1620,  1622,  1625,  1626,  1627,  1631,  1632,  1633,
    1634,  1635,  1636,  1637,  1641,  1642,  1646
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "T_REQUIRE_ONCE", "T_REQUIRE", "T_EVAL",
  "T_INCLUDE_ONCE", "T_INCLUDE", "','", "T_LOGICAL_OR", "T_LOGICAL_XOR",
  "T_LOGICAL_AND", "T_PRINT", "'='", "T_SR_EQUAL", "T_SL_EQUAL",
  "T_XOR_EQUAL", "T_OR_EQUAL", "T_AND_EQUAL", "T_MOD_EQUAL",
  "T_CONCAT_EQUAL", "T_DIV_EQUAL", "T_MUL_EQUAL", "T_MINUS_EQUAL",
  "T_PLUS_EQUAL", "'?'", "':'", "T_BOOLEAN_OR", "T_BOOLEAN_AND", "'|'",
  "'^'", "'&'", "T_IS_NOT_IDENTICAL", "T_IS_IDENTICAL", "T_IS_NOT_EQUAL",
  "T_IS_EQUAL", "'<'", "'>'", "T_IS_GREATER_OR_EQUAL",
  "T_IS_SMALLER_OR_EQUAL", "T_SR", "T_SL", "'+'", "'-'", "'.'", "'*'",
  "'/'", "'%'", "'!'", "T_INSTANCEOF", "'~'", "'@'", "T_UNSET_CAST",
  "T_BOOL_CAST", "T_OBJECT_CAST", "T_ARRAY_CAST", "T_STRING_CAST",
  "T_DOUBLE_CAST", "T_INT_CAST", "T_DEC", "T_INC", "'['", "T_CLONE",
  "T_NEW", "T_EXIT", "T_IF", "T_ELSEIF", "T_ELSE", "T_ENDIF", "T_LNUMBER",
  "T_DNUMBER", "T_STRING", "T_STRING_VARNAME", "T_VARIABLE",
  "T_NUM_STRING", "T_INLINE_HTML", "T_CHARACTER", "T_BAD_CHARACTER",
  "T_ENCAPSED_AND_WHITESPACE", "T_CONSTANT_ENCAPSED_STRING", "T_ECHO",
  "T_DO", "T_WHILE", "T_ENDWHILE", "T_FOR", "T_ENDFOR", "T_FOREACH",
  "T_ENDFOREACH", "T_DECLARE", "T_ENDDECLARE", "T_AS", "T_SWITCH",
  "T_ENDSWITCH", "T_CASE", "T_DEFAULT", "T_BREAK", "T_GOTO", "T_CONTINUE",
  "T_FUNCTION", "T_CONST", "T_RETURN", "T_TRY", "T_CATCH", "T_THROW",
  "T_USE", "T_GLOBAL", "T_PUBLIC", "T_PROTECTED", "T_PRIVATE", "T_FINAL",
  "T_ABSTRACT", "T_STATIC", "T_VAR", "T_UNSET", "T_ISSET", "T_EMPTY",
  "T_HALT_COMPILER", "T_CLASS", "T_INTERFACE", "T_EXTENDS", "T_IMPLEMENTS",
  "T_OBJECT_OPERATOR", "T_DOUBLE_ARROW", "T_LIST", "T_ARRAY", "T_CLASS_C",
  "T_METHOD_C", "T_FUNC_C", "T_LINE", "T_FILE", "T_COMMENT",
  "T_DOC_COMMENT", "T_OPEN_TAG", "T_OPEN_TAG_WITH_ECHO", "T_CLOSE_TAG",
  "T_WHITESPACE", "T_START_HEREDOC", "T_END_HEREDOC",
  "T_DOLLAR_OPEN_CURLY_BRACES", "T_CURLY_OPEN", "T_PAAMAYIM_NEKUDOTAYIM",
  "T_NAMESPACE", "T_NS_C", "T_DIR", "T_NS_SEPARATOR", "T_YIELD",
  "T_XHP_LABEL", "T_XHP_TEXT", "T_XHP_ATTRIBUTE", "T_XHP_CATEGORY",
  "T_XHP_CATEGORY_LABEL", "T_XHP_CHILDREN", "T_XHP_ENUM", "T_XHP_REQUIRED",
  "'('", "')'", "';'", "'{'", "'}'", "'$'", "'`'", "']'", "'\"'", "'\\''",
  "$accept", "start", "top_statement_list", "top_statement",
  "use_declarations", "use_declaration", "namespace_name",
  "namespace_string", "constant_declaration", "inner_statement_list",
  "inner_statement", "statement", "statement_without_expr", "$@1", "$@2",
  "$@3", "$@4", "$@5", "$@6", "$@7", "$@8", "$@9", "$@10",
  "additional_catches", "unset_variables", "unset_variable",
  "is_reference", "function_loc", "function_declaration_statement", "$@11",
  "class_declaration_statement", "$@12", "$@13", "$@14", "$@15",
  "class_entry_type", "extends_from", "implements_list",
  "interface_extends_list", "interface_list", "foreach_optional_arg",
  "foreach_variable", "for_statement", "foreach_statement",
  "while_statement", "declare_statement", "declare_list",
  "switch_case_list", "case_list", "case_separator", "elseif_list",
  "new_elseif_list", "else_single", "new_else_single", "parameter_list",
  "non_empty_parameter_list", "non_empty_type_decl", "type_decl",
  "function_call_parameter_list", "non_empty_fcall_parameter_list",
  "global_var_list", "global_var", "static_var_list", "var_list",
  "class_statement_list", "xhp_class_statement_list", "class_statement",
  "$@16", "$@17", "$@18", "$@19", "xhp_attribute_stmt", "$@20",
  "xhp_attribute_decl", "xhp_attribute_decl_type", "xhp_attribute_enum",
  "xhp_attribute_default", "xhp_attribute_is_required", "$@21",
  "xhp_category_stmt", "xhp_category_decl", "xhp_children_stmt",
  "xhp_children_paren_expr", "xhp_children_decl_expr",
  "xhp_children_decl_tag", "method_body", "variable_modifiers",
  "method_modifiers", "non_empty_member_modifiers", "member_modifier",
  "class_variable_declaration", "class_constant_declaration",
  "echo_expr_list", "for_expr", "non_empty_for_expr",
  "expr_without_variable", "lexical_vars", "lexical_var_list", "xhp_tag",
  "xhp_tag_body", "$@22", "$@23", "$@24", "xhp_end_tag", "xhp_attributes",
  "$@25", "xhp_children", "xhp_attribute_name", "xhp_attribute_value",
  "xhp_child", "xhp_label", "$@26", "$@27", "xhp_label_ws", "$@28", "$@29",
  "xhp_bareword", "function_call", "static_class_name",
  "fully_qualified_class_name", "class_name_reference",
  "dynamic_class_name_reference", "$@30", "object_properties",
  "dynamic_class_name_variable_prop", "exit_expr", "ctor_arguments",
  "common_scalar", "static_scalar", "static_class_constant", "scalar",
  "static_array_pair_list", "possible_comma",
  "non_empty_static_array_pair_list", "expr", "r_variable", "w_variable",
  "rw_variable", "variable", "$@31", "$@32", "variable_properties",
  "variable_property", "method_or_not", "variable_without_objects",
  "static_member", "base_variable_with_function_calls", "base_variable",
  "reference_variable", "compound_variable", "dim_offset",
  "object_property", "object_dim_list", "variable_name",
  "simple_indirect_reference", "assignment_list", "array_pair_list",
  "non_empty_array_pair_list", "encaps_list", "encaps_var",
  "encaps_var_offset", "internal_functions", "isset_variables",
  "class_constant", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,    44,   263,
     264,   265,   266,    61,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,    63,    58,   278,   279,   124,
      94,    38,   280,   281,   282,   283,    60,    62,   284,   285,
     286,   287,    43,    45,    46,    42,    47,    37,    33,   288,
     126,    64,   289,   290,   291,   292,   293,   294,   295,   296,
     297,    91,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    40,    41,    59,   123,   125,    36,
      96,    93,    34,    39
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   164,   165,   166,   166,   167,   167,   167,   167,   167,
     167,   167,   167,   167,   168,   168,   169,   169,   169,   169,
     170,   170,   171,   171,   171,   172,   172,   173,   173,   174,
     174,   174,   175,   175,   175,   176,   176,   176,   177,   176,
     178,   176,   179,   176,   180,   176,   176,   176,   176,   176,
     176,   176,   176,   176,   176,   176,   176,   176,   176,   176,
     176,   176,   176,   181,   176,   182,   176,   176,   183,   184,
     185,   186,   176,   176,   176,   187,   187,   188,   188,   189,
     190,   190,   191,   193,   192,   195,   194,   196,   197,   194,
     198,   194,   199,   199,   199,   200,   200,   201,   201,   202,
     202,   203,   203,   204,   204,   205,   205,   206,   206,   207,
     207,   208,   208,   209,   209,   210,   210,   211,   211,   211,
     211,   212,   212,   212,   213,   213,   214,   214,   215,   215,
     216,   216,   217,   217,   218,   218,   219,   219,   219,   219,
     219,   219,   219,   219,   220,   220,   220,   221,   221,   222,
     222,   223,   223,   223,   223,   223,   223,   224,   224,   225,
     225,   225,   226,   226,   226,   226,   227,   227,   227,   227,
     228,   228,   229,   229,   231,   230,   232,   230,   230,   233,
     230,   234,   230,   230,   230,   235,   236,   235,   237,   237,
     238,   238,   238,   238,   238,   238,   238,   238,   239,   239,
     240,   240,   242,   241,   241,   243,   243,   244,   245,   245,
     245,   246,   246,   246,   246,   247,   247,   247,   247,   247,
     247,   247,   248,   248,   248,   249,   249,   250,   250,   251,
     251,   252,   252,   253,   253,   253,   253,   253,   253,   254,
     254,   254,   254,   255,   255,   256,   256,   257,   257,   258,
     258,   259,   259,   259,   259,   259,   259,   259,   259,   259,
     259,   259,   259,   259,   259,   259,   259,   259,   259,   259,
     259,   259,   259,   259,   259,   259,   259,   259,   259,   259,
     259,   259,   259,   259,   259,   259,   259,   259,   259,   259,
     259,   259,   259,   259,   259,   259,   259,   259,   259,   259,
     259,   259,   259,   259,   259,   259,   259,   259,   259,   259,
     259,   259,   259,   259,   259,   259,   259,   259,   259,   259,
     259,   260,   260,   261,   261,   261,   261,   262,   263,   264,
     263,   265,   266,   263,   267,   267,   269,   268,   268,   270,
     270,   271,   272,   272,   273,   273,   273,   274,   275,   274,
     276,   274,   277,   278,   277,   279,   277,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   281,   281,   281,
     281,   282,   282,   282,   283,   283,   284,   284,   284,   286,
     285,   285,   287,   287,   288,   289,   289,   289,   290,   290,
     291,   291,   291,   291,   291,   291,   291,   291,   292,   292,
     292,   292,   292,   292,   293,   293,   294,   294,   294,   294,
     294,   294,   294,   295,   295,   296,   296,   297,   297,   297,
     297,   298,   298,   299,   300,   301,   303,   304,   302,   302,
     305,   305,   306,   307,   307,   308,   308,   309,   310,   310,
     311,   311,   311,   312,   312,   312,   313,   313,   314,   314,
     315,   315,   316,   316,   316,   317,   317,   318,   318,   319,
     319,   319,   319,   319,   319,   320,   320,   321,   321,   321,
     321,   321,   321,   321,   321,   322,   322,   322,   323,   323,
     323,   323,   323,   323,   324,   324,   324,   325,   325,   325,
     325,   325,   325,   325,   326,   326,   327
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     2,     0,     1,     1,     1,     4,     3,
       5,     4,     3,     2,     3,     1,     1,     3,     2,     4,
       1,     3,     1,     2,     3,     5,     4,     2,     0,     1,
       1,     1,     2,     1,     2,     3,     7,    10,     0,     6,
       0,     8,     0,    10,     0,     6,     2,     3,     2,     3,
       2,     3,     3,     2,     3,     3,     3,     3,     3,     3,
       5,     1,     1,     0,     9,     0,     9,     5,     0,     0,
       0,     0,    17,     3,     3,     9,     0,     1,     3,     1,
       1,     0,     1,     0,    11,     0,     8,     0,     0,     9,
       0,     7,     1,     2,     2,     2,     0,     2,     0,     2,
       0,     1,     3,     2,     0,     1,     2,     1,     4,     1,
       4,     1,     4,     1,     4,     3,     5,     3,     4,     4,
       5,     5,     4,     0,     1,     1,     6,     0,     7,     0,
       2,     0,     3,     0,     1,     0,     2,     3,     5,     4,
       4,     5,     7,     6,     1,     1,     1,     1,     0,     1,
       0,     1,     1,     2,     3,     3,     4,     3,     1,     1,
       2,     4,     3,     5,     1,     3,     3,     5,     1,     3,
       2,     0,     2,     0,     0,     4,     0,     5,     2,     0,
      10,     0,     4,     3,     3,     1,     0,     4,     4,     1,
       1,     1,     1,     1,     1,     1,     4,     1,     1,     3,
       2,     0,     0,     3,     0,     1,     3,     1,     1,     1,
       1,     3,     4,     4,     4,     1,     1,     2,     2,     2,
       3,     3,     1,     1,     1,     1,     3,     1,     1,     1,
       0,     1,     2,     1,     1,     1,     1,     1,     1,     3,
       5,     1,     3,     5,     4,     3,     1,     1,     0,     3,
       1,     6,     3,     4,     6,     3,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     5,     4,     1,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     1,     4,     3,     2,    10,     4,
       1,     4,     0,     3,     4,     1,     2,     4,     1,     0,
       4,     0,     0,     8,     1,     0,     0,     5,     0,     2,
       0,     1,     1,     3,     1,     3,     1,     1,     0,     4,
       0,     4,     1,     0,     4,     0,     4,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     4,     6,
       6,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       5,     1,     2,     0,     2,     2,     3,     0,     3,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     4,     1,     3,     3,     1,     1,     1,     1,
       3,     3,     3,     2,     0,     1,     0,     5,     3,     3,
       1,     1,     1,     1,     1,     1,     0,     0,     7,     1,
       2,     0,     3,     3,     0,     1,     2,     3,     1,     1,
       1,     2,     1,     4,     4,     1,     1,     4,     1,     0,
       1,     1,     4,     4,     1,     1,     3,     1,     2,     2,
       3,     6,     0,     1,     4,     2,     0,     5,     3,     3,
       1,     6,     4,     4,     2,     2,     2,     0,     1,     4,
       3,     3,     6,     3,     1,     1,     1,     4,     4,     2,
       2,     4,     2,     2,     1,     3,     3
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       4,     0,     2,     1,   148,   148,     0,   148,   148,   148,
       0,   148,   148,   148,   148,   148,   148,   148,   148,   148,
     148,   148,   148,     0,     0,   148,     0,   447,     0,   450,
     451,    20,   467,   506,    62,   452,   148,    40,     0,     0,
       0,     0,     0,   148,     0,   148,     0,   148,     0,   148,
       0,     0,     0,     0,   432,     0,     0,     0,     0,    92,
       0,     0,   145,   455,   456,   457,   453,   454,   537,     0,
       0,   148,   146,   148,    61,    28,   517,   537,   537,   537,
       3,    22,   466,     0,     5,    33,     6,     7,     0,   147,
       0,   482,   320,   499,     0,   431,   469,   314,     0,   481,
       0,   483,     0,   502,   489,   498,   500,   505,     0,   304,
     468,    20,   432,     0,   147,     0,   553,   552,   148,   550,
     549,   317,   401,   400,   397,   399,   398,   417,   419,   418,
     389,   379,   395,   394,   358,   366,   367,   369,   368,   357,
     388,   372,   370,   371,   373,   374,   375,   376,   377,   378,
     380,   381,   382,   383,   384,   385,   387,   386,   359,   360,
     361,   363,   364,   365,   403,   404,   413,   412,   411,   410,
     409,   408,   396,   414,   405,   406,   407,   390,   391,   392,
     393,   415,   416,   420,   422,   421,   423,   424,   402,   426,
     425,   362,   338,   347,   288,   289,   290,   291,   313,   311,
     310,   309,   308,   307,   306,   305,    20,   435,   434,     0,
     271,   485,   269,   256,   436,   437,   434,     0,   449,   438,
     441,   500,     0,   148,   312,   148,    34,     0,   246,   148,
     148,   148,   148,     0,   148,    46,     0,     0,    48,     0,
       0,    50,   482,     0,   483,    68,     0,     0,     0,    15,
      16,   159,     0,     0,   158,    94,    93,   164,     0,     0,
       0,     0,     0,    90,   522,   148,     0,     0,     4,     0,
      23,    53,   482,   483,     0,   148,   148,     0,     0,     0,
       0,   148,     0,    13,    96,    96,   168,     0,    82,    81,
       0,   148,   148,   148,   148,   148,   148,   148,   148,   148,
     148,   148,   148,   148,   148,   148,   148,   148,   148,   148,
     148,   148,   148,   148,   148,   148,     0,   148,    32,   270,
     268,   148,   148,   148,   148,   148,   148,   148,   148,   148,
     148,   148,   148,   148,     0,   148,   148,   518,   501,    81,
       0,   348,   350,   328,     0,     0,     0,     0,   148,   255,
       0,   501,   445,     0,     0,   148,    59,     0,     0,     0,
     247,   250,   482,   483,     0,     0,     0,    47,    74,    49,
       0,    51,    52,    28,    73,    18,     0,    12,     0,   148,
     160,   483,     0,    56,     0,     0,    57,     0,    77,    79,
     554,     0,     0,     0,   100,     0,   523,     0,     0,   530,
       0,   476,   538,   536,   472,   148,     0,   535,    24,   148,
       9,     4,    54,    55,   301,    35,    27,    29,    30,    31,
       0,   316,   470,   471,    21,     0,     0,   149,   482,   483,
       0,     0,    85,    87,   148,     0,    58,    80,     0,   556,
     497,   495,     0,   274,   276,   275,   148,     0,   272,   273,
     277,   279,   278,   293,   292,   295,   294,   296,   298,   299,
     297,   287,   286,   281,   282,   280,   283,   284,   285,   300,
     508,     0,     0,   252,   267,   266,   265,   264,   263,   262,
     261,   260,   259,   258,   257,     0,     0,     0,     0,     0,
     551,     0,     0,   327,   331,   329,     0,   341,   352,     0,
     497,     0,     0,   446,   148,   245,     0,    38,   148,   148,
       0,     0,     0,     0,   148,    44,     0,     0,    20,     0,
       0,   459,   458,    26,   463,   148,     0,    14,    17,     0,
     157,   165,   162,     0,     0,     0,   547,   548,     8,     0,
       0,   522,   519,     0,   534,   484,   148,   315,   148,   525,
       0,     0,   467,     0,     0,    11,   148,   507,   153,   427,
     148,     0,    95,    98,    98,   169,   166,    83,   148,   148,
     148,   496,   303,   148,   319,     0,   253,   428,   515,   148,
     511,   494,   510,   514,   503,   504,   349,   351,   340,   335,
     336,   353,   355,   448,   443,    28,   127,   148,   148,     0,
     249,   104,     0,   104,   105,   115,     0,    28,   113,    67,
       0,   460,   461,     0,   474,     0,    69,    19,   161,     0,
      78,    60,   555,    99,   101,   171,     0,     0,   520,   148,
       0,   529,     0,   528,   544,   546,   545,     0,   540,   148,
     541,   543,    10,     0,   482,   483,    25,     0,     0,     0,
     148,     0,   144,   145,   146,     0,   134,     0,     0,     0,
     302,   449,     0,   148,   487,   148,   148,     0,   334,   330,
       0,     0,     0,   440,   129,   131,     0,    28,   111,    39,
     148,     0,     0,   106,     0,     0,   148,   123,   123,    45,
     464,   480,     0,   476,   465,     0,   163,     0,   230,   524,
     522,   251,   533,   532,   148,   539,     0,   156,    97,   171,
      88,   167,   148,   322,   148,     0,   136,   429,   430,   254,
     516,     0,   491,     0,     0,     0,   344,   148,   346,   339,
     342,   148,   337,   354,   356,     0,   442,   133,     0,   148,
      36,     0,   148,     0,   103,    65,    63,   116,     0,   123,
       0,   123,     0,     0,   462,   475,   473,     0,   102,     0,
     233,   234,   235,   238,   237,   236,   228,   181,     0,     0,
      91,   170,   174,   148,   227,   231,     0,     0,     0,   527,
       0,   230,   173,     0,     0,     0,     0,   137,     0,   493,
     488,   512,   513,   332,     0,     0,   444,     0,     0,     0,
     148,   130,    41,     0,    42,   148,   148,   114,     0,     0,
     148,     0,     0,   117,   479,   478,     0,     0,     0,   207,
       0,   205,   209,   210,     0,     0,   208,     0,     0,   176,
     232,     0,   178,   521,   531,   542,    86,   230,     0,     0,
      28,     0,   140,     0,   139,     0,   490,   335,   345,   343,
     148,    28,     0,     0,   112,   148,    28,   109,    66,    64,
       0,   119,     0,   124,   125,    28,   118,     0,     0,     0,
     191,   193,   190,   197,   192,   195,   435,     0,     0,   185,
       0,   194,     0,   183,   222,   223,   224,   215,     0,   216,
     184,   241,     0,    81,     0,     0,    89,   172,    28,     0,
     325,     0,   148,   141,     0,   138,   494,   333,     0,   132,
      37,   148,    28,   107,    43,   148,   120,    28,   122,   477,
       0,   244,     0,   186,   182,   201,   206,     0,     0,   211,
     218,   219,   217,     0,     0,   175,     0,     0,     0,   148,
     326,     0,   321,   318,     0,   143,   492,     0,   126,   148,
       0,   121,     0,     0,   198,     0,     0,   204,   220,   221,
     213,   214,   212,   242,   239,     0,   177,   243,    84,     0,
     323,   142,    28,     0,   110,    70,     0,   196,   187,   200,
     202,   188,     0,   179,   324,   128,   108,    28,   199,     0,
     240,   148,   148,   203,     0,    71,     0,    76,   225,    28,
     180,    72,   148,     0,   226,     0,     0,     0,     0,    28,
     148,    75
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     1,     2,    80,   248,   249,    81,    82,    83,   275,
     416,   417,    85,   598,   229,   855,   610,   806,   805,   373,
     695,   987,   997,  1001,   387,   388,   438,   289,   418,   651,
     419,   563,   564,   782,   394,    88,   432,   648,   540,   623,
     682,   603,   914,   858,   679,   609,   365,   689,   750,   865,
     675,   737,   740,   799,   655,   656,   114,   115,   426,   427,
     253,   254,   258,   287,   698,   837,   771,   827,   894,   991,
     818,   878,   955,   879,   880,   953,   957,   981,   989,   820,
     821,   825,   887,   888,   889,  1000,   772,   773,   774,   775,
     892,   776,   227,   359,   360,    91,   785,   901,    92,   344,
     589,   588,   847,   669,   345,   670,   667,   496,   732,   729,
     192,   491,   492,   497,   671,   672,   193,    93,    94,    95,
     218,   219,   350,   673,   736,   224,   349,    96,   523,   524,
      97,   692,   549,   693,    98,    99,   544,   100,   101,   334,
     722,   790,   846,   664,   102,   103,   104,   105,   106,   107,
     471,   581,   582,   583,   108,   397,   400,   401,   266,   407,
     637,   109,   391,   110
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -691
static const yytype_int16 yypact[] =
{
    -691,    73,  1557,  -691,  6529,  6529,   -79,  6529,  6529,  6529,
    7337,  6529,  6529,  6529,  6529,  6529,  6529,  6529,  6529,  6529,
    6529,  6529,  6529,   170,   170,  6529,   316,   -40,   -38,  -691,
    -691,    91,  -691,  -691,  -691,  -691,  6529,  -691,    26,    41,
     103,   109,   125,  4784,   101,  4912,   142,  5040,   162,  6529,
      50,   -11,   209,   211,   260,   182,   202,   229,   232,  -691,
     290,   234,   236,  -691,  -691,  -691,  -691,  -691,  -691,     8,
     321,  5168,   255,  6529,  -691,  -691,   249,  -691,  -691,  -691,
    -691,   265,   -28,    19,  -691,  -691,  -691,  -691,   -22,   355,
     353,  -691,  -691,  -691,   313,  -691,  -691,  -691,  4568,  -691,
     247,  4862,   302,  -691,   337,  -691,    96,  -691,     3,  -691,
    -691,   376,  -691,   332,  -691,   353,  7597,  7597,  6529,  7597,
    7597,  5100,  -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,
    -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,
    -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,
    -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,
    -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,
    -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,
    -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,
    -691,  -691,   424,  -691,   417,   417,    58,   417,   417,   417,
     417,   417,   417,   417,   417,   417,  -691,  -691,   362,   346,
    -691,  -691,  -691,  -691,   128,   255,  -691,   363,   370,  -691,
     386,    13,     3,  5296,  -691,  6529,  -691,    21,  7597,  4222,
    6529,  5424,  6529,   446,  6529,  -691,  5481,   377,  -691,  5897,
     513,  -691,   381,  7597,  1109,  -691,  6041,   321,    22,  -691,
     -26,  -691,   158,    23,  -691,  -691,  -691,   519,    25,   170,
     170,   170,   384,  -691,   552,  4368,   327,   321,  -691,   198,
     265,  -691,   387,  1121,  1198,  1941,  6529,   259,   136,    77,
     471,  4512,   473,  -691,   426,   426,   535,    27,  -691,   518,
     146,  6529,  6529,  6529,  5569,  6529,  6529,  6529,  6529,  6529,
    6529,  6529,  6529,  6529,  6529,  6529,  6529,  6529,  6529,  6529,
    6529,  6529,  6529,  6529,  6529,  6529,   316,  5697,  -691,  -691,
    -691,  5841,  6529,  6529,  6529,  6529,  6529,  6529,  6529,  6529,
    6529,  6529,  6529,  4512,   430,  5697,  6529,   249,     6,   518,
    6457,  -691,  -691,  -691,   516,  7083,   193,    78,  4512,  -691,
     435,    16,  -691,  6586,  6796,  6529,  -691,   486,  6837,   399,
     564,  7597,   483,  1313,   561,    44,  6878,  -691,  -691,  -691,
    1271,  -691,  -691,  -691,  -691,   145,    50,  -691,   506,  6529,
    -691,  -691,   -11,  -691,  1271,   508,  -691,    45,  -691,  -691,
    -691,    46,   428,   423,   463,   433,  -691,    47,   170,  7458,
     429,   582,   150,  -691,  -691,  6657,   170,  -691,   265,  1685,
    -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,
     100,  -691,  -691,  -691,  -691,   170,   436,   584,    48,   421,
     580,   207,  -691,  -691,  6529,   521,  -691,  -691,    14,   441,
     447,    16,     3,  7637,  7334,  5100,  6529,  7556,  5756,  6315,
    6712,  7065,  1157,  7197,  7197,  7197,  7197,   787,   787,   787,
     787,   887,   887,   464,   464,   464,    58,    58,    58,  -691,
    7597,   439,   360,  5100,  5100,  5100,  5100,  5100,  5100,  5100,
    5100,  5100,  5100,  5100,  5100,   442,   161,   454,   335,   462,
    -691,  7337,  7337,  -691,  -691,  -691,   605,    20,  -691,   441,
    -691,   465,   161,  -691,  3510,  7597,   467,  -691,  5424,  6529,
     170,   151,  1271,   551,  3656,  -691,  1271,  1271,   487,   474,
     492,  -691,  -691,  -691,  -691,  2069,   562,  -691,  -691,   841,
    -691,  -691,   621,   170,   479,   170,  -691,  -691,  -691,   207,
     480,   552,   558,   626,  -691,  -691,  5985,  -691,  4656,  -691,
     347,   569,   581,  4712,   488,  -691,  1813,  -691,  -691,  -691,
    6129,  1271,  -691,   524,   524,  7597,   628,  -691,   188,  4512,
    4512,    16,  5356,  6529,  -691,   316,  -691,  -691,  -691,  6529,
    -691,   494,    17,  -691,  -691,  -691,  -691,  -691,  -691,   499,
    -691,  -691,  -691,  -691,  -691,  -691,  -691,  6529,  3802,   495,
    7597,   531,   170,   531,  -691,  -691,   642,  -691,  -691,  -691,
      10,  -691,  -691,   586,  1271,   587,  -691,  -691,  -691,  1271,
    -691,  -691,  -691,   651,  -691,  -691,    49,   510,  -691,  6529,
     170,  7597,   170,  7499,  -691,  -691,  -691,   501,  -691,  6529,
    -691,  -691,  -691,   170,    51,   590,  -691,   207,   503,   509,
    6529,   511,  -691,  -691,  -691,   515,   665,   197,   522,   523,
    5356,   370,  4968,  4512,  -691,  5697,  6529,     9,  -691,  -691,
     -34,  7337,  7337,   553,  2197,   349,  6925,  -691,  -691,  -691,
    6257,   151,   525,  -691,   527,  1271,  2325,   529,   530,  -691,
    -691,   557,   528,   681,  -691,   588,  -691,   207,  1329,  -691,
     552,  5100,  -691,  -691,  6401,  -691,    59,  -691,   651,  -691,
    -691,  7597,   188,   593,   286,   618,   679,  -691,  -691,  -691,
    -691,   545,  -691,   540,  5224,  7210,  -691,  6529,  -691,  -691,
    -691,  6529,  -691,  -691,  -691,   161,  -691,   359,   549,  4222,
    -691,   550,  2453,   563,  -691,  -691,  -691,  -691,   567,  -691,
     -12,  -691,   132,  1271,  -691,  1271,  -691,   565,  -691,   636,
    -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,   570,     0,
    -691,  -691,  -691,   286,   624,  -691,    29,    52,   170,  7597,
     568,  1382,  -691,   572,   571,   579,   213,   715,  1271,  -691,
     608,  -691,  -691,  -691,  5625,  6185,  -691,   585,   712,   673,
    6529,  -691,  -691,   596,  -691,  3948,  3948,  -691,   354,   610,
    6529,    32,   167,  -691,  -691,   620,   207,   756,   434,  -691,
      30,  -691,  -691,  -691,   181,   615,  -691,   703,   353,  -691,
    -691,   709,  -691,  -691,  -691,  -691,  -691,  1400,   625,   214,
    -691,   708,   771,  1271,  -691,   161,  -691,   499,  -691,  -691,
    6529,  -691,   630,  6966,  -691,  4094,  -691,  -691,  -691,  -691,
     632,  -691,  4424,  -691,  -691,  -691,  -691,  1271,   717,  1271,
    -691,  -691,  -691,  -691,  -691,  -691,    31,   635,    34,  -691,
    7337,  -691,   570,  -691,  -691,  -691,  -691,  -691,    43,   427,
    -691,   780,    35,   518,   703,   781,  -691,  -691,  -691,   723,
    -691,    53,  2581,   788,  1271,  -691,   494,  -691,  7007,  2197,
    -691,  4222,  -691,  -691,  -691,  2709,  -691,  -691,  2197,  -691,
     645,  -691,   729,  -691,  -691,   287,  -691,   181,   181,   443,
    -691,  -691,  -691,  1271,   733,  -691,   736,    36,  1271,  2837,
    -691,   223,  -691,  -691,  1271,  -691,  -691,   785,  -691,  2965,
     658,  2197,   659,    18,  -691,   434,  1271,   766,   789,  -691,
    -691,  -691,  -691,  -691,   806,   683,  -691,  -691,  -691,   762,
    -691,  -691,  -691,   682,  -691,  -691,   729,  -691,  -691,  -691,
    -691,  -691,  1271,  -691,  -691,  2197,  -691,  -691,  -691,   686,
    -691,   188,  3093,  -691,   688,  -691,   338,  -691,  -691,  -691,
    -691,   739,  3221,   690,  -691,   207,   772,   691,   692,  -691,
    3349,  -691
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -691,  -691,  -240,  -691,  -691,   485,   -29,    24,  -691,  -204,
    -691,     4,  -691,  -691,  -691,  -691,  -691,  -691,  -691,  -691,
    -691,  -691,  -691,  -691,  -691,   314,  -324,  -113,     5,  -691,
      15,  -691,  -691,  -691,  -691,  -691,   577,   299,  -691,   217,
     262,   208,  -691,    86,  -691,  -691,  -691,  -691,  -347,    33,
    -691,  -691,  -691,  -691,  -690,  -691,    -2,     2,  -314,  -691,
    -691,   512,  -691,  -691,   187,  -691,    60,  -691,  -691,  -691,
    -691,  -691,  -691,   -57,  -691,  -691,  -691,  -691,  -691,  -691,
      28,  -691,   130,  -428,  -691,  -691,  -691,  -691,  -691,   127,
      11,  -691,  -691,  -484,  -691,   -39,  -691,  -691,   239,  -691,
    -691,  -691,  -691,    56,  -691,  -691,  -691,  -691,  -691,  -691,
    -691,  -691,  -691,    38,  -691,  -691,  -333,  -691,   -13,  -417,
    -293,  -691,  -691,  -691,  -691,  -691,   251,   591,   601,  -691,
    -691,  -691,   215,  -691,   742,   662,  -420,   491,   750,  -691,
    -691,  -691,  -691,    37,  -281,  -691,  -691,    -8,   -25,  -691,
    -315,  -486,  -691,  -691,   -23,  -516,  -691,  -691,   405,  -691,
    -691,  -691,  -691,  -691
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -527
static const yytype_int16 yytable[] =
{
      89,   221,   339,   222,    90,   558,    84,    86,   242,   440,
     209,   209,   498,   217,   562,   489,   594,    87,   220,   485,
     487,   250,   783,   469,   599,   626,   976,   282,   409,   355,
     376,   382,   272,   385,   501,   435,   687,   831,   882,  -189,
     269,   270,   923,   934,   934,   725,   591,   208,   208,   284,
     216,   927,   513,   533,   535,   542,  -151,   542,   863,  -154,
     542,   941,   251,   592,   378,   440,   500,   335,   291,   292,
     293,   822,   928,     3,   335,   118,    33,   335,   665,   206,
     809,   810,   811,   338,   294,   567,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   316,   291,
     292,   293,  -434,   730,   223,   823,   225,   226,   280,   317,
     317,   206,   624,   731,   285,   294,   281,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   252,   316,
     402,    33,   267,  -433,   824,   403,   726,   335,   586,   587,
    -496,   317,   337,   336,  -144,   268,   727,   688,   568,   525,
     336,   556,   237,   336,   666,   283,   977,   356,   377,   383,
     230,   386,   602,   436,   777,   832,   883,  -189,   864,  -144,
     924,   935,   966,   362,   247,   231,   743,   351,   929,   514,
     534,   536,   543,  -151,   699,   580,  -154,   833,   942,   402,
     702,   550,   703,   240,   403,   405,   406,   439,   375,    33,
     780,   580,   206,   707,    33,   810,   811,    89,   715,   206,
     624,    33,   578,   357,    33,   526,  -433,    76,   408,   209,
     423,   206,   428,    33,   841,   899,   209,   209,   209,   796,
    -495,   209,   884,   336,   969,   658,   659,   232,   557,   652,
     810,   811,   112,   233,   499,   441,    33,   442,   -20,   112,
     716,   551,   -20,    89,   405,   406,   208,    90,   206,   234,
     758,   112,   661,   208,   208,   208,   842,   900,   208,   280,
     813,   221,   113,   222,   428,    70,   970,   207,   422,   113,
     956,   994,    70,   217,   207,    76,   319,   320,   220,   428,
      76,   113,   653,   591,    70,   379,   207,    76,   579,   245,
      76,   441,   441,   442,   442,   866,   255,   885,   256,    76,
     592,   886,   402,   257,   654,   824,   259,   403,   733,   734,
     216,   752,   280,  -135,   291,   292,   293,   250,   113,   721,
     723,    70,    76,   207,   410,   411,   260,   652,   834,   906,
     294,   263,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   261,   316,   209,   262,   214,   264,    33,
     265,   674,   206,   209,   521,  -435,   317,   405,   406,   868,
     402,   881,   808,   686,   812,   403,   276,    89,   521,   280,
     653,    90,   209,    84,    86,   738,   739,   571,   634,   421,
     635,   636,   208,   575,    87,   797,   798,   112,   286,  -152,
     208,   206,   654,    33,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   860,   810,   811,   208,
     341,   288,   930,   290,   580,   216,   333,   113,  -486,   209,
      70,   441,   215,   442,   404,   405,   406,   342,   960,   931,
     343,   112,   932,   742,  -144,    76,   267,   441,   317,   442,
    -485,  -485,   277,   278,   279,   961,   346,   870,   962,   871,
     872,   873,   874,   585,   998,   999,   208,   209,   209,   958,
     959,   113,    89,   347,    70,   206,   207,  -439,   596,   313,
     314,   315,    89,   316,   210,   212,   281,   364,   608,    76,
     209,   644,   209,    89,   348,   317,   370,    90,   209,   209,
     428,   428,   384,   368,   208,   208,   521,   371,   881,   393,
     521,   521,   424,   412,   430,   431,   875,   498,   434,   437,
     221,   486,   222,   493,    89,   508,   502,   208,    90,   208,
      84,    86,   217,   216,   580,   208,   208,   220,   506,   936,
     657,    87,   509,   510,   512,   113,  -152,   528,    70,   538,
     876,   532,   539,   537,   547,   521,   877,   541,  1006,   209,
     548,   559,   560,   561,   566,   569,    89,   577,  -155,   216,
     574,   570,   678,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   584,   568,   209,   590,   209,
     593,   597,   606,   206,   428,    33,   208,   613,   614,   206,
     209,    33,   615,   617,   619,   621,   902,   625,   521,   629,
     638,   650,   639,   521,   647,   668,   641,   909,   663,  -485,
    -485,   680,   915,   681,   208,   685,   208,   690,   694,   697,
     709,   918,   705,   112,   700,   712,   710,   208,   209,   112,
     713,   216,    89,   714,   735,   395,    90,   717,   718,   753,
     745,   627,   746,   754,    89,   749,   751,   209,    90,   755,
     757,   787,   788,   113,   939,   652,    70,   784,   207,   113,
     789,   791,    70,   800,   207,   208,   802,   817,   949,   521,
     441,    76,   442,   951,   657,   893,   786,    76,   804,   816,
     819,   216,  -229,   807,   208,   839,   835,   838,   843,   845,
     760,   761,   762,   763,   764,   765,   840,    89,   851,   850,
      89,   852,   867,   801,    90,  -155,   116,   117,   653,   119,
     120,   121,   854,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   209,   861,   213,   985,   869,
     654,   890,   829,   211,   211,   828,   891,   521,   228,   521,
     895,   903,   898,   992,   904,   236,   910,   239,   916,   243,
     920,   246,   922,   933,   938,  1002,   940,   244,    29,    30,
     952,   944,   208,    89,    89,  1010,   964,   965,    35,   857,
     857,   972,   521,   243,   974,   274,   975,   980,   928,   982,
     441,   273,   442,  -527,  -527,  -527,  -527,   308,   309,   310,
     311,   312,   313,   314,   315,   984,   316,   983,   986,   993,
     216,  1003,   216,   996,  1005,  1007,  1008,   620,   317,  1009,
     291,   292,   293,    89,    63,    64,    65,    66,    67,   913,
     340,   527,   433,   649,   708,   684,   294,   521,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   744,
     316,   521,   859,   521,   530,   917,   781,   897,   978,   826,
      89,   830,   317,   907,    90,   937,   728,    89,   756,    89,
     926,    90,   719,    89,   380,   948,    89,    90,   925,     0,
      90,     0,     0,     0,     0,     0,     0,     0,   521,   310,
     311,   312,   313,   314,   315,     0,   316,    89,     0,     0,
       0,    90,     0,   946,     0,     0,     0,    89,   317,    89,
       0,    90,     0,    90,     0,     0,     0,   521,     0,     0,
       0,   522,   521,     0,     0,   353,     0,   354,   521,     0,
       0,     0,   358,   361,   243,   522,   366,     0,     0,   216,
     521,     0,   363,    89,     0,   531,     0,    90,     0,     0,
      89,     0,     0,   657,    90,     0,     0,     0,     0,   618,
      89,     0,   381,     0,    90,     0,   521,   399,    89,   389,
     390,   392,    90,     0,   396,     0,     0,     0,   420,     0,
       0,     0,     0,   243,     0,     0,     0,     0,     0,   216,
       0,   429,     0,   443,   444,   445,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,     0,   470,
       0,     0,     0,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   243,     0,   470,   488,     0,
       0,     0,     0,   429,     0,     0,     0,     0,     0,     0,
     243,     0,     0,     0,     0,     0,     0,   505,   429,     0,
       0,     0,     0,   522,     0,     0,     0,   522,   522,     0,
       0,     0,     0,   605,     0,     0,     0,   611,   612,     0,
       0,   529,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,   553,   545,     0,
       0,     0,   522,     0,     0,     0,   554,     0,     0,     0,
       0,     0,   646,     0,     0,     0,     0,     0,  -485,  -485,
       0,     0,     0,     0,     0,   545,   565,     0,     0,     0,
    -485,  -485,     0,     0,     0,     0,     0,     0,   572,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   522,   316,   291,   292,   293,
     522,     0,     0,     0,     0,   691,     0,     0,   317,     0,
     696,     0,   576,   294,     0,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,     0,   316,     0,     0,
     361,   600,     0,     0,     0,     0,     0,     0,     0,   317,
     601,   604,     0,     0,     0,   372,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   522,   413,     0,     0,
       0,     0,     0,   389,     0,   622,   747,     0,   631,     0,
     633,   396,   628,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   243,     0,     0,     0,     0,     0,     0,     0,
     645,   243,   243,   516,   517,   660,     0,     0,     0,   429,
     429,   662,     0,     0,     0,     0,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,     0,   676,
      29,    30,   518,     0,   522,     0,   522,     0,     0,     0,
      35,     0,   683,   414,   814,     0,   815,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   701,  -485,  -485,     0,     0,     0,     0,     0,   522,
     545,   706,   545,     0,     0,     0,     0,     0,     0,   844,
       0,     0,   711,   545,     0,   519,    63,    64,    65,    66,
      67,     0,     0,   511,     0,   243,     0,   470,   724,     0,
       0,     0,   113,   429,     0,    70,     0,   520,     0,     0,
       0,     0,   361,     0,     0,     0,     0,     0,   759,     0,
       0,   604,     0,     0,   522,   760,   761,   762,   763,   764,
     765,   766,     0,     0,   905,     0,   779,     0,     0,     0,
     396,     0,     0,     0,     0,     0,     0,     0,   522,     0,
     522,     0,     0,     0,     0,     0,     0,     0,   919,   794,
     921,     0,     0,   795,     0,     0,     0,   767,   768,     0,
     769,   759,     0,     0,     0,     0,     0,   770,   760,   761,
     762,   763,   764,   765,   766,   522,     0,     0,     0,   759,
       0,     0,     0,     0,     0,   945,   760,   761,   762,   763,
     764,   765,   766,   954,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   522,     0,     0,     0,   545,   522,
     767,   768,     0,   769,   963,   522,     0,     0,     0,   967,
     836,     0,   853,     0,     0,   971,     0,   522,   767,   768,
       0,   769,   862,     0,     0,     0,     0,   979,   896,     0,
       4,     5,     6,     7,     8,     0,     0,   988,     0,     9,
       0,     0,     0,   522,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   990,     0,     0,     0,     0,     0,     0,
       0,     0,   908,    10,     0,     0,     0,     0,     0,    11,
      12,     0,     0,     0,     0,    13,     0,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,    25,
      26,    27,    28,     0,     0,     0,    29,    30,    31,    32,
      33,     0,    34,     0,     0,     0,    35,    36,    37,    38,
       0,    39,     0,    40,     0,    41,     0,     0,    42,     0,
       0,     0,    43,    44,    45,  -148,    46,    47,    48,     0,
      49,    50,    51,     0,     0,     0,    52,    53,    54,     0,
      55,    56,    57,    58,    59,    60,     0,     0,     0,     0,
      61,    62,    63,    64,    65,    66,    67,     0,     4,     5,
       6,     7,     8,    68,     0,     0,     0,     9,    69,     0,
       0,    70,    71,    72,     0,     0,     0,     0,     0,     0,
       0,    73,     0,    74,    75,     0,    76,    77,     0,    78,
      79,    10,     0,     0,     0,     0,     0,    11,    12,     0,
       0,     0,     0,    13,     0,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,    25,    26,    27,
      28,     0,     0,     0,    29,    30,    31,    32,    33,     0,
      34,     0,     0,     0,    35,    36,    37,    38,     0,    39,
       0,    40,     0,    41,     0,     0,    42,     0,     0,     0,
      43,    44,    45,     0,    46,    47,    48,     0,    49,    50,
      51,     0,     0,     0,    52,    53,    54,     0,    55,    56,
      57,    58,    59,    60,     0,     0,     0,     0,    61,    62,
      63,    64,    65,    66,    67,     0,     4,     5,     6,     7,
       8,    68,     0,     0,     0,     9,    69,     0,     0,    70,
      71,    72,     0,     0,     0,     0,     0,     0,     0,    73,
       0,    74,    75,   555,    76,    77,     0,    78,    79,    10,
       0,     0,     0,     0,     0,    11,    12,     0,     0,     0,
       0,    13,     0,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,    25,    26,    27,    28,     0,
       0,     0,    29,    30,    31,    32,    33,     0,    34,     0,
       0,     0,    35,    36,    37,    38,     0,    39,     0,    40,
       0,    41,     0,     0,    42,     0,     0,     0,    43,    44,
      45,     0,    46,    47,    48,     0,    49,    50,    51,     0,
       0,     0,    52,    53,    54,     0,    55,    56,    57,    58,
      59,    60,     0,     0,     0,     0,    61,    62,    63,    64,
      65,    66,    67,     0,     4,     5,     6,     7,     8,    68,
       0,     0,     0,     9,    69,     0,     0,    70,    71,    72,
       0,     0,     0,     0,     0,     0,     0,    73,     0,    74,
      75,   642,    76,    77,     0,    78,    79,    10,     0,     0,
       0,     0,     0,    11,    12,     0,     0,     0,     0,    13,
       0,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,    25,    26,    27,    28,     0,     0,     0,
      29,    30,    31,    32,    33,     0,    34,     0,     0,     0,
      35,    36,    37,    38,     0,    39,     0,    40,     0,    41,
       0,     0,    42,     0,     0,     0,    43,    44,    45,     0,
       0,    47,    48,     0,    49,     0,    51,     0,     0,     0,
      52,    53,    54,     0,    55,    56,    57,     0,    59,    60,
       0,     0,     0,     0,    61,    62,    63,    64,    65,    66,
      67,     0,     4,     5,     6,     7,     8,    68,     0,     0,
       0,     9,   113,     0,     0,    70,    71,    72,     0,     0,
       0,     0,     0,     0,     0,    73,     0,    74,    75,   415,
      76,    77,     0,    78,    79,    10,     0,     0,     0,     0,
       0,    11,    12,     0,     0,     0,     0,    13,     0,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,    25,    26,    27,    28,     0,     0,     0,    29,    30,
      31,    32,    33,     0,    34,     0,     0,     0,    35,    36,
      37,    38,     0,    39,     0,    40,     0,    41,     0,     0,
      42,     0,     0,     0,    43,    44,    45,     0,     0,    47,
      48,     0,    49,     0,    51,     0,     0,     0,    52,    53,
      54,     0,    55,    56,    57,     0,    59,    60,     0,     0,
       0,     0,    61,    62,    63,    64,    65,    66,    67,     0,
       4,     5,     6,     7,     8,    68,     0,     0,     0,     9,
     113,     0,     0,    70,    71,    72,     0,     0,     0,     0,
       0,     0,     0,    73,     0,    74,    75,   616,    76,    77,
       0,    78,    79,    10,     0,     0,     0,     0,     0,    11,
      12,     0,     0,     0,     0,    13,     0,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,    25,
      26,    27,    28,     0,     0,     0,    29,    30,    31,    32,
      33,     0,    34,     0,     0,     0,    35,    36,    37,    38,
       0,    39,     0,    40,     0,    41,     0,     0,    42,     0,
       0,     0,    43,    44,    45,  -148,     0,    47,    48,     0,
      49,     0,    51,     0,     0,     0,    52,    53,    54,     0,
      55,    56,    57,     0,    59,    60,     0,     0,     0,     0,
      61,    62,    63,    64,    65,    66,    67,     0,     4,     5,
       6,     7,     8,    68,     0,     0,     0,     9,   113,     0,
       0,    70,    71,    72,     0,     0,     0,     0,     0,     0,
       0,    73,     0,    74,    75,     0,    76,    77,     0,    78,
      79,    10,     0,     0,     0,     0,     0,    11,    12,     0,
       0,     0,     0,    13,     0,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,    25,    26,    27,
      28,     0,     0,     0,    29,    30,    31,    32,    33,     0,
      34,     0,     0,     0,    35,    36,    37,    38,     0,    39,
       0,    40,     0,    41,   748,     0,    42,     0,     0,     0,
      43,    44,    45,     0,     0,    47,    48,     0,    49,     0,
      51,     0,     0,     0,    52,    53,    54,     0,    55,    56,
      57,     0,    59,    60,     0,     0,     0,     0,    61,    62,
      63,    64,    65,    66,    67,     0,     4,     5,     6,     7,
       8,    68,     0,     0,     0,     9,   113,     0,     0,    70,
      71,    72,     0,     0,     0,     0,     0,     0,     0,    73,
       0,    74,    75,     0,    76,    77,     0,    78,    79,    10,
       0,     0,     0,     0,     0,    11,    12,     0,     0,     0,
       0,    13,     0,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,    25,    26,    27,    28,     0,
       0,     0,    29,    30,    31,    32,    33,     0,    34,     0,
       0,     0,    35,    36,    37,    38,   803,    39,     0,    40,
       0,    41,     0,     0,    42,     0,     0,     0,    43,    44,
      45,     0,     0,    47,    48,     0,    49,     0,    51,     0,
       0,     0,    52,    53,    54,     0,    55,    56,    57,     0,
      59,    60,     0,     0,     0,     0,    61,    62,    63,    64,
      65,    66,    67,     0,     4,     5,     6,     7,     8,    68,
       0,     0,     0,     9,   113,     0,     0,    70,    71,    72,
       0,     0,     0,     0,     0,     0,     0,    73,     0,    74,
      75,     0,    76,    77,     0,    78,    79,    10,     0,     0,
       0,     0,     0,    11,    12,     0,     0,     0,     0,    13,
       0,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,    25,    26,    27,    28,     0,     0,     0,
      29,    30,    31,    32,    33,     0,    34,     0,     0,     0,
      35,    36,    37,    38,     0,    39,     0,    40,     0,    41,
       0,     0,    42,     0,     0,     0,    43,    44,    45,     0,
       0,    47,    48,     0,    49,     0,    51,     0,     0,     0,
      52,    53,    54,     0,    55,    56,    57,     0,    59,    60,
       0,     0,     0,     0,    61,    62,    63,    64,    65,    66,
      67,     0,     4,     5,     6,     7,     8,    68,     0,     0,
       0,     9,   113,     0,     0,    70,    71,    72,     0,     0,
       0,     0,     0,     0,     0,    73,     0,    74,    75,   943,
      76,    77,     0,    78,    79,    10,     0,     0,     0,     0,
       0,    11,    12,     0,     0,     0,     0,    13,     0,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,    25,    26,    27,    28,     0,     0,     0,    29,    30,
      31,    32,    33,     0,    34,     0,     0,     0,    35,    36,
      37,    38,     0,    39,     0,    40,   950,    41,     0,     0,
      42,     0,     0,     0,    43,    44,    45,     0,     0,    47,
      48,     0,    49,     0,    51,     0,     0,     0,    52,    53,
      54,     0,    55,    56,    57,     0,    59,    60,     0,     0,
       0,     0,    61,    62,    63,    64,    65,    66,    67,     0,
       4,     5,     6,     7,     8,    68,     0,     0,     0,     9,
     113,     0,     0,    70,    71,    72,     0,     0,     0,     0,
       0,     0,     0,    73,     0,    74,    75,     0,    76,    77,
       0,    78,    79,    10,     0,     0,     0,     0,     0,    11,
      12,     0,     0,     0,     0,    13,     0,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,    25,
      26,    27,    28,     0,     0,     0,    29,    30,    31,    32,
      33,     0,    34,     0,     0,     0,    35,    36,    37,    38,
       0,    39,     0,    40,     0,    41,     0,     0,    42,     0,
       0,     0,    43,    44,    45,     0,     0,    47,    48,     0,
      49,     0,    51,     0,     0,     0,    52,    53,    54,     0,
      55,    56,    57,     0,    59,    60,     0,     0,     0,     0,
      61,    62,    63,    64,    65,    66,    67,     0,     4,     5,
       6,     7,     8,    68,     0,     0,     0,     9,   113,     0,
       0,    70,    71,    72,     0,     0,     0,     0,     0,     0,
       0,    73,     0,    74,    75,   968,    76,    77,     0,    78,
      79,    10,     0,     0,     0,     0,     0,    11,    12,     0,
       0,     0,     0,    13,     0,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,    25,    26,    27,
      28,     0,     0,     0,    29,    30,    31,    32,    33,     0,
      34,     0,     0,     0,    35,    36,    37,    38,     0,    39,
     973,    40,     0,    41,     0,     0,    42,     0,     0,     0,
      43,    44,    45,     0,     0,    47,    48,     0,    49,     0,
      51,     0,     0,     0,    52,    53,    54,     0,    55,    56,
      57,     0,    59,    60,     0,     0,     0,     0,    61,    62,
      63,    64,    65,    66,    67,     0,     4,     5,     6,     7,
       8,    68,     0,     0,     0,     9,   113,     0,     0,    70,
      71,    72,     0,     0,     0,     0,     0,     0,     0,    73,
       0,    74,    75,     0,    76,    77,     0,    78,    79,    10,
       0,     0,     0,     0,     0,    11,    12,     0,     0,     0,
       0,    13,     0,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,    25,    26,    27,    28,     0,
       0,     0,    29,    30,    31,    32,    33,     0,    34,     0,
       0,     0,    35,    36,    37,    38,     0,    39,     0,    40,
       0,    41,     0,     0,    42,     0,     0,     0,    43,    44,
      45,     0,     0,    47,    48,     0,    49,     0,    51,     0,
       0,     0,    52,    53,    54,     0,    55,    56,    57,     0,
      59,    60,     0,     0,     0,     0,    61,    62,    63,    64,
      65,    66,    67,     0,     4,     5,     6,     7,     8,    68,
       0,     0,     0,     9,   113,     0,     0,    70,    71,    72,
       0,     0,     0,     0,     0,     0,     0,    73,     0,    74,
      75,   995,    76,    77,     0,    78,    79,    10,     0,     0,
       0,     0,     0,    11,    12,     0,     0,     0,     0,    13,
       0,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,    25,    26,    27,    28,     0,     0,     0,
      29,    30,    31,    32,    33,     0,    34,     0,     0,     0,
      35,    36,    37,    38,     0,    39,     0,    40,     0,    41,
       0,     0,    42,     0,     0,     0,    43,    44,    45,     0,
       0,    47,    48,     0,    49,     0,    51,     0,     0,     0,
      52,    53,    54,     0,    55,    56,    57,     0,    59,    60,
       0,     0,     0,     0,    61,    62,    63,    64,    65,    66,
      67,     0,     4,     5,     6,     7,     8,    68,     0,     0,
       0,     9,   113,     0,     0,    70,    71,    72,     0,     0,
       0,     0,     0,     0,     0,    73,     0,    74,    75,  1004,
      76,    77,     0,    78,    79,    10,     0,     0,     0,     0,
       0,    11,    12,     0,     0,     0,     0,    13,     0,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,    25,    26,    27,    28,     0,     0,     0,    29,    30,
      31,    32,    33,     0,    34,     0,     0,     0,    35,    36,
      37,    38,     0,    39,     0,    40,     0,    41,     0,     0,
      42,     0,     0,     0,    43,    44,    45,     0,     0,    47,
      48,     0,    49,     0,    51,     0,     0,     0,    52,    53,
      54,     0,    55,    56,    57,     0,    59,    60,     0,     0,
       0,     0,    61,    62,    63,    64,    65,    66,    67,     0,
       0,     0,     0,     0,     0,    68,     0,     0,     0,     0,
     113,     0,     0,    70,    71,    72,     0,     0,     0,     0,
       0,     0,     0,    73,     0,    74,    75,  1011,    76,    77,
       0,    78,    79,     4,     5,     6,     7,     8,     0,     0,
       0,     0,     9,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   595,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    10,     0,     0,     0,
       0,     0,    11,    12,     0,     0,     0,     0,    13,     0,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,    25,    26,    27,    28,     0,     0,     0,    29,
      30,    31,    32,    33,     0,    34,     0,     0,     0,    35,
      36,    37,    38,     0,    39,     0,    40,     0,    41,     0,
       0,    42,     0,     0,     0,    43,    44,    45,     0,     0,
      47,    48,     0,    49,     0,    51,     0,     0,     0,     0,
       0,    54,     0,    55,    56,    57,     0,     0,     0,     0,
       0,     0,     0,    61,    62,    63,    64,    65,    66,    67,
       0,     0,     0,     0,     0,     0,    68,     0,     0,     0,
       0,   113,     0,     0,    70,    71,    72,     0,     0,     4,
       5,     6,     7,     8,    73,     0,    74,    75,     9,    76,
      77,     0,    78,    79,     0,     0,     0,     0,     0,     0,
       0,     0,   607,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    10,     0,     0,     0,     0,     0,    11,    12,
       0,     0,     0,     0,    13,     0,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,    25,    26,
      27,    28,     0,     0,     0,    29,    30,    31,    32,    33,
       0,    34,     0,     0,     0,    35,    36,    37,    38,     0,
      39,     0,    40,     0,    41,     0,     0,    42,     0,     0,
       0,    43,    44,    45,     0,     0,    47,    48,     0,    49,
       0,    51,     0,     0,     0,     0,     0,    54,     0,    55,
      56,    57,     0,     0,     0,     0,     0,     0,     0,    61,
      62,    63,    64,    65,    66,    67,     0,     0,     0,     0,
       0,     0,    68,     0,     0,     0,     0,   113,     0,     0,
      70,    71,    72,     0,     0,     4,     5,     6,     7,     8,
      73,     0,    74,    75,     9,    76,    77,     0,    78,    79,
       0,     0,     0,     0,     0,     0,     0,     0,   677,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    10,     0,
       0,     0,     0,     0,    11,    12,     0,     0,     0,     0,
      13,     0,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,    25,    26,    27,    28,     0,     0,
       0,    29,    30,    31,    32,    33,     0,    34,     0,     0,
       0,    35,    36,    37,    38,     0,    39,     0,    40,     0,
      41,     0,     0,    42,     0,     0,     0,    43,    44,    45,
       0,     0,    47,    48,     0,    49,     0,    51,     0,     0,
       0,     0,     0,    54,     0,    55,    56,    57,     0,     0,
       0,     0,     0,     0,     0,    61,    62,    63,    64,    65,
      66,    67,     0,     0,     0,     0,     0,     0,    68,     0,
       0,     0,     0,   113,     0,     0,    70,    71,    72,     0,
       0,     4,     5,     6,     7,     8,    73,     0,    74,    75,
       9,    76,    77,     0,    78,    79,     0,     0,     0,     0,
       0,     0,     0,     0,   856,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    10,     0,     0,     0,     0,     0,
      11,    12,     0,     0,     0,     0,    13,     0,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
      25,    26,    27,    28,     0,     0,     0,    29,    30,    31,
      32,    33,     0,    34,     0,     0,     0,    35,    36,    37,
      38,     0,    39,     0,    40,     0,    41,     0,     0,    42,
       0,     0,     0,    43,    44,    45,     0,     0,    47,    48,
       0,    49,     0,    51,     0,     0,     0,     0,     0,    54,
       0,    55,    56,    57,     0,     0,     0,     0,     0,     0,
       0,    61,    62,    63,    64,    65,    66,    67,     0,     0,
       0,     0,     0,     0,    68,     0,     0,     0,     0,   113,
       0,     0,    70,    71,    72,     0,     0,     4,     5,     6,
       7,     8,    73,     0,    74,    75,     9,    76,    77,     0,
      78,    79,     0,     0,     0,     0,     0,     0,     0,     0,
     912,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      10,     0,     0,     0,     0,     0,    11,    12,     0,     0,
       0,     0,    13,     0,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,    25,    26,    27,    28,
       0,     0,     0,    29,    30,    31,    32,    33,     0,    34,
       0,     0,     0,    35,    36,    37,    38,     0,    39,     0,
      40,     0,    41,     0,     0,    42,     0,     0,     0,    43,
      44,    45,     0,     0,    47,    48,     0,    49,     0,    51,
       0,     0,     0,     0,     0,    54,     0,    55,    56,    57,
       0,     0,     0,     0,     0,     0,     0,    61,    62,    63,
      64,    65,    66,    67,     0,     4,     5,     6,     7,     8,
      68,     0,     0,     0,     9,   113,     0,     0,    70,    71,
      72,     0,     0,     0,     0,     0,     0,     0,    73,     0,
      74,    75,     0,    76,    77,     0,    78,    79,    10,     0,
       0,     0,     0,     0,    11,    12,     0,     0,     0,     0,
      13,     0,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,    25,    26,    27,    28,     0,     0,
       0,    29,    30,    31,    32,    33,     0,    34,     0,     0,
       0,    35,    36,    37,    38,     0,    39,     0,    40,     0,
      41,     0,     0,    42,     0,     0,     0,    43,    44,    45,
       0,     0,    47,    48,     0,    49,     0,    51,     0,     0,
       0,     0,     0,    54,     0,    55,    56,    57,     0,     0,
       0,     0,     0,     0,     0,    61,    62,    63,    64,    65,
      66,    67,     0,     0,     0,     0,     0,     0,    68,     0,
       0,     0,     0,   113,     0,     0,    70,    71,    72,     0,
       0,     4,     5,     6,     7,     8,    73,     0,    74,    75,
       9,    76,    77,     0,    78,    79,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   398,
       0,     0,     0,     0,    10,     0,     0,     0,     0,     0,
      11,    12,     0,     0,     0,     0,    13,     0,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
      25,    26,    27,   291,   292,   293,     0,    29,    30,   111,
      32,    33,     0,     0,     0,     0,     0,    35,     0,   294,
     863,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,     0,   316,     0,     0,     0,     0,     0,   112,
       0,     0,    56,    57,     0,   317,     0,     0,     0,     0,
       0,    61,    62,    63,    64,    65,    66,    67,     0,     0,
       0,     0,     0,     0,    68,     0,     0,     0,     0,   113,
       0,     0,    70,     0,    72,     4,     5,     6,     7,     8,
       0,     0,    73,  -526,     9,     0,     0,    76,    77,     0,
      78,    79,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   425,     0,     0,     0,     0,    10,     0,
       0,     0,     0,     0,    11,    12,     0,     0,     0,     0,
      13,     0,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,    25,    26,    27,   291,   292,   293,
     864,    29,    30,   111,    32,    33,     0,     0,     0,     0,
       0,    35,     0,   294,     0,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,     0,   316,     0,     0,
       0,     0,     0,   112,     0,     0,    56,    57,     0,   317,
       0,     0,     0,     0,     0,    61,    62,    63,    64,    65,
      66,    67,     0,     0,     0,     0,     0,     0,    68,     0,
       0,     0,     0,   113,     0,     0,    70,     0,    72,     4,
       5,     6,     7,     8,     0,     0,    73,  -150,     9,     0,
       0,    76,    77,     0,    78,    79,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   632,     0,     0,
       0,     0,    10,     0,     0,     0,     0,     0,    11,    12,
       0,     0,     0,     0,    13,     0,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,    25,    26,
      27,   291,   292,   293,   318,    29,    30,   111,    32,    33,
       0,     0,     0,     0,     0,    35,     0,   294,     0,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
       0,   316,     0,     0,     0,     0,     0,   112,     0,     0,
      56,    57,     0,   317,     0,     0,     0,     0,     0,    61,
      62,    63,    64,    65,    66,    67,     0,     4,     5,     6,
       7,     8,    68,     0,     0,     0,     9,   113,     0,     0,
      70,     0,    72,     0,     0,     0,     0,     0,     0,     0,
      73,  -475,     0,     0,     0,    76,    77,     0,    78,    79,
      10,     0,     0,     0,     0,     0,    11,    12,     0,     0,
       0,     0,    13,     0,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,    25,    26,    27,     0,
       0,     0,     0,    29,    30,   111,    32,    33,     0,     0,
       0,     0,     0,    35,     0,     0,     0,     0,     0,     0,
     640,     0,     0,     0,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,     0,     0,     0,
       0,     0,     0,     0,     0,   112,     0,     0,    56,    57,
       0,     0,     0,     0,     0,     0,     0,    61,    62,    63,
      64,    65,    66,    67,     0,     4,     5,     6,     7,     8,
      68,  -485,  -485,     0,     9,   113,     0,     0,    70,     0,
      72,     0,     0,     0,     0,     0,     0,     0,    73,     0,
     235,     0,     0,    76,    77,     0,    78,    79,    10,     0,
       0,     0,     0,     0,    11,    12,     0,     0,     0,     0,
      13,     0,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,    25,    26,    27,   291,   292,   293,
       0,    29,    30,   111,    32,    33,     0,     0,     0,     0,
       0,    35,     0,   294,     0,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,     0,   316,     0,     0,
       0,     0,     0,   112,     0,     0,    56,    57,     0,   317,
       0,     0,     0,     0,     0,    61,    62,    63,    64,    65,
      66,    67,     0,     4,     5,     6,     7,     8,    68,     0,
       0,     0,     9,   113,     0,     0,    70,     0,    72,     0,
       0,     0,     0,     0,     0,     0,    73,     0,   238,     0,
       0,    76,    77,     0,    78,    79,    10,     0,     0,     0,
       0,     0,    11,    12,     0,     0,     0,     0,    13,     0,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,    25,    26,    27,     0,     0,     0,     0,    29,
      30,   111,    32,    33,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,     0,   294,   720,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,     0,   316,
       0,   112,     0,     0,    56,    57,     0,     0,     0,     0,
       0,   317,     0,    61,    62,    63,    64,    65,    66,    67,
       0,     4,     5,     6,     7,     8,    68,     0,     0,     0,
       9,   113,     0,     0,    70,     0,    72,     0,     0,     0,
       0,     0,     0,     0,    73,     0,   241,     0,     0,    76,
      77,     0,    78,    79,    10,     0,     0,     0,     0,     0,
      11,    12,     0,     0,     0,     0,    13,     0,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
      25,    26,    27,   291,   292,   293,     0,    29,    30,   111,
      32,    33,     0,     0,     0,     0,     0,    35,     0,   294,
       0,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,     0,   316,     0,     0,     0,     0,     0,   112,
       0,     0,    56,    57,     0,   317,     0,     0,     0,     0,
       0,    61,    62,    63,    64,    65,    66,    67,     0,     4,
       5,     6,     7,     8,    68,     0,     0,     0,     9,   113,
       0,     0,    70,     0,    72,     0,     0,     0,     0,     0,
       0,     0,    73,     0,   271,     0,     0,    76,    77,     0,
      78,    79,    10,     0,     0,     0,     0,     0,    11,    12,
       0,     0,     0,     0,    13,     0,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,    25,    26,
      27,     0,     0,     0,     0,    29,    30,   111,    32,    33,
       0,     0,     0,     0,     0,    35,     0,     0,     0,     0,
       0,     0,   792,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     0,   316,     0,   112,     0,     0,
      56,    57,     0,     0,     0,     0,     0,   317,     0,    61,
      62,    63,    64,    65,    66,    67,     0,     4,     5,     6,
       7,     8,    68,     0,     0,     0,     9,   113,     0,     0,
      70,     0,    72,     0,     0,     0,     0,     0,     0,     0,
      73,   352,     0,     0,     0,    76,    77,     0,    78,    79,
      10,     0,     0,     0,     0,     0,    11,    12,     0,     0,
       0,     0,    13,     0,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,    25,    26,    27,     0,
     291,   292,   293,    29,    30,   111,    32,    33,     0,     0,
       0,     0,     0,    35,     0,     0,   294,     0,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     316,     0,     0,     0,     0,   112,     0,     0,    56,    57,
       0,     0,   317,     0,     0,     0,     0,    61,    62,    63,
      64,    65,    66,    67,     0,     0,     0,     0,     0,     0,
      68,     0,     0,     0,     0,   113,     0,     0,    70,     0,
      72,     0,     4,     5,     6,     7,     8,     0,    73,     0,
    -248,     9,     0,    76,    77,     0,    78,    79,     0,     0,
       0,     0,     0,     0,     0,   446,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    10,     0,     0,     0,     0,
       0,    11,    12,     0,     0,     0,     0,    13,     0,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,    25,    26,    27,   291,   292,   293,   367,    29,    30,
     111,    32,    33,     0,     0,     0,     0,     0,    35,     0,
     294,     0,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     0,   316,     0,     0,     0,     0,     0,
     112,     0,     0,    56,    57,     0,   317,     0,     0,     0,
       0,     0,    61,    62,    63,    64,    65,    66,    67,     0,
       4,     5,     6,     7,     8,    68,     0,     0,     0,     9,
     113,     0,     0,    70,     0,    72,     0,     0,     0,     0,
       0,     0,     0,    73,     0,     0,     0,     0,    76,    77,
       0,    78,    79,    10,     0,     0,     0,     0,     0,    11,
      12,     0,     0,     0,     0,    13,     0,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,    25,
      26,    27,     0,     0,     0,     0,    29,    30,   111,    32,
      33,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,   848,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     0,   316,     0,     0,   112,     0,
       0,    56,    57,     0,     0,     0,     0,   317,     0,     0,
      61,    62,    63,    64,    65,    66,    67,     0,     0,     0,
       0,     0,     0,    68,     0,     0,     0,     0,   113,     0,
       0,    70,     0,    72,     4,     5,     6,     7,     8,     0,
       0,    73,     0,     9,     0,     0,    76,    77,  -509,    78,
      79,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   472,     0,     0,     0,     0,    10,     0,     0,
       0,     0,     0,    11,    12,     0,     0,     0,     0,    13,
       0,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,    25,    26,    27,   291,   292,   293,     0,
      29,    30,   111,    32,    33,     0,     0,     0,     0,     0,
      35,     0,   294,     0,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     0,   316,     0,     0,     0,
       0,     0,   112,     0,     0,    56,    57,     0,   317,     0,
       0,     0,     0,     0,    61,    62,    63,    64,    65,    66,
      67,     0,     0,     0,     0,     0,     0,    68,     0,     0,
       0,     0,   113,     0,     0,    70,     0,    72,     4,     5,
       6,     7,     8,     0,     0,    73,     0,     9,     0,     0,
      76,    77,     0,    78,    79,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   630,     0,     0,     0,
       0,    10,     0,     0,     0,     0,     0,    11,    12,     0,
       0,     0,     0,    13,     0,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,    25,    26,    27,
     291,   292,   293,   369,    29,    30,   111,    32,    33,     0,
       0,     0,     0,     0,    35,     0,   294,     0,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     316,     0,     0,     0,     0,     0,   112,     0,     0,    56,
      57,     0,   317,     0,     0,     0,     0,     0,    61,    62,
      63,    64,    65,    66,    67,     0,     0,     0,     0,     0,
       0,    68,     0,     0,     0,     0,   113,     0,     0,    70,
       0,    72,     4,     5,     6,     7,     8,     0,     0,    73,
       0,     9,     0,     0,    76,    77,     0,    78,    79,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     643,     0,     0,     0,     0,    10,     0,     0,     0,     0,
       0,    11,    12,     0,     0,     0,     0,    13,     0,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,    25,    26,    27,   291,   292,   293,   374,    29,    30,
     111,    32,    33,     0,     0,     0,     0,     0,    35,     0,
     294,     0,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     0,   316,     0,     0,     0,     0,     0,
     112,     0,     0,    56,    57,     0,   317,     0,     0,     0,
       0,     0,    61,    62,    63,    64,    65,    66,    67,     0,
       4,     5,     6,     7,     8,    68,     0,     0,     0,     9,
     113,     0,     0,    70,     0,    72,     0,     0,     0,     0,
       0,     0,     0,    73,     0,     0,     0,     0,    76,    77,
       0,    78,    79,    10,     0,     0,     0,     0,     0,    11,
      12,     0,     0,     0,     0,    13,     0,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,    25,
      26,    27,     0,     0,     0,     0,    29,    30,   111,    32,
      33,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,   849,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     0,   316,     0,     0,     0,   112,     0,
       0,    56,    57,     0,     0,     0,   317,     0,     0,     0,
      61,    62,    63,    64,    65,    66,    67,     0,     0,     0,
       0,     0,     0,    68,     0,     0,     0,     0,   113,     0,
       0,    70,     0,    72,     4,     5,     6,     7,     8,     0,
       0,    73,  -248,     9,     0,     0,    76,    77,     0,    78,
      79,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   778,     0,     0,     0,     0,    10,     0,     0,
       0,     0,     0,    11,    12,     0,     0,     0,     0,    13,
       0,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,    25,    26,    27,   291,   292,   293,     0,
      29,    30,   111,    32,    33,     0,     0,     0,     0,     0,
      35,     0,   294,     0,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     0,   316,     0,     0,     0,
       0,     0,   112,     0,     0,    56,    57,     0,   317,     0,
       0,     0,     0,     0,    61,    62,    63,    64,    65,    66,
      67,     0,     4,     5,     6,     7,     8,    68,     0,     0,
       0,     9,   113,     0,     0,    70,     0,    72,     0,     0,
       0,     0,     0,     0,     0,    73,     0,     0,     0,     0,
      76,    77,     0,    78,    79,    10,     0,     0,     0,     0,
       0,    11,    12,     0,     0,     0,     0,    13,     0,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,    25,    26,    27,     0,   291,   292,   293,    29,    30,
     111,    32,    33,     0,     0,     0,     0,     0,    35,     0,
       0,   294,   490,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     0,   316,     0,     0,     0,     0,
     112,     0,     0,    56,    57,     0,     0,   317,     0,     0,
       0,     0,    61,    62,    63,    64,    65,    66,    67,     0,
       4,     5,     6,     7,     8,    68,     0,     0,     0,     9,
     113,     0,     0,    70,     0,    72,     0,     0,     0,     0,
       0,     0,     0,    73,     0,     0,     0,     0,    76,    77,
       0,    78,    79,    10,     0,     0,     0,     0,     0,    11,
      12,     0,     0,     0,     0,    13,     0,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,    25,
      26,    27,     0,     0,     0,     0,    29,    30,   111,   552,
      33,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,   503,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
       0,   316,     0,     0,     0,     0,     0,     0,   112,     0,
       0,    56,    57,   317,     0,     0,     0,     0,     0,     0,
      61,    62,    63,    64,    65,    66,    67,     0,     0,     0,
       0,     0,     0,    68,     0,     0,     0,     0,   113,     0,
       0,    70,     0,    72,     0,   291,   292,   293,     0,     0,
       0,    73,     0,     0,     0,     0,    76,    77,     0,    78,
      79,   294,     0,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     0,   316,   291,   292,   293,     0,
       0,     0,     0,     0,     0,     0,     0,   317,     0,     0,
       0,     0,   294,     0,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     0,   316,   291,   292,   293,
       0,     0,     0,     0,     0,     0,     0,     0,   317,     0,
       0,     0,     0,   294,     0,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,     0,   316,     0,     0,
       0,     0,     0,     0,   291,   292,   293,     0,     0,   317,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     294,   504,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     0,   316,   291,   292,   293,     0,     0,
       0,     0,     0,     0,     0,     0,   317,     0,     0,     0,
       0,   294,   507,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     0,   316,   291,   292,   293,     0,
       0,     0,     0,     0,     0,     0,     0,   317,     0,     0,
       0,     0,   294,   515,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     0,   316,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   317,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     741,     0,     0,     0,     0,     0,   122,   123,   124,   125,
     126,     0,   127,   128,   129,   130,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     0,   316,     0,     0,     0,     0,     0,
     494,   911,     0,     0,     0,     0,   317,     0,     0,   495,
       0,     0,   131,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   132,   133,   134,   135,   136,
     137,   138,     0,     0,   139,     0,     0,     0,     0,     0,
       0,     0,   947,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,     0,     0,   181,   182,   183,   184,
     185,   186,   187,   122,   123,   124,   125,   126,     0,   127,
     128,   129,   130,     0,   188,   189,   190,     0,   191,  -527,
    -527,  -527,  -527,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     0,   316,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   793,     0,   317,   131,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   132,   133,   134,   135,   136,   137,   138,     0,
       0,   139,     0,     0,     0,     0,     0,     0,     0,     0,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,     0,     0,   181,   182,   183,   184,   185,   186,   187,
     122,   123,   124,   125,   126,   293,   127,   128,   129,   130,
       0,   188,   189,   190,     0,   191,     0,     0,     0,   294,
       0,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,     0,   316,     0,     0,   131,     0,     0,     0,
       0,     0,     0,     0,     0,   317,     0,     0,     0,   132,
     133,   134,   135,   136,   137,   138,     0,     0,   139,     0,
       0,     0,     0,     0,     0,     0,     0,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   291,   292,   293,
       0,     0,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,   191,   294,     0,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,     0,   316,   291,   292,
     293,     0,     0,     0,     0,     0,     0,     0,     0,   317,
       0,     0,     0,     0,   294,     0,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,     0,   316,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     317,     0,     0,     0,     0,   291,   292,   293,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     546,   294,   573,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     0,   316,   291,   292,   293,     0,
       0,     0,     0,     0,     0,     0,     0,   317,     0,     0,
       0,   704,   294,     0,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     0,   316,   292,   293,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   317,     0,
       0,     0,   294,     0,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     0,   316,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   317
};

static const yytype_int16 yycheck[] =
{
       2,    26,   115,    26,     2,   425,     2,     2,    47,   290,
      23,    24,   345,    26,   431,   339,   502,     2,    26,   333,
     335,    50,   712,   316,   508,   541,     8,     8,   268,     8,
       8,     8,    71,     8,   348,     8,    26,     8,     8,     8,
      69,    70,     8,     8,     8,    36,    26,    23,    24,    71,
      26,     8,     8,     8,     8,     8,     8,     8,    26,     8,
       8,     8,    73,    43,    90,   346,   347,    61,     9,    10,
      11,    71,    29,     0,    61,   154,    73,    61,    61,    71,
      92,    93,    94,   108,    25,    71,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    49,    49,     9,
      10,    11,   140,   147,   154,   115,   154,    26,   144,    61,
      61,    71,   539,   157,   146,    25,   154,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,   159,    49,
      73,    73,   144,   140,   154,    78,   147,    61,   491,   492,
     154,    61,   159,   157,    73,   157,   157,   157,   154,   373,
     157,   411,    71,   157,   157,   156,   158,   156,   156,   156,
     154,   156,    31,   156,   700,   156,   156,   156,   156,    98,
     156,   156,   156,   232,   144,   154,   680,   222,   155,   155,
     155,   155,   155,   155,   155,   486,   155,   155,   155,    73,
     630,    61,   632,    71,    78,   138,   139,    71,   247,    73,
     161,   502,    71,   643,    73,    93,    94,   229,    31,    71,
     647,    73,    71,   229,    73,    90,   140,   159,   267,   252,
     163,    71,   281,    73,    31,    31,   259,   260,   261,   735,
     154,   264,    71,   157,    31,   569,   570,   154,   158,    71,
      93,    94,   111,   154,    71,   290,    73,   290,   140,   111,
      73,   121,   144,   275,   138,   139,   252,   275,    71,   154,
     697,   111,   575,   259,   260,   261,    73,    73,   264,   144,
     158,   316,   141,   316,   333,   144,    73,   146,   162,   141,
      13,   991,   144,   316,   146,   159,    59,    60,   316,   348,
     159,   141,   124,    26,   144,   157,   146,   159,   157,   157,
     159,   346,   347,   346,   347,   158,   117,   146,   117,   159,
      43,   150,    73,    73,   146,   154,   154,    78,   671,   672,
     316,   688,   144,   155,     9,    10,    11,   376,   141,   663,
     665,   144,   159,   146,   156,   157,   154,    71,   778,   845,
      25,    71,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,   154,    49,   398,   154,    71,   154,    73,
     154,   595,    71,   406,   370,   140,    61,   138,   139,   816,
      73,   818,   749,   607,   751,    78,   157,   409,   384,   144,
     124,   409,   425,   409,   409,    66,    67,   442,    71,   160,
      73,    74,   398,    63,   409,    66,    67,   111,    73,     8,
     406,    71,   146,    73,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    92,    93,    94,   425,
      26,    98,    25,   140,   735,   431,   154,   141,   121,   472,
     144,   486,   146,   486,   137,   138,   139,    43,    25,    42,
      46,   111,    45,   677,    98,   159,   144,   502,    61,   502,
      59,    60,    77,    78,    79,    42,   140,    53,    45,    55,
      56,    57,    58,   158,   156,   157,   472,   510,   511,   927,
     928,   141,   504,   140,   144,    71,   146,   121,   504,    45,
      46,    47,   514,    49,    23,    24,   154,    71,   514,   159,
     533,   560,   535,   525,   154,    61,    13,   525,   541,   542,
     569,   570,    13,   156,   510,   511,   512,   156,   955,   155,
     516,   517,    71,   156,    71,   119,   112,   880,    13,    31,
     575,   121,   575,    37,   556,   156,   121,   533,   556,   535,
     556,   556,   575,   539,   845,   541,   542,   575,    82,   893,
     568,   556,     8,    90,    13,   141,   155,    71,   144,   156,
     146,    73,   119,   155,   155,   561,   152,   154,  1005,   602,
       8,   155,     8,    13,    73,   154,   598,   155,     8,   575,
     161,   154,   598,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,   161,   154,   630,    13,   632,
     155,   154,    71,    71,   663,    73,   602,   140,   154,    71,
     643,    73,   140,    71,    13,   156,   840,   157,   614,    13,
      71,    13,    61,   619,   120,   146,   158,   851,   154,    59,
      60,   156,   856,   122,   630,    13,   632,    71,    71,     8,
     157,   865,   161,   111,   154,   154,   157,   643,   681,   111,
     155,   647,   674,     8,   121,   123,   674,   155,   155,   122,
     155,   123,   155,   155,   686,   156,   156,   700,   686,     8,
     102,    73,    13,   141,   898,    71,   144,   104,   146,   141,
     155,   161,   144,   154,   146,   681,   156,    71,   912,   685,
     735,   159,   735,   917,   712,   828,   714,   159,   155,   154,
     150,   697,    98,   156,   700,   154,   158,   155,    13,   121,
     106,   107,   108,   109,   110,   111,   157,   739,    26,   154,
     742,    68,   122,   739,   742,   155,     4,     5,   124,     7,
       8,     9,   156,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,   778,   156,    25,   972,    13,
     146,   156,   774,    23,    24,   773,    73,   753,    36,   755,
      71,    73,   157,   987,    13,    43,   156,    45,   156,    47,
      73,    49,   157,    13,    13,   999,    73,    47,    69,    70,
     155,    13,   778,   805,   806,  1009,    73,    71,    79,   805,
     806,    26,   788,    71,   156,    73,   157,    51,    29,    13,
     845,    71,   845,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    73,    49,   154,   156,   153,
     816,   102,   818,   155,   154,    73,   155,   533,    61,   157,
       9,    10,    11,   855,   125,   126,   127,   128,   129,   855,
     118,   376,   285,   564,   647,   603,    25,   843,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,   681,
      49,   867,   806,   869,   382,   862,   709,   837,   955,   769,
     902,   774,    61,   847,   902,   894,   667,   909,   693,   911,
     882,   909,   661,   915,   252,   911,   918,   915,   880,    -1,
     918,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   904,    42,
      43,    44,    45,    46,    47,    -1,    49,   939,    -1,    -1,
      -1,   939,    -1,   906,    -1,    -1,    -1,   949,    61,   951,
      -1,   949,    -1,   951,    -1,    -1,    -1,   933,    -1,    -1,
      -1,   370,   938,    -1,    -1,   223,    -1,   225,   944,    -1,
      -1,    -1,   230,   231,   232,   384,   234,    -1,    -1,   955,
     956,    -1,   232,   985,    -1,   384,    -1,   985,    -1,    -1,
     992,    -1,    -1,   991,   992,    -1,    -1,    -1,    -1,   158,
    1002,    -1,   252,    -1,  1002,    -1,   982,   265,  1010,   259,
     260,   261,  1010,    -1,   264,    -1,    -1,    -1,   276,    -1,
      -1,    -1,    -1,   281,    -1,    -1,    -1,    -1,    -1,  1005,
      -1,   281,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,   317,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,    -1,
      -1,    -1,    -1,   333,    -1,    -1,    -1,    -1,    -1,    -1,
     348,    -1,    -1,    -1,    -1,    -1,    -1,   355,   348,    -1,
      -1,    -1,    -1,   512,    -1,    -1,    -1,   516,   517,    -1,
      -1,    -1,    -1,   512,    -1,    -1,    -1,   516,   517,    -1,
      -1,   379,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    -1,   405,   398,    -1,
      -1,    -1,   561,    -1,    -1,    -1,   406,    -1,    -1,    -1,
      -1,    -1,   561,    -1,    -1,    -1,    -1,    -1,    59,    60,
      -1,    -1,    -1,    -1,    -1,   425,   434,    -1,    -1,    -1,
      59,    60,    -1,    -1,    -1,    -1,    -1,    -1,   446,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,   614,    49,     9,    10,    11,
     619,    -1,    -1,    -1,    -1,   614,    -1,    -1,    61,    -1,
     619,    -1,   472,    25,    -1,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    -1,    49,    -1,    -1,
     508,   509,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
     510,   511,    -1,    -1,    -1,   156,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   685,   156,    -1,    -1,
      -1,    -1,    -1,   533,    -1,   535,   685,    -1,   546,    -1,
     548,   541,   542,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   560,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     560,   569,   570,    42,    43,   573,    -1,    -1,    -1,   569,
     570,   579,    -1,    -1,    -1,    -1,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    -1,   597,
      69,    70,    71,    -1,   753,    -1,   755,    -1,    -1,    -1,
      79,    -1,   602,   155,   753,    -1,   755,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   629,    59,    60,    -1,    -1,    -1,    -1,    -1,   788,
     630,   639,   632,    -1,    -1,    -1,    -1,    -1,    -1,   788,
      -1,    -1,   650,   643,    -1,   124,   125,   126,   127,   128,
     129,    -1,    -1,    90,    -1,   663,    -1,   665,   666,    -1,
      -1,    -1,   141,   663,    -1,   144,    -1,   146,    -1,    -1,
      -1,    -1,   680,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,   681,    -1,    -1,   843,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,   843,    -1,   704,    -1,    -1,    -1,
     700,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   867,    -1,
     869,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   867,   727,
     869,    -1,    -1,   731,    -1,    -1,    -1,   148,   149,    -1,
     151,    99,    -1,    -1,    -1,    -1,    -1,   158,   106,   107,
     108,   109,   110,   111,   112,   904,    -1,    -1,    -1,    99,
      -1,    -1,    -1,    -1,    -1,   904,   106,   107,   108,   109,
     110,   111,   112,   922,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   933,    -1,    -1,    -1,   778,   938,
     148,   149,    -1,   151,   933,   944,    -1,    -1,    -1,   938,
     158,    -1,   800,    -1,    -1,   944,    -1,   956,   148,   149,
      -1,   151,   810,    -1,    -1,    -1,    -1,   956,   158,    -1,
       3,     4,     5,     6,     7,    -1,    -1,   976,    -1,    12,
      -1,    -1,    -1,   982,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   982,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   850,    36,    -1,    -1,    -1,    -1,    -1,    42,
      43,    -1,    -1,    -1,    -1,    48,    -1,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    -1,    62,
      63,    64,    65,    -1,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    -1,    -1,    -1,    79,    80,    81,    82,
      -1,    84,    -1,    86,    -1,    88,    -1,    -1,    91,    -1,
      -1,    -1,    95,    96,    97,    98,    99,   100,   101,    -1,
     103,   104,   105,    -1,    -1,    -1,   109,   110,   111,    -1,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,   125,   126,   127,   128,   129,    -1,     3,     4,
       5,     6,     7,   136,    -1,    -1,    -1,    12,   141,    -1,
      -1,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   154,    -1,   156,   157,    -1,   159,   160,    -1,   162,
     163,    36,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
      -1,    -1,    -1,    48,    -1,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    -1,    62,    63,    64,
      65,    -1,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    -1,    -1,    -1,    79,    80,    81,    82,    -1,    84,
      -1,    86,    -1,    88,    -1,    -1,    91,    -1,    -1,    -1,
      95,    96,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,    -1,    -1,    -1,   109,   110,   111,    -1,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,   124,
     125,   126,   127,   128,   129,    -1,     3,     4,     5,     6,
       7,   136,    -1,    -1,    -1,    12,   141,    -1,    -1,   144,
     145,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,
      -1,   156,   157,   158,   159,   160,    -1,   162,   163,    36,
      -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,
      -1,    48,    -1,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    -1,    62,    63,    64,    65,    -1,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    -1,
      -1,    -1,    79,    80,    81,    82,    -1,    84,    -1,    86,
      -1,    88,    -1,    -1,    91,    -1,    -1,    -1,    95,    96,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,    -1,
      -1,    -1,   109,   110,   111,    -1,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,   123,   124,   125,   126,
     127,   128,   129,    -1,     3,     4,     5,     6,     7,   136,
      -1,    -1,    -1,    12,   141,    -1,    -1,   144,   145,   146,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,    -1,   156,
     157,   158,   159,   160,    -1,   162,   163,    36,    -1,    -1,
      -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    48,
      -1,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    -1,    62,    63,    64,    65,    -1,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    -1,    -1,    -1,
      79,    80,    81,    82,    -1,    84,    -1,    86,    -1,    88,
      -1,    -1,    91,    -1,    -1,    -1,    95,    96,    97,    -1,
      -1,   100,   101,    -1,   103,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,   113,   114,   115,    -1,   117,   118,
      -1,    -1,    -1,    -1,   123,   124,   125,   126,   127,   128,
     129,    -1,     3,     4,     5,     6,     7,   136,    -1,    -1,
      -1,    12,   141,    -1,    -1,   144,   145,   146,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   154,    -1,   156,   157,   158,
     159,   160,    -1,   162,   163,    36,    -1,    -1,    -1,    -1,
      -1,    42,    43,    -1,    -1,    -1,    -1,    48,    -1,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    -1,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    -1,    -1,    -1,    79,    80,
      81,    82,    -1,    84,    -1,    86,    -1,    88,    -1,    -1,
      91,    -1,    -1,    -1,    95,    96,    97,    -1,    -1,   100,
     101,    -1,   103,    -1,   105,    -1,    -1,    -1,   109,   110,
     111,    -1,   113,   114,   115,    -1,   117,   118,    -1,    -1,
      -1,    -1,   123,   124,   125,   126,   127,   128,   129,    -1,
       3,     4,     5,     6,     7,   136,    -1,    -1,    -1,    12,
     141,    -1,    -1,   144,   145,   146,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   154,    -1,   156,   157,   158,   159,   160,
      -1,   162,   163,    36,    -1,    -1,    -1,    -1,    -1,    42,
      43,    -1,    -1,    -1,    -1,    48,    -1,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    -1,    62,
      63,    64,    65,    -1,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    -1,    -1,    -1,    79,    80,    81,    82,
      -1,    84,    -1,    86,    -1,    88,    -1,    -1,    91,    -1,
      -1,    -1,    95,    96,    97,    98,    -1,   100,   101,    -1,
     103,    -1,   105,    -1,    -1,    -1,   109,   110,   111,    -1,
     113,   114,   115,    -1,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,   125,   126,   127,   128,   129,    -1,     3,     4,
       5,     6,     7,   136,    -1,    -1,    -1,    12,   141,    -1,
      -1,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   154,    -1,   156,   157,    -1,   159,   160,    -1,   162,
     163,    36,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
      -1,    -1,    -1,    48,    -1,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    -1,    62,    63,    64,
      65,    -1,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    -1,    -1,    -1,    79,    80,    81,    82,    -1,    84,
      -1,    86,    -1,    88,    89,    -1,    91,    -1,    -1,    -1,
      95,    96,    97,    -1,    -1,   100,   101,    -1,   103,    -1,
     105,    -1,    -1,    -1,   109,   110,   111,    -1,   113,   114,
     115,    -1,   117,   118,    -1,    -1,    -1,    -1,   123,   124,
     125,   126,   127,   128,   129,    -1,     3,     4,     5,     6,
       7,   136,    -1,    -1,    -1,    12,   141,    -1,    -1,   144,
     145,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,
      -1,   156,   157,    -1,   159,   160,    -1,   162,   163,    36,
      -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,
      -1,    48,    -1,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    -1,    62,    63,    64,    65,    -1,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    -1,
      -1,    -1,    79,    80,    81,    82,    83,    84,    -1,    86,
      -1,    88,    -1,    -1,    91,    -1,    -1,    -1,    95,    96,
      97,    -1,    -1,   100,   101,    -1,   103,    -1,   105,    -1,
      -1,    -1,   109,   110,   111,    -1,   113,   114,   115,    -1,
     117,   118,    -1,    -1,    -1,    -1,   123,   124,   125,   126,
     127,   128,   129,    -1,     3,     4,     5,     6,     7,   136,
      -1,    -1,    -1,    12,   141,    -1,    -1,   144,   145,   146,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,    -1,   156,
     157,    -1,   159,   160,    -1,   162,   163,    36,    -1,    -1,
      -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    48,
      -1,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    -1,    62,    63,    64,    65,    -1,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    -1,    -1,    -1,
      79,    80,    81,    82,    -1,    84,    -1,    86,    -1,    88,
      -1,    -1,    91,    -1,    -1,    -1,    95,    96,    97,    -1,
      -1,   100,   101,    -1,   103,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,   113,   114,   115,    -1,   117,   118,
      -1,    -1,    -1,    -1,   123,   124,   125,   126,   127,   128,
     129,    -1,     3,     4,     5,     6,     7,   136,    -1,    -1,
      -1,    12,   141,    -1,    -1,   144,   145,   146,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   154,    -1,   156,   157,   158,
     159,   160,    -1,   162,   163,    36,    -1,    -1,    -1,    -1,
      -1,    42,    43,    -1,    -1,    -1,    -1,    48,    -1,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    -1,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    -1,    -1,    -1,    79,    80,
      81,    82,    -1,    84,    -1,    86,    87,    88,    -1,    -1,
      91,    -1,    -1,    -1,    95,    96,    97,    -1,    -1,   100,
     101,    -1,   103,    -1,   105,    -1,    -1,    -1,   109,   110,
     111,    -1,   113,   114,   115,    -1,   117,   118,    -1,    -1,
      -1,    -1,   123,   124,   125,   126,   127,   128,   129,    -1,
       3,     4,     5,     6,     7,   136,    -1,    -1,    -1,    12,
     141,    -1,    -1,   144,   145,   146,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   154,    -1,   156,   157,    -1,   159,   160,
      -1,   162,   163,    36,    -1,    -1,    -1,    -1,    -1,    42,
      43,    -1,    -1,    -1,    -1,    48,    -1,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    -1,    62,
      63,    64,    65,    -1,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    -1,    -1,    -1,    79,    80,    81,    82,
      -1,    84,    -1,    86,    -1,    88,    -1,    -1,    91,    -1,
      -1,    -1,    95,    96,    97,    -1,    -1,   100,   101,    -1,
     103,    -1,   105,    -1,    -1,    -1,   109,   110,   111,    -1,
     113,   114,   115,    -1,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,   125,   126,   127,   128,   129,    -1,     3,     4,
       5,     6,     7,   136,    -1,    -1,    -1,    12,   141,    -1,
      -1,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   154,    -1,   156,   157,   158,   159,   160,    -1,   162,
     163,    36,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
      -1,    -1,    -1,    48,    -1,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    -1,    62,    63,    64,
      65,    -1,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    -1,    -1,    -1,    79,    80,    81,    82,    -1,    84,
      85,    86,    -1,    88,    -1,    -1,    91,    -1,    -1,    -1,
      95,    96,    97,    -1,    -1,   100,   101,    -1,   103,    -1,
     105,    -1,    -1,    -1,   109,   110,   111,    -1,   113,   114,
     115,    -1,   117,   118,    -1,    -1,    -1,    -1,   123,   124,
     125,   126,   127,   128,   129,    -1,     3,     4,     5,     6,
       7,   136,    -1,    -1,    -1,    12,   141,    -1,    -1,   144,
     145,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,
      -1,   156,   157,    -1,   159,   160,    -1,   162,   163,    36,
      -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,
      -1,    48,    -1,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    -1,    62,    63,    64,    65,    -1,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    -1,
      -1,    -1,    79,    80,    81,    82,    -1,    84,    -1,    86,
      -1,    88,    -1,    -1,    91,    -1,    -1,    -1,    95,    96,
      97,    -1,    -1,   100,   101,    -1,   103,    -1,   105,    -1,
      -1,    -1,   109,   110,   111,    -1,   113,   114,   115,    -1,
     117,   118,    -1,    -1,    -1,    -1,   123,   124,   125,   126,
     127,   128,   129,    -1,     3,     4,     5,     6,     7,   136,
      -1,    -1,    -1,    12,   141,    -1,    -1,   144,   145,   146,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,    -1,   156,
     157,   158,   159,   160,    -1,   162,   163,    36,    -1,    -1,
      -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    48,
      -1,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    -1,    62,    63,    64,    65,    -1,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    -1,    -1,    -1,
      79,    80,    81,    82,    -1,    84,    -1,    86,    -1,    88,
      -1,    -1,    91,    -1,    -1,    -1,    95,    96,    97,    -1,
      -1,   100,   101,    -1,   103,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,   113,   114,   115,    -1,   117,   118,
      -1,    -1,    -1,    -1,   123,   124,   125,   126,   127,   128,
     129,    -1,     3,     4,     5,     6,     7,   136,    -1,    -1,
      -1,    12,   141,    -1,    -1,   144,   145,   146,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   154,    -1,   156,   157,   158,
     159,   160,    -1,   162,   163,    36,    -1,    -1,    -1,    -1,
      -1,    42,    43,    -1,    -1,    -1,    -1,    48,    -1,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    -1,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    -1,    -1,    -1,    79,    80,
      81,    82,    -1,    84,    -1,    86,    -1,    88,    -1,    -1,
      91,    -1,    -1,    -1,    95,    96,    97,    -1,    -1,   100,
     101,    -1,   103,    -1,   105,    -1,    -1,    -1,   109,   110,
     111,    -1,   113,   114,   115,    -1,   117,   118,    -1,    -1,
      -1,    -1,   123,   124,   125,   126,   127,   128,   129,    -1,
      -1,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,    -1,   144,   145,   146,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   154,    -1,   156,   157,   158,   159,   160,
      -1,   162,   163,     3,     4,     5,     6,     7,    -1,    -1,
      -1,    -1,    12,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    26,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    48,    -1,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    -1,    62,    63,    64,    65,    -1,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    -1,    -1,    -1,    79,
      80,    81,    82,    -1,    84,    -1,    86,    -1,    88,    -1,
      -1,    91,    -1,    -1,    -1,    95,    96,    97,    -1,    -1,
     100,   101,    -1,   103,    -1,   105,    -1,    -1,    -1,    -1,
      -1,   111,    -1,   113,   114,   115,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   123,   124,   125,   126,   127,   128,   129,
      -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,
      -1,   141,    -1,    -1,   144,   145,   146,    -1,    -1,     3,
       4,     5,     6,     7,   154,    -1,   156,   157,    12,   159,
     160,    -1,   162,   163,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    -1,    -1,    -1,    48,    -1,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    -1,    62,    63,
      64,    65,    -1,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    -1,    -1,    -1,    79,    80,    81,    82,    -1,
      84,    -1,    86,    -1,    88,    -1,    -1,    91,    -1,    -1,
      -1,    95,    96,    97,    -1,    -1,   100,   101,    -1,   103,
      -1,   105,    -1,    -1,    -1,    -1,    -1,   111,    -1,   113,
     114,   115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,
     124,   125,   126,   127,   128,   129,    -1,    -1,    -1,    -1,
      -1,    -1,   136,    -1,    -1,    -1,    -1,   141,    -1,    -1,
     144,   145,   146,    -1,    -1,     3,     4,     5,     6,     7,
     154,    -1,   156,   157,    12,   159,   160,    -1,   162,   163,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,
      48,    -1,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    -1,    62,    63,    64,    65,    -1,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    -1,    -1,
      -1,    79,    80,    81,    82,    -1,    84,    -1,    86,    -1,
      88,    -1,    -1,    91,    -1,    -1,    -1,    95,    96,    97,
      -1,    -1,   100,   101,    -1,   103,    -1,   105,    -1,    -1,
      -1,    -1,    -1,   111,    -1,   113,   114,   115,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   123,   124,   125,   126,   127,
     128,   129,    -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,
      -1,    -1,    -1,   141,    -1,    -1,   144,   145,   146,    -1,
      -1,     3,     4,     5,     6,     7,   154,    -1,   156,   157,
      12,   159,   160,    -1,   162,   163,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    26,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
      42,    43,    -1,    -1,    -1,    -1,    48,    -1,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    -1,
      62,    63,    64,    65,    -1,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    -1,    -1,    -1,    79,    80,    81,
      82,    -1,    84,    -1,    86,    -1,    88,    -1,    -1,    91,
      -1,    -1,    -1,    95,    96,    97,    -1,    -1,   100,   101,
      -1,   103,    -1,   105,    -1,    -1,    -1,    -1,    -1,   111,
      -1,   113,   114,   115,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   123,   124,   125,   126,   127,   128,   129,    -1,    -1,
      -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,   141,
      -1,    -1,   144,   145,   146,    -1,    -1,     3,     4,     5,
       6,     7,   154,    -1,   156,   157,    12,   159,   160,    -1,
     162,   163,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,
      -1,    -1,    48,    -1,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
      -1,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      -1,    -1,    -1,    79,    80,    81,    82,    -1,    84,    -1,
      86,    -1,    88,    -1,    -1,    91,    -1,    -1,    -1,    95,
      96,    97,    -1,    -1,   100,   101,    -1,   103,    -1,   105,
      -1,    -1,    -1,    -1,    -1,   111,    -1,   113,   114,   115,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,   124,   125,
     126,   127,   128,   129,    -1,     3,     4,     5,     6,     7,
     136,    -1,    -1,    -1,    12,   141,    -1,    -1,   144,   145,
     146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,    -1,
     156,   157,    -1,   159,   160,    -1,   162,   163,    36,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,
      48,    -1,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    -1,    62,    63,    64,    65,    -1,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    -1,    -1,
      -1,    79,    80,    81,    82,    -1,    84,    -1,    86,    -1,
      88,    -1,    -1,    91,    -1,    -1,    -1,    95,    96,    97,
      -1,    -1,   100,   101,    -1,   103,    -1,   105,    -1,    -1,
      -1,    -1,    -1,   111,    -1,   113,   114,   115,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   123,   124,   125,   126,   127,
     128,   129,    -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,
      -1,    -1,    -1,   141,    -1,    -1,   144,   145,   146,    -1,
      -1,     3,     4,     5,     6,     7,   154,    -1,   156,   157,
      12,   159,   160,    -1,   162,   163,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
      42,    43,    -1,    -1,    -1,    -1,    48,    -1,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    -1,
      62,    63,    64,     9,    10,    11,    -1,    69,    70,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    79,    -1,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,   111,
      -1,    -1,   114,   115,    -1,    61,    -1,    -1,    -1,    -1,
      -1,   123,   124,   125,   126,   127,   128,   129,    -1,    -1,
      -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,   141,
      -1,    -1,   144,    -1,   146,     3,     4,     5,     6,     7,
      -1,    -1,   154,   155,    12,    -1,    -1,   159,   160,    -1,
     162,   163,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,
      48,    -1,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    -1,    62,    63,    64,     9,    10,    11,
     156,    69,    70,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    79,    -1,    25,    -1,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    -1,    49,    -1,    -1,
      -1,    -1,    -1,   111,    -1,    -1,   114,   115,    -1,    61,
      -1,    -1,    -1,    -1,    -1,   123,   124,   125,   126,   127,
     128,   129,    -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,
      -1,    -1,    -1,   141,    -1,    -1,   144,    -1,   146,     3,
       4,     5,     6,     7,    -1,    -1,   154,   155,    12,    -1,
      -1,   159,   160,    -1,   162,   163,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    -1,    -1,    -1,    48,    -1,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    -1,    62,    63,
      64,     9,    10,    11,   156,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    79,    -1,    25,    -1,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,    -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,
     114,   115,    -1,    61,    -1,    -1,    -1,    -1,    -1,   123,
     124,   125,   126,   127,   128,   129,    -1,     3,     4,     5,
       6,     7,   136,    -1,    -1,    -1,    12,   141,    -1,    -1,
     144,    -1,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     154,   155,    -1,    -1,    -1,   159,   160,    -1,   162,   163,
      36,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,
      -1,    -1,    48,    -1,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    -1,    62,    63,    64,    -1,
      -1,    -1,    -1,    69,    70,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    -1,
     158,    -1,    -1,    -1,    -1,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,   114,   115,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,   124,   125,
     126,   127,   128,   129,    -1,     3,     4,     5,     6,     7,
     136,    59,    60,    -1,    12,   141,    -1,    -1,   144,    -1,
     146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,    -1,
     156,    -1,    -1,   159,   160,    -1,   162,   163,    36,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,
      48,    -1,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    -1,    62,    63,    64,     9,    10,    11,
      -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    79,    -1,    25,    -1,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    -1,    49,    -1,    -1,
      -1,    -1,    -1,   111,    -1,    -1,   114,   115,    -1,    61,
      -1,    -1,    -1,    -1,    -1,   123,   124,   125,   126,   127,
     128,   129,    -1,     3,     4,     5,     6,     7,   136,    -1,
      -1,    -1,    12,   141,    -1,    -1,   144,    -1,   146,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   154,    -1,   156,    -1,
      -1,   159,   160,    -1,   162,   163,    36,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    48,    -1,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    -1,    62,    63,    64,    -1,    -1,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    25,   158,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
      -1,   111,    -1,    -1,   114,   115,    -1,    -1,    -1,    -1,
      -1,    61,    -1,   123,   124,   125,   126,   127,   128,   129,
      -1,     3,     4,     5,     6,     7,   136,    -1,    -1,    -1,
      12,   141,    -1,    -1,   144,    -1,   146,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   154,    -1,   156,    -1,    -1,   159,
     160,    -1,   162,   163,    36,    -1,    -1,    -1,    -1,    -1,
      42,    43,    -1,    -1,    -1,    -1,    48,    -1,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    -1,
      62,    63,    64,     9,    10,    11,    -1,    69,    70,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    79,    -1,    25,
      -1,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,   111,
      -1,    -1,   114,   115,    -1,    61,    -1,    -1,    -1,    -1,
      -1,   123,   124,   125,   126,   127,   128,   129,    -1,     3,
       4,     5,     6,     7,   136,    -1,    -1,    -1,    12,   141,
      -1,    -1,   144,    -1,   146,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   154,    -1,   156,    -1,    -1,   159,   160,    -1,
     162,   163,    36,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    -1,    -1,    -1,    48,    -1,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    -1,    62,    63,
      64,    -1,    -1,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    -1,   158,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    -1,   111,    -1,    -1,
     114,   115,    -1,    -1,    -1,    -1,    -1,    61,    -1,   123,
     124,   125,   126,   127,   128,   129,    -1,     3,     4,     5,
       6,     7,   136,    -1,    -1,    -1,    12,   141,    -1,    -1,
     144,    -1,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     154,   155,    -1,    -1,    -1,   159,   160,    -1,   162,   163,
      36,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,
      -1,    -1,    48,    -1,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    -1,    62,    63,    64,    -1,
       9,    10,    11,    69,    70,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    79,    -1,    -1,    25,    -1,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    -1,
      49,    -1,    -1,    -1,    -1,   111,    -1,    -1,   114,   115,
      -1,    -1,    61,    -1,    -1,    -1,    -1,   123,   124,   125,
     126,   127,   128,   129,    -1,    -1,    -1,    -1,    -1,    -1,
     136,    -1,    -1,    -1,    -1,   141,    -1,    -1,   144,    -1,
     146,    -1,     3,     4,     5,     6,     7,    -1,   154,    -1,
     156,    12,    -1,   159,   160,    -1,   162,   163,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    26,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      -1,    42,    43,    -1,    -1,    -1,    -1,    48,    -1,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      -1,    62,    63,    64,     9,    10,    11,   156,    69,    70,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    79,    -1,
      25,    -1,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,
     111,    -1,    -1,   114,   115,    -1,    61,    -1,    -1,    -1,
      -1,    -1,   123,   124,   125,   126,   127,   128,   129,    -1,
       3,     4,     5,     6,     7,   136,    -1,    -1,    -1,    12,
     141,    -1,    -1,   144,    -1,   146,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   154,    -1,    -1,    -1,    -1,   159,   160,
      -1,   162,   163,    36,    -1,    -1,    -1,    -1,    -1,    42,
      43,    -1,    -1,    -1,    -1,    48,    -1,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    -1,    62,
      63,    64,    -1,    -1,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    -1,    -1,   158,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    -1,    -1,   111,    -1,
      -1,   114,   115,    -1,    -1,    -1,    -1,    61,    -1,    -1,
     123,   124,   125,   126,   127,   128,   129,    -1,    -1,    -1,
      -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,   141,    -1,
      -1,   144,    -1,   146,     3,     4,     5,     6,     7,    -1,
      -1,   154,    -1,    12,    -1,    -1,   159,   160,   161,   162,
     163,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    48,
      -1,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    -1,    62,    63,    64,     9,    10,    11,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      79,    -1,    25,    -1,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    -1,    -1,    -1,
      -1,    -1,   111,    -1,    -1,   114,   115,    -1,    61,    -1,
      -1,    -1,    -1,    -1,   123,   124,   125,   126,   127,   128,
     129,    -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,    -1,
      -1,    -1,   141,    -1,    -1,   144,    -1,   146,     3,     4,
       5,     6,     7,    -1,    -1,   154,    -1,    12,    -1,    -1,
     159,   160,    -1,   162,   163,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
      -1,    -1,    -1,    48,    -1,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    -1,    62,    63,    64,
       9,    10,    11,   156,    69,    70,    71,    72,    73,    -1,
      -1,    -1,    -1,    -1,    79,    -1,    25,    -1,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    -1,
      49,    -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,   114,
     115,    -1,    61,    -1,    -1,    -1,    -1,    -1,   123,   124,
     125,   126,   127,   128,   129,    -1,    -1,    -1,    -1,    -1,
      -1,   136,    -1,    -1,    -1,    -1,   141,    -1,    -1,   144,
      -1,   146,     3,     4,     5,     6,     7,    -1,    -1,   154,
      -1,    12,    -1,    -1,   159,   160,    -1,   162,   163,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      31,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      -1,    42,    43,    -1,    -1,    -1,    -1,    48,    -1,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      -1,    62,    63,    64,     9,    10,    11,   156,    69,    70,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    79,    -1,
      25,    -1,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,
     111,    -1,    -1,   114,   115,    -1,    61,    -1,    -1,    -1,
      -1,    -1,   123,   124,   125,   126,   127,   128,   129,    -1,
       3,     4,     5,     6,     7,   136,    -1,    -1,    -1,    12,
     141,    -1,    -1,   144,    -1,   146,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   154,    -1,    -1,    -1,    -1,   159,   160,
      -1,   162,   163,    36,    -1,    -1,    -1,    -1,    -1,    42,
      43,    -1,    -1,    -1,    -1,    48,    -1,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    -1,    62,
      63,    64,    -1,    -1,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    -1,    -1,   158,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    -1,    49,    -1,    -1,    -1,   111,    -1,
      -1,   114,   115,    -1,    -1,    -1,    61,    -1,    -1,    -1,
     123,   124,   125,   126,   127,   128,   129,    -1,    -1,    -1,
      -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,   141,    -1,
      -1,   144,    -1,   146,     3,     4,     5,     6,     7,    -1,
      -1,   154,   155,    12,    -1,    -1,   159,   160,    -1,   162,
     163,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    48,
      -1,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    -1,    62,    63,    64,     9,    10,    11,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      79,    -1,    25,    -1,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    -1,    -1,    -1,
      -1,    -1,   111,    -1,    -1,   114,   115,    -1,    61,    -1,
      -1,    -1,    -1,    -1,   123,   124,   125,   126,   127,   128,
     129,    -1,     3,     4,     5,     6,     7,   136,    -1,    -1,
      -1,    12,   141,    -1,    -1,   144,    -1,   146,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   154,    -1,    -1,    -1,    -1,
     159,   160,    -1,   162,   163,    36,    -1,    -1,    -1,    -1,
      -1,    42,    43,    -1,    -1,    -1,    -1,    48,    -1,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      -1,    62,    63,    64,    -1,     9,    10,    11,    69,    70,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    79,    -1,
      -1,    25,   155,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,
     111,    -1,    -1,   114,   115,    -1,    -1,    61,    -1,    -1,
      -1,    -1,   123,   124,   125,   126,   127,   128,   129,    -1,
       3,     4,     5,     6,     7,   136,    -1,    -1,    -1,    12,
     141,    -1,    -1,   144,    -1,   146,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   154,    -1,    -1,    -1,    -1,   159,   160,
      -1,   162,   163,    36,    -1,    -1,    -1,    -1,    -1,    42,
      43,    -1,    -1,    -1,    -1,    48,    -1,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    -1,    62,
      63,    64,    -1,    -1,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,   155,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,
      -1,   114,   115,    61,    -1,    -1,    -1,    -1,    -1,    -1,
     123,   124,   125,   126,   127,   128,   129,    -1,    -1,    -1,
      -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,   141,    -1,
      -1,   144,    -1,   146,    -1,     9,    10,    11,    -1,    -1,
      -1,   154,    -1,    -1,    -1,    -1,   159,   160,    -1,   162,
     163,    25,    -1,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,
      -1,    -1,    25,    -1,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,
      -1,    -1,    -1,    25,    -1,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    -1,    49,    -1,    -1,
      -1,    -1,    -1,    -1,     9,    10,    11,    -1,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      25,   155,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    -1,    49,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,
      -1,    25,   155,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,
      -1,    -1,    25,   155,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     155,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,
       7,    -1,     9,    10,    11,    12,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,
      37,   155,    -1,    -1,    -1,    -1,    61,    -1,    -1,    46,
      -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,
      67,    68,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   155,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,    -1,   123,   124,   125,   126,
     127,   128,   129,     3,     4,     5,     6,     7,    -1,     9,
      10,    11,    12,    -1,   141,   142,   143,    -1,   145,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    61,    49,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    62,    63,    64,    65,    66,    67,    68,    -1,
      -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,    -1,   123,   124,   125,   126,   127,   128,   129,
       3,     4,     5,     6,     7,    11,     9,    10,    11,    12,
      -1,   141,   142,   143,    -1,   145,    -1,    -1,    -1,    25,
      -1,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    -1,    -1,    49,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    62,
      63,    64,    65,    66,    67,    68,    -1,    -1,    71,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
     123,   124,   125,   126,   127,   128,   129,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,    25,    -1,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    -1,    49,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      -1,    -1,    -1,    -1,    25,    -1,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      61,    -1,    -1,    -1,    -1,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     122,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,
      -1,   122,    25,    -1,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    10,    11,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,
      -1,    -1,    25,    -1,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,   165,   166,     0,     3,     4,     5,     6,     7,    12,
      36,    42,    43,    48,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    62,    63,    64,    65,    69,
      70,    71,    72,    73,    75,    79,    80,    81,    82,    84,
      86,    88,    91,    95,    96,    97,    99,   100,   101,   103,
     104,   105,   109,   110,   111,   113,   114,   115,   116,   117,
     118,   123,   124,   125,   126,   127,   128,   129,   136,   141,
     144,   145,   146,   154,   156,   157,   159,   160,   162,   163,
     167,   170,   171,   172,   175,   176,   192,   194,   199,   220,
     221,   259,   262,   281,   282,   283,   291,   294,   298,   299,
     301,   302,   308,   309,   310,   311,   312,   313,   318,   325,
     327,    71,   111,   141,   220,   221,   298,   298,   154,   298,
     298,   298,     3,     4,     5,     6,     7,     9,    10,    11,
      12,    49,    62,    63,    64,    65,    66,    67,    68,    71,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   123,   124,   125,   126,   127,   128,   129,   141,   142,
     143,   145,   274,   280,   298,   298,   298,   298,   298,   298,
     298,   298,   298,   298,   298,   298,    71,   146,   171,   282,
     301,   302,   301,   298,    71,   146,   171,   282,   284,   285,
     311,   312,   318,   154,   289,   154,    26,   256,   298,   178,
     154,   154,   154,   154,   154,   156,   298,    71,   156,   298,
      71,   156,   259,   298,   302,   157,   298,   144,   168,   169,
     170,    73,   159,   224,   225,   117,   117,    73,   226,   154,
     154,   154,   154,    71,   154,   154,   322,   144,   157,   170,
     170,   156,   259,   302,   298,   173,   157,   322,   322,   322,
     144,   154,     8,   156,    71,   146,    73,   227,    98,   191,
     140,     9,    10,    11,    25,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    49,    61,   156,    59,
      60,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,   154,   303,    61,   157,   159,   312,   191,
     298,    26,    43,    46,   263,   268,   140,   140,   154,   290,
     286,   312,   155,   298,   298,     8,   156,   175,   298,   257,
     258,   298,   259,   302,    71,   210,   298,   156,   156,   156,
      13,   156,   156,   183,   156,   170,     8,   156,    90,   157,
     299,   302,     8,   156,    13,     8,   156,   188,   189,   302,
     302,   326,   302,   155,   198,   123,   302,   319,    31,   298,
     320,   321,    73,    78,   137,   138,   139,   323,   170,   166,
     156,   157,   156,   156,   155,   158,   174,   175,   192,   194,
     298,   160,   162,   163,    71,    31,   222,   223,   259,   302,
      71,   119,   200,   200,    13,     8,   156,    31,   190,    71,
     308,   312,   318,   298,   298,   298,    26,   298,   298,   298,
     298,   298,   298,   298,   298,   298,   298,   298,   298,   298,
     298,   298,   298,   298,   298,   298,   298,   298,   298,   284,
     298,   314,    31,   298,   298,   298,   298,   298,   298,   298,
     298,   298,   298,   298,   298,   222,   121,   314,   298,   190,
     155,   275,   276,    37,    37,    46,   271,   277,   280,    71,
     308,   222,   121,   155,   155,   298,    82,   155,   156,     8,
      90,    90,    13,     8,   155,   155,    42,    43,    71,   124,
     146,   171,   291,   292,   293,   173,    90,   169,    71,   298,
     225,   292,    73,     8,   155,     8,   155,   155,   156,   119,
     202,   154,     8,   155,   300,   302,   122,   155,     8,   296,
      61,   121,    72,   298,   302,   158,   166,   158,   300,   155,
       8,    13,   283,   195,   196,   298,    73,    71,   154,   154,
     154,   312,   298,    26,   161,    63,   302,   155,    71,   157,
     308,   315,   316,   317,   161,   158,   280,   280,   265,   264,
      13,    26,    43,   155,   315,    26,   175,   154,   177,   257,
     298,   302,    31,   205,   302,   292,    71,    26,   175,   209,
     180,   292,   292,   140,   154,   140,   158,    71,   158,    13,
     189,   156,   302,   203,   283,   157,   319,   123,   302,    13,
      31,   298,    31,   298,    71,    73,    74,   324,    71,    61,
     158,   158,   158,    31,   259,   302,   292,   120,   201,   201,
      13,   193,    71,   124,   146,   218,   219,   221,   222,   222,
     298,   284,   298,   154,   307,    61,   157,   270,   146,   267,
     269,   278,   279,   287,   173,   214,   298,    26,   175,   208,
     156,   122,   204,   302,   204,    13,   173,    26,   157,   211,
      71,   292,   295,   297,    71,   184,   292,     8,   228,   155,
     154,   298,   300,   300,   122,   161,   298,   300,   203,   157,
     157,   298,   154,   155,     8,    31,    73,   155,   155,   290,
     158,   222,   304,   314,   298,    36,   147,   157,   262,   273,
     147,   157,   272,   280,   280,   121,   288,   215,    66,    67,
     216,   155,   173,   257,   205,   155,   155,   292,    89,   156,
     212,   156,   212,   122,   155,     8,   296,   102,   283,    99,
     106,   107,   108,   109,   110,   111,   112,   148,   149,   151,
     158,   230,   250,   251,   252,   253,   255,   319,    31,   298,
     161,   228,   197,   218,   104,   260,   221,    73,    13,   155,
     305,   161,   158,    46,   298,   298,   315,    66,    67,   217,
     154,   175,   156,    83,   155,   182,   181,   156,   212,    92,
      93,    94,   212,   158,   292,   292,   154,    71,   234,   150,
     243,   244,    71,   115,   154,   245,   246,   231,   221,   220,
     253,     8,   156,   155,   300,   158,   158,   229,   155,   154,
     157,    31,    73,    13,   292,   121,   306,   266,   158,   158,
     154,    26,    68,   298,   156,   179,    26,   175,   207,   207,
      92,   156,   298,    26,   156,   213,   158,   122,   283,    13,
      53,    55,    56,    57,    58,   112,   146,   152,   235,   237,
     238,   283,     8,   156,    71,   146,   150,   246,   247,   248,
     156,    73,   254,   191,   232,    71,   158,   230,   157,    31,
      73,   261,   173,    73,    13,   292,   315,   267,   298,   173,
     156,   155,    26,   175,   206,   173,   156,   213,   173,   292,
      73,   292,   157,     8,   156,   277,   244,     8,    29,   155,
      25,    42,    45,    13,     8,   156,   190,   254,    13,   173,
      73,     8,   155,   158,    13,   292,   307,   155,   175,   173,
      87,   173,   155,   239,   291,   236,    13,   240,   247,   247,
      25,    42,    45,   292,    73,    71,   156,   292,   158,    31,
      73,   292,    26,    85,   156,   157,     8,   158,   237,   292,
      51,   241,    13,   154,    73,   173,   156,   185,   291,   242,
     292,   233,   173,   153,   218,   158,   155,   186,   156,   157,
     249,   187,   173,   102,   158,   154,   283,    73,   155,   157,
     173,   158
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (&yylloc, _p, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).line0   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).char0 = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).line1    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).char1  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).line0   = (Current).line1   =		\
	    YYRHSLOC (Rhs, 0).line1;				\
	  (Current).char0 = (Current).char1 =		\
	    YYRHSLOC (Rhs, 0).char1;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).line0, (Loc).char0,	\
	      (Loc).line1,  (Loc).char1)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, &yylloc, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, &yylloc)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location, _p); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, HPHP::HPHP_PARSER_NS::Parser *_p)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, _p)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
    HPHP::HPHP_PARSER_NS::Parser *_p;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
  YYUSE (_p);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, HPHP::HPHP_PARSER_NS::Parser *_p)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp, _p)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
    HPHP::HPHP_PARSER_NS::Parser *_p;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, _p);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, HPHP::HPHP_PARSER_NS::Parser *_p)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule, _p)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
    HPHP::HPHP_PARSER_NS::Parser *_p;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       , _p);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule, _p); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, HPHP::HPHP_PARSER_NS::Parser *_p)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp, _p)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
    HPHP::HPHP_PARSER_NS::Parser *_p;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  YYUSE (_p);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (HPHP::HPHP_PARSER_NS::Parser *_p);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (HPHP::HPHP_PARSER_NS::Parser *_p)
#else
int
yyparse (_p)
    HPHP::HPHP_PARSER_NS::Parser *_p;
#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;
  yylsp = yyls;

#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  /* Initialize the default location before parsing starts.  */
  yylloc.line0   = yylloc.line1   = 1;
  yylloc.char0 = yylloc.char1 = 1;
#endif

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	struct yyalloc *yyptr =
	  (struct yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        memset(yyptr, 0, YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE_RESET (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1464 of yacc.c  */
#line 572 "../../../src/util/parser/hphp.y"
    { _p->popLabelInfo();
                                         _p->saveParseTree((yyval));;}
    break;

  case 3:

/* Line 1464 of yacc.c  */
#line 578 "../../../src/util/parser/hphp.y"
    { _p->addStatement((yyval),(yyvsp[(1) - (2)]),(yyvsp[(2) - (2)]));;}
    break;

  case 4:

/* Line 1464 of yacc.c  */
#line 579 "../../../src/util/parser/hphp.y"
    { _p->onStatementListStart((yyval));;}
    break;

  case 5:

/* Line 1464 of yacc.c  */
#line 582 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 6:

/* Line 1464 of yacc.c  */
#line 583 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 7:

/* Line 1464 of yacc.c  */
#line 584 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 8:

/* Line 1464 of yacc.c  */
#line 585 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 9:

/* Line 1464 of yacc.c  */
#line 586 "../../../src/util/parser/hphp.y"
    { _p->onNamespaceStart((yyval), (yyvsp[(2) - (3)]));;}
    break;

  case 10:

/* Line 1464 of yacc.c  */
#line 588 "../../../src/util/parser/hphp.y"
    { _p->onNamespace((yyval),&(yyvsp[(2) - (5)]),(yyvsp[(4) - (5)]));;}
    break;

  case 11:

/* Line 1464 of yacc.c  */
#line 590 "../../../src/util/parser/hphp.y"
    { _p->onNamespace((yyval),  0,(yyvsp[(3) - (4)]));;}
    break;

  case 12:

/* Line 1464 of yacc.c  */
#line 591 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (3)]);;}
    break;

  case 13:

/* Line 1464 of yacc.c  */
#line 592 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (2)]);;}
    break;

  case 14:

/* Line 1464 of yacc.c  */
#line 597 "../../../src/util/parser/hphp.y"
    { _p->onUseNamespaces((yyval),&(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]));;}
    break;

  case 15:

/* Line 1464 of yacc.c  */
#line 598 "../../../src/util/parser/hphp.y"
    { _p->onUseNamespaces((yyval),  0,(yyvsp[(1) - (1)]));;}
    break;

  case 16:

/* Line 1464 of yacc.c  */
#line 601 "../../../src/util/parser/hphp.y"
    { _p->onUseNamespace((yyval),(yyvsp[(1) - (1)]),  0,0);;}
    break;

  case 17:

/* Line 1464 of yacc.c  */
#line 602 "../../../src/util/parser/hphp.y"
    { _p->onUseNamespace((yyval),(yyvsp[(1) - (3)]),&(yyvsp[(3) - (3)]),0);;}
    break;

  case 18:

/* Line 1464 of yacc.c  */
#line 603 "../../../src/util/parser/hphp.y"
    { _p->onUseNamespace((yyval),(yyvsp[(1) - (2)]),  0,1);;}
    break;

  case 19:

/* Line 1464 of yacc.c  */
#line 605 "../../../src/util/parser/hphp.y"
    { _p->onUseNamespace((yyval),(yyvsp[(1) - (4)]),&(yyvsp[(3) - (4)]),1);;}
    break;

  case 20:

/* Line 1464 of yacc.c  */
#line 608 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 21:

/* Line 1464 of yacc.c  */
#line 610 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (3)]) + (yyvsp[(2) - (3)]) + (yyvsp[(3) - (3)]);;}
    break;

  case 22:

/* Line 1464 of yacc.c  */
#line 613 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 23:

/* Line 1464 of yacc.c  */
#line 614 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (2)]) + (yyvsp[(2) - (2)]);;}
    break;

  case 24:

/* Line 1464 of yacc.c  */
#line 616 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (3)]) + (yyvsp[(3) - (3)]);;}
    break;

  case 25:

/* Line 1464 of yacc.c  */
#line 620 "../../../src/util/parser/hphp.y"
    { _p->onConstant((yyval),&(yyvsp[(1) - (5)]),(yyvsp[(3) - (5)]),(yyvsp[(5) - (5)]));;}
    break;

  case 26:

/* Line 1464 of yacc.c  */
#line 621 "../../../src/util/parser/hphp.y"
    { _p->onConstant((yyval),  0,(yyvsp[(2) - (4)]),(yyvsp[(4) - (4)]));;}
    break;

  case 27:

/* Line 1464 of yacc.c  */
#line 626 "../../../src/util/parser/hphp.y"
    { _p->addStatement((yyval),(yyvsp[(1) - (2)]),(yyvsp[(2) - (2)]));;}
    break;

  case 28:

/* Line 1464 of yacc.c  */
#line 627 "../../../src/util/parser/hphp.y"
    { _p->onStatementListStart((yyval));;}
    break;

  case 29:

/* Line 1464 of yacc.c  */
#line 630 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 30:

/* Line 1464 of yacc.c  */
#line 631 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 31:

/* Line 1464 of yacc.c  */
#line 632 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 32:

/* Line 1464 of yacc.c  */
#line 635 "../../../src/util/parser/hphp.y"
    { _p->onExpStatement((yyval), (yyvsp[(1) - (2)]));;}
    break;

  case 33:

/* Line 1464 of yacc.c  */
#line 636 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 34:

/* Line 1464 of yacc.c  */
#line 637 "../../../src/util/parser/hphp.y"
    { _p->addLabel((yyvsp[(1) - (2)]).text());
                                         _p->onLabel((yyval), (yyvsp[(1) - (2)]));;}
    break;

  case 35:

/* Line 1464 of yacc.c  */
#line 641 "../../../src/util/parser/hphp.y"
    { _p->onBlock((yyval), (yyvsp[(2) - (3)]));;}
    break;

  case 36:

/* Line 1464 of yacc.c  */
#line 646 "../../../src/util/parser/hphp.y"
    { _p->onIf((yyval),(yyvsp[(3) - (7)]),(yyvsp[(5) - (7)]),(yyvsp[(6) - (7)]),(yyvsp[(7) - (7)]));;}
    break;

  case 37:

/* Line 1464 of yacc.c  */
#line 652 "../../../src/util/parser/hphp.y"
    { _p->onIf((yyval),(yyvsp[(3) - (10)]),(yyvsp[(6) - (10)]),(yyvsp[(7) - (10)]),(yyvsp[(8) - (10)]));;}
    break;

  case 38:

/* Line 1464 of yacc.c  */
#line 654 "../../../src/util/parser/hphp.y"
    { _p->pushLabelScope();;}
    break;

  case 39:

/* Line 1464 of yacc.c  */
#line 655 "../../../src/util/parser/hphp.y"
    { _p->popLabelScope();
                                         _p->onWhile((yyval),(yyvsp[(3) - (6)]),(yyvsp[(6) - (6)]));;}
    break;

  case 40:

/* Line 1464 of yacc.c  */
#line 658 "../../../src/util/parser/hphp.y"
    { _p->pushLabelScope();;}
    break;

  case 41:

/* Line 1464 of yacc.c  */
#line 659 "../../../src/util/parser/hphp.y"
    { _p->popLabelScope();
                                         _p->onDo((yyval),(yyvsp[(3) - (8)]),(yyvsp[(6) - (8)]));;}
    break;

  case 42:

/* Line 1464 of yacc.c  */
#line 663 "../../../src/util/parser/hphp.y"
    { _p->pushLabelScope();;}
    break;

  case 43:

/* Line 1464 of yacc.c  */
#line 664 "../../../src/util/parser/hphp.y"
    { _p->popLabelScope();
                                         _p->onFor((yyval),(yyvsp[(3) - (10)]),(yyvsp[(5) - (10)]),(yyvsp[(7) - (10)]),(yyvsp[(10) - (10)]));;}
    break;

  case 44:

/* Line 1464 of yacc.c  */
#line 667 "../../../src/util/parser/hphp.y"
    { _p->pushLabelScope();;}
    break;

  case 45:

/* Line 1464 of yacc.c  */
#line 668 "../../../src/util/parser/hphp.y"
    { _p->popLabelScope();
                                         _p->onSwitch((yyval),(yyvsp[(3) - (6)]),(yyvsp[(6) - (6)]));;}
    break;

  case 46:

/* Line 1464 of yacc.c  */
#line 671 "../../../src/util/parser/hphp.y"
    { _p->onBreak((yyval), NULL);;}
    break;

  case 47:

/* Line 1464 of yacc.c  */
#line 672 "../../../src/util/parser/hphp.y"
    { _p->onBreak((yyval), &(yyvsp[(2) - (3)]));;}
    break;

  case 48:

/* Line 1464 of yacc.c  */
#line 674 "../../../src/util/parser/hphp.y"
    { _p->onContinue((yyval), NULL);;}
    break;

  case 49:

/* Line 1464 of yacc.c  */
#line 675 "../../../src/util/parser/hphp.y"
    { _p->onContinue((yyval), &(yyvsp[(2) - (3)]));;}
    break;

  case 50:

/* Line 1464 of yacc.c  */
#line 677 "../../../src/util/parser/hphp.y"
    { _p->onReturn((yyval), NULL);;}
    break;

  case 51:

/* Line 1464 of yacc.c  */
#line 678 "../../../src/util/parser/hphp.y"
    { _p->onReturn((yyval), &(yyvsp[(2) - (3)]));;}
    break;

  case 52:

/* Line 1464 of yacc.c  */
#line 679 "../../../src/util/parser/hphp.y"
    { _p->onReturn((yyval), &(yyvsp[(2) - (3)]));;}
    break;

  case 53:

/* Line 1464 of yacc.c  */
#line 681 "../../../src/util/parser/hphp.y"
    { _p->onYield((yyval), NULL);;}
    break;

  case 54:

/* Line 1464 of yacc.c  */
#line 682 "../../../src/util/parser/hphp.y"
    { _p->onYield((yyval), &(yyvsp[(2) - (3)]));;}
    break;

  case 55:

/* Line 1464 of yacc.c  */
#line 683 "../../../src/util/parser/hphp.y"
    { _p->onYield((yyval), &(yyvsp[(2) - (3)]));;}
    break;

  case 56:

/* Line 1464 of yacc.c  */
#line 685 "../../../src/util/parser/hphp.y"
    { _p->onGlobal((yyval), (yyvsp[(2) - (3)]));;}
    break;

  case 57:

/* Line 1464 of yacc.c  */
#line 686 "../../../src/util/parser/hphp.y"
    { _p->onStatic((yyval), (yyvsp[(2) - (3)]));;}
    break;

  case 58:

/* Line 1464 of yacc.c  */
#line 687 "../../../src/util/parser/hphp.y"
    { _p->onTypeDecl((yyval), (yyvsp[(1) - (3)]), (yyvsp[(2) - (3)]));;}
    break;

  case 59:

/* Line 1464 of yacc.c  */
#line 688 "../../../src/util/parser/hphp.y"
    { _p->onEcho((yyval), (yyvsp[(2) - (3)]), 0);;}
    break;

  case 60:

/* Line 1464 of yacc.c  */
#line 690 "../../../src/util/parser/hphp.y"
    { _p->onUnset((yyval), (yyvsp[(3) - (5)]));;}
    break;

  case 61:

/* Line 1464 of yacc.c  */
#line 691 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 62:

/* Line 1464 of yacc.c  */
#line 693 "../../../src/util/parser/hphp.y"
    { _p->onEcho((yyval), (yyvsp[(1) - (1)]), 1);;}
    break;

  case 63:

/* Line 1464 of yacc.c  */
#line 697 "../../../src/util/parser/hphp.y"
    { _p->pushLabelScope();;}
    break;

  case 64:

/* Line 1464 of yacc.c  */
#line 698 "../../../src/util/parser/hphp.y"
    { _p->popLabelScope();
                                         _p->onForEach((yyval),(yyvsp[(3) - (9)]),(yyvsp[(5) - (9)]),(yyvsp[(6) - (9)]),(yyvsp[(9) - (9)]));;}
    break;

  case 65:

/* Line 1464 of yacc.c  */
#line 703 "../../../src/util/parser/hphp.y"
    { _p->pushLabelScope();;}
    break;

  case 66:

/* Line 1464 of yacc.c  */
#line 704 "../../../src/util/parser/hphp.y"
    { _p->popLabelScope();
                                         _p->onForEach((yyval),(yyvsp[(3) - (9)]),(yyvsp[(5) - (9)]),(yyvsp[(6) - (9)]),(yyvsp[(9) - (9)]));;}
    break;

  case 67:

/* Line 1464 of yacc.c  */
#line 708 "../../../src/util/parser/hphp.y"
    { _p->onBlock((yyval), (yyvsp[(5) - (5)]));;}
    break;

  case 68:

/* Line 1464 of yacc.c  */
#line 710 "../../../src/util/parser/hphp.y"
    { _p->pushLabelScope();;}
    break;

  case 69:

/* Line 1464 of yacc.c  */
#line 711 "../../../src/util/parser/hphp.y"
    { _p->popLabelScope();;}
    break;

  case 70:

/* Line 1464 of yacc.c  */
#line 714 "../../../src/util/parser/hphp.y"
    { _p->pushLabelScope();;}
    break;

  case 71:

/* Line 1464 of yacc.c  */
#line 715 "../../../src/util/parser/hphp.y"
    { _p->popLabelScope();;}
    break;

  case 72:

/* Line 1464 of yacc.c  */
#line 716 "../../../src/util/parser/hphp.y"
    { _p->onTry((yyval),(yyvsp[(4) - (17)]),(yyvsp[(9) - (17)]),(yyvsp[(10) - (17)]),(yyvsp[(14) - (17)]),(yyvsp[(17) - (17)]));;}
    break;

  case 73:

/* Line 1464 of yacc.c  */
#line 718 "../../../src/util/parser/hphp.y"
    { _p->onThrow((yyval), (yyvsp[(2) - (3)]));;}
    break;

  case 74:

/* Line 1464 of yacc.c  */
#line 719 "../../../src/util/parser/hphp.y"
    { _p->addGoto((yyvsp[(2) - (3)]).text(),
                                                     _p->getLocation());
                                         _p->onGoto((yyval), (yyvsp[(2) - (3)]));;}
    break;

  case 75:

/* Line 1464 of yacc.c  */
#line 729 "../../../src/util/parser/hphp.y"
    { _p->onCatch((yyval), (yyvsp[(1) - (9)]), (yyvsp[(4) - (9)]), (yyvsp[(5) - (9)]), (yyvsp[(8) - (9)]));;}
    break;

  case 76:

/* Line 1464 of yacc.c  */
#line 730 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 77:

/* Line 1464 of yacc.c  */
#line 734 "../../../src/util/parser/hphp.y"
    { _p->onExprListElem((yyval), NULL, (yyvsp[(1) - (1)]));;}
    break;

  case 78:

/* Line 1464 of yacc.c  */
#line 735 "../../../src/util/parser/hphp.y"
    { _p->onExprListElem((yyval), &(yyvsp[(1) - (3)]), (yyvsp[(3) - (3)]));;}
    break;

  case 79:

/* Line 1464 of yacc.c  */
#line 738 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 80:

/* Line 1464 of yacc.c  */
#line 742 "../../../src/util/parser/hphp.y"
    { (yyval) = 1;;}
    break;

  case 81:

/* Line 1464 of yacc.c  */
#line 743 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 82:

/* Line 1464 of yacc.c  */
#line 747 "../../../src/util/parser/hphp.y"
    { _p->pushFuncLocation();;}
    break;

  case 83:

/* Line 1464 of yacc.c  */
#line 751 "../../../src/util/parser/hphp.y"
    { _p->onFunctionStart((yyvsp[(4) - (4)]));
                                         _p->pushLabelInfo();;}
    break;

  case 84:

/* Line 1464 of yacc.c  */
#line 754 "../../../src/util/parser/hphp.y"
    { _p->popLabelInfo();
                                         _p->onFunction((yyval),(yyvsp[(1) - (11)]),(yyvsp[(3) - (11)]),(yyvsp[(4) - (11)]),(yyvsp[(7) - (11)]),(yyvsp[(10) - (11)]));;}
    break;

  case 85:

/* Line 1464 of yacc.c  */
#line 760 "../../../src/util/parser/hphp.y"
    { _p->onClassStart((yyvsp[(1) - (3)]).num(), (yyvsp[(2) - (3)]), &(yyvsp[(3) - (3)]));;}
    break;

  case 86:

/* Line 1464 of yacc.c  */
#line 762 "../../../src/util/parser/hphp.y"
    { _p->onClass((yyval),(yyvsp[(1) - (8)]),(yyvsp[(2) - (8)]),(yyvsp[(3) - (8)]),(yyvsp[(5) - (8)]),(yyvsp[(7) - (8)]));;}
    break;

  case 87:

/* Line 1464 of yacc.c  */
#line 765 "../../../src/util/parser/hphp.y"
    { (yyvsp[(2) - (3)]).xhpLabel();
                                         _p->onClassStart((yyvsp[(1) - (3)]).num(), (yyvsp[(2) - (3)]), &(yyvsp[(3) - (3)]));;}
    break;

  case 88:

/* Line 1464 of yacc.c  */
#line 767 "../../../src/util/parser/hphp.y"
    { _p->scanner().xhpStatement();;}
    break;

  case 89:

/* Line 1464 of yacc.c  */
#line 768 "../../../src/util/parser/hphp.y"
    { xhp_collect_attributes(_p, (yyvsp[(9) - (9)]), (yyvsp[(8) - (9)]));
                                         _p->onClass((yyval),(yyvsp[(1) - (9)]),(yyvsp[(2) - (9)]),(yyvsp[(3) - (9)]),(yyvsp[(5) - (9)]),(yyvsp[(9) - (9)]));
                                         _p->xhpResetAttributes();
                                         _p->scanner().xhpReset();;}
    break;

  case 90:

/* Line 1464 of yacc.c  */
#line 773 "../../../src/util/parser/hphp.y"
    { _p->onClassStart(T_INTERFACE, (yyvsp[(2) - (2)]), 0);;}
    break;

  case 91:

/* Line 1464 of yacc.c  */
#line 775 "../../../src/util/parser/hphp.y"
    { _p->onInterface((yyval),(yyvsp[(2) - (7)]),(yyvsp[(4) - (7)]),(yyvsp[(6) - (7)]));;}
    break;

  case 92:

/* Line 1464 of yacc.c  */
#line 778 "../../../src/util/parser/hphp.y"
    { (yyval) = T_CLASS;;}
    break;

  case 93:

/* Line 1464 of yacc.c  */
#line 779 "../../../src/util/parser/hphp.y"
    { (yyval) = T_ABSTRACT;;}
    break;

  case 94:

/* Line 1464 of yacc.c  */
#line 780 "../../../src/util/parser/hphp.y"
    { (yyval) = T_FINAL;;}
    break;

  case 95:

/* Line 1464 of yacc.c  */
#line 784 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (2)]);;}
    break;

  case 96:

/* Line 1464 of yacc.c  */
#line 785 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 97:

/* Line 1464 of yacc.c  */
#line 788 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (2)]);;}
    break;

  case 98:

/* Line 1464 of yacc.c  */
#line 789 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 99:

/* Line 1464 of yacc.c  */
#line 792 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (2)]);;}
    break;

  case 100:

/* Line 1464 of yacc.c  */
#line 793 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 101:

/* Line 1464 of yacc.c  */
#line 796 "../../../src/util/parser/hphp.y"
    { _p->onInterfaceName((yyval), NULL, (yyvsp[(1) - (1)]));;}
    break;

  case 102:

/* Line 1464 of yacc.c  */
#line 798 "../../../src/util/parser/hphp.y"
    { _p->onInterfaceName((yyval), &(yyvsp[(1) - (3)]), (yyvsp[(3) - (3)]));;}
    break;

  case 103:

/* Line 1464 of yacc.c  */
#line 802 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (2)]);;}
    break;

  case 104:

/* Line 1464 of yacc.c  */
#line 803 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 105:

/* Line 1464 of yacc.c  */
#line 806 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 106:

/* Line 1464 of yacc.c  */
#line 807 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (2)]); (yyval) = 1;;}
    break;

  case 107:

/* Line 1464 of yacc.c  */
#line 811 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 108:

/* Line 1464 of yacc.c  */
#line 813 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (4)]);;}
    break;

  case 109:

/* Line 1464 of yacc.c  */
#line 816 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 110:

/* Line 1464 of yacc.c  */
#line 818 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (4)]);;}
    break;

  case 111:

/* Line 1464 of yacc.c  */
#line 821 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 112:

/* Line 1464 of yacc.c  */
#line 823 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (4)]);;}
    break;

  case 113:

/* Line 1464 of yacc.c  */
#line 826 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 114:

/* Line 1464 of yacc.c  */
#line 828 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (4)]);;}
    break;

  case 117:

/* Line 1464 of yacc.c  */
#line 838 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (3)]);;}
    break;

  case 118:

/* Line 1464 of yacc.c  */
#line 839 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(3) - (4)]);;}
    break;

  case 119:

/* Line 1464 of yacc.c  */
#line 840 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (4)]);;}
    break;

  case 120:

/* Line 1464 of yacc.c  */
#line 841 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(3) - (5)]);;}
    break;

  case 121:

/* Line 1464 of yacc.c  */
#line 846 "../../../src/util/parser/hphp.y"
    { _p->onCase((yyval),(yyvsp[(1) - (5)]),&(yyvsp[(3) - (5)]),(yyvsp[(5) - (5)]));;}
    break;

  case 122:

/* Line 1464 of yacc.c  */
#line 848 "../../../src/util/parser/hphp.y"
    { _p->onCase((yyval),(yyvsp[(1) - (4)]),NULL,(yyvsp[(4) - (4)]));;}
    break;

  case 123:

/* Line 1464 of yacc.c  */
#line 849 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 124:

/* Line 1464 of yacc.c  */
#line 852 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 125:

/* Line 1464 of yacc.c  */
#line 853 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 126:

/* Line 1464 of yacc.c  */
#line 858 "../../../src/util/parser/hphp.y"
    { _p->onElseIf((yyval),(yyvsp[(1) - (6)]),(yyvsp[(4) - (6)]),(yyvsp[(6) - (6)]));;}
    break;

  case 127:

/* Line 1464 of yacc.c  */
#line 859 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 128:

/* Line 1464 of yacc.c  */
#line 864 "../../../src/util/parser/hphp.y"
    { _p->onElseIf((yyval),(yyvsp[(1) - (7)]),(yyvsp[(4) - (7)]),(yyvsp[(7) - (7)]));;}
    break;

  case 129:

/* Line 1464 of yacc.c  */
#line 865 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 130:

/* Line 1464 of yacc.c  */
#line 868 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (2)]);;}
    break;

  case 131:

/* Line 1464 of yacc.c  */
#line 869 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 132:

/* Line 1464 of yacc.c  */
#line 872 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(3) - (3)]);;}
    break;

  case 133:

/* Line 1464 of yacc.c  */
#line 873 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 134:

/* Line 1464 of yacc.c  */
#line 877 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 135:

/* Line 1464 of yacc.c  */
#line 878 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 136:

/* Line 1464 of yacc.c  */
#line 881 "../../../src/util/parser/hphp.y"
    { _p->onParam((yyval),NULL,(yyvsp[(1) - (2)]),(yyvsp[(2) - (2)]),0,NULL);;}
    break;

  case 137:

/* Line 1464 of yacc.c  */
#line 882 "../../../src/util/parser/hphp.y"
    { _p->onParam((yyval),NULL,(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),1,NULL);;}
    break;

  case 138:

/* Line 1464 of yacc.c  */
#line 884 "../../../src/util/parser/hphp.y"
    { _p->onParam((yyval),NULL,(yyvsp[(1) - (5)]),(yyvsp[(3) - (5)]),1,&(yyvsp[(5) - (5)]));;}
    break;

  case 139:

/* Line 1464 of yacc.c  */
#line 886 "../../../src/util/parser/hphp.y"
    { _p->onParam((yyval),NULL,(yyvsp[(1) - (4)]),(yyvsp[(2) - (4)]),0,&(yyvsp[(4) - (4)]));;}
    break;

  case 140:

/* Line 1464 of yacc.c  */
#line 888 "../../../src/util/parser/hphp.y"
    { _p->onParam((yyval),&(yyvsp[(1) - (4)]),(yyvsp[(3) - (4)]),(yyvsp[(4) - (4)]),0,NULL);;}
    break;

  case 141:

/* Line 1464 of yacc.c  */
#line 890 "../../../src/util/parser/hphp.y"
    { _p->onParam((yyval),&(yyvsp[(1) - (5)]),(yyvsp[(3) - (5)]),(yyvsp[(5) - (5)]),1,NULL);;}
    break;

  case 142:

/* Line 1464 of yacc.c  */
#line 893 "../../../src/util/parser/hphp.y"
    { _p->onParam((yyval),&(yyvsp[(1) - (7)]),(yyvsp[(3) - (7)]),(yyvsp[(5) - (7)]),1,&(yyvsp[(7) - (7)]));;}
    break;

  case 143:

/* Line 1464 of yacc.c  */
#line 896 "../../../src/util/parser/hphp.y"
    { _p->onParam((yyval),&(yyvsp[(1) - (6)]),(yyvsp[(3) - (6)]),(yyvsp[(4) - (6)]),0,&(yyvsp[(6) - (6)]));;}
    break;

  case 144:

/* Line 1464 of yacc.c  */
#line 899 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 145:

/* Line 1464 of yacc.c  */
#line 900 "../../../src/util/parser/hphp.y"
    { (yyval).setText("array");;}
    break;

  case 146:

/* Line 1464 of yacc.c  */
#line 901 "../../../src/util/parser/hphp.y"
    { (yyvsp[(1) - (1)]).xhpLabel(); (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 147:

/* Line 1464 of yacc.c  */
#line 904 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 148:

/* Line 1464 of yacc.c  */
#line 905 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 149:

/* Line 1464 of yacc.c  */
#line 909 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 150:

/* Line 1464 of yacc.c  */
#line 910 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 151:

/* Line 1464 of yacc.c  */
#line 913 "../../../src/util/parser/hphp.y"
    { _p->onCallParam((yyval),NULL,(yyvsp[(1) - (1)]),0);;}
    break;

  case 152:

/* Line 1464 of yacc.c  */
#line 914 "../../../src/util/parser/hphp.y"
    { _p->onCallParam((yyval),NULL,(yyvsp[(1) - (1)]),0);;}
    break;

  case 153:

/* Line 1464 of yacc.c  */
#line 915 "../../../src/util/parser/hphp.y"
    { _p->onCallParam((yyval),NULL,(yyvsp[(2) - (2)]),1);;}
    break;

  case 154:

/* Line 1464 of yacc.c  */
#line 917 "../../../src/util/parser/hphp.y"
    { _p->onCallParam((yyval),&(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),0);;}
    break;

  case 155:

/* Line 1464 of yacc.c  */
#line 919 "../../../src/util/parser/hphp.y"
    { _p->onCallParam((yyval),&(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),0);;}
    break;

  case 156:

/* Line 1464 of yacc.c  */
#line 921 "../../../src/util/parser/hphp.y"
    { _p->onCallParam((yyval),&(yyvsp[(1) - (4)]),(yyvsp[(4) - (4)]),1);;}
    break;

  case 157:

/* Line 1464 of yacc.c  */
#line 925 "../../../src/util/parser/hphp.y"
    { _p->onGlobalVar((yyval), &(yyvsp[(1) - (3)]), (yyvsp[(3) - (3)]));;}
    break;

  case 158:

/* Line 1464 of yacc.c  */
#line 926 "../../../src/util/parser/hphp.y"
    { _p->onGlobalVar((yyval), NULL, (yyvsp[(1) - (1)]));;}
    break;

  case 159:

/* Line 1464 of yacc.c  */
#line 929 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 160:

/* Line 1464 of yacc.c  */
#line 930 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (2)]); (yyval) = 1;;}
    break;

  case 161:

/* Line 1464 of yacc.c  */
#line 931 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(3) - (4)]); (yyval) = 1;;}
    break;

  case 162:

/* Line 1464 of yacc.c  */
#line 935 "../../../src/util/parser/hphp.y"
    { _p->onStaticVariable((yyval),&(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),0);;}
    break;

  case 163:

/* Line 1464 of yacc.c  */
#line 937 "../../../src/util/parser/hphp.y"
    { _p->onStaticVariable((yyval),&(yyvsp[(1) - (5)]),(yyvsp[(3) - (5)]),&(yyvsp[(5) - (5)]));;}
    break;

  case 164:

/* Line 1464 of yacc.c  */
#line 938 "../../../src/util/parser/hphp.y"
    { _p->onStaticVariable((yyval),0,(yyvsp[(1) - (1)]),0);;}
    break;

  case 165:

/* Line 1464 of yacc.c  */
#line 939 "../../../src/util/parser/hphp.y"
    { _p->onStaticVariable((yyval),0,(yyvsp[(1) - (3)]),&(yyvsp[(3) - (3)]));;}
    break;

  case 166:

/* Line 1464 of yacc.c  */
#line 943 "../../../src/util/parser/hphp.y"
    { _p->onTypedVariable((yyval),&(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),0);;}
    break;

  case 167:

/* Line 1464 of yacc.c  */
#line 944 "../../../src/util/parser/hphp.y"
    { _p->onTypedVariable((yyval),&(yyvsp[(1) - (5)]),(yyvsp[(3) - (5)]),&(yyvsp[(5) - (5)]));;}
    break;

  case 168:

/* Line 1464 of yacc.c  */
#line 945 "../../../src/util/parser/hphp.y"
    { _p->onTypedVariable((yyval),0,(yyvsp[(1) - (1)]),0);;}
    break;

  case 169:

/* Line 1464 of yacc.c  */
#line 946 "../../../src/util/parser/hphp.y"
    { _p->onTypedVariable((yyval),0,(yyvsp[(1) - (3)]),&(yyvsp[(3) - (3)]));;}
    break;

  case 170:

/* Line 1464 of yacc.c  */
#line 951 "../../../src/util/parser/hphp.y"
    { _p->onClassStatement((yyval), (yyvsp[(1) - (2)]), (yyvsp[(2) - (2)]));;}
    break;

  case 171:

/* Line 1464 of yacc.c  */
#line 952 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 172:

/* Line 1464 of yacc.c  */
#line 956 "../../../src/util/parser/hphp.y"
    { _p->onClassStatement((yyval), (yyvsp[(1) - (2)]), (yyvsp[(2) - (2)]));
                                         _p->scanner().xhpStatement();;}
    break;

  case 173:

/* Line 1464 of yacc.c  */
#line 958 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 174:

/* Line 1464 of yacc.c  */
#line 961 "../../../src/util/parser/hphp.y"
    { _p->onClassVariableModifer((yyvsp[(1) - (1)]));;}
    break;

  case 175:

/* Line 1464 of yacc.c  */
#line 962 "../../../src/util/parser/hphp.y"
    { _p->onClassVariableStart
                                         ((yyval),&(yyvsp[(1) - (4)]),(yyvsp[(3) - (4)]),NULL);;}
    break;

  case 176:

/* Line 1464 of yacc.c  */
#line 965 "../../../src/util/parser/hphp.y"
    { _p->onClassVariableModifer((yyvsp[(1) - (2)]));;}
    break;

  case 177:

/* Line 1464 of yacc.c  */
#line 966 "../../../src/util/parser/hphp.y"
    { _p->onClassVariableStart
                                         ((yyval),&(yyvsp[(1) - (5)]),(yyvsp[(4) - (5)]),&(yyvsp[(2) - (5)]));;}
    break;

  case 178:

/* Line 1464 of yacc.c  */
#line 968 "../../../src/util/parser/hphp.y"
    { _p->onClassVariableStart
                                         ((yyval),NULL,(yyvsp[(1) - (2)]),NULL);;}
    break;

  case 179:

/* Line 1464 of yacc.c  */
#line 972 "../../../src/util/parser/hphp.y"
    { _p->onMethodStart((yyvsp[(5) - (6)]), (yyvsp[(1) - (6)]));
                                         _p->pushLabelInfo();;}
    break;

  case 180:

/* Line 1464 of yacc.c  */
#line 974 "../../../src/util/parser/hphp.y"
    { _p->popLabelInfo();
                                         _p->onMethod((yyval),(yyvsp[(1) - (10)]),(yyvsp[(2) - (10)]),(yyvsp[(4) - (10)]),(yyvsp[(5) - (10)]),(yyvsp[(8) - (10)]),(yyvsp[(10) - (10)]));;}
    break;

  case 181:

/* Line 1464 of yacc.c  */
#line 976 "../../../src/util/parser/hphp.y"
    { _p->scanner().xhpAttributeDecl();;}
    break;

  case 182:

/* Line 1464 of yacc.c  */
#line 977 "../../../src/util/parser/hphp.y"
    { _p->xhpSetAttributes((yyvsp[(3) - (4)]));;}
    break;

  case 183:

/* Line 1464 of yacc.c  */
#line 979 "../../../src/util/parser/hphp.y"
    { xhp_category_stmt(_p,(yyval),(yyvsp[(2) - (3)]));;}
    break;

  case 184:

/* Line 1464 of yacc.c  */
#line 981 "../../../src/util/parser/hphp.y"
    { xhp_children_stmt(_p,(yyval),(yyvsp[(2) - (3)]));;}
    break;

  case 185:

/* Line 1464 of yacc.c  */
#line 985 "../../../src/util/parser/hphp.y"
    { xhp_attribute_list(_p,(yyval),
                                         _p->xhpGetAttributes(),(yyvsp[(1) - (1)]));;}
    break;

  case 186:

/* Line 1464 of yacc.c  */
#line 987 "../../../src/util/parser/hphp.y"
    { _p->scanner().xhpAttributeDecl();;}
    break;

  case 187:

/* Line 1464 of yacc.c  */
#line 988 "../../../src/util/parser/hphp.y"
    { xhp_attribute_list(_p,(yyval), &(yyvsp[(1) - (4)]),(yyvsp[(4) - (4)]));;}
    break;

  case 188:

/* Line 1464 of yacc.c  */
#line 995 "../../../src/util/parser/hphp.y"
    { xhp_attribute(_p,(yyval),(yyvsp[(1) - (4)]),(yyvsp[(2) - (4)]),(yyvsp[(3) - (4)]),(yyvsp[(4) - (4)]));
                                         (yyval) = 1;;}
    break;

  case 189:

/* Line 1464 of yacc.c  */
#line 997 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]); (yyval) = 0;;}
    break;

  case 190:

/* Line 1464 of yacc.c  */
#line 1001 "../../../src/util/parser/hphp.y"
    { (yyval) = 1;;}
    break;

  case 191:

/* Line 1464 of yacc.c  */
#line 1002 "../../../src/util/parser/hphp.y"
    { (yyval) = 2;;}
    break;

  case 192:

/* Line 1464 of yacc.c  */
#line 1003 "../../../src/util/parser/hphp.y"
    { (yyval) = 3;;}
    break;

  case 193:

/* Line 1464 of yacc.c  */
#line 1004 "../../../src/util/parser/hphp.y"
    { (yyval) = 4;;}
    break;

  case 194:

/* Line 1464 of yacc.c  */
#line 1005 "../../../src/util/parser/hphp.y"
    { (yyval) = 5; (yyval).setText((yyvsp[(1) - (1)]));;}
    break;

  case 195:

/* Line 1464 of yacc.c  */
#line 1006 "../../../src/util/parser/hphp.y"
    { (yyval) = 6;;}
    break;

  case 196:

/* Line 1464 of yacc.c  */
#line 1008 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(3) - (4)]); (yyval) = 7;;}
    break;

  case 197:

/* Line 1464 of yacc.c  */
#line 1009 "../../../src/util/parser/hphp.y"
    { (yyval) = 8;;}
    break;

  case 198:

/* Line 1464 of yacc.c  */
#line 1013 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),  0,0,(yyvsp[(1) - (1)]),0);;}
    break;

  case 199:

/* Line 1464 of yacc.c  */
#line 1015 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),&(yyvsp[(1) - (3)]),0,(yyvsp[(3) - (3)]),0);;}
    break;

  case 200:

/* Line 1464 of yacc.c  */
#line 1019 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (2)]);;}
    break;

  case 201:

/* Line 1464 of yacc.c  */
#line 1020 "../../../src/util/parser/hphp.y"
    { scalar_null(_p, (yyval));;}
    break;

  case 202:

/* Line 1464 of yacc.c  */
#line 1024 "../../../src/util/parser/hphp.y"
    { _p->scanner().xhpAttributeDecl();;}
    break;

  case 203:

/* Line 1464 of yacc.c  */
#line 1025 "../../../src/util/parser/hphp.y"
    { scalar_num(_p, (yyval), "1");;}
    break;

  case 204:

/* Line 1464 of yacc.c  */
#line 1026 "../../../src/util/parser/hphp.y"
    { scalar_num(_p, (yyval), "0");;}
    break;

  case 205:

/* Line 1464 of yacc.c  */
#line 1030 "../../../src/util/parser/hphp.y"
    { Token t; scalar_num(_p, t, "1");
                                         _p->onArrayPair((yyval),0,&(yyvsp[(1) - (1)]),t,0);;}
    break;

  case 206:

/* Line 1464 of yacc.c  */
#line 1033 "../../../src/util/parser/hphp.y"
    { Token t; scalar_num(_p, t, "1");
                                         _p->onArrayPair((yyval),&(yyvsp[(1) - (3)]),&(yyvsp[(3) - (3)]),t,0);;}
    break;

  case 207:

/* Line 1464 of yacc.c  */
#line 1038 "../../../src/util/parser/hphp.y"
    { _p->onScalar((yyval),
                                         T_CONSTANT_ENCAPSED_STRING, (yyvsp[(1) - (1)]));;}
    break;

  case 208:

/* Line 1464 of yacc.c  */
#line 1043 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]); (yyval) = 2;;}
    break;

  case 209:

/* Line 1464 of yacc.c  */
#line 1044 "../../../src/util/parser/hphp.y"
    { (yyval) = -1;
                                         if ((yyvsp[(1) - (1)]).same("any")) (yyval) = 1;;}
    break;

  case 210:

/* Line 1464 of yacc.c  */
#line 1046 "../../../src/util/parser/hphp.y"
    { (yyval) = 0;;}
    break;

  case 211:

/* Line 1464 of yacc.c  */
#line 1050 "../../../src/util/parser/hphp.y"
    { xhp_children_paren(_p, (yyval), (yyvsp[(2) - (3)]), 0);;}
    break;

  case 212:

/* Line 1464 of yacc.c  */
#line 1051 "../../../src/util/parser/hphp.y"
    { xhp_children_paren(_p, (yyval), (yyvsp[(2) - (4)]), 1);;}
    break;

  case 213:

/* Line 1464 of yacc.c  */
#line 1052 "../../../src/util/parser/hphp.y"
    { xhp_children_paren(_p, (yyval), (yyvsp[(2) - (4)]), 2);;}
    break;

  case 214:

/* Line 1464 of yacc.c  */
#line 1053 "../../../src/util/parser/hphp.y"
    { xhp_children_paren(_p, (yyval), (yyvsp[(2) - (4)]), 3);;}
    break;

  case 215:

/* Line 1464 of yacc.c  */
#line 1057 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 216:

/* Line 1464 of yacc.c  */
#line 1058 "../../../src/util/parser/hphp.y"
    { xhp_children_decl(_p,(yyval),(yyvsp[(1) - (1)]),0,  0);;}
    break;

  case 217:

/* Line 1464 of yacc.c  */
#line 1059 "../../../src/util/parser/hphp.y"
    { xhp_children_decl(_p,(yyval),(yyvsp[(1) - (2)]),1,  0);;}
    break;

  case 218:

/* Line 1464 of yacc.c  */
#line 1060 "../../../src/util/parser/hphp.y"
    { xhp_children_decl(_p,(yyval),(yyvsp[(1) - (2)]),2,  0);;}
    break;

  case 219:

/* Line 1464 of yacc.c  */
#line 1061 "../../../src/util/parser/hphp.y"
    { xhp_children_decl(_p,(yyval),(yyvsp[(1) - (2)]),3,  0);;}
    break;

  case 220:

/* Line 1464 of yacc.c  */
#line 1063 "../../../src/util/parser/hphp.y"
    { xhp_children_decl(_p,(yyval),(yyvsp[(1) - (3)]),4,&(yyvsp[(3) - (3)]));;}
    break;

  case 221:

/* Line 1464 of yacc.c  */
#line 1065 "../../../src/util/parser/hphp.y"
    { xhp_children_decl(_p,(yyval),(yyvsp[(1) - (3)]),5,&(yyvsp[(3) - (3)]));;}
    break;

  case 222:

/* Line 1464 of yacc.c  */
#line 1069 "../../../src/util/parser/hphp.y"
    { (yyval) = -1;
                                         if ((yyvsp[(1) - (1)]).same("any")) (yyval) = 1; else
                                         if ((yyvsp[(1) - (1)]).same("pcdata")) (yyval) = 2;;}
    break;

  case 223:

/* Line 1464 of yacc.c  */
#line 1072 "../../../src/util/parser/hphp.y"
    { (yyvsp[(1) - (1)]).xhpLabel();  (yyval) = (yyvsp[(1) - (1)]); (yyval) = 3;;}
    break;

  case 224:

/* Line 1464 of yacc.c  */
#line 1073 "../../../src/util/parser/hphp.y"
    { (yyvsp[(1) - (1)]).xhpLabel(0); (yyval) = (yyvsp[(1) - (1)]); (yyval) = 4;;}
    break;

  case 225:

/* Line 1464 of yacc.c  */
#line 1077 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 226:

/* Line 1464 of yacc.c  */
#line 1078 "../../../src/util/parser/hphp.y"
    { _p->finishStatement((yyval), (yyvsp[(2) - (3)])); (yyval) = 1;;}
    break;

  case 227:

/* Line 1464 of yacc.c  */
#line 1081 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 228:

/* Line 1464 of yacc.c  */
#line 1082 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 229:

/* Line 1464 of yacc.c  */
#line 1085 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 230:

/* Line 1464 of yacc.c  */
#line 1086 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 231:

/* Line 1464 of yacc.c  */
#line 1089 "../../../src/util/parser/hphp.y"
    { _p->onMemberModifier((yyval),NULL,(yyvsp[(1) - (1)]));;}
    break;

  case 232:

/* Line 1464 of yacc.c  */
#line 1091 "../../../src/util/parser/hphp.y"
    { _p->onMemberModifier((yyval),&(yyvsp[(1) - (2)]),(yyvsp[(2) - (2)]));;}
    break;

  case 233:

/* Line 1464 of yacc.c  */
#line 1094 "../../../src/util/parser/hphp.y"
    { (yyval) = T_PUBLIC;;}
    break;

  case 234:

/* Line 1464 of yacc.c  */
#line 1095 "../../../src/util/parser/hphp.y"
    { (yyval) = T_PROTECTED;;}
    break;

  case 235:

/* Line 1464 of yacc.c  */
#line 1096 "../../../src/util/parser/hphp.y"
    { (yyval) = T_PRIVATE;;}
    break;

  case 236:

/* Line 1464 of yacc.c  */
#line 1097 "../../../src/util/parser/hphp.y"
    { (yyval) = T_STATIC;;}
    break;

  case 237:

/* Line 1464 of yacc.c  */
#line 1098 "../../../src/util/parser/hphp.y"
    { (yyval) = T_ABSTRACT;;}
    break;

  case 238:

/* Line 1464 of yacc.c  */
#line 1099 "../../../src/util/parser/hphp.y"
    { (yyval) = T_FINAL;;}
    break;

  case 239:

/* Line 1464 of yacc.c  */
#line 1103 "../../../src/util/parser/hphp.y"
    { _p->onClassVariable((yyval),&(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),0);;}
    break;

  case 240:

/* Line 1464 of yacc.c  */
#line 1105 "../../../src/util/parser/hphp.y"
    { _p->onClassVariable((yyval),&(yyvsp[(1) - (5)]),(yyvsp[(3) - (5)]),&(yyvsp[(5) - (5)]));;}
    break;

  case 241:

/* Line 1464 of yacc.c  */
#line 1106 "../../../src/util/parser/hphp.y"
    { _p->onClassVariable((yyval),0,(yyvsp[(1) - (1)]),0);;}
    break;

  case 242:

/* Line 1464 of yacc.c  */
#line 1107 "../../../src/util/parser/hphp.y"
    { _p->onClassVariable((yyval),0,(yyvsp[(1) - (3)]),&(yyvsp[(3) - (3)]));;}
    break;

  case 243:

/* Line 1464 of yacc.c  */
#line 1111 "../../../src/util/parser/hphp.y"
    { _p->onClassConstant((yyval),&(yyvsp[(1) - (5)]),(yyvsp[(3) - (5)]),(yyvsp[(5) - (5)]));;}
    break;

  case 244:

/* Line 1464 of yacc.c  */
#line 1112 "../../../src/util/parser/hphp.y"
    { _p->onClassConstant((yyval),0,(yyvsp[(2) - (4)]),(yyvsp[(4) - (4)]));;}
    break;

  case 245:

/* Line 1464 of yacc.c  */
#line 1116 "../../../src/util/parser/hphp.y"
    { _p->onExprListElem((yyval), &(yyvsp[(1) - (3)]), (yyvsp[(3) - (3)]));;}
    break;

  case 246:

/* Line 1464 of yacc.c  */
#line 1117 "../../../src/util/parser/hphp.y"
    { _p->onExprListElem((yyval), NULL, (yyvsp[(1) - (1)]));;}
    break;

  case 247:

/* Line 1464 of yacc.c  */
#line 1121 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 248:

/* Line 1464 of yacc.c  */
#line 1122 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 249:

/* Line 1464 of yacc.c  */
#line 1125 "../../../src/util/parser/hphp.y"
    { _p->onExprListElem((yyval), &(yyvsp[(1) - (3)]), (yyvsp[(3) - (3)]));;}
    break;

  case 250:

/* Line 1464 of yacc.c  */
#line 1126 "../../../src/util/parser/hphp.y"
    { _p->onExprListElem((yyval), NULL, (yyvsp[(1) - (1)]));;}
    break;

  case 251:

/* Line 1464 of yacc.c  */
#line 1131 "../../../src/util/parser/hphp.y"
    { _p->onListAssignment((yyval), (yyvsp[(3) - (6)]), &(yyvsp[(6) - (6)]));;}
    break;

  case 252:

/* Line 1464 of yacc.c  */
#line 1132 "../../../src/util/parser/hphp.y"
    { _p->onAssign((yyval), (yyvsp[(1) - (3)]), (yyvsp[(3) - (3)]), 0);;}
    break;

  case 253:

/* Line 1464 of yacc.c  */
#line 1133 "../../../src/util/parser/hphp.y"
    { _p->onAssign((yyval), (yyvsp[(1) - (4)]), (yyvsp[(4) - (4)]), 1);;}
    break;

  case 254:

/* Line 1464 of yacc.c  */
#line 1136 "../../../src/util/parser/hphp.y"
    { _p->onAssignNew((yyval),(yyvsp[(1) - (6)]),(yyvsp[(5) - (6)]),(yyvsp[(6) - (6)]));;}
    break;

  case 255:

/* Line 1464 of yacc.c  */
#line 1138 "../../../src/util/parser/hphp.y"
    { _p->onNewObject((yyval), (yyvsp[(2) - (3)]), (yyvsp[(3) - (3)]));;}
    break;

  case 256:

/* Line 1464 of yacc.c  */
#line 1139 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_CLONE,1);;}
    break;

  case 257:

/* Line 1464 of yacc.c  */
#line 1140 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_PLUS_EQUAL);;}
    break;

  case 258:

/* Line 1464 of yacc.c  */
#line 1141 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_MINUS_EQUAL);;}
    break;

  case 259:

/* Line 1464 of yacc.c  */
#line 1142 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_MUL_EQUAL);;}
    break;

  case 260:

/* Line 1464 of yacc.c  */
#line 1143 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_DIV_EQUAL);;}
    break;

  case 261:

/* Line 1464 of yacc.c  */
#line 1144 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_CONCAT_EQUAL);;}
    break;

  case 262:

/* Line 1464 of yacc.c  */
#line 1145 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_MOD_EQUAL);;}
    break;

  case 263:

/* Line 1464 of yacc.c  */
#line 1146 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_AND_EQUAL);;}
    break;

  case 264:

/* Line 1464 of yacc.c  */
#line 1147 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_OR_EQUAL);;}
    break;

  case 265:

/* Line 1464 of yacc.c  */
#line 1148 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_XOR_EQUAL);;}
    break;

  case 266:

/* Line 1464 of yacc.c  */
#line 1149 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_SL_EQUAL);;}
    break;

  case 267:

/* Line 1464 of yacc.c  */
#line 1150 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_SR_EQUAL);;}
    break;

  case 268:

/* Line 1464 of yacc.c  */
#line 1151 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(1) - (2)]),T_INC,0);;}
    break;

  case 269:

/* Line 1464 of yacc.c  */
#line 1152 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_INC,1);;}
    break;

  case 270:

/* Line 1464 of yacc.c  */
#line 1153 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(1) - (2)]),T_DEC,0);;}
    break;

  case 271:

/* Line 1464 of yacc.c  */
#line 1154 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_DEC,1);;}
    break;

  case 272:

/* Line 1464 of yacc.c  */
#line 1155 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_BOOLEAN_OR);;}
    break;

  case 273:

/* Line 1464 of yacc.c  */
#line 1156 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_BOOLEAN_AND);;}
    break;

  case 274:

/* Line 1464 of yacc.c  */
#line 1157 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_LOGICAL_OR);;}
    break;

  case 275:

/* Line 1464 of yacc.c  */
#line 1158 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_LOGICAL_AND);;}
    break;

  case 276:

/* Line 1464 of yacc.c  */
#line 1159 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_LOGICAL_XOR);;}
    break;

  case 277:

/* Line 1464 of yacc.c  */
#line 1160 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),'|');;}
    break;

  case 278:

/* Line 1464 of yacc.c  */
#line 1161 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),'&');;}
    break;

  case 279:

/* Line 1464 of yacc.c  */
#line 1162 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),'^');;}
    break;

  case 280:

/* Line 1464 of yacc.c  */
#line 1163 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),'.');;}
    break;

  case 281:

/* Line 1464 of yacc.c  */
#line 1164 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),'+');;}
    break;

  case 282:

/* Line 1464 of yacc.c  */
#line 1165 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),'-');;}
    break;

  case 283:

/* Line 1464 of yacc.c  */
#line 1166 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),'*');;}
    break;

  case 284:

/* Line 1464 of yacc.c  */
#line 1167 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),'/');;}
    break;

  case 285:

/* Line 1464 of yacc.c  */
#line 1168 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),'%');;}
    break;

  case 286:

/* Line 1464 of yacc.c  */
#line 1169 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_SL);;}
    break;

  case 287:

/* Line 1464 of yacc.c  */
#line 1170 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_SR);;}
    break;

  case 288:

/* Line 1464 of yacc.c  */
#line 1171 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),'+',1);;}
    break;

  case 289:

/* Line 1464 of yacc.c  */
#line 1172 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),'-',1);;}
    break;

  case 290:

/* Line 1464 of yacc.c  */
#line 1173 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),'!',1);;}
    break;

  case 291:

/* Line 1464 of yacc.c  */
#line 1174 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),'~',1);;}
    break;

  case 292:

/* Line 1464 of yacc.c  */
#line 1175 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_IS_IDENTICAL);;}
    break;

  case 293:

/* Line 1464 of yacc.c  */
#line 1176 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_IS_NOT_IDENTICAL);;}
    break;

  case 294:

/* Line 1464 of yacc.c  */
#line 1177 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_IS_EQUAL);;}
    break;

  case 295:

/* Line 1464 of yacc.c  */
#line 1178 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_IS_NOT_EQUAL);;}
    break;

  case 296:

/* Line 1464 of yacc.c  */
#line 1179 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),'<');;}
    break;

  case 297:

/* Line 1464 of yacc.c  */
#line 1180 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),
                                              T_IS_SMALLER_OR_EQUAL);;}
    break;

  case 298:

/* Line 1464 of yacc.c  */
#line 1182 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),'>');;}
    break;

  case 299:

/* Line 1464 of yacc.c  */
#line 1183 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),
                                              T_IS_GREATER_OR_EQUAL);;}
    break;

  case 300:

/* Line 1464 of yacc.c  */
#line 1186 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_INSTANCEOF);;}
    break;

  case 301:

/* Line 1464 of yacc.c  */
#line 1187 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (3)]);;}
    break;

  case 302:

/* Line 1464 of yacc.c  */
#line 1188 "../../../src/util/parser/hphp.y"
    { _p->onQOp((yyval), (yyvsp[(1) - (5)]), &(yyvsp[(3) - (5)]), (yyvsp[(5) - (5)]));;}
    break;

  case 303:

/* Line 1464 of yacc.c  */
#line 1189 "../../../src/util/parser/hphp.y"
    { _p->onQOp((yyval), (yyvsp[(1) - (4)]),   0, (yyvsp[(4) - (4)]));;}
    break;

  case 304:

/* Line 1464 of yacc.c  */
#line 1190 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 305:

/* Line 1464 of yacc.c  */
#line 1191 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_INT_CAST,1);;}
    break;

  case 306:

/* Line 1464 of yacc.c  */
#line 1192 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_DOUBLE_CAST,1);;}
    break;

  case 307:

/* Line 1464 of yacc.c  */
#line 1193 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_STRING_CAST,1);;}
    break;

  case 308:

/* Line 1464 of yacc.c  */
#line 1194 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_ARRAY_CAST,1);;}
    break;

  case 309:

/* Line 1464 of yacc.c  */
#line 1195 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_OBJECT_CAST,1);;}
    break;

  case 310:

/* Line 1464 of yacc.c  */
#line 1196 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_BOOL_CAST,1);;}
    break;

  case 311:

/* Line 1464 of yacc.c  */
#line 1197 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_UNSET_CAST,1);;}
    break;

  case 312:

/* Line 1464 of yacc.c  */
#line 1198 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_EXIT,1);;}
    break;

  case 313:

/* Line 1464 of yacc.c  */
#line 1199 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),'@',1);;}
    break;

  case 314:

/* Line 1464 of yacc.c  */
#line 1200 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 315:

/* Line 1464 of yacc.c  */
#line 1201 "../../../src/util/parser/hphp.y"
    { _p->onArray((yyval),(yyvsp[(3) - (4)]),T_ARRAY);;}
    break;

  case 316:

/* Line 1464 of yacc.c  */
#line 1202 "../../../src/util/parser/hphp.y"
    { _p->onEncapsList((yyval),'`',(yyvsp[(2) - (3)]));;}
    break;

  case 317:

/* Line 1464 of yacc.c  */
#line 1203 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_PRINT,1);;}
    break;

  case 318:

/* Line 1464 of yacc.c  */
#line 1207 "../../../src/util/parser/hphp.y"
    { _p->onClosure((yyval),(yyvsp[(1) - (10)]),(yyvsp[(3) - (10)]),(yyvsp[(5) - (10)]),(yyvsp[(7) - (10)]),(yyvsp[(9) - (10)]));;}
    break;

  case 319:

/* Line 1464 of yacc.c  */
#line 1208 "../../../src/util/parser/hphp.y"
    { xhp_idx(_p, (yyval), (yyvsp[(1) - (4)]), (yyvsp[(3) - (4)]));;}
    break;

  case 320:

/* Line 1464 of yacc.c  */
#line 1209 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 321:

/* Line 1464 of yacc.c  */
#line 1213 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(3) - (4)]);;}
    break;

  case 322:

/* Line 1464 of yacc.c  */
#line 1214 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 323:

/* Line 1464 of yacc.c  */
#line 1218 "../../../src/util/parser/hphp.y"
    { _p->onClosureParam((yyval),&(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),0);;}
    break;

  case 324:

/* Line 1464 of yacc.c  */
#line 1219 "../../../src/util/parser/hphp.y"
    { _p->onClosureParam((yyval),&(yyvsp[(1) - (4)]),(yyvsp[(4) - (4)]),1);;}
    break;

  case 325:

/* Line 1464 of yacc.c  */
#line 1220 "../../../src/util/parser/hphp.y"
    { _p->onClosureParam((yyval),  0,(yyvsp[(1) - (1)]),0);;}
    break;

  case 326:

/* Line 1464 of yacc.c  */
#line 1221 "../../../src/util/parser/hphp.y"
    { _p->onClosureParam((yyval),  0,(yyvsp[(2) - (2)]),1);;}
    break;

  case 327:

/* Line 1464 of yacc.c  */
#line 1225 "../../../src/util/parser/hphp.y"
    { no_gap(_p); xhp_tag(_p,(yyval),(yyvsp[(2) - (4)]),(yyvsp[(3) - (4)]));;}
    break;

  case 328:

/* Line 1464 of yacc.c  */
#line 1228 "../../../src/util/parser/hphp.y"
    { Token t1; _p->onArray(t1,(yyvsp[(1) - (1)]));
                                         Token t2; _p->onArray(t2,(yyvsp[(1) - (1)]));
                                         _p->onCallParam((yyvsp[(1) - (1)]),NULL,t1,0);
                                         _p->onCallParam((yyval), &(yyvsp[(1) - (1)]),t2,0);
                                         (yyval).setText("");
                                         _p->scanner().xhpCloseTag();;}
    break;

  case 329:

/* Line 1464 of yacc.c  */
#line 1234 "../../../src/util/parser/hphp.y"
    { _p->scanner().xhpCloseTag();;}
    break;

  case 330:

/* Line 1464 of yacc.c  */
#line 1235 "../../../src/util/parser/hphp.y"
    { Token t1; _p->onArray(t1,(yyvsp[(1) - (4)]));
                                         Token t2; _p->onArray(t2,(yyvsp[(2) - (4)]));
                                         _p->onCallParam((yyvsp[(1) - (4)]),NULL,t1,0);
                                         _p->onCallParam((yyval), &(yyvsp[(1) - (4)]),t2,0);
                                         (yyval).setText((yyvsp[(4) - (4)]));;}
    break;

  case 331:

/* Line 1464 of yacc.c  */
#line 1240 "../../../src/util/parser/hphp.y"
    { _p->scanner().xhpChild();;}
    break;

  case 332:

/* Line 1464 of yacc.c  */
#line 1241 "../../../src/util/parser/hphp.y"
    { _p->scanner().xhpCloseTag();;}
    break;

  case 333:

/* Line 1464 of yacc.c  */
#line 1242 "../../../src/util/parser/hphp.y"
    { _p->onArray((yyvsp[(5) - (8)]),(yyvsp[(1) - (8)]));
                                         _p->onArray((yyvsp[(6) - (8)]),(yyvsp[(4) - (8)]));
                                         _p->onCallParam((yyvsp[(2) - (8)]),NULL,(yyvsp[(5) - (8)]),0);
                                         _p->onCallParam((yyval), &(yyvsp[(2) - (8)]),(yyvsp[(6) - (8)]),0);
                                         (yyval).setText((yyvsp[(8) - (8)]));;}
    break;

  case 334:

/* Line 1464 of yacc.c  */
#line 1249 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 335:

/* Line 1464 of yacc.c  */
#line 1250 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 336:

/* Line 1464 of yacc.c  */
#line 1254 "../../../src/util/parser/hphp.y"
    { _p->scanner().xhpAttribute();;}
    break;

  case 337:

/* Line 1464 of yacc.c  */
#line 1255 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),&(yyvsp[(1) - (5)]),&(yyvsp[(2) - (5)]),(yyvsp[(5) - (5)]),0);;}
    break;

  case 338:

/* Line 1464 of yacc.c  */
#line 1256 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 339:

/* Line 1464 of yacc.c  */
#line 1259 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),&(yyvsp[(1) - (2)]),0,(yyvsp[(2) - (2)]),0);;}
    break;

  case 340:

/* Line 1464 of yacc.c  */
#line 1260 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 341:

/* Line 1464 of yacc.c  */
#line 1263 "../../../src/util/parser/hphp.y"
    { _p->onScalar((yyval),
                                         T_CONSTANT_ENCAPSED_STRING, (yyvsp[(1) - (1)]));;}
    break;

  case 342:

/* Line 1464 of yacc.c  */
#line 1267 "../../../src/util/parser/hphp.y"
    { (yyvsp[(1) - (1)]).htmlDecode();
                                         _p->onScalar((yyval),
                                         T_CONSTANT_ENCAPSED_STRING, (yyvsp[(1) - (1)]));;}
    break;

  case 343:

/* Line 1464 of yacc.c  */
#line 1270 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (3)]);;}
    break;

  case 344:

/* Line 1464 of yacc.c  */
#line 1273 "../../../src/util/parser/hphp.y"
    { (yyval).reset();
                                         if ((yyvsp[(1) - (1)]).htmlTrim()) {
                                           (yyvsp[(1) - (1)]).htmlDecode();
                                           _p->onScalar((yyval),
                                           T_CONSTANT_ENCAPSED_STRING, (yyvsp[(1) - (1)]));
                                         }
                                       ;}
    break;

  case 345:

/* Line 1464 of yacc.c  */
#line 1280 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (3)]); _p->scanner().xhpChild();;}
    break;

  case 346:

/* Line 1464 of yacc.c  */
#line 1281 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]); _p->scanner().xhpChild();;}
    break;

  case 347:

/* Line 1464 of yacc.c  */
#line 1284 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]); no_gap(_p);;}
    break;

  case 348:

/* Line 1464 of yacc.c  */
#line 1285 "../../../src/util/parser/hphp.y"
    { no_gap(_p);;}
    break;

  case 349:

/* Line 1464 of yacc.c  */
#line 1286 "../../../src/util/parser/hphp.y"
    { no_gap(_p); (yyval) = (yyvsp[(1) - (4)]) + ":" + (yyvsp[(4) - (4)]);;}
    break;

  case 350:

/* Line 1464 of yacc.c  */
#line 1287 "../../../src/util/parser/hphp.y"
    { no_gap(_p);;}
    break;

  case 351:

/* Line 1464 of yacc.c  */
#line 1288 "../../../src/util/parser/hphp.y"
    { no_gap(_p); (yyval) = (yyvsp[(1) - (4)]) + "-" + (yyvsp[(4) - (4)]);;}
    break;

  case 352:

/* Line 1464 of yacc.c  */
#line 1291 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 353:

/* Line 1464 of yacc.c  */
#line 1292 "../../../src/util/parser/hphp.y"
    { no_gap(_p);;}
    break;

  case 354:

/* Line 1464 of yacc.c  */
#line 1293 "../../../src/util/parser/hphp.y"
    { no_gap(_p); (yyval) = (yyvsp[(1) - (4)]) + ":" + (yyvsp[(4) - (4)]);;}
    break;

  case 355:

/* Line 1464 of yacc.c  */
#line 1294 "../../../src/util/parser/hphp.y"
    { no_gap(_p);;}
    break;

  case 356:

/* Line 1464 of yacc.c  */
#line 1295 "../../../src/util/parser/hphp.y"
    { no_gap(_p); (yyval) = (yyvsp[(1) - (4)]) + "-" + (yyvsp[(4) - (4)]);;}
    break;

  case 357:

/* Line 1464 of yacc.c  */
#line 1298 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 358:

/* Line 1464 of yacc.c  */
#line 1299 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 359:

/* Line 1464 of yacc.c  */
#line 1300 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 360:

/* Line 1464 of yacc.c  */
#line 1301 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 361:

/* Line 1464 of yacc.c  */
#line 1302 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 362:

/* Line 1464 of yacc.c  */
#line 1303 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 363:

/* Line 1464 of yacc.c  */
#line 1304 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 364:

/* Line 1464 of yacc.c  */
#line 1305 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 365:

/* Line 1464 of yacc.c  */
#line 1306 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 366:

/* Line 1464 of yacc.c  */
#line 1307 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 367:

/* Line 1464 of yacc.c  */
#line 1308 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 368:

/* Line 1464 of yacc.c  */
#line 1309 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 369:

/* Line 1464 of yacc.c  */
#line 1310 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 370:

/* Line 1464 of yacc.c  */
#line 1311 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 371:

/* Line 1464 of yacc.c  */
#line 1312 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 372:

/* Line 1464 of yacc.c  */
#line 1313 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 373:

/* Line 1464 of yacc.c  */
#line 1314 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 374:

/* Line 1464 of yacc.c  */
#line 1315 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 375:

/* Line 1464 of yacc.c  */
#line 1316 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 376:

/* Line 1464 of yacc.c  */
#line 1317 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 377:

/* Line 1464 of yacc.c  */
#line 1318 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 378:

/* Line 1464 of yacc.c  */
#line 1319 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 379:

/* Line 1464 of yacc.c  */
#line 1320 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 380:

/* Line 1464 of yacc.c  */
#line 1321 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 381:

/* Line 1464 of yacc.c  */
#line 1322 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 382:

/* Line 1464 of yacc.c  */
#line 1323 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 383:

/* Line 1464 of yacc.c  */
#line 1324 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 384:

/* Line 1464 of yacc.c  */
#line 1325 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 385:

/* Line 1464 of yacc.c  */
#line 1326 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 386:

/* Line 1464 of yacc.c  */
#line 1327 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 387:

/* Line 1464 of yacc.c  */
#line 1328 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 388:

/* Line 1464 of yacc.c  */
#line 1329 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 389:

/* Line 1464 of yacc.c  */
#line 1330 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 390:

/* Line 1464 of yacc.c  */
#line 1331 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 391:

/* Line 1464 of yacc.c  */
#line 1332 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 392:

/* Line 1464 of yacc.c  */
#line 1333 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 393:

/* Line 1464 of yacc.c  */
#line 1334 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 394:

/* Line 1464 of yacc.c  */
#line 1335 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 395:

/* Line 1464 of yacc.c  */
#line 1336 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 396:

/* Line 1464 of yacc.c  */
#line 1337 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 397:

/* Line 1464 of yacc.c  */
#line 1338 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 398:

/* Line 1464 of yacc.c  */
#line 1339 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 399:

/* Line 1464 of yacc.c  */
#line 1340 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 400:

/* Line 1464 of yacc.c  */
#line 1341 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 401:

/* Line 1464 of yacc.c  */
#line 1342 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 402:

/* Line 1464 of yacc.c  */
#line 1343 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 403:

/* Line 1464 of yacc.c  */
#line 1344 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 404:

/* Line 1464 of yacc.c  */
#line 1345 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 405:

/* Line 1464 of yacc.c  */
#line 1346 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 406:

/* Line 1464 of yacc.c  */
#line 1347 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 407:

/* Line 1464 of yacc.c  */
#line 1348 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 408:

/* Line 1464 of yacc.c  */
#line 1349 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 409:

/* Line 1464 of yacc.c  */
#line 1350 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 410:

/* Line 1464 of yacc.c  */
#line 1351 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 411:

/* Line 1464 of yacc.c  */
#line 1352 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 412:

/* Line 1464 of yacc.c  */
#line 1353 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 413:

/* Line 1464 of yacc.c  */
#line 1354 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 414:

/* Line 1464 of yacc.c  */
#line 1355 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 415:

/* Line 1464 of yacc.c  */
#line 1356 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 416:

/* Line 1464 of yacc.c  */
#line 1357 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 417:

/* Line 1464 of yacc.c  */
#line 1358 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 418:

/* Line 1464 of yacc.c  */
#line 1359 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 419:

/* Line 1464 of yacc.c  */
#line 1360 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 420:

/* Line 1464 of yacc.c  */
#line 1361 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 421:

/* Line 1464 of yacc.c  */
#line 1362 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 422:

/* Line 1464 of yacc.c  */
#line 1363 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 423:

/* Line 1464 of yacc.c  */
#line 1364 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 424:

/* Line 1464 of yacc.c  */
#line 1365 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 425:

/* Line 1464 of yacc.c  */
#line 1366 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 426:

/* Line 1464 of yacc.c  */
#line 1367 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 427:

/* Line 1464 of yacc.c  */
#line 1372 "../../../src/util/parser/hphp.y"
    { _p->onCall((yyval),0,(yyvsp[(1) - (4)]),(yyvsp[(3) - (4)]),NULL);;}
    break;

  case 428:

/* Line 1464 of yacc.c  */
#line 1374 "../../../src/util/parser/hphp.y"
    { _p->onCall((yyval),1,(yyvsp[(1) - (4)]),(yyvsp[(3) - (4)]),NULL);;}
    break;

  case 429:

/* Line 1464 of yacc.c  */
#line 1378 "../../../src/util/parser/hphp.y"
    { _p->onCall((yyval),0,(yyvsp[(3) - (6)]),(yyvsp[(5) - (6)]),&(yyvsp[(1) - (6)]));;}
    break;

  case 430:

/* Line 1464 of yacc.c  */
#line 1382 "../../../src/util/parser/hphp.y"
    { _p->onCall((yyval),1,(yyvsp[(3) - (6)]),(yyvsp[(5) - (6)]),&(yyvsp[(1) - (6)]));;}
    break;

  case 431:

/* Line 1464 of yacc.c  */
#line 1385 "../../../src/util/parser/hphp.y"
    { _p->onName((yyval),(yyvsp[(1) - (1)]),Parser::StringName);;}
    break;

  case 432:

/* Line 1464 of yacc.c  */
#line 1386 "../../../src/util/parser/hphp.y"
    { _p->onName((yyval),(yyvsp[(1) - (1)]),Parser::StaticName);;}
    break;

  case 433:

/* Line 1464 of yacc.c  */
#line 1387 "../../../src/util/parser/hphp.y"
    { _p->onName((yyval),(yyvsp[(1) - (1)]),
                                         Parser::StaticClassExprName);;}
    break;

  case 434:

/* Line 1464 of yacc.c  */
#line 1391 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 435:

/* Line 1464 of yacc.c  */
#line 1392 "../../../src/util/parser/hphp.y"
    { (yyvsp[(1) - (1)]).xhpLabel(); (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 436:

/* Line 1464 of yacc.c  */
#line 1395 "../../../src/util/parser/hphp.y"
    { _p->onName((yyval),(yyvsp[(1) - (1)]),Parser::StringName);;}
    break;

  case 437:

/* Line 1464 of yacc.c  */
#line 1396 "../../../src/util/parser/hphp.y"
    { (yyvsp[(1) - (1)]).xhpLabel();
                                         _p->onName((yyval),(yyvsp[(1) - (1)]),Parser::StringName);;}
    break;

  case 438:

/* Line 1464 of yacc.c  */
#line 1398 "../../../src/util/parser/hphp.y"
    { _p->onName((yyval),(yyvsp[(1) - (1)]),Parser::ExprName);;}
    break;

  case 439:

/* Line 1464 of yacc.c  */
#line 1401 "../../../src/util/parser/hphp.y"
    { _p->pushObject((yyvsp[(1) - (1)]));;}
    break;

  case 440:

/* Line 1464 of yacc.c  */
#line 1403 "../../../src/util/parser/hphp.y"
    { _p->popObject((yyval));;}
    break;

  case 441:

/* Line 1464 of yacc.c  */
#line 1404 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 442:

/* Line 1464 of yacc.c  */
#line 1408 "../../../src/util/parser/hphp.y"
    { ;}
    break;

  case 443:

/* Line 1464 of yacc.c  */
#line 1409 "../../../src/util/parser/hphp.y"
    { ;}
    break;

  case 444:

/* Line 1464 of yacc.c  */
#line 1412 "../../../src/util/parser/hphp.y"
    { ;}
    break;

  case 445:

/* Line 1464 of yacc.c  */
#line 1416 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 446:

/* Line 1464 of yacc.c  */
#line 1417 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (3)]);;}
    break;

  case 447:

/* Line 1464 of yacc.c  */
#line 1418 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 448:

/* Line 1464 of yacc.c  */
#line 1423 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (3)]);;}
    break;

  case 449:

/* Line 1464 of yacc.c  */
#line 1424 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 450:

/* Line 1464 of yacc.c  */
#line 1428 "../../../src/util/parser/hphp.y"
    { _p->onScalar((yyval), T_LNUMBER,  (yyvsp[(1) - (1)]));;}
    break;

  case 451:

/* Line 1464 of yacc.c  */
#line 1429 "../../../src/util/parser/hphp.y"
    { _p->onScalar((yyval), T_DNUMBER,  (yyvsp[(1) - (1)]));;}
    break;

  case 452:

/* Line 1464 of yacc.c  */
#line 1430 "../../../src/util/parser/hphp.y"
    { _p->onScalar((yyval),
                                         T_CONSTANT_ENCAPSED_STRING,  (yyvsp[(1) - (1)]));;}
    break;

  case 453:

/* Line 1464 of yacc.c  */
#line 1432 "../../../src/util/parser/hphp.y"
    { _p->onScalar((yyval), T_LINE,     (yyvsp[(1) - (1)]));;}
    break;

  case 454:

/* Line 1464 of yacc.c  */
#line 1433 "../../../src/util/parser/hphp.y"
    { _p->onScalar((yyval), T_FILE,     (yyvsp[(1) - (1)]));;}
    break;

  case 455:

/* Line 1464 of yacc.c  */
#line 1434 "../../../src/util/parser/hphp.y"
    { _p->onScalar((yyval), T_CLASS_C,  (yyvsp[(1) - (1)]));;}
    break;

  case 456:

/* Line 1464 of yacc.c  */
#line 1435 "../../../src/util/parser/hphp.y"
    { _p->onScalar((yyval), T_METHOD_C, (yyvsp[(1) - (1)]));;}
    break;

  case 457:

/* Line 1464 of yacc.c  */
#line 1436 "../../../src/util/parser/hphp.y"
    { _p->onScalar((yyval), T_FUNC_C,   (yyvsp[(1) - (1)]));;}
    break;

  case 458:

/* Line 1464 of yacc.c  */
#line 1439 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 459:

/* Line 1464 of yacc.c  */
#line 1440 "../../../src/util/parser/hphp.y"
    { _p->onConstantValue((yyval), (yyvsp[(1) - (1)]));;}
    break;

  case 460:

/* Line 1464 of yacc.c  */
#line 1441 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),'+',1);;}
    break;

  case 461:

/* Line 1464 of yacc.c  */
#line 1442 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),'-',1);;}
    break;

  case 462:

/* Line 1464 of yacc.c  */
#line 1444 "../../../src/util/parser/hphp.y"
    { _p->onArray((yyval),(yyvsp[(3) - (4)]),T_ARRAY);;}
    break;

  case 463:

/* Line 1464 of yacc.c  */
#line 1445 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 464:

/* Line 1464 of yacc.c  */
#line 1449 "../../../src/util/parser/hphp.y"
    { _p->onClassConst((yyval), (yyvsp[(1) - (3)]), (yyvsp[(3) - (3)]), 1);;}
    break;

  case 465:

/* Line 1464 of yacc.c  */
#line 1451 "../../../src/util/parser/hphp.y"
    { (yyvsp[(1) - (3)]).xhpLabel();
                                         _p->onClassConst((yyval), (yyvsp[(1) - (3)]), (yyvsp[(3) - (3)]), 1);;}
    break;

  case 466:

/* Line 1464 of yacc.c  */
#line 1455 "../../../src/util/parser/hphp.y"
    { _p->onConstantValue((yyval), (yyvsp[(1) - (1)]));;}
    break;

  case 467:

/* Line 1464 of yacc.c  */
#line 1456 "../../../src/util/parser/hphp.y"
    { _p->onConstantValue((yyval), (yyvsp[(1) - (1)]));;}
    break;

  case 468:

/* Line 1464 of yacc.c  */
#line 1457 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 469:

/* Line 1464 of yacc.c  */
#line 1458 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 470:

/* Line 1464 of yacc.c  */
#line 1459 "../../../src/util/parser/hphp.y"
    { _p->onEncapsList((yyval),'"',(yyvsp[(2) - (3)]));;}
    break;

  case 471:

/* Line 1464 of yacc.c  */
#line 1460 "../../../src/util/parser/hphp.y"
    { _p->onEncapsList((yyval),'\'',(yyvsp[(2) - (3)]));;}
    break;

  case 472:

/* Line 1464 of yacc.c  */
#line 1462 "../../../src/util/parser/hphp.y"
    { _p->onEncapsList((yyval),T_START_HEREDOC,
                                                          (yyvsp[(2) - (3)]));;}
    break;

  case 473:

/* Line 1464 of yacc.c  */
#line 1467 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (2)]);;}
    break;

  case 474:

/* Line 1464 of yacc.c  */
#line 1468 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 475:

/* Line 1464 of yacc.c  */
#line 1471 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 476:

/* Line 1464 of yacc.c  */
#line 1472 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 477:

/* Line 1464 of yacc.c  */
#line 1477 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),&(yyvsp[(1) - (5)]),&(yyvsp[(3) - (5)]),(yyvsp[(5) - (5)]),0);;}
    break;

  case 478:

/* Line 1464 of yacc.c  */
#line 1479 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),&(yyvsp[(1) - (3)]),  0,(yyvsp[(3) - (3)]),0);;}
    break;

  case 479:

/* Line 1464 of yacc.c  */
#line 1481 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),  0,&(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),0);;}
    break;

  case 480:

/* Line 1464 of yacc.c  */
#line 1482 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),  0,  0,(yyvsp[(1) - (1)]),0);;}
    break;

  case 481:

/* Line 1464 of yacc.c  */
#line 1486 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 482:

/* Line 1464 of yacc.c  */
#line 1487 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 483:

/* Line 1464 of yacc.c  */
#line 1490 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 484:

/* Line 1464 of yacc.c  */
#line 1493 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 485:

/* Line 1464 of yacc.c  */
#line 1496 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 486:

/* Line 1464 of yacc.c  */
#line 1499 "../../../src/util/parser/hphp.y"
    { _p->pushObject((yyvsp[(1) - (1)]));;}
    break;

  case 487:

/* Line 1464 of yacc.c  */
#line 1501 "../../../src/util/parser/hphp.y"
    { _p->appendMethodParams((yyvsp[(5) - (5)]));;}
    break;

  case 488:

/* Line 1464 of yacc.c  */
#line 1502 "../../../src/util/parser/hphp.y"
    { _p->popObject((yyval));;}
    break;

  case 489:

/* Line 1464 of yacc.c  */
#line 1503 "../../../src/util/parser/hphp.y"
    { _p->pushObject((yyvsp[(1) - (1)]));
                                         _p->popObject((yyval));;}
    break;

  case 490:

/* Line 1464 of yacc.c  */
#line 1508 "../../../src/util/parser/hphp.y"
    { ;}
    break;

  case 491:

/* Line 1464 of yacc.c  */
#line 1509 "../../../src/util/parser/hphp.y"
    { ;}
    break;

  case 492:

/* Line 1464 of yacc.c  */
#line 1513 "../../../src/util/parser/hphp.y"
    { _p->appendMethodParams((yyvsp[(3) - (3)]));;}
    break;

  case 493:

/* Line 1464 of yacc.c  */
#line 1517 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (3)]); (yyval) = 1;;}
    break;

  case 494:

/* Line 1464 of yacc.c  */
#line 1518 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 495:

/* Line 1464 of yacc.c  */
#line 1522 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 496:

/* Line 1464 of yacc.c  */
#line 1524 "../../../src/util/parser/hphp.y"
    { _p->onIndirectRef((yyval),(yyvsp[(1) - (2)]),(yyvsp[(2) - (2)]));;}
    break;

  case 497:

/* Line 1464 of yacc.c  */
#line 1529 "../../../src/util/parser/hphp.y"
    { _p->onStaticMember((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]));;}
    break;

  case 498:

/* Line 1464 of yacc.c  */
#line 1533 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 499:

/* Line 1464 of yacc.c  */
#line 1534 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 500:

/* Line 1464 of yacc.c  */
#line 1537 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 501:

/* Line 1464 of yacc.c  */
#line 1539 "../../../src/util/parser/hphp.y"
    { _p->onIndirectRef((yyval),(yyvsp[(1) - (2)]),(yyvsp[(2) - (2)]));;}
    break;

  case 502:

/* Line 1464 of yacc.c  */
#line 1540 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]); (yyval) = 2;;}
    break;

  case 503:

/* Line 1464 of yacc.c  */
#line 1544 "../../../src/util/parser/hphp.y"
    { _p->onRefDim((yyval), (yyvsp[(1) - (4)]), (yyvsp[(3) - (4)]));;}
    break;

  case 504:

/* Line 1464 of yacc.c  */
#line 1545 "../../../src/util/parser/hphp.y"
    { _p->onRefDim((yyval), (yyvsp[(1) - (4)]), (yyvsp[(3) - (4)]));;}
    break;

  case 505:

/* Line 1464 of yacc.c  */
#line 1546 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 506:

/* Line 1464 of yacc.c  */
#line 1549 "../../../src/util/parser/hphp.y"
    { _p->onSimpleVariable((yyval), (yyvsp[(1) - (1)]));;}
    break;

  case 507:

/* Line 1464 of yacc.c  */
#line 1550 "../../../src/util/parser/hphp.y"
    { _p->onDynamicVariable((yyval), (yyvsp[(3) - (4)]), 0);;}
    break;

  case 508:

/* Line 1464 of yacc.c  */
#line 1553 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 509:

/* Line 1464 of yacc.c  */
#line 1554 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 510:

/* Line 1464 of yacc.c  */
#line 1558 "../../../src/util/parser/hphp.y"
    { ;}
    break;

  case 511:

/* Line 1464 of yacc.c  */
#line 1559 "../../../src/util/parser/hphp.y"
    { _p->appendProperty((yyvsp[(1) - (1)]));;}
    break;

  case 512:

/* Line 1464 of yacc.c  */
#line 1562 "../../../src/util/parser/hphp.y"
    { _p->appendRefDim((yyvsp[(3) - (4)]));;}
    break;

  case 513:

/* Line 1464 of yacc.c  */
#line 1563 "../../../src/util/parser/hphp.y"
    { _p->appendRefDim((yyvsp[(3) - (4)]));;}
    break;

  case 514:

/* Line 1464 of yacc.c  */
#line 1564 "../../../src/util/parser/hphp.y"
    { _p->appendProperty((yyvsp[(1) - (1)]));;}
    break;

  case 515:

/* Line 1464 of yacc.c  */
#line 1567 "../../../src/util/parser/hphp.y"
    {_p->onName((yyval),(yyvsp[(1) - (1)]),Parser::VarName);;}
    break;

  case 516:

/* Line 1464 of yacc.c  */
#line 1568 "../../../src/util/parser/hphp.y"
    {_p->onName((yyval),(yyvsp[(2) - (3)]),Parser::ExprName);;}
    break;

  case 517:

/* Line 1464 of yacc.c  */
#line 1572 "../../../src/util/parser/hphp.y"
    { (yyval) = 1;;}
    break;

  case 518:

/* Line 1464 of yacc.c  */
#line 1573 "../../../src/util/parser/hphp.y"
    { (yyval)++;;}
    break;

  case 519:

/* Line 1464 of yacc.c  */
#line 1577 "../../../src/util/parser/hphp.y"
    { _p->onAListVar((yyval),&(yyvsp[(1) - (2)]),NULL);;}
    break;

  case 520:

/* Line 1464 of yacc.c  */
#line 1578 "../../../src/util/parser/hphp.y"
    { _p->onAListVar((yyval),&(yyvsp[(1) - (3)]),&(yyvsp[(3) - (3)]));;}
    break;

  case 521:

/* Line 1464 of yacc.c  */
#line 1580 "../../../src/util/parser/hphp.y"
    { _p->onAListSub((yyval),&(yyvsp[(1) - (6)]),(yyvsp[(5) - (6)]));;}
    break;

  case 522:

/* Line 1464 of yacc.c  */
#line 1581 "../../../src/util/parser/hphp.y"
    { _p->onAListVar((yyval),NULL,NULL);;}
    break;

  case 523:

/* Line 1464 of yacc.c  */
#line 1582 "../../../src/util/parser/hphp.y"
    { _p->onAListVar((yyval),NULL,&(yyvsp[(1) - (1)]));;}
    break;

  case 524:

/* Line 1464 of yacc.c  */
#line 1583 "../../../src/util/parser/hphp.y"
    { _p->onAListSub((yyval),NULL,(yyvsp[(3) - (4)]));;}
    break;

  case 525:

/* Line 1464 of yacc.c  */
#line 1588 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (2)]);;}
    break;

  case 526:

/* Line 1464 of yacc.c  */
#line 1589 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 527:

/* Line 1464 of yacc.c  */
#line 1593 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),&(yyvsp[(1) - (5)]),&(yyvsp[(3) - (5)]),(yyvsp[(5) - (5)]),0);;}
    break;

  case 528:

/* Line 1464 of yacc.c  */
#line 1594 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),&(yyvsp[(1) - (3)]),  0,(yyvsp[(3) - (3)]),0);;}
    break;

  case 529:

/* Line 1464 of yacc.c  */
#line 1595 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),  0,&(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),0);;}
    break;

  case 530:

/* Line 1464 of yacc.c  */
#line 1596 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),  0,  0,(yyvsp[(1) - (1)]),0);;}
    break;

  case 531:

/* Line 1464 of yacc.c  */
#line 1599 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),&(yyvsp[(1) - (6)]),&(yyvsp[(3) - (6)]),(yyvsp[(6) - (6)]),1);;}
    break;

  case 532:

/* Line 1464 of yacc.c  */
#line 1601 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),&(yyvsp[(1) - (4)]),  0,(yyvsp[(4) - (4)]),1);;}
    break;

  case 533:

/* Line 1464 of yacc.c  */
#line 1602 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),  0,&(yyvsp[(1) - (4)]),(yyvsp[(4) - (4)]),1);;}
    break;

  case 534:

/* Line 1464 of yacc.c  */
#line 1603 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),  0,  0,(yyvsp[(2) - (2)]),1);;}
    break;

  case 535:

/* Line 1464 of yacc.c  */
#line 1607 "../../../src/util/parser/hphp.y"
    { _p->addEncap((yyval), (yyvsp[(1) - (2)]), (yyvsp[(2) - (2)]), -1);;}
    break;

  case 536:

/* Line 1464 of yacc.c  */
#line 1609 "../../../src/util/parser/hphp.y"
    { _p->addEncap((yyval), (yyvsp[(1) - (2)]), (yyvsp[(2) - (2)]), 0);;}
    break;

  case 537:

/* Line 1464 of yacc.c  */
#line 1610 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 538:

/* Line 1464 of yacc.c  */
#line 1613 "../../../src/util/parser/hphp.y"
    { _p->onSimpleVariable((yyval), (yyvsp[(1) - (1)]));;}
    break;

  case 539:

/* Line 1464 of yacc.c  */
#line 1615 "../../../src/util/parser/hphp.y"
    { _p->encapRefDim((yyval), (yyvsp[(1) - (4)]), (yyvsp[(3) - (4)]));;}
    break;

  case 540:

/* Line 1464 of yacc.c  */
#line 1617 "../../../src/util/parser/hphp.y"
    { _p->encapObjProp((yyval), (yyvsp[(1) - (3)]), (yyvsp[(3) - (3)]));;}
    break;

  case 541:

/* Line 1464 of yacc.c  */
#line 1619 "../../../src/util/parser/hphp.y"
    { _p->onDynamicVariable((yyval), (yyvsp[(2) - (3)]), 1);;}
    break;

  case 542:

/* Line 1464 of yacc.c  */
#line 1621 "../../../src/util/parser/hphp.y"
    { _p->encapArray((yyval), (yyvsp[(2) - (6)]), (yyvsp[(4) - (6)]));;}
    break;

  case 543:

/* Line 1464 of yacc.c  */
#line 1622 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (3)]);;}
    break;

  case 544:

/* Line 1464 of yacc.c  */
#line 1625 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]); (yyval) = T_STRING;;}
    break;

  case 545:

/* Line 1464 of yacc.c  */
#line 1626 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]); (yyval) = T_NUM_STRING;;}
    break;

  case 546:

/* Line 1464 of yacc.c  */
#line 1627 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]); (yyval) = T_VARIABLE;;}
    break;

  case 547:

/* Line 1464 of yacc.c  */
#line 1631 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(3) - (4)]),T_ISSET,1);;}
    break;

  case 548:

/* Line 1464 of yacc.c  */
#line 1632 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(3) - (4)]),T_EMPTY,1);;}
    break;

  case 549:

/* Line 1464 of yacc.c  */
#line 1633 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_INCLUDE,1);;}
    break;

  case 550:

/* Line 1464 of yacc.c  */
#line 1634 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_INCLUDE_ONCE,1);;}
    break;

  case 551:

/* Line 1464 of yacc.c  */
#line 1635 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(3) - (4)]),T_EVAL,1);;}
    break;

  case 552:

/* Line 1464 of yacc.c  */
#line 1636 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_REQUIRE,1);;}
    break;

  case 553:

/* Line 1464 of yacc.c  */
#line 1637 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_REQUIRE_ONCE,1);;}
    break;

  case 554:

/* Line 1464 of yacc.c  */
#line 1641 "../../../src/util/parser/hphp.y"
    { _p->onExprListElem((yyval), NULL, (yyvsp[(1) - (1)]));;}
    break;

  case 555:

/* Line 1464 of yacc.c  */
#line 1642 "../../../src/util/parser/hphp.y"
    { _p->onExprListElem((yyval), &(yyvsp[(1) - (3)]), (yyvsp[(3) - (3)]));;}
    break;

  case 556:

/* Line 1464 of yacc.c  */
#line 1647 "../../../src/util/parser/hphp.y"
    { _p->onClassConst((yyval), (yyvsp[(1) - (3)]), (yyvsp[(3) - (3)]), 0);;}
    break;



/* Line 1464 of yacc.c  */
#line 8256 "hphp.tab.cpp"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, _p, YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (&yylloc, _p, yymsg);
	  }
	else
	  {
	    yyerror (&yylloc, _p, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc, _p);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp, _p);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, _p, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, &yylloc, _p);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp, _p);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
  YYSTACK_CLEANUP;
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



/* Line 1684 of yacc.c  */
#line 1649 "../../../src/util/parser/hphp.y"

bool Parser::parse() {
  return yyparse(this) == 0;
}

