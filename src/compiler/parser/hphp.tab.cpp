/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010 Facebook, Inc. (http://www.facebook.com)          |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/
// @generated by HipHop Compiler

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 1

/* Substitute the variable and function names.  */
#define yyparse         Compilerparse
#define yylex           Compilerlex
#define yyerror         Compilererror
#define yylval          Compilerlval
#define yychar          Compilerchar
#define yydebug         Compilerdebug
#define yynerrs         Compilernerrs
#define yylloc          Compilerlloc

/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 1 "../../../src/util/parser/hphp.y"

#include "parser.h"

// macros for bison
#define YYSTYPE HPHP::HPHP_PARSER_NS::Token
#define YYSTYPE_IS_TRIVIAL 1
#define YYLTYPE HPHP::Location
#define YYLTYPE_IS_TRIVIAL 1
#define YYERROR_VERBOSE
#define YYINITDEPTH 500
#define YYLEX_PARAM _p

#ifdef yyerror
#undef yyerror
#endif
#define yyerror _p->fatal

#ifdef YYLLOC_DEFAULT
# undef YYLLOC_DEFAULT
#endif
#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#define YYLLOC_DEFAULT(Current, Rhs, N)                                 \
  do                                                                    \
    if (YYID (N)) {                                                     \
      (Current).first(YYRHSLOC (Rhs, 1));                               \
      (Current).last (YYRHSLOC (Rhs, N));                               \
    } else {                                                            \
      (Current).line0 = (Current).line1 = YYRHSLOC (Rhs, 0).line1;      \
      (Current).char0 = (Current).char1 = YYRHSLOC (Rhs, 0).char1;      \
    }                                                                   \
  while (YYID (0));                                                     \
  _p->setRuleLocation(&Current);

#define YYCOPY(To, From, Count)                  \
  do {                                           \
    YYSIZE_T yyi;                                \
    for (yyi = 0; yyi < (Count); yyi++) {        \
      (To)[yyi] = (From)[yyi];                   \
    }                                            \
    if (From != From ## a) {                     \
      YYSTACK_FREE (From);                       \
    }                                            \
  }                                              \
  while (YYID (0))

#define YYCOPY_RESET(To, From, Count)           \
  do                                            \
    {                                           \
      YYSIZE_T yyi;                             \
      for (yyi = 0; yyi < (Count); yyi++) {     \
        (To)[yyi] = (From)[yyi];                \
        (From)[yyi].reset();                    \
      }                                         \
      if (From != From ## a) {                  \
        YYSTACK_FREE (From);                    \
      }                                         \
    }                                           \
  while (YYID (0))

#define YYTOKEN_RESET(From, Count)              \
  do                                            \
    {                                           \
      YYSIZE_T yyi;                             \
      for (yyi = 0; yyi < (Count); yyi++) {     \
        (From)[yyi].reset();                    \
      }                                         \
      if (From != From ## a) {                  \
        YYSTACK_FREE (From);                    \
      }                                         \
    }                                           \
  while (YYID (0))

# define YYSTACK_RELOCATE_RESET(Stack_alloc, Stack)                     \
  do                                                                    \
    {                                                                   \
      YYSIZE_T yynewbytes;                                              \
      YYCOPY_RESET (&yyptr->Stack_alloc, Stack, yysize);                \
      Stack = &yyptr->Stack_alloc;                                      \
      yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
      yyptr += yynewbytes / sizeof (*yyptr);                            \
    }                                                                   \
  while (YYID (0))

#define YYSTACK_CLEANUP                         \
  YYTOKEN_RESET (yyvs, yystacksize);            \
  if (yyvs != yyvsa) {                          \
    YYSTACK_FREE (yyvs);                        \
  }                                             \
  if (yyls != yylsa) {                          \
    YYSTACK_FREE (yyls);                        \
  }                                             \


// macros for rules
#define BEXP(e...) _p->onBinaryOpExp(e);
#define UEXP(e...) _p->onUnaryOpExp(e);
using namespace HPHP::HPHP_PARSER_NS;

static int yylex(YYSTYPE *token, HPHP::Location *loc, Parser *_p) {
  return _p->scan(token, loc);
}


/* Line 189 of yacc.c  */
#line 184 "hphp.tab.cpp"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     T_REQUIRE_ONCE = 258,
     T_REQUIRE = 259,
     T_EVAL = 260,
     T_INCLUDE_ONCE = 261,
     T_INCLUDE = 262,
     T_LOGICAL_OR = 263,
     T_LOGICAL_XOR = 264,
     T_LOGICAL_AND = 265,
     T_PRINT = 266,
     T_SR_EQUAL = 267,
     T_SL_EQUAL = 268,
     T_XOR_EQUAL = 269,
     T_OR_EQUAL = 270,
     T_AND_EQUAL = 271,
     T_MOD_EQUAL = 272,
     T_CONCAT_EQUAL = 273,
     T_DIV_EQUAL = 274,
     T_MUL_EQUAL = 275,
     T_MINUS_EQUAL = 276,
     T_PLUS_EQUAL = 277,
     T_BOOLEAN_OR = 278,
     T_BOOLEAN_AND = 279,
     T_IS_NOT_IDENTICAL = 280,
     T_IS_IDENTICAL = 281,
     T_IS_NOT_EQUAL = 282,
     T_IS_EQUAL = 283,
     T_IS_GREATER_OR_EQUAL = 284,
     T_IS_SMALLER_OR_EQUAL = 285,
     T_SR = 286,
     T_SL = 287,
     T_INSTANCEOF = 288,
     T_UNSET_CAST = 289,
     T_BOOL_CAST = 290,
     T_OBJECT_CAST = 291,
     T_ARRAY_CAST = 292,
     T_STRING_CAST = 293,
     T_DOUBLE_CAST = 294,
     T_INT_CAST = 295,
     T_DEC = 296,
     T_INC = 297,
     T_CLONE = 298,
     T_NEW = 299,
     T_EXIT = 300,
     T_IF = 301,
     T_ELSEIF = 302,
     T_ELSE = 303,
     T_ENDIF = 304,
     T_LNUMBER = 305,
     T_DNUMBER = 306,
     T_STRING = 307,
     T_STRING_VARNAME = 308,
     T_VARIABLE = 309,
     T_NUM_STRING = 310,
     T_INLINE_HTML = 311,
     T_CHARACTER = 312,
     T_BAD_CHARACTER = 313,
     T_ENCAPSED_AND_WHITESPACE = 314,
     T_CONSTANT_ENCAPSED_STRING = 315,
     T_ECHO = 316,
     T_DO = 317,
     T_WHILE = 318,
     T_ENDWHILE = 319,
     T_FOR = 320,
     T_ENDFOR = 321,
     T_FOREACH = 322,
     T_ENDFOREACH = 323,
     T_DECLARE = 324,
     T_ENDDECLARE = 325,
     T_AS = 326,
     T_SWITCH = 327,
     T_ENDSWITCH = 328,
     T_CASE = 329,
     T_DEFAULT = 330,
     T_BREAK = 331,
     T_CONTINUE = 332,
     T_FUNCTION = 333,
     T_CONST = 334,
     T_RETURN = 335,
     T_TRY = 336,
     T_CATCH = 337,
     T_THROW = 338,
     T_USE = 339,
     T_GLOBAL = 340,
     T_PUBLIC = 341,
     T_PROTECTED = 342,
     T_PRIVATE = 343,
     T_FINAL = 344,
     T_ABSTRACT = 345,
     T_STATIC = 346,
     T_VAR = 347,
     T_UNSET = 348,
     T_ISSET = 349,
     T_EMPTY = 350,
     T_HALT_COMPILER = 351,
     T_CLASS = 352,
     T_INTERFACE = 353,
     T_EXTENDS = 354,
     T_IMPLEMENTS = 355,
     T_OBJECT_OPERATOR = 356,
     T_DOUBLE_ARROW = 357,
     T_LIST = 358,
     T_ARRAY = 359,
     T_CLASS_C = 360,
     T_METHOD_C = 361,
     T_FUNC_C = 362,
     T_LINE = 363,
     T_FILE = 364,
     T_COMMENT = 365,
     T_DOC_COMMENT = 366,
     T_OPEN_TAG = 367,
     T_OPEN_TAG_WITH_ECHO = 368,
     T_CLOSE_TAG = 369,
     T_WHITESPACE = 370,
     T_START_HEREDOC = 371,
     T_END_HEREDOC = 372,
     T_DOLLAR_OPEN_CURLY_BRACES = 373,
     T_CURLY_OPEN = 374,
     T_PAAMAYIM_NEKUDOTAYIM = 375,
     T_HPHP_NOTE = 376,
     T_HPHP_DECLARE = 377
   };
#endif



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef int YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int line0;
  int char0;
  int line1;
  int char1;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


/* Copy the second part of user declarations.  */


/* Line 264 of yacc.c  */
#line 361 "hphp.tab.cpp"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
struct yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (struct yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  3
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   5650

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  152
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  109
/* YYNRULES -- Number of rules.  */
#define YYNRULES  364
/* YYNRULES -- Number of states.  */
#define YYNSTATES  737

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   377

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    48,   149,     2,   147,    47,    31,   150,
     142,   143,    45,    42,     8,    43,    44,    46,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    26,   144,
      36,    13,    37,    25,    51,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    61,     2,   151,    30,     2,   148,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   145,    29,   146,    50,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     9,    10,    11,    12,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    27,    28,
      32,    33,    34,    35,    38,    39,    40,    41,    49,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     8,     9,    11,    13,    15,    18,
      21,    26,    30,    34,    36,    39,    41,    44,    45,    47,
      49,    51,    54,    57,    60,    62,    65,    69,    77,    88,
      94,   102,   112,   118,   121,   125,   128,   132,   135,   139,
     143,   147,   151,   155,   161,   163,   165,   174,   183,   189,
     203,   207,   217,   218,   220,   224,   226,   228,   229,   230,
     241,   242,   251,   252,   260,   262,   265,   268,   271,   272,
     275,   276,   279,   280,   282,   286,   289,   290,   292,   295,
     297,   302,   304,   309,   311,   316,   318,   323,   327,   333,
     337,   342,   347,   353,   359,   364,   365,   367,   369,   376,
     377,   385,   386,   389,   390,   394,   395,   397,   398,   401,
     405,   411,   416,   421,   427,   435,   442,   444,   446,   447,
     449,   450,   452,   454,   457,   461,   465,   470,   474,   476,
     478,   481,   486,   490,   496,   498,   502,   505,   506,   507,
     512,   515,   516,   525,   526,   536,   538,   542,   544,   546,
     549,   551,   553,   556,   558,   560,   562,   564,   566,   568,
     572,   578,   580,   584,   590,   595,   599,   601,   603,   604,
     608,   610,   617,   621,   626,   633,   637,   640,   644,   648,
     652,   656,   660,   664,   668,   672,   676,   680,   684,   687,
     690,   693,   696,   700,   704,   708,   712,   716,   720,   724,
     728,   732,   736,   740,   744,   748,   752,   756,   760,   763,
     766,   769,   772,   776,   780,   784,   788,   792,   796,   800,
     804,   808,   812,   818,   820,   823,   826,   829,   832,   835,
     838,   841,   844,   847,   849,   854,   858,   861,   864,   869,
     874,   881,   888,   890,   892,   894,   896,   898,   900,   901,
     907,   909,   912,   913,   916,   919,   923,   924,   928,   929,
     931,   933,   935,   937,   939,   941,   943,   945,   947,   949,
     952,   955,   960,   962,   966,   968,   970,   972,   974,   978,
     982,   986,   989,   990,   992,   993,   999,  1003,  1007,  1009,
    1011,  1013,  1015,  1017,  1019,  1020,  1021,  1029,  1031,  1034,
    1035,  1039,  1043,  1044,  1046,  1049,  1053,  1055,  1057,  1059,
    1062,  1064,  1069,  1074,  1076,  1078,  1083,  1085,  1086,  1088,
    1090,  1095,  1100,  1102,  1104,  1108,  1110,  1113,  1116,  1120,
    1127,  1128,  1130,  1135,  1138,  1139,  1145,  1149,  1153,  1155,
    1162,  1167,  1172,  1175,  1178,  1181,  1182,  1184,  1189,  1193,
    1197,  1204,  1208,  1210,  1212,  1214,  1219,  1224,  1227,  1230,
    1235,  1238,  1241,  1243,  1247
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     153,     0,    -1,   154,    -1,   154,   155,    -1,    -1,   160,
      -1,   166,    -1,   168,    -1,   140,   166,    -1,   140,   168,
      -1,   115,   142,   143,   144,    -1,   141,   156,   144,    -1,
     156,     8,   157,    -1,   157,    -1,    51,    71,    -1,    71,
      -1,   158,   159,    -1,    -1,   160,    -1,   166,    -1,   168,
      -1,   140,   166,    -1,   140,   168,    -1,   231,   144,    -1,
     161,    -1,   140,   161,    -1,   145,   158,   146,    -1,    65,
     142,   231,   143,   160,   186,   188,    -1,    65,   142,   231,
     143,    26,   158,   187,   189,    68,   144,    -1,    82,   142,
     231,   143,   180,    -1,    81,   160,    82,   142,   231,   143,
     144,    -1,    84,   142,   211,   144,   211,   144,   211,   143,
     178,    -1,    91,   142,   231,   143,   183,    -1,    95,   144,
      -1,    95,   231,   144,    -1,    96,   144,    -1,    96,   231,
     144,    -1,    99,   144,    -1,    99,   213,   144,    -1,    99,
     235,   144,    -1,   104,   195,   144,    -1,   110,   197,   144,
      -1,    80,   210,   144,    -1,   112,   142,   163,   143,   144,
      -1,   144,    -1,    75,    -1,    86,   142,   235,    90,   177,
     176,   143,   179,    -1,    86,   142,   213,    90,   235,   176,
     143,   179,    -1,    88,   142,   182,   143,   181,    -1,   100,
     145,   158,   146,   101,   142,   216,    73,   143,   145,   158,
     146,   162,    -1,   102,   231,   144,    -1,   162,   101,   142,
     216,    73,   143,   145,   158,   146,    -1,    -1,   164,    -1,
     163,     8,   164,    -1,   235,    -1,    31,    -1,    -1,    -1,
      97,   165,    71,   167,   142,   190,   143,   145,   158,   146,
      -1,    -1,   171,    71,   172,   169,   173,   145,   198,   146,
      -1,    -1,   117,    71,   170,   174,   145,   198,   146,    -1,
     116,    -1,   109,   116,    -1,   108,   116,    -1,   118,   216,
      -1,    -1,   119,   175,    -1,    -1,   118,   175,    -1,    -1,
     216,    -1,   175,     8,   216,    -1,   121,   177,    -1,    -1,
     235,    -1,    31,   235,    -1,   160,    -1,    26,   158,    85,
     144,    -1,   160,    -1,    26,   158,    87,   144,    -1,   160,
      -1,    26,   158,    83,   144,    -1,   160,    -1,    26,   158,
      89,   144,    -1,    71,    13,   225,    -1,   182,     8,    71,
      13,   225,    -1,   145,   184,   146,    -1,   145,   144,   184,
     146,    -1,    26,   184,    92,   144,    -1,    26,   144,   184,
      92,   144,    -1,   184,    93,   231,   185,   158,    -1,   184,
      94,   185,   158,    -1,    -1,    26,    -1,   144,    -1,   186,
      66,   142,   231,   143,   160,    -1,    -1,   187,    66,   142,
     231,   143,    26,   158,    -1,    -1,    67,   160,    -1,    -1,
      67,    26,   158,    -1,    -1,   191,    -1,    -1,   192,    73,
      -1,   192,    31,    73,    -1,   192,    31,    73,    13,   225,
      -1,   192,    73,    13,   225,    -1,   191,     8,   192,    73,
      -1,   191,     8,   192,    31,    73,    -1,   191,     8,   192,
      31,    73,    13,   225,    -1,   191,     8,   192,    73,    13,
     225,    -1,    71,    -1,   123,    -1,    -1,   194,    -1,    -1,
     213,    -1,   235,    -1,    31,   233,    -1,   194,     8,   213,
      -1,   194,     8,   235,    -1,   194,     8,    31,   233,    -1,
     195,     8,   196,    -1,   196,    -1,    73,    -1,   147,   232,
      -1,   147,   145,   231,   146,    -1,   197,     8,    73,    -1,
     197,     8,    73,    13,   225,    -1,    73,    -1,    73,    13,
     225,    -1,   198,   199,    -1,    -1,    -1,   204,   200,   208,
     144,    -1,   209,   144,    -1,    -1,   205,   165,    71,   142,
     201,   190,   143,   203,    -1,    -1,   140,   205,   165,    71,
     142,   202,   190,   143,   203,    -1,   144,    -1,   145,   158,
     146,    -1,   206,    -1,   111,    -1,   206,    97,    -1,    97,
      -1,   207,    -1,   206,   207,    -1,   105,    -1,   106,    -1,
     107,    -1,   110,    -1,   109,    -1,   108,    -1,   208,     8,
      73,    -1,   208,     8,    73,    13,   225,    -1,    73,    -1,
      73,    13,   225,    -1,   209,     8,    71,    13,   225,    -1,
      98,    71,    13,   225,    -1,   210,     8,   231,    -1,   231,
      -1,   212,    -1,    -1,   212,     8,   231,    -1,   231,    -1,
     122,   142,   252,   143,    13,   231,    -1,   235,    13,   231,
      -1,   235,    13,    31,   235,    -1,   235,    13,    31,    63,
     217,   223,    -1,    63,   217,   223,    -1,    62,   231,    -1,
     235,    24,   231,    -1,   235,    23,   231,    -1,   235,    22,
     231,    -1,   235,    21,   231,    -1,   235,    20,   231,    -1,
     235,    19,   231,    -1,   235,    18,   231,    -1,   235,    17,
     231,    -1,   235,    16,   231,    -1,   235,    15,   231,    -1,
     235,    14,   231,    -1,   234,    60,    -1,    60,   234,    -1,
     234,    59,    -1,    59,   234,    -1,   231,    27,   231,    -1,
     231,    28,   231,    -1,   231,     9,   231,    -1,   231,    11,
     231,    -1,   231,    10,   231,    -1,   231,    29,   231,    -1,
     231,    31,   231,    -1,   231,    30,   231,    -1,   231,    44,
     231,    -1,   231,    42,   231,    -1,   231,    43,   231,    -1,
     231,    45,   231,    -1,   231,    46,   231,    -1,   231,    47,
     231,    -1,   231,    41,   231,    -1,   231,    40,   231,    -1,
      42,   231,    -1,    43,   231,    -1,    48,   231,    -1,    50,
     231,    -1,   231,    33,   231,    -1,   231,    32,   231,    -1,
     231,    35,   231,    -1,   231,    34,   231,    -1,   231,    36,
     231,    -1,   231,    39,   231,    -1,   231,    37,   231,    -1,
     231,    38,   231,    -1,   231,    49,   217,    -1,   142,   231,
     143,    -1,   231,    25,   231,    26,   231,    -1,   258,    -1,
      58,   231,    -1,    57,   231,    -1,    56,   231,    -1,    55,
     231,    -1,    54,   231,    -1,    53,   231,    -1,    52,   231,
      -1,    64,   222,    -1,    51,   231,    -1,   227,    -1,   123,
     142,   253,   143,    -1,   148,   255,   148,    -1,    12,   231,
      -1,   140,   231,    -1,    71,   142,   193,   143,    -1,   241,
     142,   193,   143,    -1,   215,   139,    71,   142,   193,   143,
      -1,   215,   139,   241,   142,   193,   143,    -1,    71,    -1,
     110,    -1,   245,    -1,    71,    -1,    71,    -1,   218,    -1,
      -1,   244,   219,   120,   248,   220,    -1,   244,    -1,   220,
     221,    -1,    -1,   120,   248,    -1,   142,   143,    -1,   142,
     231,   143,    -1,    -1,   142,   193,   143,    -1,    -1,    69,
      -1,    70,    -1,    79,    -1,   127,    -1,   128,    -1,   124,
      -1,   125,    -1,   126,    -1,   224,    -1,    71,    -1,    42,
     225,    -1,    43,   225,    -1,   123,   142,   228,   143,    -1,
     226,    -1,    71,   139,    71,    -1,    71,    -1,    72,    -1,
     260,    -1,   224,    -1,   149,   255,   149,    -1,   150,   255,
     150,    -1,   135,   255,   136,    -1,   230,   229,    -1,    -1,
       8,    -1,    -1,   230,     8,   225,   121,   225,    -1,   230,
       8,   225,    -1,   225,   121,   225,    -1,   225,    -1,   232,
      -1,   213,    -1,   235,    -1,   235,    -1,   235,    -1,    -1,
      -1,   243,   236,   120,   248,   240,   237,   238,    -1,   243,
      -1,   238,   239,    -1,    -1,   120,   248,   240,    -1,   142,
     193,   143,    -1,    -1,   245,    -1,   251,   245,    -1,   215,
     139,   241,    -1,   244,    -1,   214,    -1,   245,    -1,   251,
     245,    -1,   242,    -1,   245,    61,   247,   151,    -1,   245,
     145,   231,   146,    -1,   246,    -1,    73,    -1,   147,   145,
     231,   146,    -1,   231,    -1,    -1,   249,    -1,   241,    -1,
     249,    61,   247,   151,    -1,   249,   145,   231,   146,    -1,
     250,    -1,    71,    -1,   145,   231,   146,    -1,   147,    -1,
     251,   147,    -1,   252,     8,    -1,   252,     8,   235,    -1,
     252,     8,   122,   142,   252,   143,    -1,    -1,   235,    -1,
     122,   142,   252,   143,    -1,   254,   229,    -1,    -1,   254,
       8,   231,   121,   231,    -1,   254,     8,   231,    -1,   231,
     121,   231,    -1,   231,    -1,   254,     8,   231,   121,    31,
     233,    -1,   254,     8,    31,   233,    -1,   231,   121,    31,
     233,    -1,    31,   233,    -1,   255,   256,    -1,   255,    78,
      -1,    -1,    73,    -1,    73,    61,   257,   151,    -1,    73,
     120,    71,    -1,   137,   231,   146,    -1,   137,    72,    61,
     231,   151,   146,    -1,   138,   235,   146,    -1,    71,    -1,
      74,    -1,    73,    -1,   113,   142,   259,   143,    -1,   114,
     142,   235,   143,    -1,     7,   231,    -1,     6,   231,    -1,
       5,   142,   231,   143,    -1,     4,   231,    -1,     3,   231,
      -1,   235,    -1,   259,     8,   235,    -1,   215,   139,    71,
      -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   211,   211,   215,   217,   220,   221,   222,   223,   225,
     227,   228,   232,   234,   237,   238,   241,   243,   246,   247,
     248,   249,   251,   255,   256,   257,   260,   262,   267,   273,
     276,   279,   283,   286,   287,   289,   290,   292,   293,   294,
     296,   297,   298,   299,   301,   303,   305,   310,   315,   318,
     325,   329,   334,   338,   339,   342,   346,   347,   351,   351,
     358,   357,   362,   362,   367,   368,   369,   372,   374,   377,
     378,   381,   382,   385,   386,   391,   392,   395,   396,   400,
     401,   405,   406,   410,   411,   415,   416,   421,   422,   427,
     428,   429,   430,   433,   436,   438,   441,   442,   446,   448,
     451,   454,   457,   458,   461,   462,   466,   467,   470,   471,
     472,   474,   476,   478,   480,   483,   488,   489,   490,   494,
     495,   498,   499,   500,   501,   503,   505,   510,   511,   514,
     515,   516,   520,   521,   523,   524,   528,   530,   533,   533,
     535,   537,   536,   540,   539,   545,   546,   550,   551,   554,
     556,   559,   560,   564,   565,   566,   567,   568,   569,   572,
     574,   576,   577,   580,   582,   586,   587,   591,   592,   595,
     596,   600,   602,   603,   604,   607,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   652,   653,
     655,   657,   658,   659,   660,   661,   662,   663,   664,   665,
     666,   667,   668,   669,   670,   671,   672,   673,   677,   679,
     681,   685,   691,   692,   693,   697,   700,   701,   704,   704,
     707,   710,   712,   715,   719,   720,   721,   725,   727,   731,
     732,   733,   735,   736,   737,   738,   739,   742,   743,   744,
     745,   746,   748,   751,   755,   756,   757,   758,   759,   760,
     761,   766,   768,   771,   772,   775,   778,   780,   782,   786,
     787,   790,   793,   796,   799,   801,   799,   803,   807,   809,
     812,   816,   818,   822,   823,   827,   833,   834,   837,   838,
     840,   843,   845,   846,   849,   850,   853,   854,   858,   859,
     862,   863,   864,   867,   868,   872,   873,   877,   878,   879,
     881,   882,   883,   887,   889,   892,   894,   895,   896,   897,
     900,   902,   903,   907,   908,   910,   913,   914,   916,   918,
     920,   922,   925,   926,   927,   931,   932,   933,   934,   935,
     936,   937,   941,   942,   946
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "T_REQUIRE_ONCE", "T_REQUIRE", "T_EVAL",
  "T_INCLUDE_ONCE", "T_INCLUDE", "','", "T_LOGICAL_OR", "T_LOGICAL_XOR",
  "T_LOGICAL_AND", "T_PRINT", "'='", "T_SR_EQUAL", "T_SL_EQUAL",
  "T_XOR_EQUAL", "T_OR_EQUAL", "T_AND_EQUAL", "T_MOD_EQUAL",
  "T_CONCAT_EQUAL", "T_DIV_EQUAL", "T_MUL_EQUAL", "T_MINUS_EQUAL",
  "T_PLUS_EQUAL", "'?'", "':'", "T_BOOLEAN_OR", "T_BOOLEAN_AND", "'|'",
  "'^'", "'&'", "T_IS_NOT_IDENTICAL", "T_IS_IDENTICAL", "T_IS_NOT_EQUAL",
  "T_IS_EQUAL", "'<'", "'>'", "T_IS_GREATER_OR_EQUAL",
  "T_IS_SMALLER_OR_EQUAL", "T_SR", "T_SL", "'+'", "'-'", "'.'", "'*'",
  "'/'", "'%'", "'!'", "T_INSTANCEOF", "'~'", "'@'", "T_UNSET_CAST",
  "T_BOOL_CAST", "T_OBJECT_CAST", "T_ARRAY_CAST", "T_STRING_CAST",
  "T_DOUBLE_CAST", "T_INT_CAST", "T_DEC", "T_INC", "'['", "T_CLONE",
  "T_NEW", "T_EXIT", "T_IF", "T_ELSEIF", "T_ELSE", "T_ENDIF", "T_LNUMBER",
  "T_DNUMBER", "T_STRING", "T_STRING_VARNAME", "T_VARIABLE",
  "T_NUM_STRING", "T_INLINE_HTML", "T_CHARACTER", "T_BAD_CHARACTER",
  "T_ENCAPSED_AND_WHITESPACE", "T_CONSTANT_ENCAPSED_STRING", "T_ECHO",
  "T_DO", "T_WHILE", "T_ENDWHILE", "T_FOR", "T_ENDFOR", "T_FOREACH",
  "T_ENDFOREACH", "T_DECLARE", "T_ENDDECLARE", "T_AS", "T_SWITCH",
  "T_ENDSWITCH", "T_CASE", "T_DEFAULT", "T_BREAK", "T_CONTINUE",
  "T_FUNCTION", "T_CONST", "T_RETURN", "T_TRY", "T_CATCH", "T_THROW",
  "T_USE", "T_GLOBAL", "T_PUBLIC", "T_PROTECTED", "T_PRIVATE", "T_FINAL",
  "T_ABSTRACT", "T_STATIC", "T_VAR", "T_UNSET", "T_ISSET", "T_EMPTY",
  "T_HALT_COMPILER", "T_CLASS", "T_INTERFACE", "T_EXTENDS", "T_IMPLEMENTS",
  "T_OBJECT_OPERATOR", "T_DOUBLE_ARROW", "T_LIST", "T_ARRAY", "T_CLASS_C",
  "T_METHOD_C", "T_FUNC_C", "T_LINE", "T_FILE", "T_COMMENT",
  "T_DOC_COMMENT", "T_OPEN_TAG", "T_OPEN_TAG_WITH_ECHO", "T_CLOSE_TAG",
  "T_WHITESPACE", "T_START_HEREDOC", "T_END_HEREDOC",
  "T_DOLLAR_OPEN_CURLY_BRACES", "T_CURLY_OPEN", "T_PAAMAYIM_NEKUDOTAYIM",
  "T_HPHP_NOTE", "T_HPHP_DECLARE", "'('", "')'", "';'", "'{'", "'}'",
  "'$'", "'`'", "'\"'", "'\\''", "']'", "$accept", "start",
  "top_statement_list", "top_statement", "hphp_declare_list",
  "hphp_declare", "inner_statement_list", "inner_statement", "statement",
  "statement_without_expr", "additional_catches", "unset_variables",
  "unset_variable", "is_reference", "function_declaration_statement",
  "$@1", "class_declaration_statement", "$@2", "$@3", "class_entry_type",
  "extends_from", "implements_list", "interface_extends_list",
  "interface_list", "foreach_optional_arg", "foreach_variable",
  "for_statement", "foreach_statement", "while_statement",
  "declare_statement", "declare_list", "switch_case_list", "case_list",
  "case_separator", "elseif_list", "new_elseif_list", "else_single",
  "new_else_single", "parameter_list", "non_empty_parameter_list",
  "optional_class_type", "function_call_parameter_list",
  "non_empty_fcall_parameter_list", "global_var_list", "global_var",
  "static_var_list", "class_statement_list", "class_statement", "$@4",
  "$@5", "$@6", "method_body", "variable_modifiers", "method_modifiers",
  "non_empty_member_modifiers", "member_modifier",
  "class_variable_declaration", "class_constant_declaration",
  "echo_expr_list", "for_expr", "non_empty_for_expr",
  "expr_without_variable", "function_call", "static_class_name",
  "fully_qualified_class_name", "class_name_reference",
  "dynamic_class_name_reference", "$@7", "object_properties",
  "dynamic_class_name_variable_prop", "exit_expr", "ctor_arguments",
  "common_scalar", "static_scalar", "static_class_constant", "scalar",
  "static_array_pair_list", "possible_comma",
  "non_empty_static_array_pair_list", "expr", "r_variable", "w_variable",
  "rw_variable", "variable", "$@8", "$@9", "variable_properties",
  "variable_property", "method_or_not", "variable_without_objects",
  "static_member", "base_variable_with_function_calls", "base_variable",
  "reference_variable", "compound_variable", "dim_offset",
  "object_property", "object_dim_list", "variable_name",
  "simple_indirect_reference", "assignment_list", "array_pair_list",
  "non_empty_array_pair_list", "encaps_list", "encaps_var",
  "encaps_var_offset", "internal_functions", "isset_variables",
  "class_constant", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,    44,   263,
     264,   265,   266,    61,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,    63,    58,   278,   279,   124,
      94,    38,   280,   281,   282,   283,    60,    62,   284,   285,
     286,   287,    43,    45,    46,    42,    47,    37,    33,   288,
     126,    64,   289,   290,   291,   292,   293,   294,   295,   296,
     297,    91,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,    40,    41,    59,   123,   125,    36,    96,    34,
      39,    93
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   152,   153,   154,   154,   155,   155,   155,   155,   155,
     155,   155,   156,   156,   157,   157,   158,   158,   159,   159,
     159,   159,   159,   160,   160,   160,   161,   161,   161,   161,
     161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
     161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
     161,   162,   162,   163,   163,   164,   165,   165,   167,   166,
     169,   168,   170,   168,   171,   171,   171,   172,   172,   173,
     173,   174,   174,   175,   175,   176,   176,   177,   177,   178,
     178,   179,   179,   180,   180,   181,   181,   182,   182,   183,
     183,   183,   183,   184,   184,   184,   185,   185,   186,   186,
     187,   187,   188,   188,   189,   189,   190,   190,   191,   191,
     191,   191,   191,   191,   191,   191,   192,   192,   192,   193,
     193,   194,   194,   194,   194,   194,   194,   195,   195,   196,
     196,   196,   197,   197,   197,   197,   198,   198,   200,   199,
     199,   201,   199,   202,   199,   203,   203,   204,   204,   205,
     205,   206,   206,   207,   207,   207,   207,   207,   207,   208,
     208,   208,   208,   209,   209,   210,   210,   211,   211,   212,
     212,   213,   213,   213,   213,   213,   213,   213,   213,   213,
     213,   213,   213,   213,   213,   213,   213,   213,   213,   213,
     213,   213,   213,   213,   213,   213,   213,   213,   213,   213,
     213,   213,   213,   213,   213,   213,   213,   213,   213,   213,
     213,   213,   213,   213,   213,   213,   213,   213,   213,   213,
     213,   213,   213,   213,   213,   213,   213,   213,   213,   213,
     213,   213,   213,   213,   213,   213,   213,   213,   214,   214,
     214,   214,   215,   215,   215,   216,   217,   217,   219,   218,
     218,   220,   220,   221,   222,   222,   222,   223,   223,   224,
     224,   224,   224,   224,   224,   224,   224,   225,   225,   225,
     225,   225,   225,   226,   227,   227,   227,   227,   227,   227,
     227,   228,   228,   229,   229,   230,   230,   230,   230,   231,
     231,   232,   233,   234,   236,   237,   235,   235,   238,   238,
     239,   240,   240,   241,   241,   242,   243,   243,   244,   244,
     244,   245,   245,   245,   246,   246,   247,   247,   248,   248,
     249,   249,   249,   250,   250,   251,   251,   252,   252,   252,
     252,   252,   252,   253,   253,   254,   254,   254,   254,   254,
     254,   254,   254,   255,   255,   255,   256,   256,   256,   256,
     256,   256,   257,   257,   257,   258,   258,   258,   258,   258,
     258,   258,   259,   259,   260
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     2,     0,     1,     1,     1,     2,     2,
       4,     3,     3,     1,     2,     1,     2,     0,     1,     1,
       1,     2,     2,     2,     1,     2,     3,     7,    10,     5,
       7,     9,     5,     2,     3,     2,     3,     2,     3,     3,
       3,     3,     3,     5,     1,     1,     8,     8,     5,    13,
       3,     9,     0,     1,     3,     1,     1,     0,     0,    10,
       0,     8,     0,     7,     1,     2,     2,     2,     0,     2,
       0,     2,     0,     1,     3,     2,     0,     1,     2,     1,
       4,     1,     4,     1,     4,     1,     4,     3,     5,     3,
       4,     4,     5,     5,     4,     0,     1,     1,     6,     0,
       7,     0,     2,     0,     3,     0,     1,     0,     2,     3,
       5,     4,     4,     5,     7,     6,     1,     1,     0,     1,
       0,     1,     1,     2,     3,     3,     4,     3,     1,     1,
       2,     4,     3,     5,     1,     3,     2,     0,     0,     4,
       2,     0,     8,     0,     9,     1,     3,     1,     1,     2,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     3,
       5,     1,     3,     5,     4,     3,     1,     1,     0,     3,
       1,     6,     3,     4,     6,     3,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     5,     1,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     1,     4,     3,     2,     2,     4,     4,
       6,     6,     1,     1,     1,     1,     1,     1,     0,     5,
       1,     2,     0,     2,     2,     3,     0,     3,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     4,     1,     3,     1,     1,     1,     1,     3,     3,
       3,     2,     0,     1,     0,     5,     3,     3,     1,     1,
       1,     1,     1,     1,     0,     0,     7,     1,     2,     0,
       3,     3,     0,     1,     2,     3,     1,     1,     1,     2,
       1,     4,     4,     1,     1,     4,     1,     0,     1,     1,
       4,     4,     1,     1,     3,     1,     2,     2,     3,     6,
       0,     1,     4,     2,     0,     5,     3,     3,     1,     6,
       4,     4,     2,     2,     2,     0,     1,     4,     3,     3,
       6,     3,     1,     1,     1,     4,     4,     2,     2,     4,
       2,     2,     1,     3,     3
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       4,     0,     2,     1,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   256,     0,   259,   260,
     274,   275,   314,    45,   261,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    57,     0,     0,     0,     0,     0,
       0,   243,     0,     0,     0,     0,    64,     0,     0,     0,
     264,   265,   266,   262,   263,   345,     0,     0,     0,    44,
      17,   325,   345,   345,   345,     3,     5,    24,     6,     7,
       0,   290,   307,     0,   277,   233,     0,   289,     0,   291,
       0,   310,   297,   306,   308,   313,     0,   223,   276,   243,
       0,   361,   360,     0,   358,   357,   236,   208,   209,   210,
     211,   232,   230,   229,   228,   227,   226,   225,   224,   242,
       0,   191,   293,   189,   176,   246,     0,   258,   247,   250,
     308,     0,     0,   231,     0,   120,     0,   166,     0,     0,
       0,   168,     0,     0,     0,    33,     0,    35,     0,    56,
       0,    37,   290,     0,   291,    17,     0,   129,     0,     0,
     128,    66,    65,   134,     0,     0,     0,     0,     0,    62,
     330,   334,     0,    25,     8,     9,   237,     0,    15,     0,
      13,     0,     0,     0,     0,     0,     0,    68,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    23,   190,   188,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,     0,   317,     0,   326,   309,     0,     0,     0,   120,
     175,     0,   309,   254,     0,     0,     0,     0,   119,   290,
     291,     0,    42,     0,     0,     0,   167,   170,   290,   291,
       0,     0,     0,    34,    36,    58,    38,    39,     0,    50,
       0,   130,   291,     0,    40,     0,     0,    41,     0,    53,
      55,   362,     0,     0,     0,    72,     0,   331,     0,     0,
     338,     0,   284,   346,   344,   280,     0,     0,   343,    14,
       0,    11,   221,     0,    26,    16,    18,    19,    20,     0,
     235,   278,   279,     0,    60,   364,   305,   303,     0,   194,
     196,   195,     0,   192,   193,   197,   199,   198,   213,   212,
     215,   214,   216,   218,   219,   217,   207,   206,   201,   202,
     200,   203,   204,   205,   220,     0,   172,   187,   186,   185,
     184,   183,   182,   181,   180,   179,   178,   177,     0,     0,
     316,     0,     0,   359,     0,   305,     0,     0,   255,     0,
     123,   292,   238,     0,   165,     0,     0,   168,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   127,     0,
       0,   268,     0,   267,   135,   272,   132,     0,     0,     0,
     355,   356,    10,     0,     0,   330,   327,     0,   342,     0,
     234,   283,   333,     0,     0,   275,     0,     0,    12,    21,
      22,   315,   245,    67,    70,   120,   120,   304,     0,     0,
     173,   239,   323,     0,   319,   302,   318,   322,   311,   312,
     257,   252,    17,    99,     0,   290,   291,     0,    17,    83,
      29,     0,   169,    76,     0,    76,    77,    87,     0,    17,
      85,    48,    95,    95,    32,   118,     0,   131,   269,   270,
       0,   282,     0,    54,    43,   363,    71,    73,   137,     0,
       0,   328,     0,     0,   337,     0,   336,   352,   354,   353,
       0,   348,     0,   349,   351,     0,     0,     0,     0,   222,
     258,     0,   120,   295,   317,     0,   249,   101,   103,   126,
       0,     0,   168,     0,     0,    78,     0,     0,     0,    95,
       0,    95,     0,   116,   117,     0,   106,     0,     0,   273,
     288,     0,   284,   133,     0,     0,   332,   330,   171,   341,
     340,     0,   347,     0,    69,   137,   240,   241,   174,   324,
       0,   299,     0,     0,     0,   251,   105,     0,     0,    27,
      30,     0,     0,    75,     0,     0,    88,     0,     0,     0,
       0,     0,     0,    89,     0,   118,     0,   108,     0,     0,
     271,   283,   281,    74,   150,     0,   153,   154,   155,   158,
     157,   156,   148,     0,    63,   136,   138,    57,   147,   151,
       0,     0,     0,   335,     0,     0,   301,   296,   320,   321,
     253,     0,     0,     0,     0,   102,    84,     0,    17,    81,
      47,    46,    86,     0,    91,     0,    96,    97,    17,    90,
      17,     0,   109,     0,     0,   287,   286,     0,    57,     0,
       0,     0,   149,   152,     0,   140,   329,   339,   350,    61,
       0,   298,     0,    17,     0,     0,    17,    79,    31,     0,
      92,    17,    94,     0,     0,   112,     0,   111,     0,     0,
       0,     0,   161,     0,     0,     0,   302,     0,   104,    28,
       0,     0,     0,    93,    59,   113,     0,   110,    17,   285,
     164,     0,     0,     0,   139,   141,     0,   300,     0,    98,
       0,    82,     0,   115,     0,   143,   162,   159,   118,   163,
      17,    80,   114,    52,   118,     0,     0,   100,    49,     0,
     160,     0,     0,     0,   145,    17,   142,     0,   144,     0,
       0,   146,     0,     0,    17,     0,    51
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     1,     2,    75,   179,   180,   182,   305,   306,    77,
     718,   278,   279,   150,   307,   385,   308,   424,   285,    80,
     314,   496,   404,   476,   514,   455,   658,   620,   450,   461,
     261,   464,   520,   628,   508,   556,   559,   613,   525,   526,
     527,   247,   248,   159,   160,   164,   535,   595,   640,   708,
     714,   726,   596,   597,   598,   599,   673,   600,   136,   255,
     256,    81,    82,    83,   477,   127,   128,   241,   506,   555,
     133,   240,    84,   394,   395,    85,   531,   412,   532,    86,
      87,   370,    88,    89,   231,   551,   607,   651,   503,    90,
      91,    92,    93,    94,    95,   361,   435,   436,   437,    96,
     288,   291,   292,   172,   298,   490,    97,   282,    98
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -648
static const yytype_int16 yypact[] =
{
    -648,    63,   708,  -648,  4636,  4636,   -58,  4636,  4636,  4636,
    4636,  4636,  4636,  4636,  4636,  4636,  4636,  4636,  4636,  4636,
    4636,  4636,    20,    20,  4636,   245,   -52,   -40,  -648,  -648,
     -50,  -648,  -648,  -648,  -648,  4636,  2998,   -24,    34,    37,
      42,    44,  3250,  3376,   137,  3502,    43,  4636,   -23,    54,
     143,    72,   123,   126,   132,   155,  -648,   208,   162,   167,
    -648,  -648,  -648,  -648,  -648,  -648,  2116,    27,  4636,  -648,
    -648,   169,  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,
     214,  -648,  -648,   186,  -648,  -648,  4314,  -648,   190,  1125,
     196,  -648,   220,  -648,    13,  -648,   114,  -648,  -648,  -648,
    4636,  5360,  5360,  4636,  5360,  5360,  5460,  -648,  -648,   297,
    -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,   206,
     211,  -648,  -648,  -648,  -648,   219,   229,   224,  -648,   232,
     103,   114,  3628,  -648,  4636,  3754,    17,  5360,  3124,   274,
    4636,  4636,  4636,   305,  4636,  -648,  4440,  -648,  4566,  -648,
     309,  -648,   228,  5360,   384,  -648,  4692,  -648,   198,    21,
    -648,  -648,  -648,   377,    25,    20,    20,    20,   284,  -648,
     217,  3880,   316,  -648,  -648,  -648,  -648,   359,  -648,    31,
    -648,  4818,   856,  4636,   184,   216,   199,   314,    12,  4636,
    4636,  4636,  4636,  4636,  4636,  4636,  4636,  4636,  4636,  4636,
    4636,  4636,  4636,  4636,  4636,  4636,  4636,  4636,  4636,  4636,
    4636,  4636,  4636,  4636,   245,  -648,  -648,  -648,  4006,  4636,
    4636,  4636,  4636,  4636,  4636,  4636,  4636,  4636,  4636,  4636,
    3754,   318,  4636,  4636,   169,     1,  4889,   244,   200,  3754,
    -648,   326,     3,  -648,  4935,  4976,    20,   293,   439,    -6,
      91,  4636,  -648,   306,  5017,   307,   442,  5360,   366,   999,
     444,    30,  5058,  -648,  -648,  -648,  -648,  -648,   982,  -648,
    4636,  -648,  -648,   -23,  -648,   292,   387,  -648,    38,  -648,
    -648,  -648,    88,   319,   334,   345,   328,  -648,   111,    20,
    5222,   336,   472,    -3,  -648,  -648,  4762,    20,  -648,  -648,
      27,  -648,  -648,  2116,  -648,  -648,  -648,  -648,  -648,  3433,
    -648,  -648,  -648,   410,  -648,   341,   342,     3,   114,  5400,
    5437,  5460,  5319,  5505,  5526,  5546,  5565,  5583,  5601,  5601,
    5601,  5601,  1223,  1223,  1223,  1223,   529,   529,   246,   246,
     246,   297,   297,   297,  -648,     6,  5460,  5460,  5460,  5460,
    5460,  5460,  5460,  5460,  5460,  5460,  5460,  5460,   348,   -16,
    5360,   337,  3558,  -648,   341,  -648,   350,   -16,  -648,  2368,
    -648,  -648,  -648,  4132,  5360,  4636,  2494,  4636,  4636,    20,
     210,   292,   419,  2620,   -20,   352,   394,  3684,  -648,   292,
     292,   357,   355,  -648,  -648,  -648,   487,    20,   370,    20,
    -648,  -648,  -648,   410,   358,   217,   339,   504,  -648,  4258,
    -648,  4384,  -648,   213,   447,   460,  3810,   376,  -648,  -648,
    -648,  -648,  -648,  -648,   404,  3754,  3754,     3,  4636,   245,
    -648,  -648,  -648,  4636,  -648,   383,    15,  -648,  -648,  -648,
    -648,  -648,  -648,  -648,    20,   112,   864,  5099,  -648,  -648,
    -648,   382,  5360,   408,    20,   408,  -648,  -648,   517,  -648,
    -648,  -648,   390,   391,  -648,     4,   396,  -648,  -648,  -648,
     465,   292,   292,  -648,  -648,  -648,   532,  -648,  -648,   113,
     400,  -648,  4636,    20,  5360,    20,  5263,  -648,  -648,  -648,
     392,  -648,  4636,  -648,  -648,   410,   399,   405,   407,  5483,
     224,  3936,  3754,  -648,  4636,  4636,   432,  2242,   262,  -648,
     409,  1108,  4636,   210,   411,  -648,   414,   292,  1234,  -648,
     -21,  -648,   -13,  -648,  -648,   415,   547,   105,   410,  -648,
     440,   417,   556,  -648,   410,   585,  -648,   217,  5460,  -648,
    -648,  4510,  -648,  3306,   532,  -648,  -648,  -648,  -648,  -648,
     424,  -648,   418,  4062,   -16,  -648,   347,   426,  2998,  -648,
    -648,   433,   436,  -648,  2746,  2746,  -648,   438,   290,   443,
    4636,    22,    -7,  -648,   441,   -35,   515,   576,   518,   292,
    -648,   292,  -648,  -648,  -648,   521,  -648,  -648,  -648,  -648,
    -648,  -648,  -648,   367,  -648,  -648,  -648,   137,   401,  -648,
      33,   115,    20,  5360,   449,   629,  -648,   473,  -648,  -648,
    -648,   455,   573,   533,  4636,  -648,  -648,  2872,  -648,  -648,
    -648,  -648,  -648,   456,  -648,  4188,  -648,  -648,  -648,  -648,
    -648,   207,   589,   292,   461,  -648,   485,   594,   137,   401,
     535,   538,  -648,  -648,   539,  -648,  -648,  -648,  -648,  -648,
     -16,  -648,  4636,  -648,   467,  5140,  -648,  -648,  -648,  1360,
    -648,  -648,  2242,  1486,   540,   599,   292,  -648,   471,   292,
     292,   546,   606,    36,   478,   611,   383,  5181,  2242,  -648,
    2998,  1612,   482,  2242,  -648,   614,   292,  -648,  -648,  -648,
    -648,   486,   292,   557,  -648,  -648,   292,  -648,   603,  -648,
     488,  -648,   292,  -648,  1738,  -648,  -648,   618,     4,  -648,
    -648,  -648,  -648,  -648,     4,   292,   490,  2242,   534,   491,
    -648,   277,   495,   277,  -648,  -648,  -648,   410,  -648,  1864,
     568,  -648,   500,   502,  -648,  1990,  -648
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -648,  -648,  -648,  -648,  -648,   349,  -129,  -648,    -2,   -43,
    -648,  -648,   248,  -541,    -1,  -648,    28,  -648,  -648,  -648,
    -648,  -648,  -648,   156,   195,   142,  -648,    92,  -648,  -648,
    -648,  -648,  -393,    35,  -648,  -648,  -648,  -648,  -647,  -648,
      83,  -190,  -648,  -648,   386,  -648,   116,  -648,  -648,  -648,
    -648,   -60,  -648,    71,    75,  -538,  -648,  -648,  -648,  -340,
    -648,    14,  -648,   301,  -282,  -182,  -648,  -648,  -648,  -648,
    -648,   165,   -30,   -48,  -648,  -648,  -648,   138,  -648,     0,
     511,  -207,   412,   140,  -648,  -648,  -648,  -648,    -5,  -185,
    -648,  -648,     2,    26,  -648,   170,  -339,  -648,  -648,    29,
    -383,  -648,  -648,   227,  -648,  -648,  -648,  -648,  -648
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -305
static const yytype_int16 yytable[] =
{
      76,    78,  -121,   316,   101,   102,   462,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   479,   173,   124,   251,   268,   129,   441,   273,
      79,   423,   344,   276,   139,   137,   523,   451,   382,   300,
     358,   644,   146,   148,   693,   153,   397,   156,   626,   366,
     157,   130,   316,   365,   131,   432,   641,    32,   413,   152,
     643,   716,   232,     3,   232,   174,   176,   719,   181,   429,
     522,   569,   570,   571,   232,   523,   504,   119,   177,    32,
     570,   571,   408,   315,   103,    32,   570,   571,   524,  -242,
     132,   119,   135,    32,   175,   173,   399,   671,   178,  -122,
     176,   643,   134,   236,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,    99,   414,   140,   406,
    -124,   406,   235,   406,   158,   463,   568,   524,   572,   433,
      99,    71,   244,   573,   245,   153,   576,  -121,   176,   629,
     254,   257,   153,  -304,   262,   163,   233,  -107,   233,   249,
    -293,  -293,  -244,    71,   601,  -303,   258,   242,   233,    71,
     505,   252,   122,   122,   232,   274,   627,    71,   149,   277,
     161,   290,   562,   383,   434,   301,   141,   645,   577,   142,
     694,   398,   434,   309,   143,   154,   144,    32,   155,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   317,   610,   129,   318,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     153,   400,   360,   362,  -122,   497,   498,   509,   664,   153,
     130,   454,  -244,   131,   249,   393,   578,   500,   233,   216,
     217,   374,   583,   249,   407,  -124,   536,   293,   646,   162,
     173,   234,   294,   317,   317,   165,   318,   318,   166,   119,
     387,    32,   293,    32,   167,   250,   539,   294,   540,   169,
     665,   119,   259,    32,   487,   187,   488,   489,   119,   293,
      32,   211,   212,   213,   294,   214,   416,   168,   272,   184,
     185,   186,   419,   176,   170,   280,   281,   283,    99,   171,
     287,   676,   550,   507,   183,   364,   125,    32,    32,   511,
      99,   296,   297,   120,   120,   188,   126,    99,   557,   558,
     518,   420,   310,   457,   389,   390,   296,   297,   230,   286,
    -294,   468,   469,   270,   427,    71,   214,    71,   135,   312,
     237,   393,  -248,   296,   297,    99,   253,    71,  -242,   393,
     393,    28,    29,   391,    71,   311,   239,   443,   238,   434,
     250,    34,   266,   153,   449,   447,   260,   257,   452,   250,
     265,   460,   623,   570,   571,   317,   371,   445,   318,   293,
     275,    71,    71,   317,   294,   647,   318,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   484,
     119,   486,    32,   611,   612,   392,    60,    61,    62,    63,
      64,   724,   725,   530,   533,   153,   153,   284,   499,   371,
     299,   129,   313,   501,   121,   123,   372,   417,   359,   249,
     249,   393,   393,  -293,  -293,   730,   367,   373,   375,    99,
     378,   377,   295,   296,   297,   130,   379,   381,   131,   120,
     396,   480,   401,   403,   584,   434,   120,   120,   120,   566,
     405,   120,   586,   587,   588,   589,   590,   591,   402,   410,
     411,   422,   538,   425,   426,   430,    71,   393,   438,   659,
     458,   431,   543,   440,   465,   466,   470,   471,   642,   662,
     472,   663,   153,   478,   360,   553,   586,   587,   588,   589,
     590,   591,   257,   446,   474,   126,   249,   482,   491,   453,
     456,   492,   494,   495,   678,   502,   512,   681,   267,   513,
     517,   635,   683,   636,   519,   521,   529,   280,   528,   475,
     534,   603,   537,   542,   545,   287,   481,   120,   546,   393,
     547,   393,   554,   560,   564,   575,   615,   565,   574,   704,
     580,   579,   619,   619,   581,   250,   250,   606,   614,   608,
     625,   208,   209,   210,   211,   212,   213,   616,   214,   617,
     317,   717,   622,   318,   371,   667,   630,   624,   632,   633,
     120,   634,   637,   650,   515,   648,   729,   652,   120,   653,
     660,   654,   666,   393,   668,   735,   669,   670,   672,   674,
     675,   679,   686,   685,   655,   657,   688,   691,   687,   692,
     695,   689,   690,   371,   696,   371,   701,   702,   705,   710,
     707,   715,   711,   721,   723,   722,   393,   727,   703,   393,
     393,   732,   250,   733,   706,   473,   120,   734,   709,   418,
     516,   544,   677,   456,   712,   563,   393,   621,   631,   388,
     661,   605,   393,   728,   638,   548,   393,   720,   639,   271,
     582,   697,   393,     0,   552,     0,   317,   287,   699,   318,
     120,   120,   584,   585,     0,   393,     0,     0,     0,     0,
     586,   587,   588,   589,   590,   591,   592,     0,   120,     0,
     120,     0,     0,     0,     0,     0,   120,   120,     0,     0,
       0,     4,     5,     6,     7,     8,     0,     0,     0,     0,
       9,     0,     0,     0,     0,   593,   584,   585,     0,     0,
     126,   594,     0,     0,   586,   587,   588,   589,   590,   591,
     592,     0,   371,     0,     0,   120,     0,     0,     0,     0,
      10,    11,     0,     0,     0,   120,    12,     0,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,   593,
      24,    25,    26,    27,     0,   649,     0,    28,    29,    30,
      31,    32,     0,    33,   120,     0,   120,    34,    35,    36,
      37,     0,    38,     0,    39,     0,    40,     0,     0,    41,
       0,     0,     0,    42,    43,    44,     0,    45,    46,     0,
      47,     0,    48,     0,   120,     0,    49,    50,    51,     0,
      52,    53,    54,    55,    56,    57,     0,     0,     0,     0,
      58,    59,    60,    61,    62,    63,    64,     0,   120,     0,
       0,     0,     0,    65,     0,     0,     0,     0,    66,    67,
      68,     0,    69,    70,     0,    71,    72,    73,    74,     4,
       5,     6,     7,     8,     0,     0,     0,     0,     9,     0,
       0,     0,  -125,     0,     0,     0,     0,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    10,    11,
       0,     0,     0,   120,    12,     0,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,     0,    24,    25,
      26,    27,     0,  -293,  -293,    28,    29,    30,    31,    32,
       0,    33,     0,     0,     0,    34,    35,    36,    37,     0,
      38,     0,    39,     0,    40,     0,     0,    41,     0,     0,
       0,    42,    43,    44,     0,    45,    46,     0,    47,     0,
      48,     0,     0,     0,    49,    50,    51,     0,    52,    53,
      54,     0,    56,    57,     0,     0,     0,     0,    58,    59,
      60,    61,    62,    63,    64,     4,     5,     6,     7,     8,
       0,    65,     0,     0,     9,     0,   303,     0,    68,     0,
      69,    70,   304,    71,    72,    73,    74,  -125,     0,     0,
       0,     0,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,    10,    11,     0,     0,     0,     0,
      12,     0,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,     0,    24,    25,    26,    27,     0,     0,
       0,    28,    29,    30,    31,    32,     0,    33,  -293,  -293,
       0,    34,    35,    36,    37,     0,    38,     0,    39,     0,
      40,     0,     0,    41,     0,     0,     0,    42,    43,    44,
       0,    45,    46,     0,    47,     0,    48,     0,     0,   380,
      49,    50,    51,     0,    52,    53,    54,     0,    56,    57,
       0,     0,     0,     0,    58,    59,    60,    61,    62,    63,
      64,     4,     5,     6,     7,     8,     0,    65,     0,     0,
       9,     0,   303,     0,    68,     0,    69,    70,   386,    71,
      72,    73,    74,     0,     0,     0,     0,     0,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
      10,    11,     0,     0,     0,     0,    12,     0,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,     0,
      24,    25,    26,    27,     0,     0,     0,    28,    29,    30,
      31,    32,     0,    33,  -293,  -293,     0,    34,    35,    36,
      37,   561,    38,     0,    39,     0,    40,     0,     0,    41,
       0,     0,     0,    42,    43,    44,     0,    45,    46,     0,
      47,     0,    48,     0,     0,     0,    49,    50,    51,     0,
      52,    53,    54,     0,    56,    57,     0,     0,     0,     0,
      58,    59,    60,    61,    62,    63,    64,     4,     5,     6,
       7,     8,     0,    65,     0,     0,     9,     0,   303,     0,
      68,     0,    69,    70,     0,    71,    72,    73,    74,  -305,
    -305,  -305,  -305,   206,   207,   208,   209,   210,   211,   212,
     213,     0,   214,     0,     0,     0,    10,    11,     0,     0,
       0,     0,    12,     0,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,     0,    24,    25,    26,    27,
       0,     0,     0,    28,    29,    30,    31,    32,     0,    33,
       0,     0,     0,    34,    35,    36,    37,     0,    38,     0,
      39,     0,    40,   567,     0,    41,     0,     0,     0,    42,
      43,    44,     0,    45,    46,     0,    47,     0,    48,     0,
       0,     0,    49,    50,    51,     0,    52,    53,    54,     0,
      56,    57,     0,     0,     0,     0,    58,    59,    60,    61,
      62,    63,    64,     4,     5,     6,     7,     8,     0,    65,
       0,     0,     9,     0,   303,     0,    68,     0,    69,    70,
       0,    71,    72,    73,    74,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    10,    11,     0,     0,     0,     0,    12,     0,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,     0,    24,    25,    26,    27,     0,     0,     0,    28,
      29,    30,    31,    32,     0,    33,     0,     0,     0,    34,
      35,    36,    37,     0,    38,     0,    39,   682,    40,     0,
       0,    41,     0,     0,     0,    42,    43,    44,     0,    45,
      46,     0,    47,     0,    48,     0,     0,     0,    49,    50,
      51,     0,    52,    53,    54,     0,    56,    57,     0,     0,
       0,     0,    58,    59,    60,    61,    62,    63,    64,     4,
       5,     6,     7,     8,     0,    65,     0,     0,     9,     0,
     303,     0,    68,     0,    69,    70,     0,    71,    72,    73,
      74,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    10,    11,
       0,     0,     0,     0,    12,     0,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,     0,    24,    25,
      26,    27,     0,     0,     0,    28,    29,    30,    31,    32,
       0,    33,     0,     0,     0,    34,    35,    36,    37,     0,
      38,     0,    39,     0,    40,     0,     0,    41,     0,     0,
       0,    42,    43,    44,     0,    45,    46,     0,    47,     0,
      48,     0,     0,     0,    49,    50,    51,     0,    52,    53,
      54,     0,    56,    57,     0,     0,     0,     0,    58,    59,
      60,    61,    62,    63,    64,     4,     5,     6,     7,     8,
       0,    65,     0,     0,     9,     0,   303,     0,    68,     0,
      69,    70,   684,    71,    72,    73,    74,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    10,    11,     0,     0,     0,     0,
      12,     0,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,     0,    24,    25,    26,    27,     0,     0,
       0,    28,    29,    30,    31,    32,     0,    33,     0,     0,
       0,    34,    35,    36,    37,     0,    38,   700,    39,     0,
      40,     0,     0,    41,     0,     0,     0,    42,    43,    44,
       0,    45,    46,     0,    47,     0,    48,     0,     0,     0,
      49,    50,    51,     0,    52,    53,    54,     0,    56,    57,
       0,     0,     0,     0,    58,    59,    60,    61,    62,    63,
      64,     4,     5,     6,     7,     8,     0,    65,     0,     0,
       9,     0,   303,     0,    68,     0,    69,    70,     0,    71,
      72,    73,    74,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      10,    11,     0,     0,     0,     0,    12,     0,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,     0,
      24,    25,    26,    27,     0,     0,     0,    28,    29,    30,
      31,    32,     0,    33,     0,     0,     0,    34,    35,    36,
      37,     0,    38,     0,    39,     0,    40,     0,     0,    41,
       0,     0,     0,    42,    43,    44,     0,    45,    46,     0,
      47,     0,    48,     0,     0,     0,    49,    50,    51,     0,
      52,    53,    54,     0,    56,    57,     0,     0,     0,     0,
      58,    59,    60,    61,    62,    63,    64,     4,     5,     6,
       7,     8,     0,    65,     0,     0,     9,     0,   303,     0,
      68,     0,    69,    70,   713,    71,    72,    73,    74,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    10,    11,     0,     0,
       0,     0,    12,     0,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,     0,    24,    25,    26,    27,
       0,     0,     0,    28,    29,    30,    31,    32,     0,    33,
       0,     0,     0,    34,    35,    36,    37,     0,    38,     0,
      39,     0,    40,     0,     0,    41,     0,     0,     0,    42,
      43,    44,     0,    45,    46,     0,    47,     0,    48,     0,
       0,     0,    49,    50,    51,     0,    52,    53,    54,     0,
      56,    57,     0,     0,     0,     0,    58,    59,    60,    61,
      62,    63,    64,     4,     5,     6,     7,     8,     0,    65,
       0,     0,     9,     0,   303,     0,    68,     0,    69,    70,
     731,    71,    72,    73,    74,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    10,    11,     0,     0,     0,     0,    12,     0,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,     0,    24,    25,    26,    27,     0,     0,     0,    28,
      29,    30,    31,    32,     0,    33,     0,     0,     0,    34,
      35,    36,    37,     0,    38,     0,    39,     0,    40,     0,
       0,    41,     0,     0,     0,    42,    43,    44,     0,    45,
      46,     0,    47,     0,    48,     0,     0,     0,    49,    50,
      51,     0,    52,    53,    54,     0,    56,    57,     0,     0,
       0,     0,    58,    59,    60,    61,    62,    63,    64,     4,
       5,     6,     7,     8,     0,    65,     0,     0,     9,     0,
     303,     0,    68,     0,    69,    70,   736,    71,    72,    73,
      74,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    10,    11,
       0,     0,     0,     0,    12,     0,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,     0,    24,    25,
      26,    27,     0,     0,     0,    28,    29,    30,    31,    32,
       0,    33,     0,     0,     0,    34,    35,    36,    37,     0,
      38,     0,    39,     0,    40,     0,     0,    41,     0,     0,
       0,    42,    43,    44,     0,    45,    46,     0,    47,     0,
      48,     0,     0,     0,    49,    50,    51,     0,    52,    53,
      54,     0,    56,    57,     0,     0,     0,     0,    58,    59,
      60,    61,    62,    63,    64,     4,     5,     6,     7,     8,
       0,    65,     0,     0,     9,     0,   100,     0,    68,     0,
      69,    70,     0,    71,    72,    73,    74,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    10,    11,     0,     0,     0,     0,
      12,     0,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,     0,    24,    25,    26,    27,     0,     0,
       0,    28,    29,    30,    31,    32,     0,    33,     0,     0,
       0,    34,    35,    36,    37,     0,    38,     0,    39,     0,
      40,     0,     0,    41,     0,     0,     0,    42,    43,    44,
       0,    45,    46,     0,    47,     0,    48,     0,     0,     0,
      49,    50,    51,     0,    52,    53,    54,     0,    56,    57,
       0,     0,     0,     0,    58,    59,    60,    61,    62,    63,
      64,     4,     5,     6,     7,     8,     0,    65,     0,     0,
       9,     0,   303,     0,    68,     0,    69,    70,     0,    71,
      72,    73,    74,     0,   442,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      10,    11,     0,     0,     0,     0,    12,     0,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,     0,
      24,    25,    26,    27,     0,     0,     0,    28,    29,    30,
      31,    32,     0,    33,     0,     0,     0,    34,    35,    36,
      37,     0,    38,     0,    39,     0,    40,     0,     0,    41,
       0,     0,     0,    42,    43,     0,     0,    45,    46,     0,
      47,     0,    48,     0,     0,     0,     0,     0,    51,     0,
      52,    53,    54,     0,     0,     0,     0,     0,     0,     0,
      58,    59,    60,    61,    62,    63,    64,     4,     5,     6,
       7,     8,     0,    65,     0,     0,     9,     0,   138,     0,
      68,     0,    69,    70,     0,    71,    72,    73,    74,     0,
     448,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    10,    11,     0,     0,
       0,     0,    12,     0,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,     0,    24,    25,    26,    27,
       0,     0,     0,    28,    29,    30,    31,    32,     0,    33,
       0,     0,     0,    34,    35,    36,    37,     0,    38,     0,
      39,     0,    40,     0,     0,    41,     0,     0,     0,    42,
      43,     0,     0,    45,    46,     0,    47,     0,    48,     0,
       0,     0,     0,     0,    51,     0,    52,    53,    54,     0,
       0,     0,     0,     0,     0,     0,    58,    59,    60,    61,
      62,    63,    64,     4,     5,     6,     7,     8,     0,    65,
       0,     0,     9,     0,   138,     0,    68,     0,    69,    70,
       0,    71,    72,    73,    74,     0,   459,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    10,    11,     0,     0,     0,     0,    12,     0,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,     0,    24,    25,    26,    27,     0,     0,     0,    28,
      29,    30,    31,    32,     0,    33,     0,     0,     0,    34,
      35,    36,    37,     0,    38,     0,    39,     0,    40,     0,
       0,    41,     0,     0,     0,    42,    43,     0,     0,    45,
      46,     0,    47,     0,    48,     0,     0,     0,     0,     0,
      51,     0,    52,    53,    54,     0,     0,     0,     0,     0,
       0,     0,    58,    59,    60,    61,    62,    63,    64,     4,
       5,     6,     7,     8,     0,    65,     0,     0,     9,     0,
     138,     0,    68,     0,    69,    70,     0,    71,    72,    73,
      74,     0,   618,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    10,    11,
       0,     0,     0,     0,    12,     0,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,     0,    24,    25,
      26,    27,     0,     0,     0,    28,    29,    30,    31,    32,
       0,    33,     0,     0,     0,    34,    35,    36,    37,     0,
      38,     0,    39,     0,    40,     0,     0,    41,     0,     0,
       0,    42,    43,     0,     0,    45,    46,     0,    47,     0,
      48,     0,     0,     0,     0,     0,    51,     0,    52,    53,
      54,     0,     0,     0,     0,     0,     0,     0,    58,    59,
      60,    61,    62,    63,    64,     4,     5,     6,     7,     8,
       0,    65,     0,     0,     9,     0,   138,     0,    68,     0,
      69,    70,     0,    71,    72,    73,    74,     0,   656,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    10,    11,     0,     0,     0,     0,
      12,     0,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,     0,    24,    25,    26,    27,     0,     0,
       0,    28,    29,    30,    31,    32,     0,    33,     0,     0,
       0,    34,    35,    36,    37,     0,    38,     0,    39,     0,
      40,     0,     0,    41,     0,     0,     0,    42,    43,     0,
       0,    45,    46,     0,    47,     0,    48,     0,     0,     0,
       0,     0,    51,     0,    52,    53,    54,     0,     0,     0,
       0,     0,     0,     0,    58,    59,    60,    61,    62,    63,
      64,     4,     5,     6,     7,     8,     0,    65,     0,     0,
       9,     0,   138,     0,    68,     0,    69,    70,     0,    71,
      72,    73,    74,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      10,    11,     0,     0,     0,     0,    12,     0,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,     0,
      24,    25,    26,    27,     0,     0,     0,    28,    29,    30,
      31,    32,     0,    33,     0,     0,     0,    34,    35,    36,
      37,     0,    38,     0,    39,     0,    40,     0,     0,    41,
       0,     0,     0,    42,    43,     0,     0,    45,    46,     0,
      47,     0,    48,     0,     0,     0,     0,     0,    51,     0,
      52,    53,    54,     0,     0,     0,     0,     0,     0,     0,
      58,    59,    60,    61,    62,    63,    64,     4,     5,     6,
       7,     8,     0,    65,     0,     0,     9,     0,   138,     0,
      68,     0,    69,    70,     0,    71,    72,    73,    74,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    10,    11,     0,     0,
       0,     0,    12,     0,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,     0,    24,    25,    26,    27,
       0,     0,     0,    28,    29,    30,    31,    32,     0,    33,
       0,     0,     0,    34,    35,    36,    37,     0,    38,     0,
      39,     0,    40,     0,     0,    41,     0,     0,     0,    42,
      43,     0,     0,    45,    46,     0,    47,     0,    48,     0,
       0,     0,     0,     0,    51,     0,    52,    53,    54,     0,
       0,     0,     0,     0,     0,     0,    58,    59,    60,    61,
      62,    63,    64,     4,     5,     6,     7,     8,     0,    65,
       0,     0,     9,     0,   100,     0,    68,     0,    69,    70,
       0,    71,    72,    73,    74,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    10,    11,     0,     0,     0,     0,    12,     0,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,     0,    24,    25,    26,   189,   190,   191,     0,    28,
      29,    30,    31,    32,     0,     0,     0,     0,     0,    34,
       0,   192,     0,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,     0,   214,     0,     0,     0,     0,
      99,     0,     0,    53,    54,     0,     0,     0,     0,     0,
       0,     0,    58,    59,    60,    61,    62,    63,    64,     4,
       5,     6,     7,     8,     0,    65,     0,     0,     9,     0,
     100,     0,    68,     0,   145,     0,     0,    71,    72,    73,
      74,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    10,    11,
       0,     0,     0,     0,    12,     0,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,     0,    24,    25,
      26,     0,   189,   190,   191,    28,    29,    30,    31,    32,
       0,     0,     0,     0,     0,    34,     0,   604,   192,     0,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,     0,   214,     0,     0,     0,    99,     0,     0,    53,
      54,     0,     0,     0,     0,     0,     0,     0,    58,    59,
      60,    61,    62,    63,    64,     4,     5,     6,     7,     8,
       0,    65,     0,     0,     9,     0,   100,     0,    68,     0,
     147,     0,     0,    71,    72,    73,    74,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    10,    11,     0,     0,     0,     0,
      12,     0,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,     0,    24,    25,    26,   189,   190,   191,
       0,    28,    29,    30,    31,    32,     0,     0,     0,   421,
       0,    34,     0,   192,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,     0,   214,     0,     0,
       0,     0,    99,     0,     0,    53,    54,     0,     0,     0,
       0,     0,     0,     0,    58,    59,    60,    61,    62,    63,
      64,     4,     5,     6,     7,     8,     0,    65,     0,     0,
       9,     0,   100,     0,    68,     0,   151,     0,     0,    71,
      72,    73,    74,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      10,    11,     0,     0,     0,     0,    12,     0,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,     0,
      24,    25,    26,   189,   190,   191,     0,    28,    29,    30,
      31,    32,     0,     0,   439,     0,     0,    34,     0,   192,
       0,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,     0,   214,     0,     0,     0,     0,    99,     0,
       0,    53,    54,     0,     0,     0,     0,     0,     0,     0,
      58,    59,    60,    61,    62,    63,    64,     4,     5,     6,
       7,     8,     0,    65,     0,     0,     9,     0,   100,     0,
      68,   243,     0,     0,     0,    71,    72,    73,    74,     0,
       0,     0,     0,     0,     0,   246,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    10,    11,     0,     0,
       0,     0,    12,     0,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,     0,    24,    25,    26,   189,
     190,   191,     0,    28,    29,    30,    31,    32,     0,     0,
     467,     0,     0,    34,     0,   192,     0,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,     0,   214,
       0,     0,     0,     0,    99,     0,     0,    53,    54,     0,
       0,     0,     0,     0,     0,     0,    58,    59,    60,    61,
      62,    63,    64,     4,     5,     6,     7,     8,     0,    65,
       0,     0,     9,     0,   100,     0,    68,     0,     0,     0,
       0,    71,    72,    73,    74,     0,     0,     0,     0,     0,
       0,   289,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    10,    11,     0,     0,     0,     0,    12,     0,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,     0,    24,    25,    26,   189,   190,   191,     0,    28,
      29,    30,    31,    32,     0,     0,   493,     0,     0,    34,
       0,   192,     0,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,     0,   214,     0,     0,     0,     0,
      99,     0,     0,    53,    54,     0,     0,     0,     0,     0,
       0,     0,    58,    59,    60,    61,    62,    63,    64,     4,
       5,     6,     7,     8,     0,    65,     0,     0,     9,     0,
     100,     0,    68,     0,     0,     0,     0,    71,    72,    73,
      74,     0,     0,     0,     0,     0,     0,   345,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    10,    11,
       0,     0,     0,     0,    12,     0,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,     0,    24,    25,
      26,   189,   190,   191,     0,    28,    29,    30,    31,    32,
       0,     0,   549,     0,     0,    34,     0,   192,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
       0,   214,     0,     0,     0,     0,    99,     0,     0,    53,
      54,     0,     0,     0,     0,     0,     0,     0,    58,    59,
      60,    61,    62,    63,    64,     4,     5,     6,     7,     8,
       0,    65,     0,     0,     9,     0,   100,     0,    68,     0,
       0,     0,     0,    71,    72,    73,    74,     0,     0,     0,
       0,     0,     0,   444,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    10,    11,     0,     0,     0,     0,
      12,     0,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,     0,    24,    25,    26,   189,   190,   191,
       0,    28,    29,    30,    31,    32,     0,     0,   609,     0,
       0,    34,     0,   192,   626,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,     0,   214,     0,     0,
       0,     0,    99,     0,     0,    53,    54,     0,     0,     0,
       0,     0,     0,     0,    58,    59,    60,    61,    62,    63,
      64,     4,     5,     6,     7,     8,     0,    65,     0,     0,
       9,     0,   100,     0,    68,     0,     0,     0,     0,    71,
      72,    73,    74,     0,     0,     0,     0,     0,     0,   483,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      10,    11,     0,     0,     0,     0,    12,     0,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,     0,
      24,    25,    26,   189,   190,   191,     0,    28,    29,    30,
      31,    32,   627,     0,     0,     0,     0,    34,     0,   192,
       0,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,     0,   214,     0,     0,     0,     0,    99,     0,
       0,    53,    54,     0,     0,     0,     0,     0,     0,     0,
      58,    59,    60,    61,    62,    63,    64,     4,     5,     6,
       7,     8,     0,    65,     0,     0,     9,     0,   100,     0,
      68,     0,     0,     0,     0,    71,    72,    73,    74,     0,
       0,     0,     0,     0,     0,   485,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    10,    11,     0,     0,
       0,     0,    12,     0,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,     0,    24,    25,    26,   189,
     190,   191,     0,    28,    29,    30,    31,    32,   215,     0,
       0,     0,     0,    34,     0,   192,     0,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,     0,   214,
       0,     0,     0,     0,    99,     0,     0,    53,    54,     0,
       0,     0,     0,     0,     0,     0,    58,    59,    60,    61,
      62,    63,    64,     4,     5,     6,     7,     8,     0,    65,
       0,     0,     9,     0,   100,     0,    68,     0,     0,     0,
       0,    71,    72,    73,    74,     0,     0,     0,     0,     0,
       0,   602,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    10,    11,     0,     0,     0,     0,    12,     0,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,     0,    24,    25,    26,   189,   190,   191,     0,    28,
      29,    30,    31,    32,   263,     0,     0,     0,     0,    34,
       0,   192,     0,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,     0,   214,     0,     0,     0,     0,
      99,     0,     0,    53,    54,     0,     0,     0,     0,     0,
       0,     0,    58,    59,    60,    61,    62,    63,    64,     4,
       5,     6,     7,     8,     0,    65,     0,     0,     9,     0,
     100,     0,    68,     0,     0,     0,     0,    71,    72,    73,
      74,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    10,    11,
       0,     0,     0,     0,    12,     0,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,     0,    24,    25,
      26,   189,   190,   191,     0,    28,    29,    30,    31,    32,
     264,     0,     0,     0,     0,    34,     0,   192,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
       0,   214,     0,     0,     0,     0,    99,     0,     0,    53,
      54,     0,     0,     0,     0,     0,     0,     0,    58,    59,
      60,    61,    62,    63,    64,     4,     5,     6,     7,     8,
       0,    65,     0,     0,     9,     0,   100,     0,    68,     0,
       0,     0,     0,    71,    72,    73,    74,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    10,    11,     0,     0,     0,     0,
      12,     0,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,     0,    24,    25,    26,   189,   190,   191,
       0,    28,    29,    30,   415,    32,   269,     0,     0,     0,
       0,    34,     0,   192,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,     0,   214,     0,     0,
       0,     0,    99,     0,     0,    53,    54,     0,     0,     0,
       0,     0,     0,     0,    58,    59,    60,    61,    62,    63,
      64,     0,     0,     0,     0,     0,     0,    65,   189,   190,
     191,     0,   100,     0,    68,     0,     0,     0,     0,    71,
      72,    73,    74,     0,   192,     0,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,     0,   214,     0,
       0,     0,     0,     0,   189,   190,   191,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     192,   302,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,     0,   214,   189,   190,   191,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   192,     0,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,     0,   214,   189,   190,   191,     0,
       0,     0,   363,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   192,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,     0,   214,   189,   190,   191,
       0,     0,     0,     0,     0,     0,     0,     0,   368,     0,
       0,     0,     0,   192,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,     0,   214,   189,   190,
     191,     0,     0,     0,     0,     0,     0,     0,     0,   369,
       0,     0,     0,     0,   192,     0,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,     0,   214,   189,
     190,   191,     0,     0,     0,     0,     0,     0,     0,     0,
     376,     0,     0,     0,     0,   192,     0,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,     0,   214,
     189,   190,   191,     0,     0,     0,     0,     0,     0,     0,
       0,   384,     0,     0,     0,     0,   192,     0,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,     0,
     214,   189,   190,   191,     0,     0,     0,     0,     0,     0,
       0,     0,   510,     0,     0,     0,     0,   192,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
       0,   214,   189,   190,   191,     0,     0,     0,     0,     0,
       0,     0,     0,   680,     0,     0,     0,     0,   192,     0,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,     0,   214,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   698,     0,     0,     0,   189,   190,
     191,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   409,   192,   428,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,     0,   214,   189,
     190,   191,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   541,   192,     0,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,     0,   214,
     190,   191,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   192,     0,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   191,   214,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   192,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   192,   214,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,     0,   214,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,     0,   214,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,     0,   214,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,     0,   214,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,     0,   214,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,     0,   214,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,     0,   214,  -305,  -305,  -305,  -305,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,     0,
     214
};

static const yytype_int16 yycheck[] =
{
       2,     2,     8,   188,     4,     5,    26,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,   405,    66,    24,     8,   155,    25,   367,     8,
       2,   313,   214,     8,    36,    35,    71,   377,     8,     8,
     230,     8,    42,    43,     8,    45,     8,    47,    26,   239,
      73,    25,   237,   238,    25,    71,   597,    73,    61,    45,
     598,   708,    61,     0,    61,    66,    66,   714,    68,    63,
     463,    92,    93,    94,    61,    71,    61,    71,    51,    73,
      93,    94,   289,    71,   142,    73,    93,    94,   123,   139,
     142,    71,   142,    73,    66,   138,     8,   638,    71,     8,
     100,   639,   142,   103,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,   110,   120,   142,     8,
       8,     8,    96,     8,   147,   145,   519,   123,   521,   145,
     110,   147,   132,   146,   134,   135,    31,   143,   138,   146,
     140,   141,   142,   142,   144,    73,   145,   143,   145,   135,
      59,    60,   139,   147,   537,   142,   142,   131,   145,   147,
     145,   144,    22,    23,    61,   144,   144,   147,    31,   144,
     116,   171,   512,   143,   359,   144,   142,   144,    73,   142,
     144,   143,   367,   183,   142,    45,   142,    73,   145,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   188,   554,   214,   188,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   143,   232,   233,   143,   425,   426,   444,    31,   239,
     214,    31,   139,   214,   230,   275,   528,   429,   145,    59,
      60,   251,   534,   239,   143,   143,   143,    73,   143,   116,
     303,   147,    78,   237,   238,   142,   237,   238,   142,    71,
     270,    73,    73,    73,   142,   135,   483,    78,   485,    71,
      73,    71,   142,    73,    71,    71,    73,    74,    71,    73,
      73,    45,    46,    47,    78,    49,   296,   142,   158,    72,
      73,    74,   303,   303,   142,   165,   166,   167,   110,   142,
     170,   650,   502,   442,   145,    71,    71,    73,    73,   448,
     110,   137,   138,    22,    23,   139,    25,   110,    66,    67,
     459,   303,   148,   381,    42,    43,   137,   138,   142,   122,
     120,   389,   390,   145,   318,   147,    49,   147,   142,   150,
     139,   381,   120,   137,   138,   110,    82,   147,   139,   389,
     390,    69,    70,    71,   147,   149,   142,   369,   139,   554,
     230,    79,   144,   373,   376,   375,    71,   377,   378,   239,
      71,   383,    92,    93,    94,   359,   246,   373,   359,    73,
      13,   147,   147,   367,    78,   602,   367,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,   409,
      71,   411,    73,    66,    67,   123,   124,   125,   126,   127,
     128,   144,   145,   471,   472,   425,   426,   143,   428,   289,
      71,   429,   118,   433,    22,    23,   143,   297,   120,   425,
     426,   471,   472,    59,    60,   727,   120,     8,   142,   110,
       8,   144,   136,   137,   138,   429,    90,    13,   429,   158,
      73,   122,   143,   118,    97,   650,   165,   166,   167,   517,
     142,   170,   105,   106,   107,   108,   109,   110,   144,   143,
       8,    71,   482,   142,   142,   345,   147,   517,   151,   618,
      71,   143,   492,   143,   142,   101,   139,   142,    97,   628,
      13,   630,   502,   145,   504,   505,   105,   106,   107,   108,
     109,   110,   512,   373,   144,   214,   502,    13,    71,   379,
     380,    61,   146,   119,   653,   142,   144,   656,   144,   121,
      13,   579,   661,   581,   144,   144,    71,   397,   142,   399,
       8,   541,   142,   151,   145,   405,   406,   246,   143,   579,
     143,   581,   120,   144,   143,     8,   558,   143,   143,   688,
     143,   121,   564,   565,     8,   425,   426,   143,   142,   151,
     570,    42,    43,    44,    45,    46,    47,   144,    49,   143,
     554,   710,   144,   554,   444,   633,   145,   144,    73,    13,
     289,    73,    71,   120,   454,   146,   725,   142,   297,    26,
     144,    68,    13,   633,   143,   734,   121,    13,    73,    71,
      71,   144,    13,    73,   614,   617,   145,    71,   666,    13,
     142,   669,   670,   483,    13,   485,   144,    13,   142,    26,
      73,    13,   144,   143,   143,   101,   666,   142,   686,   669,
     670,    73,   502,   143,   692,   397,   345,   145,   696,   300,
     455,   495,   652,   513,   702,   513,   686,   565,   575,   273,
     625,   545,   692,   723,   593,   500,   696,   715,   593,   158,
     532,   676,   702,    -1,   504,    -1,   650,   537,   680,   650,
     379,   380,    97,    98,    -1,   715,    -1,    -1,    -1,    -1,
     105,   106,   107,   108,   109,   110,   111,    -1,   397,    -1,
     399,    -1,    -1,    -1,    -1,    -1,   405,   406,    -1,    -1,
      -1,     3,     4,     5,     6,     7,    -1,    -1,    -1,    -1,
      12,    -1,    -1,    -1,    -1,   140,    97,    98,    -1,    -1,
     429,   146,    -1,    -1,   105,   106,   107,   108,   109,   110,
     111,    -1,   602,    -1,    -1,   444,    -1,    -1,    -1,    -1,
      42,    43,    -1,    -1,    -1,   454,    48,    -1,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,   140,
      62,    63,    64,    65,    -1,   146,    -1,    69,    70,    71,
      72,    73,    -1,    75,   483,    -1,   485,    79,    80,    81,
      82,    -1,    84,    -1,    86,    -1,    88,    -1,    -1,    91,
      -1,    -1,    -1,    95,    96,    97,    -1,    99,   100,    -1,
     102,    -1,   104,    -1,   513,    -1,   108,   109,   110,    -1,
     112,   113,   114,   115,   116,   117,    -1,    -1,    -1,    -1,
     122,   123,   124,   125,   126,   127,   128,    -1,   537,    -1,
      -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,   140,   141,
     142,    -1,   144,   145,    -1,   147,   148,   149,   150,     3,
       4,     5,     6,     7,    -1,    -1,    -1,    -1,    12,    -1,
      -1,    -1,     8,    -1,    -1,    -1,    -1,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    -1,    -1,   602,    48,    -1,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    -1,    62,    63,
      64,    65,    -1,    59,    60,    69,    70,    71,    72,    73,
      -1,    75,    -1,    -1,    -1,    79,    80,    81,    82,    -1,
      84,    -1,    86,    -1,    88,    -1,    -1,    91,    -1,    -1,
      -1,    95,    96,    97,    -1,    99,   100,    -1,   102,    -1,
     104,    -1,    -1,    -1,   108,   109,   110,    -1,   112,   113,
     114,    -1,   116,   117,    -1,    -1,    -1,    -1,   122,   123,
     124,   125,   126,   127,   128,     3,     4,     5,     6,     7,
      -1,   135,    -1,    -1,    12,    -1,   140,    -1,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   143,    -1,    -1,
      -1,    -1,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    42,    43,    -1,    -1,    -1,    -1,
      48,    -1,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    -1,    62,    63,    64,    65,    -1,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    59,    60,
      -1,    79,    80,    81,    82,    -1,    84,    -1,    86,    -1,
      88,    -1,    -1,    91,    -1,    -1,    -1,    95,    96,    97,
      -1,    99,   100,    -1,   102,    -1,   104,    -1,    -1,    90,
     108,   109,   110,    -1,   112,   113,   114,    -1,   116,   117,
      -1,    -1,    -1,    -1,   122,   123,   124,   125,   126,   127,
     128,     3,     4,     5,     6,     7,    -1,   135,    -1,    -1,
      12,    -1,   140,    -1,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,    -1,    -1,    -1,    -1,    -1,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      42,    43,    -1,    -1,    -1,    -1,    48,    -1,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    -1,
      62,    63,    64,    65,    -1,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    59,    60,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    -1,    88,    -1,    -1,    91,
      -1,    -1,    -1,    95,    96,    97,    -1,    99,   100,    -1,
     102,    -1,   104,    -1,    -1,    -1,   108,   109,   110,    -1,
     112,   113,   114,    -1,   116,   117,    -1,    -1,    -1,    -1,
     122,   123,   124,   125,   126,   127,   128,     3,     4,     5,
       6,     7,    -1,   135,    -1,    -1,    12,    -1,   140,    -1,
     142,    -1,   144,   145,    -1,   147,   148,   149,   150,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    -1,    49,    -1,    -1,    -1,    42,    43,    -1,    -1,
      -1,    -1,    48,    -1,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
      -1,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      -1,    -1,    -1,    79,    80,    81,    82,    -1,    84,    -1,
      86,    -1,    88,    89,    -1,    91,    -1,    -1,    -1,    95,
      96,    97,    -1,    99,   100,    -1,   102,    -1,   104,    -1,
      -1,    -1,   108,   109,   110,    -1,   112,   113,   114,    -1,
     116,   117,    -1,    -1,    -1,    -1,   122,   123,   124,   125,
     126,   127,   128,     3,     4,     5,     6,     7,    -1,   135,
      -1,    -1,    12,    -1,   140,    -1,   142,    -1,   144,   145,
      -1,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    48,    -1,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    -1,    62,    63,    64,    65,    -1,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    -1,    -1,    -1,    79,
      80,    81,    82,    -1,    84,    -1,    86,    87,    88,    -1,
      -1,    91,    -1,    -1,    -1,    95,    96,    97,    -1,    99,
     100,    -1,   102,    -1,   104,    -1,    -1,    -1,   108,   109,
     110,    -1,   112,   113,   114,    -1,   116,   117,    -1,    -1,
      -1,    -1,   122,   123,   124,   125,   126,   127,   128,     3,
       4,     5,     6,     7,    -1,   135,    -1,    -1,    12,    -1,
     140,    -1,   142,    -1,   144,   145,    -1,   147,   148,   149,
     150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    -1,    -1,    -1,    48,    -1,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    -1,    62,    63,
      64,    65,    -1,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    -1,    -1,    -1,    79,    80,    81,    82,    -1,
      84,    -1,    86,    -1,    88,    -1,    -1,    91,    -1,    -1,
      -1,    95,    96,    97,    -1,    99,   100,    -1,   102,    -1,
     104,    -1,    -1,    -1,   108,   109,   110,    -1,   112,   113,
     114,    -1,   116,   117,    -1,    -1,    -1,    -1,   122,   123,
     124,   125,   126,   127,   128,     3,     4,     5,     6,     7,
      -1,   135,    -1,    -1,    12,    -1,   140,    -1,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,
      48,    -1,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    -1,    62,    63,    64,    65,    -1,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    -1,    -1,
      -1,    79,    80,    81,    82,    -1,    84,    85,    86,    -1,
      88,    -1,    -1,    91,    -1,    -1,    -1,    95,    96,    97,
      -1,    99,   100,    -1,   102,    -1,   104,    -1,    -1,    -1,
     108,   109,   110,    -1,   112,   113,   114,    -1,   116,   117,
      -1,    -1,    -1,    -1,   122,   123,   124,   125,   126,   127,
     128,     3,     4,     5,     6,     7,    -1,   135,    -1,    -1,
      12,    -1,   140,    -1,   142,    -1,   144,   145,    -1,   147,
     148,   149,   150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    -1,    -1,    -1,    -1,    48,    -1,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    -1,
      62,    63,    64,    65,    -1,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    -1,    -1,    -1,    79,    80,    81,
      82,    -1,    84,    -1,    86,    -1,    88,    -1,    -1,    91,
      -1,    -1,    -1,    95,    96,    97,    -1,    99,   100,    -1,
     102,    -1,   104,    -1,    -1,    -1,   108,   109,   110,    -1,
     112,   113,   114,    -1,   116,   117,    -1,    -1,    -1,    -1,
     122,   123,   124,   125,   126,   127,   128,     3,     4,     5,
       6,     7,    -1,   135,    -1,    -1,    12,    -1,   140,    -1,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,
      -1,    -1,    48,    -1,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
      -1,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      -1,    -1,    -1,    79,    80,    81,    82,    -1,    84,    -1,
      86,    -1,    88,    -1,    -1,    91,    -1,    -1,    -1,    95,
      96,    97,    -1,    99,   100,    -1,   102,    -1,   104,    -1,
      -1,    -1,   108,   109,   110,    -1,   112,   113,   114,    -1,
     116,   117,    -1,    -1,    -1,    -1,   122,   123,   124,   125,
     126,   127,   128,     3,     4,     5,     6,     7,    -1,   135,
      -1,    -1,    12,    -1,   140,    -1,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    48,    -1,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    -1,    62,    63,    64,    65,    -1,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    -1,    -1,    -1,    79,
      80,    81,    82,    -1,    84,    -1,    86,    -1,    88,    -1,
      -1,    91,    -1,    -1,    -1,    95,    96,    97,    -1,    99,
     100,    -1,   102,    -1,   104,    -1,    -1,    -1,   108,   109,
     110,    -1,   112,   113,   114,    -1,   116,   117,    -1,    -1,
      -1,    -1,   122,   123,   124,   125,   126,   127,   128,     3,
       4,     5,     6,     7,    -1,   135,    -1,    -1,    12,    -1,
     140,    -1,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    -1,    -1,    -1,    48,    -1,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    -1,    62,    63,
      64,    65,    -1,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    -1,    -1,    -1,    79,    80,    81,    82,    -1,
      84,    -1,    86,    -1,    88,    -1,    -1,    91,    -1,    -1,
      -1,    95,    96,    97,    -1,    99,   100,    -1,   102,    -1,
     104,    -1,    -1,    -1,   108,   109,   110,    -1,   112,   113,
     114,    -1,   116,   117,    -1,    -1,    -1,    -1,   122,   123,
     124,   125,   126,   127,   128,     3,     4,     5,     6,     7,
      -1,   135,    -1,    -1,    12,    -1,   140,    -1,   142,    -1,
     144,   145,    -1,   147,   148,   149,   150,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,
      48,    -1,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    -1,    62,    63,    64,    65,    -1,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    -1,    -1,
      -1,    79,    80,    81,    82,    -1,    84,    -1,    86,    -1,
      88,    -1,    -1,    91,    -1,    -1,    -1,    95,    96,    97,
      -1,    99,   100,    -1,   102,    -1,   104,    -1,    -1,    -1,
     108,   109,   110,    -1,   112,   113,   114,    -1,   116,   117,
      -1,    -1,    -1,    -1,   122,   123,   124,   125,   126,   127,
     128,     3,     4,     5,     6,     7,    -1,   135,    -1,    -1,
      12,    -1,   140,    -1,   142,    -1,   144,   145,    -1,   147,
     148,   149,   150,    -1,    26,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    -1,    -1,    -1,    -1,    48,    -1,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    -1,
      62,    63,    64,    65,    -1,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    -1,    -1,    -1,    79,    80,    81,
      82,    -1,    84,    -1,    86,    -1,    88,    -1,    -1,    91,
      -1,    -1,    -1,    95,    96,    -1,    -1,    99,   100,    -1,
     102,    -1,   104,    -1,    -1,    -1,    -1,    -1,   110,    -1,
     112,   113,   114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     122,   123,   124,   125,   126,   127,   128,     3,     4,     5,
       6,     7,    -1,   135,    -1,    -1,    12,    -1,   140,    -1,
     142,    -1,   144,   145,    -1,   147,   148,   149,   150,    -1,
      26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,
      -1,    -1,    48,    -1,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
      -1,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      -1,    -1,    -1,    79,    80,    81,    82,    -1,    84,    -1,
      86,    -1,    88,    -1,    -1,    91,    -1,    -1,    -1,    95,
      96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,    -1,
      -1,    -1,    -1,    -1,   110,    -1,   112,   113,   114,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   122,   123,   124,   125,
     126,   127,   128,     3,     4,     5,     6,     7,    -1,   135,
      -1,    -1,    12,    -1,   140,    -1,   142,    -1,   144,   145,
      -1,   147,   148,   149,   150,    -1,    26,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    48,    -1,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    -1,    62,    63,    64,    65,    -1,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    -1,    -1,    -1,    79,
      80,    81,    82,    -1,    84,    -1,    86,    -1,    88,    -1,
      -1,    91,    -1,    -1,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,    -1,    -1,    -1,    -1,    -1,
     110,    -1,   112,   113,   114,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   122,   123,   124,   125,   126,   127,   128,     3,
       4,     5,     6,     7,    -1,   135,    -1,    -1,    12,    -1,
     140,    -1,   142,    -1,   144,   145,    -1,   147,   148,   149,
     150,    -1,    26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    -1,    -1,    -1,    48,    -1,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    -1,    62,    63,
      64,    65,    -1,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    -1,    -1,    -1,    79,    80,    81,    82,    -1,
      84,    -1,    86,    -1,    88,    -1,    -1,    91,    -1,    -1,
      -1,    95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,
     104,    -1,    -1,    -1,    -1,    -1,   110,    -1,   112,   113,
     114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,   123,
     124,   125,   126,   127,   128,     3,     4,     5,     6,     7,
      -1,   135,    -1,    -1,    12,    -1,   140,    -1,   142,    -1,
     144,   145,    -1,   147,   148,   149,   150,    -1,    26,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,
      48,    -1,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    -1,    62,    63,    64,    65,    -1,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    -1,    -1,
      -1,    79,    80,    81,    82,    -1,    84,    -1,    86,    -1,
      88,    -1,    -1,    91,    -1,    -1,    -1,    95,    96,    -1,
      -1,    99,   100,    -1,   102,    -1,   104,    -1,    -1,    -1,
      -1,    -1,   110,    -1,   112,   113,   114,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   122,   123,   124,   125,   126,   127,
     128,     3,     4,     5,     6,     7,    -1,   135,    -1,    -1,
      12,    -1,   140,    -1,   142,    -1,   144,   145,    -1,   147,
     148,   149,   150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    -1,    -1,    -1,    -1,    48,    -1,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    -1,
      62,    63,    64,    65,    -1,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    -1,    -1,    -1,    79,    80,    81,
      82,    -1,    84,    -1,    86,    -1,    88,    -1,    -1,    91,
      -1,    -1,    -1,    95,    96,    -1,    -1,    99,   100,    -1,
     102,    -1,   104,    -1,    -1,    -1,    -1,    -1,   110,    -1,
     112,   113,   114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     122,   123,   124,   125,   126,   127,   128,     3,     4,     5,
       6,     7,    -1,   135,    -1,    -1,    12,    -1,   140,    -1,
     142,    -1,   144,   145,    -1,   147,   148,   149,   150,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,
      -1,    -1,    48,    -1,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
      -1,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      -1,    -1,    -1,    79,    80,    81,    82,    -1,    84,    -1,
      86,    -1,    88,    -1,    -1,    91,    -1,    -1,    -1,    95,
      96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,    -1,
      -1,    -1,    -1,    -1,   110,    -1,   112,   113,   114,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   122,   123,   124,   125,
     126,   127,   128,     3,     4,     5,     6,     7,    -1,   135,
      -1,    -1,    12,    -1,   140,    -1,   142,    -1,   144,   145,
      -1,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    48,    -1,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    -1,    62,    63,    64,     9,    10,    11,    -1,    69,
      70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    79,
      -1,    25,    -1,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,
     110,    -1,    -1,   113,   114,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   122,   123,   124,   125,   126,   127,   128,     3,
       4,     5,     6,     7,    -1,   135,    -1,    -1,    12,    -1,
     140,    -1,   142,    -1,   144,    -1,    -1,   147,   148,   149,
     150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    -1,    -1,    -1,    48,    -1,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    -1,    62,    63,
      64,    -1,     9,    10,    11,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    79,    -1,   151,    25,    -1,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    -1,    49,    -1,    -1,    -1,   110,    -1,    -1,   113,
     114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,   123,
     124,   125,   126,   127,   128,     3,     4,     5,     6,     7,
      -1,   135,    -1,    -1,    12,    -1,   140,    -1,   142,    -1,
     144,    -1,    -1,   147,   148,   149,   150,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,
      48,    -1,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    -1,    62,    63,    64,     9,    10,    11,
      -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,   146,
      -1,    79,    -1,    25,    -1,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    -1,    49,    -1,    -1,
      -1,    -1,   110,    -1,    -1,   113,   114,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   122,   123,   124,   125,   126,   127,
     128,     3,     4,     5,     6,     7,    -1,   135,    -1,    -1,
      12,    -1,   140,    -1,   142,    -1,   144,    -1,    -1,   147,
     148,   149,   150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    -1,    -1,    -1,    -1,    48,    -1,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    -1,
      62,    63,    64,     9,    10,    11,    -1,    69,    70,    71,
      72,    73,    -1,    -1,   146,    -1,    -1,    79,    -1,    25,
      -1,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    -1,    -1,    -1,    -1,   110,    -1,
      -1,   113,   114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     122,   123,   124,   125,   126,   127,   128,     3,     4,     5,
       6,     7,    -1,   135,    -1,    -1,    12,    -1,   140,    -1,
     142,   143,    -1,    -1,    -1,   147,   148,   149,   150,    -1,
      -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,
      -1,    -1,    48,    -1,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    -1,    62,    63,    64,     9,
      10,    11,    -1,    69,    70,    71,    72,    73,    -1,    -1,
     146,    -1,    -1,    79,    -1,    25,    -1,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
      -1,    -1,    -1,    -1,   110,    -1,    -1,   113,   114,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   122,   123,   124,   125,
     126,   127,   128,     3,     4,     5,     6,     7,    -1,   135,
      -1,    -1,    12,    -1,   140,    -1,   142,    -1,    -1,    -1,
      -1,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    48,    -1,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    -1,    62,    63,    64,     9,    10,    11,    -1,    69,
      70,    71,    72,    73,    -1,    -1,   146,    -1,    -1,    79,
      -1,    25,    -1,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,
     110,    -1,    -1,   113,   114,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   122,   123,   124,   125,   126,   127,   128,     3,
       4,     5,     6,     7,    -1,   135,    -1,    -1,    12,    -1,
     140,    -1,   142,    -1,    -1,    -1,    -1,   147,   148,   149,
     150,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    -1,    -1,    -1,    48,    -1,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    -1,    62,    63,
      64,     9,    10,    11,    -1,    69,    70,    71,    72,    73,
      -1,    -1,   146,    -1,    -1,    79,    -1,    25,    -1,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,    -1,    -1,    -1,    -1,   110,    -1,    -1,   113,
     114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,   123,
     124,   125,   126,   127,   128,     3,     4,     5,     6,     7,
      -1,   135,    -1,    -1,    12,    -1,   140,    -1,   142,    -1,
      -1,    -1,    -1,   147,   148,   149,   150,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,
      48,    -1,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    -1,    62,    63,    64,     9,    10,    11,
      -1,    69,    70,    71,    72,    73,    -1,    -1,   146,    -1,
      -1,    79,    -1,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    -1,    49,    -1,    -1,
      -1,    -1,   110,    -1,    -1,   113,   114,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   122,   123,   124,   125,   126,   127,
     128,     3,     4,     5,     6,     7,    -1,   135,    -1,    -1,
      12,    -1,   140,    -1,   142,    -1,    -1,    -1,    -1,   147,
     148,   149,   150,    -1,    -1,    -1,    -1,    -1,    -1,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    -1,    -1,    -1,    -1,    48,    -1,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    -1,
      62,    63,    64,     9,    10,    11,    -1,    69,    70,    71,
      72,    73,   144,    -1,    -1,    -1,    -1,    79,    -1,    25,
      -1,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    -1,    -1,    -1,    -1,   110,    -1,
      -1,   113,   114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     122,   123,   124,   125,   126,   127,   128,     3,     4,     5,
       6,     7,    -1,   135,    -1,    -1,    12,    -1,   140,    -1,
     142,    -1,    -1,    -1,    -1,   147,   148,   149,   150,    -1,
      -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,
      -1,    -1,    48,    -1,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    -1,    62,    63,    64,     9,
      10,    11,    -1,    69,    70,    71,    72,    73,   144,    -1,
      -1,    -1,    -1,    79,    -1,    25,    -1,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
      -1,    -1,    -1,    -1,   110,    -1,    -1,   113,   114,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   122,   123,   124,   125,
     126,   127,   128,     3,     4,     5,     6,     7,    -1,   135,
      -1,    -1,    12,    -1,   140,    -1,   142,    -1,    -1,    -1,
      -1,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    48,    -1,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    -1,    62,    63,    64,     9,    10,    11,    -1,    69,
      70,    71,    72,    73,   144,    -1,    -1,    -1,    -1,    79,
      -1,    25,    -1,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,
     110,    -1,    -1,   113,   114,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   122,   123,   124,   125,   126,   127,   128,     3,
       4,     5,     6,     7,    -1,   135,    -1,    -1,    12,    -1,
     140,    -1,   142,    -1,    -1,    -1,    -1,   147,   148,   149,
     150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    -1,    -1,    -1,    48,    -1,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    -1,    62,    63,
      64,     9,    10,    11,    -1,    69,    70,    71,    72,    73,
     144,    -1,    -1,    -1,    -1,    79,    -1,    25,    -1,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,    -1,    -1,    -1,    -1,   110,    -1,    -1,   113,
     114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,   123,
     124,   125,   126,   127,   128,     3,     4,     5,     6,     7,
      -1,   135,    -1,    -1,    12,    -1,   140,    -1,   142,    -1,
      -1,    -1,    -1,   147,   148,   149,   150,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,
      48,    -1,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    -1,    62,    63,    64,     9,    10,    11,
      -1,    69,    70,    71,    72,    73,   144,    -1,    -1,    -1,
      -1,    79,    -1,    25,    -1,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    -1,    49,    -1,    -1,
      -1,    -1,   110,    -1,    -1,   113,   114,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   122,   123,   124,   125,   126,   127,
     128,    -1,    -1,    -1,    -1,    -1,    -1,   135,     9,    10,
      11,    -1,   140,    -1,   142,    -1,    -1,    -1,    -1,   147,
     148,   149,   150,    -1,    25,    -1,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      25,   143,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    -1,    49,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,     9,    10,    11,    -1,
      -1,    -1,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    25,    -1,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   143,    -1,
      -1,    -1,    -1,    25,    -1,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    -1,    49,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   143,
      -1,    -1,    -1,    -1,    25,    -1,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    -1,    49,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     143,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   143,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    -1,
      49,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   143,    -1,    -1,    -1,    -1,    25,    -1,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   143,    -1,    -1,    -1,    -1,    25,    -1,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   143,    -1,    -1,    -1,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   121,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    -1,    49,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   121,    25,    -1,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
      10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    11,    49,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    25,    -1,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    25,    49,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    -1,    49,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    -1,    49,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    -1,    49,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    -1,    49,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    -1,
      49
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,   153,   154,     0,     3,     4,     5,     6,     7,    12,
      42,    43,    48,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    62,    63,    64,    65,    69,    70,
      71,    72,    73,    75,    79,    80,    81,    82,    84,    86,
      88,    91,    95,    96,    97,    99,   100,   102,   104,   108,
     109,   110,   112,   113,   114,   115,   116,   117,   122,   123,
     124,   125,   126,   127,   128,   135,   140,   141,   142,   144,
     145,   147,   148,   149,   150,   155,   160,   161,   166,   168,
     171,   213,   214,   215,   224,   227,   231,   232,   234,   235,
     241,   242,   243,   244,   245,   246,   251,   258,   260,   110,
     140,   231,   231,   142,   231,   231,   231,   231,   231,   231,
     231,   231,   231,   231,   231,   231,   231,   231,   231,    71,
     215,   234,   235,   234,   231,    71,   215,   217,   218,   244,
     245,   251,   142,   222,   142,   142,   210,   231,   140,   160,
     142,   142,   142,   142,   142,   144,   231,   144,   231,    31,
     165,   144,   213,   231,   235,   145,   231,    73,   147,   195,
     196,   116,   116,    73,   197,   142,   142,   142,   142,    71,
     142,   142,   255,   161,   166,   168,   231,    51,    71,   156,
     157,   231,   158,   145,   255,   255,   255,    71,   139,     9,
      10,    11,    25,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    49,   144,    59,    60,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
     142,   236,    61,   145,   147,   245,   231,   139,   139,   142,
     223,   219,   245,   143,   231,   231,    31,   193,   194,   213,
     235,     8,   144,    82,   231,   211,   212,   231,   213,   235,
      71,   182,   231,   144,   144,    71,   144,   144,   158,   144,
     145,   232,   235,     8,   144,    13,     8,   144,   163,   164,
     235,   235,   259,   235,   143,   170,   122,   235,   252,    31,
     231,   253,   254,    73,    78,   136,   137,   138,   256,    71,
       8,   144,   143,   140,   146,   159,   160,   166,   168,   231,
     148,   149,   150,   118,   172,    71,   241,   245,   251,   231,
     231,   231,   231,   231,   231,   231,   231,   231,   231,   231,
     231,   231,   231,   231,   231,   231,   231,   231,   231,   231,
     231,   231,   231,   231,   217,    31,   231,   231,   231,   231,
     231,   231,   231,   231,   231,   231,   231,   231,   193,   120,
     231,   247,   231,   143,    71,   241,   193,   120,   143,   143,
     233,   235,   143,     8,   231,   142,   143,   144,     8,    90,
      90,    13,     8,   143,   143,   167,   146,   231,   196,    42,
      43,    71,   123,   224,   225,   226,    73,     8,   143,     8,
     143,   143,   144,   118,   174,   142,     8,   143,   233,   121,
     143,     8,   229,    61,   120,    72,   231,   235,   157,   166,
     168,   146,    71,   216,   169,   142,   142,   245,    26,    63,
     235,   143,    71,   145,   241,   248,   249,   250,   151,   146,
     143,   248,    26,   160,    31,   213,   235,   231,    26,   160,
     180,   211,   231,   235,    31,   177,   235,   225,    71,    26,
     160,   181,    26,   145,   183,   142,   101,   146,   225,   225,
     139,   142,    13,   164,   144,   235,   175,   216,   145,   252,
     122,   235,    13,    31,   231,    31,   231,    71,    73,    74,
     257,    71,    61,   146,   146,   119,   173,   193,   193,   231,
     217,   231,   142,   240,    61,   145,   220,   158,   186,   233,
     143,   158,   144,   121,   176,   235,   176,    13,   158,   144,
     184,   144,   184,    71,   123,   190,   191,   192,   142,    71,
     225,   228,   230,   225,     8,   198,   143,   142,   231,   233,
     233,   121,   151,   231,   175,   145,   143,   143,   223,   146,
     193,   237,   247,   231,   120,   221,   187,    66,    67,   188,
     144,    83,   211,   177,   143,   143,   225,    89,   184,    92,
      93,    94,   184,   146,   143,     8,    31,    73,   216,   121,
     143,     8,   229,   216,    97,    98,   105,   106,   107,   108,
     109,   110,   111,   140,   146,   199,   204,   205,   206,   207,
     209,   252,    31,   231,   151,   198,   143,   238,   151,   146,
     248,    66,    67,   189,   142,   160,   144,   143,    26,   160,
     179,   179,   144,    92,   144,   231,    26,   144,   185,   146,
     145,   192,    73,    13,    73,   225,   225,    71,   205,   206,
     200,   165,    97,   207,     8,   144,   143,   233,   146,   146,
     120,   239,   142,    26,    68,   231,    26,   160,   178,   158,
     144,   185,   158,   158,    31,    73,    13,   225,   143,   121,
      13,   165,    73,   208,    71,    71,   248,   231,   158,   144,
     143,   158,    87,   158,   146,    73,    13,   225,   145,   225,
     225,    71,    13,     8,   144,   142,    13,   240,   143,   160,
      85,   144,    13,   225,   158,   142,   225,    73,   201,   225,
      26,   144,   225,   146,   202,    13,   190,   158,   162,   190,
     225,   143,   101,   143,   144,   145,   203,   142,   203,   158,
     216,   146,    73,   143,   145,   158,   146
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (&yylloc, _p, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).line0   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).char0 = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).line1    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).char1  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).line0   = (Current).line1   =		\
	    YYRHSLOC (Rhs, 0).line1;				\
	  (Current).char0 = (Current).char1 =		\
	    YYRHSLOC (Rhs, 0).char1;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).line0, (Loc).char0,	\
	      (Loc).line1,  (Loc).char1)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, &yylloc, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, &yylloc)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location, _p); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, HPHP::HPHP_PARSER_NS::Parser *_p)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, _p)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
    HPHP::HPHP_PARSER_NS::Parser *_p;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
  YYUSE (_p);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, HPHP::HPHP_PARSER_NS::Parser *_p)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp, _p)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
    HPHP::HPHP_PARSER_NS::Parser *_p;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, _p);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, HPHP::HPHP_PARSER_NS::Parser *_p)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule, _p)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
    HPHP::HPHP_PARSER_NS::Parser *_p;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       , _p);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule, _p); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, HPHP::HPHP_PARSER_NS::Parser *_p)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp, _p)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
    HPHP::HPHP_PARSER_NS::Parser *_p;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  YYUSE (_p);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (HPHP::HPHP_PARSER_NS::Parser *_p);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (HPHP::HPHP_PARSER_NS::Parser *_p)
#else
int
yyparse (_p)
    HPHP::HPHP_PARSER_NS::Parser *_p;
#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;
  yylsp = yyls;

#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  /* Initialize the default location before parsing starts.  */
  yylloc.line0   = yylloc.line1   = 1;
  yylloc.char0 = yylloc.char1 = 1;
#endif

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	struct yyalloc *yyptr =
	  (struct yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        memset(yyptr, 0, YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE_RESET (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1464 of yacc.c  */
#line 211 "../../../src/util/parser/hphp.y"
    { _p->saveParseTree((yyval));;}
    break;

  case 3:

/* Line 1464 of yacc.c  */
#line 216 "../../../src/util/parser/hphp.y"
    { _p->addStatement((yyval),(yyvsp[(1) - (2)]),(yyvsp[(2) - (2)]));;}
    break;

  case 4:

/* Line 1464 of yacc.c  */
#line 217 "../../../src/util/parser/hphp.y"
    { _p->onStatementListStart((yyval));;}
    break;

  case 5:

/* Line 1464 of yacc.c  */
#line 220 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 6:

/* Line 1464 of yacc.c  */
#line 221 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 7:

/* Line 1464 of yacc.c  */
#line 222 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 8:

/* Line 1464 of yacc.c  */
#line 224 "../../../src/util/parser/hphp.y"
    { _p->onHphpNoteStatement((yyval),(yyvsp[(1) - (2)]),(yyvsp[(2) - (2)]));;}
    break;

  case 9:

/* Line 1464 of yacc.c  */
#line 226 "../../../src/util/parser/hphp.y"
    { _p->onHphpNoteStatement((yyval),(yyvsp[(1) - (2)]),(yyvsp[(2) - (2)]));;}
    break;

  case 10:

/* Line 1464 of yacc.c  */
#line 227 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 11:

/* Line 1464 of yacc.c  */
#line 229 "../../../src/util/parser/hphp.y"
    { (yyval).reset(); ;}
    break;

  case 12:

/* Line 1464 of yacc.c  */
#line 233 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 13:

/* Line 1464 of yacc.c  */
#line 234 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 14:

/* Line 1464 of yacc.c  */
#line 237 "../../../src/util/parser/hphp.y"
    { _p->addHphpSuppressError((yyvsp[(2) - (2)]));;}
    break;

  case 15:

/* Line 1464 of yacc.c  */
#line 238 "../../../src/util/parser/hphp.y"
    { _p->addHphpDeclare((yyvsp[(1) - (1)]));;}
    break;

  case 16:

/* Line 1464 of yacc.c  */
#line 242 "../../../src/util/parser/hphp.y"
    { _p->addStatement((yyval),(yyvsp[(1) - (2)]),(yyvsp[(2) - (2)]));;}
    break;

  case 17:

/* Line 1464 of yacc.c  */
#line 243 "../../../src/util/parser/hphp.y"
    { _p->onStatementListStart((yyval));;}
    break;

  case 18:

/* Line 1464 of yacc.c  */
#line 246 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 19:

/* Line 1464 of yacc.c  */
#line 247 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 20:

/* Line 1464 of yacc.c  */
#line 248 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 21:

/* Line 1464 of yacc.c  */
#line 250 "../../../src/util/parser/hphp.y"
    { _p->onHphpNoteStatement((yyval),(yyvsp[(1) - (2)]),(yyvsp[(2) - (2)]));;}
    break;

  case 22:

/* Line 1464 of yacc.c  */
#line 252 "../../../src/util/parser/hphp.y"
    { _p->onHphpNoteStatement((yyval),(yyvsp[(1) - (2)]),(yyvsp[(2) - (2)]));;}
    break;

  case 23:

/* Line 1464 of yacc.c  */
#line 255 "../../../src/util/parser/hphp.y"
    { _p->onExpStatement((yyval), (yyvsp[(1) - (2)]));;}
    break;

  case 24:

/* Line 1464 of yacc.c  */
#line 256 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 25:

/* Line 1464 of yacc.c  */
#line 257 "../../../src/util/parser/hphp.y"
    { _p->onHphpNoteStatement((yyval),(yyvsp[(1) - (2)]),(yyvsp[(2) - (2)]));;}
    break;

  case 26:

/* Line 1464 of yacc.c  */
#line 260 "../../../src/util/parser/hphp.y"
    { _p->onBlock((yyval), (yyvsp[(2) - (3)]));;}
    break;

  case 27:

/* Line 1464 of yacc.c  */
#line 265 "../../../src/util/parser/hphp.y"
    { _p->onIf((yyval),(yyvsp[(3) - (7)]),(yyvsp[(5) - (7)]),(yyvsp[(6) - (7)]),(yyvsp[(7) - (7)]));;}
    break;

  case 28:

/* Line 1464 of yacc.c  */
#line 271 "../../../src/util/parser/hphp.y"
    { _p->onIf((yyval),(yyvsp[(3) - (10)]),(yyvsp[(6) - (10)]),(yyvsp[(7) - (10)]),(yyvsp[(8) - (10)]));;}
    break;

  case 29:

/* Line 1464 of yacc.c  */
#line 274 "../../../src/util/parser/hphp.y"
    { _p->onWhile((yyval),(yyvsp[(3) - (5)]),(yyvsp[(5) - (5)]));;}
    break;

  case 30:

/* Line 1464 of yacc.c  */
#line 277 "../../../src/util/parser/hphp.y"
    { _p->onDo((yyval),(yyvsp[(2) - (7)]),(yyvsp[(5) - (7)]));;}
    break;

  case 31:

/* Line 1464 of yacc.c  */
#line 281 "../../../src/util/parser/hphp.y"
    { _p->onFor((yyval),(yyvsp[(3) - (9)]),(yyvsp[(5) - (9)]),(yyvsp[(7) - (9)]),(yyvsp[(9) - (9)]));;}
    break;

  case 32:

/* Line 1464 of yacc.c  */
#line 284 "../../../src/util/parser/hphp.y"
    { _p->onSwitch((yyval),(yyvsp[(3) - (5)]),(yyvsp[(5) - (5)]));;}
    break;

  case 33:

/* Line 1464 of yacc.c  */
#line 286 "../../../src/util/parser/hphp.y"
    { _p->onBreak((yyval), NULL);;}
    break;

  case 34:

/* Line 1464 of yacc.c  */
#line 287 "../../../src/util/parser/hphp.y"
    { _p->onBreak((yyval), &(yyvsp[(2) - (3)]));;}
    break;

  case 35:

/* Line 1464 of yacc.c  */
#line 289 "../../../src/util/parser/hphp.y"
    { _p->onContinue((yyval), NULL);;}
    break;

  case 36:

/* Line 1464 of yacc.c  */
#line 290 "../../../src/util/parser/hphp.y"
    { _p->onContinue((yyval), &(yyvsp[(2) - (3)]));;}
    break;

  case 37:

/* Line 1464 of yacc.c  */
#line 292 "../../../src/util/parser/hphp.y"
    { _p->onReturn((yyval), NULL);;}
    break;

  case 38:

/* Line 1464 of yacc.c  */
#line 293 "../../../src/util/parser/hphp.y"
    { _p->onReturn((yyval), &(yyvsp[(2) - (3)]));;}
    break;

  case 39:

/* Line 1464 of yacc.c  */
#line 294 "../../../src/util/parser/hphp.y"
    { _p->onReturn((yyval), &(yyvsp[(2) - (3)]));;}
    break;

  case 40:

/* Line 1464 of yacc.c  */
#line 296 "../../../src/util/parser/hphp.y"
    { _p->onGlobal((yyval), (yyvsp[(2) - (3)]));;}
    break;

  case 41:

/* Line 1464 of yacc.c  */
#line 297 "../../../src/util/parser/hphp.y"
    { _p->onStatic((yyval), (yyvsp[(2) - (3)]));;}
    break;

  case 42:

/* Line 1464 of yacc.c  */
#line 298 "../../../src/util/parser/hphp.y"
    { _p->onEcho((yyval), (yyvsp[(2) - (3)]), 0);;}
    break;

  case 43:

/* Line 1464 of yacc.c  */
#line 300 "../../../src/util/parser/hphp.y"
    { _p->onUnset((yyval), (yyvsp[(3) - (5)]));;}
    break;

  case 44:

/* Line 1464 of yacc.c  */
#line 301 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 45:

/* Line 1464 of yacc.c  */
#line 303 "../../../src/util/parser/hphp.y"
    { _p->onEcho((yyval), (yyvsp[(1) - (1)]), 1);;}
    break;

  case 46:

/* Line 1464 of yacc.c  */
#line 308 "../../../src/util/parser/hphp.y"
    { _p->onForEach((yyval),(yyvsp[(3) - (8)]),(yyvsp[(5) - (8)]),(yyvsp[(6) - (8)]),(yyvsp[(8) - (8)]));;}
    break;

  case 47:

/* Line 1464 of yacc.c  */
#line 313 "../../../src/util/parser/hphp.y"
    { _p->onForEach((yyval),(yyvsp[(3) - (8)]),(yyvsp[(5) - (8)]),(yyvsp[(6) - (8)]),(yyvsp[(8) - (8)]));;}
    break;

  case 48:

/* Line 1464 of yacc.c  */
#line 316 "../../../src/util/parser/hphp.y"
    { _p->onBlock((yyval), (yyvsp[(5) - (5)]));;}
    break;

  case 49:

/* Line 1464 of yacc.c  */
#line 323 "../../../src/util/parser/hphp.y"
    { _p->onTry((yyval),(yyvsp[(3) - (13)]),(yyvsp[(7) - (13)]),(yyvsp[(8) - (13)]),(yyvsp[(11) - (13)]),(yyvsp[(13) - (13)]));;}
    break;

  case 50:

/* Line 1464 of yacc.c  */
#line 325 "../../../src/util/parser/hphp.y"
    { _p->onThrow((yyval), (yyvsp[(2) - (3)]));;}
    break;

  case 51:

/* Line 1464 of yacc.c  */
#line 333 "../../../src/util/parser/hphp.y"
    { _p->onCatch((yyval), (yyvsp[(1) - (9)]), (yyvsp[(4) - (9)]), (yyvsp[(5) - (9)]), (yyvsp[(8) - (9)]));;}
    break;

  case 52:

/* Line 1464 of yacc.c  */
#line 334 "../../../src/util/parser/hphp.y"
    { (yyval).reset(); ;}
    break;

  case 53:

/* Line 1464 of yacc.c  */
#line 338 "../../../src/util/parser/hphp.y"
    { _p->onExprListElem((yyval), NULL, (yyvsp[(1) - (1)]));;}
    break;

  case 54:

/* Line 1464 of yacc.c  */
#line 339 "../../../src/util/parser/hphp.y"
    { _p->onExprListElem((yyval), &(yyvsp[(1) - (3)]), (yyvsp[(3) - (3)]));;}
    break;

  case 55:

/* Line 1464 of yacc.c  */
#line 342 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 56:

/* Line 1464 of yacc.c  */
#line 346 "../../../src/util/parser/hphp.y"
    { (yyval) = 1;;}
    break;

  case 57:

/* Line 1464 of yacc.c  */
#line 347 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 58:

/* Line 1464 of yacc.c  */
#line 351 "../../../src/util/parser/hphp.y"
    { _p->onFunctionStart((yyvsp[(3) - (3)]));;}
    break;

  case 59:

/* Line 1464 of yacc.c  */
#line 353 "../../../src/util/parser/hphp.y"
    { _p->onFunction((yyval),(yyvsp[(2) - (10)]),(yyvsp[(3) - (10)]),(yyvsp[(6) - (10)]),(yyvsp[(9) - (10)]));;}
    break;

  case 60:

/* Line 1464 of yacc.c  */
#line 358 "../../../src/util/parser/hphp.y"
    { _p->onClassStart((yyvsp[(1) - (3)]).num(), (yyvsp[(2) - (3)]), &(yyvsp[(3) - (3)]));;}
    break;

  case 61:

/* Line 1464 of yacc.c  */
#line 360 "../../../src/util/parser/hphp.y"
    { _p->onClass((yyval),(yyvsp[(1) - (8)]),(yyvsp[(2) - (8)]),(yyvsp[(3) - (8)]),(yyvsp[(5) - (8)]),(yyvsp[(7) - (8)]));;}
    break;

  case 62:

/* Line 1464 of yacc.c  */
#line 362 "../../../src/util/parser/hphp.y"
    { _p->onClassStart(T_INTERFACE, (yyvsp[(2) - (2)]), 0);;}
    break;

  case 63:

/* Line 1464 of yacc.c  */
#line 364 "../../../src/util/parser/hphp.y"
    { _p->onInterface((yyval),(yyvsp[(2) - (7)]),(yyvsp[(4) - (7)]),(yyvsp[(6) - (7)]));;}
    break;

  case 64:

/* Line 1464 of yacc.c  */
#line 367 "../../../src/util/parser/hphp.y"
    { (yyval) = T_CLASS;;}
    break;

  case 65:

/* Line 1464 of yacc.c  */
#line 368 "../../../src/util/parser/hphp.y"
    { (yyval) = T_ABSTRACT;;}
    break;

  case 66:

/* Line 1464 of yacc.c  */
#line 369 "../../../src/util/parser/hphp.y"
    { (yyval) = T_FINAL;;}
    break;

  case 67:

/* Line 1464 of yacc.c  */
#line 373 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (2)]);;}
    break;

  case 68:

/* Line 1464 of yacc.c  */
#line 374 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 69:

/* Line 1464 of yacc.c  */
#line 377 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (2)]);;}
    break;

  case 70:

/* Line 1464 of yacc.c  */
#line 378 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 71:

/* Line 1464 of yacc.c  */
#line 381 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (2)]);;}
    break;

  case 72:

/* Line 1464 of yacc.c  */
#line 382 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 73:

/* Line 1464 of yacc.c  */
#line 385 "../../../src/util/parser/hphp.y"
    { _p->onInterfaceName((yyval), NULL, (yyvsp[(1) - (1)]));;}
    break;

  case 74:

/* Line 1464 of yacc.c  */
#line 387 "../../../src/util/parser/hphp.y"
    { _p->onInterfaceName((yyval), &(yyvsp[(1) - (3)]), (yyvsp[(3) - (3)]));;}
    break;

  case 75:

/* Line 1464 of yacc.c  */
#line 391 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (2)]);;}
    break;

  case 76:

/* Line 1464 of yacc.c  */
#line 392 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 77:

/* Line 1464 of yacc.c  */
#line 395 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 78:

/* Line 1464 of yacc.c  */
#line 396 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (2)]); (yyval) = 1;;}
    break;

  case 79:

/* Line 1464 of yacc.c  */
#line 400 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 80:

/* Line 1464 of yacc.c  */
#line 402 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (4)]);;}
    break;

  case 81:

/* Line 1464 of yacc.c  */
#line 405 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 82:

/* Line 1464 of yacc.c  */
#line 407 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (4)]);;}
    break;

  case 83:

/* Line 1464 of yacc.c  */
#line 410 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 84:

/* Line 1464 of yacc.c  */
#line 412 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (4)]);;}
    break;

  case 85:

/* Line 1464 of yacc.c  */
#line 415 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 86:

/* Line 1464 of yacc.c  */
#line 417 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (4)]);;}
    break;

  case 89:

/* Line 1464 of yacc.c  */
#line 427 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (3)]);;}
    break;

  case 90:

/* Line 1464 of yacc.c  */
#line 428 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(3) - (4)]);;}
    break;

  case 91:

/* Line 1464 of yacc.c  */
#line 429 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (4)]);;}
    break;

  case 92:

/* Line 1464 of yacc.c  */
#line 430 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(3) - (5)]);;}
    break;

  case 93:

/* Line 1464 of yacc.c  */
#line 435 "../../../src/util/parser/hphp.y"
    { _p->onCase((yyval),(yyvsp[(1) - (5)]),&(yyvsp[(3) - (5)]),(yyvsp[(5) - (5)]));;}
    break;

  case 94:

/* Line 1464 of yacc.c  */
#line 437 "../../../src/util/parser/hphp.y"
    { _p->onCase((yyval),(yyvsp[(1) - (4)]),NULL,(yyvsp[(4) - (4)]));;}
    break;

  case 95:

/* Line 1464 of yacc.c  */
#line 438 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 96:

/* Line 1464 of yacc.c  */
#line 441 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 97:

/* Line 1464 of yacc.c  */
#line 442 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 98:

/* Line 1464 of yacc.c  */
#line 447 "../../../src/util/parser/hphp.y"
    { _p->onElseIf((yyval),(yyvsp[(1) - (6)]),(yyvsp[(4) - (6)]),(yyvsp[(6) - (6)]));;}
    break;

  case 99:

/* Line 1464 of yacc.c  */
#line 448 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 100:

/* Line 1464 of yacc.c  */
#line 453 "../../../src/util/parser/hphp.y"
    { _p->onElseIf((yyval),(yyvsp[(1) - (7)]),(yyvsp[(4) - (7)]),(yyvsp[(7) - (7)]));;}
    break;

  case 101:

/* Line 1464 of yacc.c  */
#line 454 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 102:

/* Line 1464 of yacc.c  */
#line 457 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (2)]);;}
    break;

  case 103:

/* Line 1464 of yacc.c  */
#line 458 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 104:

/* Line 1464 of yacc.c  */
#line 461 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(3) - (3)]);;}
    break;

  case 105:

/* Line 1464 of yacc.c  */
#line 462 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 106:

/* Line 1464 of yacc.c  */
#line 466 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 107:

/* Line 1464 of yacc.c  */
#line 467 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 108:

/* Line 1464 of yacc.c  */
#line 470 "../../../src/util/parser/hphp.y"
    { _p->onParam((yyval),NULL,(yyvsp[(1) - (2)]),(yyvsp[(2) - (2)]),0,NULL);;}
    break;

  case 109:

/* Line 1464 of yacc.c  */
#line 471 "../../../src/util/parser/hphp.y"
    { _p->onParam((yyval),NULL,(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),1,NULL);;}
    break;

  case 110:

/* Line 1464 of yacc.c  */
#line 473 "../../../src/util/parser/hphp.y"
    { _p->onParam((yyval),NULL,(yyvsp[(1) - (5)]),(yyvsp[(3) - (5)]),1,&(yyvsp[(5) - (5)]));;}
    break;

  case 111:

/* Line 1464 of yacc.c  */
#line 475 "../../../src/util/parser/hphp.y"
    { _p->onParam((yyval),NULL,(yyvsp[(1) - (4)]),(yyvsp[(2) - (4)]),0,&(yyvsp[(4) - (4)]));;}
    break;

  case 112:

/* Line 1464 of yacc.c  */
#line 477 "../../../src/util/parser/hphp.y"
    { _p->onParam((yyval),&(yyvsp[(1) - (4)]),(yyvsp[(3) - (4)]),(yyvsp[(4) - (4)]),0,NULL);;}
    break;

  case 113:

/* Line 1464 of yacc.c  */
#line 479 "../../../src/util/parser/hphp.y"
    { _p->onParam((yyval),&(yyvsp[(1) - (5)]),(yyvsp[(3) - (5)]),(yyvsp[(5) - (5)]),1,NULL);;}
    break;

  case 114:

/* Line 1464 of yacc.c  */
#line 482 "../../../src/util/parser/hphp.y"
    { _p->onParam((yyval),&(yyvsp[(1) - (7)]),(yyvsp[(3) - (7)]),(yyvsp[(5) - (7)]),1,&(yyvsp[(7) - (7)]));;}
    break;

  case 115:

/* Line 1464 of yacc.c  */
#line 485 "../../../src/util/parser/hphp.y"
    { _p->onParam((yyval),&(yyvsp[(1) - (6)]),(yyvsp[(3) - (6)]),(yyvsp[(4) - (6)]),0,&(yyvsp[(6) - (6)]));;}
    break;

  case 116:

/* Line 1464 of yacc.c  */
#line 488 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 117:

/* Line 1464 of yacc.c  */
#line 489 "../../../src/util/parser/hphp.y"
    { (yyval).setText("array");;}
    break;

  case 118:

/* Line 1464 of yacc.c  */
#line 490 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 119:

/* Line 1464 of yacc.c  */
#line 494 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 120:

/* Line 1464 of yacc.c  */
#line 495 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 121:

/* Line 1464 of yacc.c  */
#line 498 "../../../src/util/parser/hphp.y"
    { _p->onCallParam((yyval),NULL,(yyvsp[(1) - (1)]),0);;}
    break;

  case 122:

/* Line 1464 of yacc.c  */
#line 499 "../../../src/util/parser/hphp.y"
    { _p->onCallParam((yyval),NULL,(yyvsp[(1) - (1)]),0);;}
    break;

  case 123:

/* Line 1464 of yacc.c  */
#line 500 "../../../src/util/parser/hphp.y"
    { _p->onCallParam((yyval),NULL,(yyvsp[(2) - (2)]),1);;}
    break;

  case 124:

/* Line 1464 of yacc.c  */
#line 502 "../../../src/util/parser/hphp.y"
    { _p->onCallParam((yyval),&(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),0);;}
    break;

  case 125:

/* Line 1464 of yacc.c  */
#line 504 "../../../src/util/parser/hphp.y"
    { _p->onCallParam((yyval),&(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),0);;}
    break;

  case 126:

/* Line 1464 of yacc.c  */
#line 506 "../../../src/util/parser/hphp.y"
    { _p->onCallParam((yyval),&(yyvsp[(1) - (4)]),(yyvsp[(4) - (4)]),1);;}
    break;

  case 127:

/* Line 1464 of yacc.c  */
#line 510 "../../../src/util/parser/hphp.y"
    { _p->onGlobalVar((yyval), &(yyvsp[(1) - (3)]), (yyvsp[(3) - (3)]));;}
    break;

  case 128:

/* Line 1464 of yacc.c  */
#line 511 "../../../src/util/parser/hphp.y"
    { _p->onGlobalVar((yyval), NULL, (yyvsp[(1) - (1)]));;}
    break;

  case 129:

/* Line 1464 of yacc.c  */
#line 514 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 130:

/* Line 1464 of yacc.c  */
#line 515 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (2)]); (yyval) = 1;;}
    break;

  case 131:

/* Line 1464 of yacc.c  */
#line 516 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(3) - (4)]); (yyval) = 1;;}
    break;

  case 132:

/* Line 1464 of yacc.c  */
#line 520 "../../../src/util/parser/hphp.y"
    { _p->onStaticVariable((yyval),&(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),0);;}
    break;

  case 133:

/* Line 1464 of yacc.c  */
#line 522 "../../../src/util/parser/hphp.y"
    { _p->onStaticVariable((yyval),&(yyvsp[(1) - (5)]),(yyvsp[(3) - (5)]),&(yyvsp[(5) - (5)]));;}
    break;

  case 134:

/* Line 1464 of yacc.c  */
#line 523 "../../../src/util/parser/hphp.y"
    { _p->onStaticVariable((yyval),0,(yyvsp[(1) - (1)]),0);;}
    break;

  case 135:

/* Line 1464 of yacc.c  */
#line 524 "../../../src/util/parser/hphp.y"
    { _p->onStaticVariable((yyval),0,(yyvsp[(1) - (3)]),&(yyvsp[(3) - (3)]));;}
    break;

  case 136:

/* Line 1464 of yacc.c  */
#line 529 "../../../src/util/parser/hphp.y"
    { _p->onClassStatement((yyval), (yyvsp[(1) - (2)]), (yyvsp[(2) - (2)]));;}
    break;

  case 137:

/* Line 1464 of yacc.c  */
#line 530 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 138:

/* Line 1464 of yacc.c  */
#line 533 "../../../src/util/parser/hphp.y"
    { _p->onClassVariableModifer((yyvsp[(1) - (1)]));;}
    break;

  case 139:

/* Line 1464 of yacc.c  */
#line 534 "../../../src/util/parser/hphp.y"
    { _p->onClassVariableStart((yyval),&(yyvsp[(1) - (4)]),(yyvsp[(3) - (4)]));;}
    break;

  case 140:

/* Line 1464 of yacc.c  */
#line 535 "../../../src/util/parser/hphp.y"
    { _p->onClassVariableStart((yyval),NULL,(yyvsp[(1) - (2)]));;}
    break;

  case 141:

/* Line 1464 of yacc.c  */
#line 537 "../../../src/util/parser/hphp.y"
    { _p->onMethodStart((yyvsp[(3) - (4)]), (yyvsp[(1) - (4)]));;}
    break;

  case 142:

/* Line 1464 of yacc.c  */
#line 538 "../../../src/util/parser/hphp.y"
    { _p->onMethod((yyval),(yyvsp[(1) - (8)]),(yyvsp[(2) - (8)]),(yyvsp[(3) - (8)]),(yyvsp[(6) - (8)]),(yyvsp[(8) - (8)]));;}
    break;

  case 143:

/* Line 1464 of yacc.c  */
#line 540 "../../../src/util/parser/hphp.y"
    { _p->onMethodStart((yyvsp[(4) - (5)]), (yyvsp[(2) - (5)]));;}
    break;

  case 144:

/* Line 1464 of yacc.c  */
#line 541 "../../../src/util/parser/hphp.y"
    { _p->onMethod((yyval),(yyvsp[(2) - (9)]),(yyvsp[(3) - (9)]),(yyvsp[(4) - (9)]),(yyvsp[(7) - (9)]),(yyvsp[(9) - (9)]));
                                         _p->onHphpNoteStatement((yyval),(yyvsp[(1) - (9)]),(yyval));;}
    break;

  case 145:

/* Line 1464 of yacc.c  */
#line 545 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 146:

/* Line 1464 of yacc.c  */
#line 546 "../../../src/util/parser/hphp.y"
    { _p->finishStatement((yyval), (yyvsp[(2) - (3)]));
                                         (yyval) = 1;;}
    break;

  case 147:

/* Line 1464 of yacc.c  */
#line 550 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 148:

/* Line 1464 of yacc.c  */
#line 551 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 149:

/* Line 1464 of yacc.c  */
#line 555 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (2)]);;}
    break;

  case 150:

/* Line 1464 of yacc.c  */
#line 556 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 151:

/* Line 1464 of yacc.c  */
#line 559 "../../../src/util/parser/hphp.y"
    { _p->onMemberModifier((yyval),NULL,(yyvsp[(1) - (1)]));;}
    break;

  case 152:

/* Line 1464 of yacc.c  */
#line 561 "../../../src/util/parser/hphp.y"
    { _p->onMemberModifier((yyval),&(yyvsp[(1) - (2)]),(yyvsp[(2) - (2)]));;}
    break;

  case 153:

/* Line 1464 of yacc.c  */
#line 564 "../../../src/util/parser/hphp.y"
    { (yyval) = T_PUBLIC;;}
    break;

  case 154:

/* Line 1464 of yacc.c  */
#line 565 "../../../src/util/parser/hphp.y"
    { (yyval) = T_PROTECTED;;}
    break;

  case 155:

/* Line 1464 of yacc.c  */
#line 566 "../../../src/util/parser/hphp.y"
    { (yyval) = T_PRIVATE;;}
    break;

  case 156:

/* Line 1464 of yacc.c  */
#line 567 "../../../src/util/parser/hphp.y"
    { (yyval) = T_STATIC;;}
    break;

  case 157:

/* Line 1464 of yacc.c  */
#line 568 "../../../src/util/parser/hphp.y"
    { (yyval) = T_ABSTRACT;;}
    break;

  case 158:

/* Line 1464 of yacc.c  */
#line 569 "../../../src/util/parser/hphp.y"
    { (yyval) = T_FINAL;;}
    break;

  case 159:

/* Line 1464 of yacc.c  */
#line 573 "../../../src/util/parser/hphp.y"
    { _p->onClassVariable((yyval),&(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),0);;}
    break;

  case 160:

/* Line 1464 of yacc.c  */
#line 575 "../../../src/util/parser/hphp.y"
    { _p->onClassVariable((yyval),&(yyvsp[(1) - (5)]),(yyvsp[(3) - (5)]),&(yyvsp[(5) - (5)]));;}
    break;

  case 161:

/* Line 1464 of yacc.c  */
#line 576 "../../../src/util/parser/hphp.y"
    { _p->onClassVariable((yyval),0,(yyvsp[(1) - (1)]),0);;}
    break;

  case 162:

/* Line 1464 of yacc.c  */
#line 577 "../../../src/util/parser/hphp.y"
    { _p->onClassVariable((yyval),0,(yyvsp[(1) - (3)]),&(yyvsp[(3) - (3)]));;}
    break;

  case 163:

/* Line 1464 of yacc.c  */
#line 581 "../../../src/util/parser/hphp.y"
    { _p->onClassConstant((yyval),&(yyvsp[(1) - (5)]),(yyvsp[(3) - (5)]),(yyvsp[(5) - (5)]));;}
    break;

  case 164:

/* Line 1464 of yacc.c  */
#line 582 "../../../src/util/parser/hphp.y"
    { _p->onClassConstant((yyval),0,(yyvsp[(2) - (4)]),(yyvsp[(4) - (4)]));;}
    break;

  case 165:

/* Line 1464 of yacc.c  */
#line 586 "../../../src/util/parser/hphp.y"
    { _p->onExprListElem((yyval), &(yyvsp[(1) - (3)]), (yyvsp[(3) - (3)]));;}
    break;

  case 166:

/* Line 1464 of yacc.c  */
#line 587 "../../../src/util/parser/hphp.y"
    { _p->onExprListElem((yyval), NULL, (yyvsp[(1) - (1)]));;}
    break;

  case 167:

/* Line 1464 of yacc.c  */
#line 591 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 168:

/* Line 1464 of yacc.c  */
#line 592 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 169:

/* Line 1464 of yacc.c  */
#line 595 "../../../src/util/parser/hphp.y"
    { _p->onExprListElem((yyval), &(yyvsp[(1) - (3)]), (yyvsp[(3) - (3)]));;}
    break;

  case 170:

/* Line 1464 of yacc.c  */
#line 596 "../../../src/util/parser/hphp.y"
    { _p->onExprListElem((yyval), NULL, (yyvsp[(1) - (1)]));;}
    break;

  case 171:

/* Line 1464 of yacc.c  */
#line 601 "../../../src/util/parser/hphp.y"
    { _p->onListAssignment((yyval), (yyvsp[(3) - (6)]), &(yyvsp[(6) - (6)]));;}
    break;

  case 172:

/* Line 1464 of yacc.c  */
#line 602 "../../../src/util/parser/hphp.y"
    { _p->onAssign((yyval), (yyvsp[(1) - (3)]), (yyvsp[(3) - (3)]), 0);;}
    break;

  case 173:

/* Line 1464 of yacc.c  */
#line 603 "../../../src/util/parser/hphp.y"
    { _p->onAssign((yyval), (yyvsp[(1) - (4)]), (yyvsp[(4) - (4)]), 1);;}
    break;

  case 174:

/* Line 1464 of yacc.c  */
#line 606 "../../../src/util/parser/hphp.y"
    { _p->onAssignNew((yyval),(yyvsp[(1) - (6)]),(yyvsp[(5) - (6)]),(yyvsp[(6) - (6)]));;}
    break;

  case 175:

/* Line 1464 of yacc.c  */
#line 608 "../../../src/util/parser/hphp.y"
    { _p->onNewObject((yyval), (yyvsp[(2) - (3)]), (yyvsp[(3) - (3)]));;}
    break;

  case 176:

/* Line 1464 of yacc.c  */
#line 609 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_CLONE,1);;}
    break;

  case 177:

/* Line 1464 of yacc.c  */
#line 610 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_PLUS_EQUAL);;}
    break;

  case 178:

/* Line 1464 of yacc.c  */
#line 611 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_MINUS_EQUAL);;}
    break;

  case 179:

/* Line 1464 of yacc.c  */
#line 612 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_MUL_EQUAL);;}
    break;

  case 180:

/* Line 1464 of yacc.c  */
#line 613 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_DIV_EQUAL);;}
    break;

  case 181:

/* Line 1464 of yacc.c  */
#line 614 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_CONCAT_EQUAL);;}
    break;

  case 182:

/* Line 1464 of yacc.c  */
#line 615 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_MOD_EQUAL);;}
    break;

  case 183:

/* Line 1464 of yacc.c  */
#line 616 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_AND_EQUAL);;}
    break;

  case 184:

/* Line 1464 of yacc.c  */
#line 617 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_OR_EQUAL);;}
    break;

  case 185:

/* Line 1464 of yacc.c  */
#line 618 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_XOR_EQUAL);;}
    break;

  case 186:

/* Line 1464 of yacc.c  */
#line 619 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_SL_EQUAL);;}
    break;

  case 187:

/* Line 1464 of yacc.c  */
#line 620 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_SR_EQUAL);;}
    break;

  case 188:

/* Line 1464 of yacc.c  */
#line 621 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(1) - (2)]),T_INC,0);;}
    break;

  case 189:

/* Line 1464 of yacc.c  */
#line 622 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_INC,1);;}
    break;

  case 190:

/* Line 1464 of yacc.c  */
#line 623 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(1) - (2)]),T_DEC,0);;}
    break;

  case 191:

/* Line 1464 of yacc.c  */
#line 624 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_DEC,1);;}
    break;

  case 192:

/* Line 1464 of yacc.c  */
#line 625 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_BOOLEAN_OR);;}
    break;

  case 193:

/* Line 1464 of yacc.c  */
#line 626 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_BOOLEAN_AND);;}
    break;

  case 194:

/* Line 1464 of yacc.c  */
#line 627 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_LOGICAL_OR);;}
    break;

  case 195:

/* Line 1464 of yacc.c  */
#line 628 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_LOGICAL_AND);;}
    break;

  case 196:

/* Line 1464 of yacc.c  */
#line 629 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_LOGICAL_XOR);;}
    break;

  case 197:

/* Line 1464 of yacc.c  */
#line 630 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),'|');;}
    break;

  case 198:

/* Line 1464 of yacc.c  */
#line 631 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),'&');;}
    break;

  case 199:

/* Line 1464 of yacc.c  */
#line 632 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),'^');;}
    break;

  case 200:

/* Line 1464 of yacc.c  */
#line 633 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),'.');;}
    break;

  case 201:

/* Line 1464 of yacc.c  */
#line 634 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),'+');;}
    break;

  case 202:

/* Line 1464 of yacc.c  */
#line 635 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),'-');;}
    break;

  case 203:

/* Line 1464 of yacc.c  */
#line 636 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),'*');;}
    break;

  case 204:

/* Line 1464 of yacc.c  */
#line 637 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),'/');;}
    break;

  case 205:

/* Line 1464 of yacc.c  */
#line 638 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),'%');;}
    break;

  case 206:

/* Line 1464 of yacc.c  */
#line 639 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_SL);;}
    break;

  case 207:

/* Line 1464 of yacc.c  */
#line 640 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_SR);;}
    break;

  case 208:

/* Line 1464 of yacc.c  */
#line 641 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),'+',1);;}
    break;

  case 209:

/* Line 1464 of yacc.c  */
#line 642 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),'-',1);;}
    break;

  case 210:

/* Line 1464 of yacc.c  */
#line 643 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),'!',1);;}
    break;

  case 211:

/* Line 1464 of yacc.c  */
#line 644 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),'~',1);;}
    break;

  case 212:

/* Line 1464 of yacc.c  */
#line 645 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_IS_IDENTICAL);;}
    break;

  case 213:

/* Line 1464 of yacc.c  */
#line 646 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_IS_NOT_IDENTICAL);;}
    break;

  case 214:

/* Line 1464 of yacc.c  */
#line 647 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_IS_EQUAL);;}
    break;

  case 215:

/* Line 1464 of yacc.c  */
#line 648 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_IS_NOT_EQUAL);;}
    break;

  case 216:

/* Line 1464 of yacc.c  */
#line 649 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),'<');;}
    break;

  case 217:

/* Line 1464 of yacc.c  */
#line 650 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),
                                              T_IS_SMALLER_OR_EQUAL);;}
    break;

  case 218:

/* Line 1464 of yacc.c  */
#line 652 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),'>');;}
    break;

  case 219:

/* Line 1464 of yacc.c  */
#line 653 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),
                                              T_IS_GREATER_OR_EQUAL);;}
    break;

  case 220:

/* Line 1464 of yacc.c  */
#line 656 "../../../src/util/parser/hphp.y"
    { BEXP((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),T_INSTANCEOF);;}
    break;

  case 221:

/* Line 1464 of yacc.c  */
#line 657 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (3)]),'(',1);;}
    break;

  case 222:

/* Line 1464 of yacc.c  */
#line 658 "../../../src/util/parser/hphp.y"
    { _p->onQOp((yyval), (yyvsp[(1) - (5)]), (yyvsp[(3) - (5)]), (yyvsp[(5) - (5)]));;}
    break;

  case 223:

/* Line 1464 of yacc.c  */
#line 659 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 224:

/* Line 1464 of yacc.c  */
#line 660 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_INT_CAST,1);;}
    break;

  case 225:

/* Line 1464 of yacc.c  */
#line 661 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_DOUBLE_CAST,1);;}
    break;

  case 226:

/* Line 1464 of yacc.c  */
#line 662 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_STRING_CAST,1);;}
    break;

  case 227:

/* Line 1464 of yacc.c  */
#line 663 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_ARRAY_CAST,1);;}
    break;

  case 228:

/* Line 1464 of yacc.c  */
#line 664 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_OBJECT_CAST,1);;}
    break;

  case 229:

/* Line 1464 of yacc.c  */
#line 665 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_BOOL_CAST,1);;}
    break;

  case 230:

/* Line 1464 of yacc.c  */
#line 666 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_UNSET_CAST,1);;}
    break;

  case 231:

/* Line 1464 of yacc.c  */
#line 667 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_EXIT,1);;}
    break;

  case 232:

/* Line 1464 of yacc.c  */
#line 668 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),'@',1);;}
    break;

  case 233:

/* Line 1464 of yacc.c  */
#line 669 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 234:

/* Line 1464 of yacc.c  */
#line 670 "../../../src/util/parser/hphp.y"
    { _p->onArray((yyval),(yyvsp[(3) - (4)]));;}
    break;

  case 235:

/* Line 1464 of yacc.c  */
#line 671 "../../../src/util/parser/hphp.y"
    { _p->onEncapsList((yyval),'`',(yyvsp[(2) - (3)]));;}
    break;

  case 236:

/* Line 1464 of yacc.c  */
#line 672 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_PRINT,1);;}
    break;

  case 237:

/* Line 1464 of yacc.c  */
#line 673 "../../../src/util/parser/hphp.y"
    { _p->onHphpNoteExpr((yyval),(yyvsp[(1) - (2)]),(yyvsp[(2) - (2)]));;}
    break;

  case 238:

/* Line 1464 of yacc.c  */
#line 678 "../../../src/util/parser/hphp.y"
    { _p->onCall((yyval),0,(yyvsp[(1) - (4)]),(yyvsp[(3) - (4)]),NULL);;}
    break;

  case 239:

/* Line 1464 of yacc.c  */
#line 680 "../../../src/util/parser/hphp.y"
    { _p->onCall((yyval),1,(yyvsp[(1) - (4)]),(yyvsp[(3) - (4)]),NULL);;}
    break;

  case 240:

/* Line 1464 of yacc.c  */
#line 684 "../../../src/util/parser/hphp.y"
    { _p->onCall((yyval),0,(yyvsp[(3) - (6)]),(yyvsp[(5) - (6)]),&(yyvsp[(1) - (6)]));;}
    break;

  case 241:

/* Line 1464 of yacc.c  */
#line 688 "../../../src/util/parser/hphp.y"
    { _p->onCall((yyval),1,(yyvsp[(3) - (6)]),(yyvsp[(5) - (6)]),&(yyvsp[(1) - (6)]));;}
    break;

  case 242:

/* Line 1464 of yacc.c  */
#line 691 "../../../src/util/parser/hphp.y"
    { _p->onName((yyval),(yyvsp[(1) - (1)]),Parser::StringName);;}
    break;

  case 243:

/* Line 1464 of yacc.c  */
#line 692 "../../../src/util/parser/hphp.y"
    { _p->onName((yyval),(yyvsp[(1) - (1)]),Parser::StaticName);;}
    break;

  case 244:

/* Line 1464 of yacc.c  */
#line 693 "../../../src/util/parser/hphp.y"
    { _p->onName((yyval), (yyvsp[(1) - (1)]),
                                         Parser::StaticClassExprName);;}
    break;

  case 245:

/* Line 1464 of yacc.c  */
#line 697 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 246:

/* Line 1464 of yacc.c  */
#line 700 "../../../src/util/parser/hphp.y"
    { _p->onName((yyval),(yyvsp[(1) - (1)]),Parser::StringName);;}
    break;

  case 247:

/* Line 1464 of yacc.c  */
#line 701 "../../../src/util/parser/hphp.y"
    { _p->onName((yyval),(yyvsp[(1) - (1)]),Parser::ExprName);;}
    break;

  case 248:

/* Line 1464 of yacc.c  */
#line 704 "../../../src/util/parser/hphp.y"
    { _p->pushObject((yyvsp[(1) - (1)]));;}
    break;

  case 249:

/* Line 1464 of yacc.c  */
#line 706 "../../../src/util/parser/hphp.y"
    { _p->popObject((yyval));;}
    break;

  case 250:

/* Line 1464 of yacc.c  */
#line 707 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 251:

/* Line 1464 of yacc.c  */
#line 711 "../../../src/util/parser/hphp.y"
    { ;}
    break;

  case 252:

/* Line 1464 of yacc.c  */
#line 712 "../../../src/util/parser/hphp.y"
    { ;}
    break;

  case 253:

/* Line 1464 of yacc.c  */
#line 715 "../../../src/util/parser/hphp.y"
    { ;}
    break;

  case 254:

/* Line 1464 of yacc.c  */
#line 719 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 255:

/* Line 1464 of yacc.c  */
#line 720 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (3)]);;}
    break;

  case 256:

/* Line 1464 of yacc.c  */
#line 721 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 257:

/* Line 1464 of yacc.c  */
#line 726 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (3)]);;}
    break;

  case 258:

/* Line 1464 of yacc.c  */
#line 727 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 259:

/* Line 1464 of yacc.c  */
#line 731 "../../../src/util/parser/hphp.y"
    { _p->onScalar((yyval), T_LNUMBER,  (yyvsp[(1) - (1)]));;}
    break;

  case 260:

/* Line 1464 of yacc.c  */
#line 732 "../../../src/util/parser/hphp.y"
    { _p->onScalar((yyval), T_DNUMBER,  (yyvsp[(1) - (1)]));;}
    break;

  case 261:

/* Line 1464 of yacc.c  */
#line 733 "../../../src/util/parser/hphp.y"
    { _p->onScalar((yyval),
                                         T_CONSTANT_ENCAPSED_STRING,  (yyvsp[(1) - (1)]));;}
    break;

  case 262:

/* Line 1464 of yacc.c  */
#line 735 "../../../src/util/parser/hphp.y"
    { _p->onScalar((yyval), T_LINE,     (yyvsp[(1) - (1)]));;}
    break;

  case 263:

/* Line 1464 of yacc.c  */
#line 736 "../../../src/util/parser/hphp.y"
    { _p->onScalar((yyval), T_FILE,     (yyvsp[(1) - (1)]));;}
    break;

  case 264:

/* Line 1464 of yacc.c  */
#line 737 "../../../src/util/parser/hphp.y"
    { _p->onScalar((yyval), T_CLASS_C,  (yyvsp[(1) - (1)]));;}
    break;

  case 265:

/* Line 1464 of yacc.c  */
#line 738 "../../../src/util/parser/hphp.y"
    { _p->onScalar((yyval), T_METHOD_C, (yyvsp[(1) - (1)]));;}
    break;

  case 266:

/* Line 1464 of yacc.c  */
#line 739 "../../../src/util/parser/hphp.y"
    { _p->onScalar((yyval), T_FUNC_C,   (yyvsp[(1) - (1)]));;}
    break;

  case 267:

/* Line 1464 of yacc.c  */
#line 742 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 268:

/* Line 1464 of yacc.c  */
#line 743 "../../../src/util/parser/hphp.y"
    { _p->onConstant((yyval), (yyvsp[(1) - (1)]));;}
    break;

  case 269:

/* Line 1464 of yacc.c  */
#line 744 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),'+',1);;}
    break;

  case 270:

/* Line 1464 of yacc.c  */
#line 745 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),'-',1);;}
    break;

  case 271:

/* Line 1464 of yacc.c  */
#line 747 "../../../src/util/parser/hphp.y"
    { _p->onArray((yyval),(yyvsp[(3) - (4)]));;}
    break;

  case 272:

/* Line 1464 of yacc.c  */
#line 748 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 273:

/* Line 1464 of yacc.c  */
#line 752 "../../../src/util/parser/hphp.y"
    { _p->onClassConst((yyval), (yyvsp[(1) - (3)]), (yyvsp[(3) - (3)]), 1);;}
    break;

  case 274:

/* Line 1464 of yacc.c  */
#line 755 "../../../src/util/parser/hphp.y"
    { _p->onConstant((yyval), (yyvsp[(1) - (1)]));;}
    break;

  case 275:

/* Line 1464 of yacc.c  */
#line 756 "../../../src/util/parser/hphp.y"
    { _p->onConstant((yyval), (yyvsp[(1) - (1)]));;}
    break;

  case 276:

/* Line 1464 of yacc.c  */
#line 757 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 277:

/* Line 1464 of yacc.c  */
#line 758 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 278:

/* Line 1464 of yacc.c  */
#line 759 "../../../src/util/parser/hphp.y"
    { _p->onEncapsList((yyval),'"',(yyvsp[(2) - (3)]));;}
    break;

  case 279:

/* Line 1464 of yacc.c  */
#line 760 "../../../src/util/parser/hphp.y"
    { _p->onEncapsList((yyval),'\'',(yyvsp[(2) - (3)]));;}
    break;

  case 280:

/* Line 1464 of yacc.c  */
#line 762 "../../../src/util/parser/hphp.y"
    { _p->onEncapsList((yyval),T_START_HEREDOC,
                                                          (yyvsp[(2) - (3)]));;}
    break;

  case 281:

/* Line 1464 of yacc.c  */
#line 767 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (2)]);;}
    break;

  case 282:

/* Line 1464 of yacc.c  */
#line 768 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 283:

/* Line 1464 of yacc.c  */
#line 771 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 284:

/* Line 1464 of yacc.c  */
#line 772 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 285:

/* Line 1464 of yacc.c  */
#line 777 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),&(yyvsp[(1) - (5)]),&(yyvsp[(3) - (5)]),(yyvsp[(5) - (5)]),0);;}
    break;

  case 286:

/* Line 1464 of yacc.c  */
#line 779 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),&(yyvsp[(1) - (3)]),  0,(yyvsp[(3) - (3)]),0);;}
    break;

  case 287:

/* Line 1464 of yacc.c  */
#line 781 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),  0,&(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),0);;}
    break;

  case 288:

/* Line 1464 of yacc.c  */
#line 782 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),  0,  0,(yyvsp[(1) - (1)]),0);;}
    break;

  case 289:

/* Line 1464 of yacc.c  */
#line 786 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 290:

/* Line 1464 of yacc.c  */
#line 787 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 291:

/* Line 1464 of yacc.c  */
#line 790 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 292:

/* Line 1464 of yacc.c  */
#line 793 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 293:

/* Line 1464 of yacc.c  */
#line 796 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 294:

/* Line 1464 of yacc.c  */
#line 799 "../../../src/util/parser/hphp.y"
    { _p->pushObject((yyvsp[(1) - (1)]));;}
    break;

  case 295:

/* Line 1464 of yacc.c  */
#line 801 "../../../src/util/parser/hphp.y"
    { _p->appendMethodParams((yyvsp[(5) - (5)]));;}
    break;

  case 296:

/* Line 1464 of yacc.c  */
#line 802 "../../../src/util/parser/hphp.y"
    { _p->popObject((yyval));;}
    break;

  case 297:

/* Line 1464 of yacc.c  */
#line 803 "../../../src/util/parser/hphp.y"
    { _p->pushObject((yyvsp[(1) - (1)]));
                                         _p->popObject((yyval));;}
    break;

  case 298:

/* Line 1464 of yacc.c  */
#line 808 "../../../src/util/parser/hphp.y"
    { ;}
    break;

  case 299:

/* Line 1464 of yacc.c  */
#line 809 "../../../src/util/parser/hphp.y"
    { ;}
    break;

  case 300:

/* Line 1464 of yacc.c  */
#line 813 "../../../src/util/parser/hphp.y"
    { _p->appendMethodParams((yyvsp[(3) - (3)]));;}
    break;

  case 301:

/* Line 1464 of yacc.c  */
#line 817 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (3)]); (yyval) = 1;;}
    break;

  case 302:

/* Line 1464 of yacc.c  */
#line 818 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 303:

/* Line 1464 of yacc.c  */
#line 822 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 304:

/* Line 1464 of yacc.c  */
#line 824 "../../../src/util/parser/hphp.y"
    { _p->onIndirectRef((yyval),(yyvsp[(1) - (2)]),(yyvsp[(2) - (2)]));;}
    break;

  case 305:

/* Line 1464 of yacc.c  */
#line 829 "../../../src/util/parser/hphp.y"
    { _p->onStaticMember((yyval),(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]));;}
    break;

  case 306:

/* Line 1464 of yacc.c  */
#line 833 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 307:

/* Line 1464 of yacc.c  */
#line 834 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 308:

/* Line 1464 of yacc.c  */
#line 837 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 309:

/* Line 1464 of yacc.c  */
#line 839 "../../../src/util/parser/hphp.y"
    { _p->onIndirectRef((yyval),(yyvsp[(1) - (2)]),(yyvsp[(2) - (2)]));;}
    break;

  case 310:

/* Line 1464 of yacc.c  */
#line 840 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]); (yyval) = 2;;}
    break;

  case 311:

/* Line 1464 of yacc.c  */
#line 844 "../../../src/util/parser/hphp.y"
    { _p->onRefDim((yyval), (yyvsp[(1) - (4)]), (yyvsp[(3) - (4)]));;}
    break;

  case 312:

/* Line 1464 of yacc.c  */
#line 845 "../../../src/util/parser/hphp.y"
    { _p->onRefDim((yyval), (yyvsp[(1) - (4)]), (yyvsp[(3) - (4)]));;}
    break;

  case 313:

/* Line 1464 of yacc.c  */
#line 846 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 314:

/* Line 1464 of yacc.c  */
#line 849 "../../../src/util/parser/hphp.y"
    { _p->onSimpleVariable((yyval), (yyvsp[(1) - (1)]));;}
    break;

  case 315:

/* Line 1464 of yacc.c  */
#line 850 "../../../src/util/parser/hphp.y"
    { _p->onDynamicVariable((yyval), (yyvsp[(3) - (4)]), 0);;}
    break;

  case 316:

/* Line 1464 of yacc.c  */
#line 853 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]);;}
    break;

  case 317:

/* Line 1464 of yacc.c  */
#line 854 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 318:

/* Line 1464 of yacc.c  */
#line 858 "../../../src/util/parser/hphp.y"
    { ;}
    break;

  case 319:

/* Line 1464 of yacc.c  */
#line 859 "../../../src/util/parser/hphp.y"
    { _p->appendProperty((yyvsp[(1) - (1)]));;}
    break;

  case 320:

/* Line 1464 of yacc.c  */
#line 862 "../../../src/util/parser/hphp.y"
    { _p->appendRefDim((yyvsp[(3) - (4)]));;}
    break;

  case 321:

/* Line 1464 of yacc.c  */
#line 863 "../../../src/util/parser/hphp.y"
    { _p->appendRefDim((yyvsp[(3) - (4)]));;}
    break;

  case 322:

/* Line 1464 of yacc.c  */
#line 864 "../../../src/util/parser/hphp.y"
    { _p->appendProperty((yyvsp[(1) - (1)]));;}
    break;

  case 323:

/* Line 1464 of yacc.c  */
#line 867 "../../../src/util/parser/hphp.y"
    {_p->onName((yyval),(yyvsp[(1) - (1)]),Parser::VarName);;}
    break;

  case 324:

/* Line 1464 of yacc.c  */
#line 868 "../../../src/util/parser/hphp.y"
    {_p->onName((yyval),(yyvsp[(2) - (3)]),Parser::ExprName);;}
    break;

  case 325:

/* Line 1464 of yacc.c  */
#line 872 "../../../src/util/parser/hphp.y"
    { (yyval) = 1;;}
    break;

  case 326:

/* Line 1464 of yacc.c  */
#line 873 "../../../src/util/parser/hphp.y"
    { (yyval)++;;}
    break;

  case 327:

/* Line 1464 of yacc.c  */
#line 877 "../../../src/util/parser/hphp.y"
    { _p->onAListVar((yyval),&(yyvsp[(1) - (2)]),NULL);;}
    break;

  case 328:

/* Line 1464 of yacc.c  */
#line 878 "../../../src/util/parser/hphp.y"
    { _p->onAListVar((yyval),&(yyvsp[(1) - (3)]),&(yyvsp[(3) - (3)]));;}
    break;

  case 329:

/* Line 1464 of yacc.c  */
#line 880 "../../../src/util/parser/hphp.y"
    { _p->onAListSub((yyval),&(yyvsp[(1) - (6)]),(yyvsp[(5) - (6)]));;}
    break;

  case 330:

/* Line 1464 of yacc.c  */
#line 881 "../../../src/util/parser/hphp.y"
    { _p->onAListVar((yyval),NULL,NULL);;}
    break;

  case 331:

/* Line 1464 of yacc.c  */
#line 882 "../../../src/util/parser/hphp.y"
    { _p->onAListVar((yyval),NULL,&(yyvsp[(1) - (1)]));;}
    break;

  case 332:

/* Line 1464 of yacc.c  */
#line 883 "../../../src/util/parser/hphp.y"
    { _p->onAListSub((yyval),NULL,(yyvsp[(3) - (4)]));;}
    break;

  case 333:

/* Line 1464 of yacc.c  */
#line 888 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (2)]);;}
    break;

  case 334:

/* Line 1464 of yacc.c  */
#line 889 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 335:

/* Line 1464 of yacc.c  */
#line 893 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),&(yyvsp[(1) - (5)]),&(yyvsp[(3) - (5)]),(yyvsp[(5) - (5)]),0);;}
    break;

  case 336:

/* Line 1464 of yacc.c  */
#line 894 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),&(yyvsp[(1) - (3)]),  0,(yyvsp[(3) - (3)]),0);;}
    break;

  case 337:

/* Line 1464 of yacc.c  */
#line 895 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),  0,&(yyvsp[(1) - (3)]),(yyvsp[(3) - (3)]),0);;}
    break;

  case 338:

/* Line 1464 of yacc.c  */
#line 896 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),  0,  0,(yyvsp[(1) - (1)]),0);;}
    break;

  case 339:

/* Line 1464 of yacc.c  */
#line 899 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),&(yyvsp[(1) - (6)]),&(yyvsp[(3) - (6)]),(yyvsp[(6) - (6)]),1);;}
    break;

  case 340:

/* Line 1464 of yacc.c  */
#line 901 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),&(yyvsp[(1) - (4)]),  0,(yyvsp[(4) - (4)]),1);;}
    break;

  case 341:

/* Line 1464 of yacc.c  */
#line 902 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),  0,&(yyvsp[(1) - (4)]),(yyvsp[(4) - (4)]),1);;}
    break;

  case 342:

/* Line 1464 of yacc.c  */
#line 903 "../../../src/util/parser/hphp.y"
    { _p->onArrayPair((yyval),  0,  0,(yyvsp[(2) - (2)]),1);;}
    break;

  case 343:

/* Line 1464 of yacc.c  */
#line 907 "../../../src/util/parser/hphp.y"
    { _p->addEncap((yyval), (yyvsp[(1) - (2)]), (yyvsp[(2) - (2)]), -1);;}
    break;

  case 344:

/* Line 1464 of yacc.c  */
#line 909 "../../../src/util/parser/hphp.y"
    { _p->addEncap((yyval), (yyvsp[(1) - (2)]), (yyvsp[(2) - (2)]), 0);;}
    break;

  case 345:

/* Line 1464 of yacc.c  */
#line 910 "../../../src/util/parser/hphp.y"
    { (yyval).reset();;}
    break;

  case 346:

/* Line 1464 of yacc.c  */
#line 913 "../../../src/util/parser/hphp.y"
    { _p->onSimpleVariable((yyval), (yyvsp[(1) - (1)]));;}
    break;

  case 347:

/* Line 1464 of yacc.c  */
#line 915 "../../../src/util/parser/hphp.y"
    { _p->encapRefDim((yyval), (yyvsp[(1) - (4)]), (yyvsp[(3) - (4)]));;}
    break;

  case 348:

/* Line 1464 of yacc.c  */
#line 917 "../../../src/util/parser/hphp.y"
    { _p->encapObjProp((yyval), (yyvsp[(1) - (3)]), (yyvsp[(3) - (3)]));;}
    break;

  case 349:

/* Line 1464 of yacc.c  */
#line 919 "../../../src/util/parser/hphp.y"
    { _p->onDynamicVariable((yyval), (yyvsp[(2) - (3)]), 1);;}
    break;

  case 350:

/* Line 1464 of yacc.c  */
#line 921 "../../../src/util/parser/hphp.y"
    { _p->encapArray((yyval), (yyvsp[(2) - (6)]), (yyvsp[(4) - (6)]));;}
    break;

  case 351:

/* Line 1464 of yacc.c  */
#line 922 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(2) - (3)]);;}
    break;

  case 352:

/* Line 1464 of yacc.c  */
#line 925 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]); (yyval) = T_STRING;;}
    break;

  case 353:

/* Line 1464 of yacc.c  */
#line 926 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]); (yyval) = T_NUM_STRING;;}
    break;

  case 354:

/* Line 1464 of yacc.c  */
#line 927 "../../../src/util/parser/hphp.y"
    { (yyval) = (yyvsp[(1) - (1)]); (yyval) = T_VARIABLE;;}
    break;

  case 355:

/* Line 1464 of yacc.c  */
#line 931 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(3) - (4)]),T_ISSET,1);;}
    break;

  case 356:

/* Line 1464 of yacc.c  */
#line 932 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(3) - (4)]),T_EMPTY,1);;}
    break;

  case 357:

/* Line 1464 of yacc.c  */
#line 933 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_INCLUDE,1);;}
    break;

  case 358:

/* Line 1464 of yacc.c  */
#line 934 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_INCLUDE_ONCE,1);;}
    break;

  case 359:

/* Line 1464 of yacc.c  */
#line 935 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(3) - (4)]),T_EVAL,1);;}
    break;

  case 360:

/* Line 1464 of yacc.c  */
#line 936 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_REQUIRE,1);;}
    break;

  case 361:

/* Line 1464 of yacc.c  */
#line 937 "../../../src/util/parser/hphp.y"
    { UEXP((yyval),(yyvsp[(2) - (2)]),T_REQUIRE_ONCE,1);;}
    break;

  case 362:

/* Line 1464 of yacc.c  */
#line 941 "../../../src/util/parser/hphp.y"
    { _p->onExprListElem((yyval), NULL, (yyvsp[(1) - (1)]));;}
    break;

  case 363:

/* Line 1464 of yacc.c  */
#line 942 "../../../src/util/parser/hphp.y"
    { _p->onExprListElem((yyval), &(yyvsp[(1) - (3)]), (yyvsp[(3) - (3)]));;}
    break;

  case 364:

/* Line 1464 of yacc.c  */
#line 947 "../../../src/util/parser/hphp.y"
    { _p->onClassConst((yyval), (yyvsp[(1) - (3)]), (yyvsp[(3) - (3)]), 0);;}
    break;



/* Line 1464 of yacc.c  */
#line 5851 "hphp.tab.cpp"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, _p, YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (&yylloc, _p, yymsg);
	  }
	else
	  {
	    yyerror (&yylloc, _p, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc, _p);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp, _p);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, _p, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, &yylloc, _p);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp, _p);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
  YYSTACK_CLEANUP;
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



/* Line 1684 of yacc.c  */
#line 949 "../../../src/util/parser/hphp.y"

bool Parser::parse() {
  return yyparse(this) == 0;
}

