<?php
/**
 * Automatically generated by running "php schema.php filter".
 *
 * You may modify the file, but re-running schema.php against this file will
 * standardize the format without losing your schema changes. It does lose
 * any changes that are not part of schema. Use "note" field to comment on
 * schema itself, and "note" fields are not used in any code generation but
 * only staying within this file.
 *
 * @nolint
 */
///////////////////////////////////////////////////////////////////////////////
// Preamble: C++ code inserted at beginning of ext_{name}.h

DefinePreamble(<<<CPP

CPP
);

///////////////////////////////////////////////////////////////////////////////
// Constants
//
// array (
//   'name' => name of the constant
//   'type' => type of the constant
//   'note' => additional note about this constant's schema
// )

DefineConstant(array('name' => "INPUT_POST",    'type' => Int64,));
DefineConstant(array('name' => "INPUT_GET",     'type' => Int64,));
DefineConstant(array('name' => "INPUT_COOKIE",  'type' => Int64,));
DefineConstant(array('name' => "INPUT_ENV",     'type' => Int64,));
DefineConstant(array('name' => "INPUT_SERVER",  'type' => Int64,));
DefineConstant(array('name' => "INPUT_SESSION", 'type' => Int64,));
DefineConstant(array('name' => "INPUT_REQUEST", 'type' => Int64,));

DefineConstant(array('name' => "FILTER_FLAG_NONE",        'type' => Int64,));

DefineConstant(array('name' => "FILTER_REQUIRE_SCALAR",   'type' => Int64,));
DefineConstant(array('name' => "FILTER_REQUIRE_ARRAY",    'type' => Int64,));
DefineConstant(array('name' => "FILTER_FORCE_ARRAY",      'type' => Int64,));
DefineConstant(array('name' => "FILTER_NULL_ON_FAILURE",  'type' => Int64,));

DefineConstant(array('name' => "FILTER_VALIDATE_INT",     'type' => Int64,));
DefineConstant(array('name' => "FILTER_VALIDATE_BOOLEAN", 'type' => Int64,));
DefineConstant(array('name' => "FILTER_VALIDATE_FLOAT",   'type' => Int64,));

DefineConstant(array('name' => "FILTER_VALIDATE_REGEXP",  'type' => Int64,));
DefineConstant(array('name' => "FILTER_VALIDATE_URL",     'type' => Int64,));
DefineConstant(array('name' => "FILTER_VALIDATE_EMAIL",   'type' => Int64,));
DefineConstant(array('name' => "FILTER_VALIDATE_IP",      'type' => Int64,));

DefineConstant(array('name' => "FILTER_DEFAULT",          'type' => Int64,));
DefineConstant(array('name' => "FILTER_UNSAFE_RAW",       'type' => Int64,));

DefineConstant(array('name' => "FILTER_SANITIZE_STRING",             'type' => Int64,));
DefineConstant(array('name' => "FILTER_SANITIZE_STRIPPED",           'type' => Int64,));
DefineConstant(array('name' => "FILTER_SANITIZE_ENCODED",            'type' => Int64,));
DefineConstant(array('name' => "FILTER_SANITIZE_SPECIAL_CHARS",      'type' => Int64,));
DefineConstant(array('name' => "FILTER_SANITIZE_FULL_SPECIAL_CHARS", 'type' => Int64,));
DefineConstant(array('name' => "FILTER_SANITIZE_EMAIL",              'type' => Int64,));
DefineConstant(array('name' => "FILTER_SANITIZE_URL",                'type' => Int64,));
DefineConstant(array('name' => "FILTER_SANITIZE_NUMBER_INT",         'type' => Int64,));
DefineConstant(array('name' => "FILTER_SANITIZE_NUMBER_FLOAT",       'type' => Int64,));
DefineConstant(array('name' => "FILTER_SANITIZE_MAGIC_QUOTES",       'type' => Int64,));

DefineConstant(array('name' => "FILTER_CALLBACK",               'type' => Int64,));

DefineConstant(array('name' => "FILTER_FLAG_ALLOW_OCTAL",       'type' => Int64,));
DefineConstant(array('name' => "FILTER_FLAG_ALLOW_HEX",         'type' => Int64,));

DefineConstant(array('name' => "FILTER_FLAG_STRIP_LOW",         'type' => Int64,));
DefineConstant(array('name' => "FILTER_FLAG_STRIP_HIGH",        'type' => Int64,));
DefineConstant(array('name' => "FILTER_FLAG_STRIP_BACKTICK",    'type' => Int64,));
DefineConstant(array('name' => "FILTER_FLAG_ENCODE_LOW",        'type' => Int64,));
DefineConstant(array('name' => "FILTER_FLAG_ENCODE_HIGH",       'type' => Int64,));
DefineConstant(array('name' => "FILTER_FLAG_ENCODE_AMP",        'type' => Int64,));
DefineConstant(array('name' => "FILTER_FLAG_NO_ENCODE_QUOTES",  'type' => Int64,));
DefineConstant(array('name' => "FILTER_FLAG_EMPTY_STRING_NULL", 'type' => Int64,));

DefineConstant(array('name' => "FILTER_FLAG_ALLOW_FRACTION",    'type' => Int64,));
DefineConstant(array('name' => "FILTER_FLAG_ALLOW_THOUSAND",    'type' => Int64,));
DefineConstant(array('name' => "FILTER_FLAG_ALLOW_SCIENTIFIC",  'type' => Int64,));

DefineConstant(array('name' => "FILTER_FLAG_SCHEME_REQUIRED",   'type' => Int64,));
DefineConstant(array('name' => "FILTER_FLAG_HOST_REQUIRED",     'type' => Int64,));
DefineConstant(array('name' => "FILTER_FLAG_PATH_REQUIRED",     'type' => Int64,));
DefineConstant(array('name' => "FILTER_FLAG_QUERY_REQUIRED",    'type' => Int64,));

DefineConstant(array('name' => "FILTER_FLAG_IPV4",              'type' => Int64,));
DefineConstant(array('name' => "FILTER_FLAG_IPV6",              'type' => Int64,));
DefineConstant(array('name' => "FILTER_FLAG_NO_RES_RANGE",      'type' => Int64,));
DefineConstant(array('name' => "FILTER_FLAG_NO_PRIV_RANGE",     'type' => Int64,));

///////////////////////////////////////////////////////////////////////////////
// Functions
//
// array (
//   'name'   => name of the function
//   'desc'   => description of the function's purpose
//   'flags'  => attributes of the function, see base.php for possible values
//   'opt'    => optimization callback function's name for compiler
//   'note'   => additional note about this function's schema
//   'return' =>
//      array (
//        'type'  => return type, use Reference for ref return
//        'desc'  => description of the return value
//      )
//   'args'   => arguments
//      array (
//        'name'  => name of the argument
//        'type'  => type of the argument, use Reference for output parameter
//        'value' => default value of the argument
//        'desc'  => description of the argument
//      )
//   'taint_observer' => taint propagation information
//     array (
//       'set_mask' => which bits to set automatically
//       'clear_mask' => which bits to clear automatically
//     )
// )

DefineFunction(
  array(
    'name'   => "filter_has_var",
    'desc'   => "Checks if variable of specified type exists.",
    'flags'  =>  HasDocComment,
	'args'	 => array(
	  array(
        'name'  => "type",
        'type'  => Int32,
        'desc' => "One of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER, or INPUT_ENV.",
	  ),
	  array(
        'name'  => "variable_name",
        'type'  => String,
        'desc' => "Name of a variable to check.",
	  ),
	),
    'return' => array(
      'type'   => Boolean,
      'desc'   => "Returns TRUE on success or FALSE on failure.",
    ),
    'taint_observer' => false,
  ));
  
DefineFunction(
  array(
    'name'   => "filter_id",
    'desc'   => "Returns the filter ID belonging to a named filter.",
    'flags'  =>  HasDocComment,
	'args'	 => array(
	  array(
        'name'  => "filtername",
        'type'  => String,
        'desc' => "Name of a filter to get.",
	  ),
	),
    'return' => array(
      'type'   => Variant,
      'desc'   => "ID of a filter on success or FALSE if filter doesn't exist.",
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "filter_input_array",
    'desc'   => "Gets external variables and optionally filters them.",
    'flags'  =>  HasDocComment,
	'args'	 => array(
	  array(
        'name'  => "type",
        'type'  => Int32,
        'desc' => "One of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER, or INPUT_ENV.",
	  ),
	  array(
        'name'  => "definition",
        'type'  => Variant,
		'value' => "k_FILTER_DEFAULT",
        'desc' => "An array defining the arguments. A valid key is a string
		containing a variable name and a valid value is either a filter type, or
		an array optionally specifying the filter, flags and options. If the
		value is an array, valid keys are filter which specifies the filter
		type, flags which specifies any flags that apply to the filter, and
		options which specifies any options that apply to the filter. See the
		example below for a better understanding.
		
		This parameter can be also an integer holding a filter constant. Then
		all values in the input array are filtered by this filter.",
	  ),
	),
    'return' => array(
      'type'   => Variant,
      'desc'   => "An array containing the values of the requested variables on
	  success, or FALSE on failure. An array value will be FALSE if the filter
	  fails, or NULL if the variable is not set. Or if the flag
	  FILTER_NULL_ON_FAILURE is used, it returns FALSE if the variable is not
	  set and NULL if the filter fails.",
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "filter_input",
    'desc'   => "Gets a specific external variable by name and optionally filters it",
    'flags'  =>  HasDocComment,
	'args'	 => array(
	  array(
        'name'  => "type",
        'type'  => Int32,
        'desc' => "One of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER, or INPUT_ENV.",
	  ),
	  array(
        'name'  => "variable_name",
        'type'  => String,
        'desc' => "Name of a variable to get.",
	  ),
	  array(
        'name'  => "filter",
        'type'  => Int32,
		'value' => "k_FILTER_DEFAULT",
        'desc' => "The ID of the filter to apply. The Types of filters manual
		page lists the available filters.",
	  ),
	  array(
        'name'  => "options",
        'type'  => Variant,
		'value' => "null_array",
        'desc' => "Associative array of options or bitwise disjunction of flags.
		If filter accepts options, flags can be provided in 'flags' field of
		array.",
	  ),
	),
    'return' => array(
      'type'   => Variant,
      'desc'   => "Value of the requested variable on success, FALSE if the
	  filter fails, or NULL if the variable_name variable is not set. If the
	  flag FILTER_NULL_ON_FAILURE is used, it returns FALSE if the variable is
	  not set and NULL if the filter fails.",
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "filter_list",
    'desc'   => "Returns a list of all supported filters.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns an array of names of all supported filters, empty
	  array if there are no such filters. Indexes of this array are not filter
	  IDs, they can be obtained with filter_id() from a name instead.",
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "filter_var_array",
    'desc'   => "Gets multiple variables and optionally filters them",
    'flags'  =>  HasDocComment,
	'args'	 => array(
	  array(
        'name'  => "data",
        'type'  => VariantMap,
        'desc' => "An array with string keys containing the data to filter.",
	  ),
	  array(
        'name'  => "definition",
        'type'  => Variant,
		'value' => "k_FILTER_DEFAULT",
        'desc' => "An array defining the arguments. A valid key is a string
		containing a variable name and a valid value is either a filter type, or
		an array optionally specifying the filter, flags and options. If the
		value is an array, valid keys are filter which specifies the filter
		type, flags which specifies any flags that apply to the filter, and
		options which specifies any options that apply to the filter. See the
		example below for a better understanding.

		This parameter can be also an integer holding a filter constant. Then
		all values in the input array are filtered by this filter.",
	  ),
	),
    'return' => array(
      'type'   => Variant,
      'desc'   => "An array containing the values of the requested variables on
	  success, or FALSE on failure. An array value will be FALSE if the filter
	  fails, or NULL if the variable is not set.",
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "filter_var",
    'desc'   => "Filters a variable with a specified filter",
    'flags'  =>  HasDocComment,
	'args'	 => array(
	  array(
        'name'  => "variable",
        'type'  => Variant,
        'desc' => "Value to filter.",
	  ),
	  array(
        'name'  => "filter",
        'type'  => Int32,
		'value' => "k_FILTER_DEFAULT",
        'desc' => "The ID of the filter to apply. See the types of filters on
		the PHP manual",
	  ),
	  array(
        'name'  => "options",
        'type'  => Variant,
		'value' => "null_array",
        'desc' => "Associative array of options or bitwise disjunction of flags.
		If filter accepts options, flags can be provided in 'flags' field of
		array. For the 'callback' filter, callable type should be passed. The
		callback must accept one argument, the value to be filtered, and return
		the value after filtering/sanitizing it.",
	  ),
	),
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns the filtered data, or FALSE if the filter fails.",
    ),
    'taint_observer' => false,
  ));


