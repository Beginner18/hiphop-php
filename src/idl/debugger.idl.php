<?php
/**
 * Automatically generated by running "php schema.php debugger".
 *
 * You may modify the file, but re-running schema.php against this file will
 * standardize the format without losing your schema changes. It does lose
 * any changes that are not part of schema. Use "note" field to comment on
 * schema itself, and "note" fields are not used in any code generation but
 * only staying within this file.
 */
///////////////////////////////////////////////////////////////////////////////
// Preamble: C++ code inserted at beginning of ext_{name}.h

DefinePreamble(<<<CPP
#include <runtime/eval/debugger/debugger_client.h>#include <runtime/eval/debugger/debugger_proxy.h>
CPP
);

///////////////////////////////////////////////////////////////////////////////
// Constants
//
// array (
//   'name' => name of the constant
//   'type' => type of the constant
//   'note' => additional note about this constant's schema
// )


///////////////////////////////////////////////////////////////////////////////
// Functions
//
// array (
//   'name'   => name of the function
//   'desc'   => description of the function's purpose
//   'flags'  => attributes of the function, see base.php for possible values
//   'opt'    => optimization callback function's name for compiler
//   'note'   => additional note about this function's schema
//   'return' =>
//      array (
//        'type'  => return type, use Reference for ref return
//        'desc'  => description of the return value
//      )
//   'args'   => arguments
//      array (
//        'name'  => name of the argument
//        'type'  => type of the argument, use Reference for output parameter
//        'value' => default value of the argument
//        'desc'  => description of the argument
//      )
// )

DefineFunction(
  array(
    'name'   => "hphpd_install_user_command",
    'return' => array(
      'type'   => Boolean,
    ),
    'args'   => array(
      array(
        'name'   => "cmd",
        'type'   => String,
      ),
      array(
        'name'   => "clsname",
        'type'   => String,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "hphpd_get_user_commands",
    'return' => array(
      'type'   => StringMap,
    ),
  ));


///////////////////////////////////////////////////////////////////////////////
// Classes
//
// BeginClass
// array (
//   'name'   => name of the class
//   'desc'   => description of the class's purpose
//   'flags'  => attributes of the class, see base.php for possible values
//   'note'   => additional note about this class's schema
//   'parent' => parent class name, if any
//   'ifaces' => array of interfaces tihs class implements
//   'bases'  => extra internal and special base classes this class requires
//   'footer' => extra C++ inserted at end of class declaration
// )
//
// DefineConstant(..)
// DefineConstant(..)
// ...
// DefineFunction(..)
// DefineFunction(..)
// ...
// DefineProperty
// DefineProperty
//
// array (
//   'name'  => name of the property
//   'type'  => type of the property
//   'flags' => attributes of the property
//   'desc'  => description of the property
//   'note'  => additional note about this property's schema
// )
//
// EndClass()

///////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    'name'   => "DebuggerProxy",
    'desc'   => "",
    'footer' => <<<EOT

 public:
  Eval::DebuggerProxy *m_proxy;
EOT
,
  ));

DefineFunction(
  array(
    'name'   => "__construct",
    'return' => array(
      'type'   => null,
    ),
  ));

DefineFunction(
  array(
    'name'   => "islocal",
    'return' => array(
      'type'   => Boolean,
    ),
  ));

DefineFunction(
  array(
    'name'   => "send",
    'return' => array(
      'type'   => Variant,
    ),
    'args'   => array(
      array(
        'name'   => "cmd",
        'type'   => 'DebuggerCommand',
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__destruct",
    'return' => array(
      'type'   => Variant,
    ),
  ));

EndClass(
);

///////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    'name'   => "DebuggerClient",
    'desc'   => "",
    'footer' => <<<EOT

 public:
  Eval::DebuggerClient *m_client;
EOT
,
  ));

DefineConstant(
  array(
    'name'   => "AUTO_COMPLETE_FILENAMES",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "AUTO_COMPLETE_VARIABLES",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "AUTO_COMPLETE_CONSTANTS",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "AUTO_COMPLETE_CLASSES",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "AUTO_COMPLETE_FUNCTIONS",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "AUTO_COMPLETE_CLASS_METHODS",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "AUTO_COMPLETE_CLASS_PROPERTIES",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "AUTO_COMPLETE_CLASS_CONSTANTS",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "AUTO_COMPLETE_KEYWORDS",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "AUTO_COMPLETE_CODE",
    'type'   => Int64,
  ));

DefineFunction(
  array(
    'name'   => "__construct",
    'return' => array(
      'type'   => null,
    ),
  ));

DefineFunction(
  array(
    'name'   => "quit",
    'return' => array(
      'type'   => null,
    ),
  ));

DefineFunction(
  array(
    'name'   => "print",
    'flags'  =>  VariableArguments,
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "format",
        'type'   => String,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "help",
    'flags'  =>  VariableArguments,
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "format",
        'type'   => String,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "info",
    'flags'  =>  VariableArguments,
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "format",
        'type'   => String,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "output",
    'flags'  =>  VariableArguments,
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "format",
        'type'   => String,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "error",
    'flags'  =>  VariableArguments,
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "format",
        'type'   => String,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "code",
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "source",
        'type'   => String,
      ),
      array(
        'name'   => "start_line_no",
        'type'   => Int32,
        'value'  => "0",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "ask",
    'flags'  =>  VariableArguments,
    'return' => array(
      'type'   => Variant,
    ),
    'args'   => array(
      array(
        'name'   => "format",
        'type'   => String,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "wrap",
    'return' => array(
      'type'   => String,
    ),
    'args'   => array(
      array(
        'name'   => "str",
        'type'   => String,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "helptitle",
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "str",
        'type'   => String,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "helpcmds",
    'flags'  =>  VariableArguments,
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "cmd",
        'type'   => String,
      ),
      array(
        'name'   => "desc",
        'type'   => String,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "helpbody",
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "str",
        'type'   => String,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "helpsection",
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "str",
        'type'   => String,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "tutorial",
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "str",
        'type'   => String,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "getcode",
    'return' => array(
      'type'   => String,
    ),
  ));

DefineFunction(
  array(
    'name'   => "getcommand",
    'return' => array(
      'type'   => String,
    ),
  ));

DefineFunction(
  array(
    'name'   => "arg",
    'return' => array(
      'type'   => Boolean,
    ),
    'args'   => array(
      array(
        'name'   => "index",
        'type'   => Int32,
      ),
      array(
        'name'   => "str",
        'type'   => String,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "argcount",
    'return' => array(
      'type'   => Int32,
    ),
  ));

DefineFunction(
  array(
    'name'   => "argvalue",
    'return' => array(
      'type'   => String,
    ),
    'args'   => array(
      array(
        'name'   => "index",
        'type'   => Int32,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "argrest",
    'return' => array(
      'type'   => String,
    ),
    'args'   => array(
      array(
        'name'   => "index",
        'type'   => Int32,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "args",
    'return' => array(
      'type'   => StringVec,
    ),
  ));

DefineFunction(
  array(
    'name'   => "send",
    'return' => array(
      'type'   => Variant,
    ),
    'args'   => array(
      array(
        'name'   => "cmd",
        'type'   => 'DebuggerCommand',
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "xend",
    'return' => array(
      'type'   => Variant,
    ),
    'args'   => array(
      array(
        'name'   => "cmd",
        'type'   => 'DebuggerCommand',
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "getcurrentlocation",
    'return' => array(
      'type'   => Variant,
    ),
  ));

DefineFunction(
  array(
    'name'   => "getstacktrace",
    'return' => array(
      'type'   => Variant,
    ),
  ));

DefineFunction(
  array(
    'name'   => "getframe",
    'return' => array(
      'type'   => Int32,
    ),
  ));

DefineFunction(
  array(
    'name'   => "printframe",
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "index",
        'type'   => Int32,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "addcompletion",
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "list",
        'type'   => Variant,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__destruct",
    'return' => array(
      'type'   => Variant,
    ),
  ));

EndClass(
);

