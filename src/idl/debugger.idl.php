<?php
/**
 * Automatically generated by running "php schema.php debugger".
 *
 * You may modify the file, but re-running schema.php against this file will
 * standardize the format without losing your schema changes. It does lose
 * any changes that are not part of schema. Use "note" field to comment on
 * schema itself, and "note" fields are not used in any code generation but
 * only staying within this file.
 */
///////////////////////////////////////////////////////////////////////////////
// Preamble: C++ code inserted at beginning of ext_{name}.h

DefinePreamble(<<<CPP
#include <runtime/eval/debugger/debugger_client.h>#include <runtime/eval/debugger/debugger_proxy.h>
CPP
);

///////////////////////////////////////////////////////////////////////////////
// Constants
//
// array (
//   'name' => name of the constant
//   'type' => type of the constant
//   'note' => additional note about this constant's schema
// )


///////////////////////////////////////////////////////////////////////////////
// Functions
//
// array (
//   'name'   => name of the function
//   'desc'   => description of the function's purpose
//   'flags'  => attributes of the function, see base.php for possible values
//   'opt'    => optimization callback function's name for compiler
//   'note'   => additional note about this function's schema
//   'return' =>
//      array (
//        'type'  => return type, use Reference for ref return
//        'desc'  => description of the return value
//      )
//   'args'   => arguments
//      array (
//        'name'  => name of the argument
//        'type'  => type of the argument, use Reference for output parameter
//        'value' => default value of the argument
//        'desc'  => description of the argument
//      )
// )

DefineFunction(
  array(
    'name'   => "hphpd_install_user_command",
    'flags'  =>  HipHopSpecific,
    'desc'   => "Expands HipHop debugger with a user extended command.",
    'return' => array(
      'type'   => Boolean,
      'desc'   => "TRUE if the command name was not used before, FALSE otherwise.",
    ),
    'args'   => array(
      array(
        'name'   => "cmd",
        'type'   => String,
        'desc'   => "The command name to register.",
      ),
      array(
        'name'   => "clsname",
        'type'   => String,
        'desc'   => "The debugger command class that has its implementation.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "hphpd_get_user_commands",
    'flags'  =>  HipHopSpecific,
    'desc'   => "Gets a list of user extended commands.",
    'return' => array(
      'type'   => StringMap,
      'desc'   => "A map of commands and their PHP classes.",
    ),
  ));


///////////////////////////////////////////////////////////////////////////////
// Classes
//
// BeginClass
// array (
//   'name'   => name of the class
//   'desc'   => description of the class's purpose
//   'flags'  => attributes of the class, see base.php for possible values
//   'note'   => additional note about this class's schema
//   'parent' => parent class name, if any
//   'ifaces' => array of interfaces tihs class implements
//   'bases'  => extra internal and special base classes this class requires
//   'footer' => extra C++ inserted at end of class declaration
// )
//
// DefineConstant(..)
// DefineConstant(..)
// ...
// DefineFunction(..)
// DefineFunction(..)
// ...
// DefineProperty
// DefineProperty
//
// array (
//   'name'  => name of the property
//   'type'  => type of the property
//   'flags' => attributes of the property
//   'desc'  => description of the property
//   'note'  => additional note about this property's schema
// )
//
// EndClass()

///////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    'name'   => "DebuggerProxy",
    'desc'   => "A debugger proxy runs on server or remote side, performing different actions upon receiving commands and instructions from a debugger client. When debugging a local script, there is still a debugger proxy, so to simplify the debugger interfaces, even though the debugger proxy will run locally.",
    'flags'  =>  HipHopSpecific,
    'footer' => <<<EOT

 public:
  Eval::DebuggerProxy *m_proxy;
EOT
,
  ));

DefineFunction(
  array(
    'name'   => "__construct",
    'desc'   => "Constructor of DebuggerProxy.",
    'return' => array(
      'type'   => null,
    ),
  ));

DefineFunction(
  array(
    'name'   => "isLocal",
    'desc'   => "Whether this proxy is running locally for debugging a local script, or running remotely on a server.",
    'return' => array(
      'type'   => Boolean,
      'desc'   => "TRUE if locally, FALSE if remote.",
    ),
  ));

DefineFunction(
  array(
    'name'   => "send",
    'desc'   => "Sends a command back to DebuggerClient.",
    'return' => array(
      'type'   => Variant,
      'desc'   => "TRUE if successful, FALSE otherwise.",
    ),
    'args'   => array(
      array(
        'name'   => "cmd",
        'type'   => 'DebuggerCommand',
        'desc'   => "The command to send to client.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__destruct",
    'desc'   => "Destructor of DebuggerProxy.",
    'return' => array(
      'type'   => Variant,
      'desc'   => "Always returns null.",
    ),
  ));

EndClass(
);

///////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    'name'   => "DebuggerClient",
    'desc'   => "A debugger client takes input from end user. Depending on which command, it may either perform an action locally, or send it to debugger proxy to perform an action on server side. This class provides common tasks related to a debugging session.",
    'flags'  =>  HipHopSpecific,
    'footer' => <<<EOT

 public:
  Eval::DebuggerClient *m_client;
EOT
,
  ));

DefineConstant(
  array(
    'name'   => "AUTO_COMPLETE_FILENAMES",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "AUTO_COMPLETE_VARIABLES",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "AUTO_COMPLETE_CONSTANTS",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "AUTO_COMPLETE_CLASSES",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "AUTO_COMPLETE_FUNCTIONS",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "AUTO_COMPLETE_CLASS_METHODS",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "AUTO_COMPLETE_CLASS_PROPERTIES",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "AUTO_COMPLETE_CLASS_CONSTANTS",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "AUTO_COMPLETE_KEYWORDS",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "AUTO_COMPLETE_CODE",
    'type'   => Int64,
  ));

DefineFunction(
  array(
    'name'   => "__construct",
    'desc'   => "Constructor of DebuggerClient.",
    'return' => array(
      'type'   => null,
    ),
  ));

DefineFunction(
  array(
    'name'   => "quit",
    'desc'   => "Quits the client.",
    'return' => array(
      'type'   => null,
    ),
  ));

DefineFunction(
  array(
    'name'   => "print",
    'desc'   => "Prints some text without any color.",
    'flags'  =>  VariableArguments,
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "format",
        'type'   => String,
        'desc'   => "Format string in printf() style.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "help",
    'flags'  =>  VariableArguments,
    'desc'   => "Prints some text in help color.",
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "format",
        'type'   => String,
        'desc'   => "Format string in printf() style.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "info",
    'flags'  =>  VariableArguments,
    'desc'   => "Prints some text in information color.",
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "format",
        'type'   => String,
        'desc'   => "Format string in printf() style.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "output",
    'flags'  =>  VariableArguments,
    'desc'   => "Prints some text in script output color.",
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "format",
        'type'   => String,
        'desc'   => "Format string in printf() style.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "error",
    'flags'  =>  VariableArguments,
    'desc'   => "Prints some text in error color.",
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "format",
        'type'   => String,
        'desc'   => "Format string in printf() style.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "code",
    'desc'   => "Pretty print PHP source code.",
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "source",
        'type'   => String,
        'desc'   => "PHP source code to print.",
      ),
      array(
        'name'   => "start_line_no",
        'type'   => Int32,
        'desc'   => "Starting line number. 0 for no line no.",
        'value'  => "0",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "ask",
    'flags'  =>  VariableArguments,
    'desc'   => "Ask end user a question.",
    'return' => array(
      'type'   => Variant,
      'desc'   => "Single letter response from end user.",
    ),
    'args'   => array(
      array(
        'name'   => "format",
        'type'   => String,
        'desc'   => "Format string in printf() style.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "wrap",
    'desc'   => "Wraps some text to fit screen width.",
    'return' => array(
      'type'   => String,
      'desc'   => "Formatted string.",
    ),
    'args'   => array(
      array(
        'name'   => "str",
        'type'   => String,
        'desc'   => "String to wrap.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "helpTitle",
    'desc'   => "Displays a title for a help topic.",
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "str",
        'type'   => String,
        'desc'   => "Title text.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "helpCmds",
    'flags'  =>  VariableArguments,
    'desc'   => "Displays a list of commands in help format. Each command has a name and a short description, and specify more commands in pairs. For example, \$client->helpCmds('cmd1', 'desc1', 'cmd2', 'desc2').",
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "cmd",
        'type'   => String,
        'desc'   => "Command name.",
      ),
      array(
        'name'   => "desc",
        'type'   => String,
        'desc'   => "Command description.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "helpBody",
    'desc'   => "Displays help contents. A help body is a help section with one empty line before and one empty line after.",
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "str",
        'type'   => String,
        'desc'   => "The help text.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "helpSection",
    'desc'   => "Displays a section of help text.",
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "str",
        'type'   => String,
        'desc'   => "One section of help text.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "tutorial",
    'desc'   => "Tutorials are help texts displayed according to user's preference. In auto mode (vs. always on or always off modes), one tutorial text is only displayed just once to end user.",
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "str",
        'type'   => String,
        'desc'   => "Help texts guiding end user for learning how to use debugger.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "getCode",
    'desc'   => "PHP code snippet user just typed in manually.",
    'return' => array(
      'type'   => String,
      'desc'   => "The PHP source code.",
    ),
  ));

DefineFunction(
  array(
    'name'   => "getCommand",
    'desc'   => "Debugger command end user typed.",
    'return' => array(
      'type'   => String,
      'desc'   => "The command text.",
    ),
  ));

DefineFunction(
  array(
    'name'   => "arg",
    'desc'   => "Tests if an argument matches a pre-defined keyword. As long as it matches the keyword partially and case-insensitively, it is considered as a match. For example, \$client->arg(2, 'foo') will return TRUE if user inputs 'f' or 'fo' or 'Fo' for the 2nd argument.",
    'return' => array(
      'type'   => Boolean,
      'desc'   => "TRUE if matched. FALSE otherwise.",
    ),
    'args'   => array(
      array(
        'name'   => "index",
        'type'   => Int32,
        'desc'   => "Argument index.",
      ),
      array(
        'name'   => "str",
        'type'   => String,
        'desc'   => "The string to compare with.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "argCount",
    'desc'   => "Count of total arguments.",
    'return' => array(
      'type'   => Int32,
      'desc'   => "The count, not including user command itself.",
    ),
  ));

DefineFunction(
  array(
    'name'   => "argValue",
    'desc'   => "Gets value of an argument.",
    'return' => array(
      'type'   => String,
      'desc'   => "String value of an argument.",
    ),
    'args'   => array(
      array(
        'name'   => "index",
        'type'   => Int32,
        'desc'   => "Argument index.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "argRest",
    'desc'   => "Gets remaining arguments all together as a single string.",
    'return' => array(
      'type'   => String,
      'desc'   => "The string that has all argument at and after certain index.",
    ),
    'args'   => array(
      array(
        'name'   => "index",
        'type'   => Int32,
        'desc'   => "The starting index to include arguments.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "args",
    'return' => array(
      'type'   => StringVec,
    ),
  ));

DefineFunction(
  array(
    'name'   => "send",
    'desc'   => "Sends a debugger command to debugger proxy.",
    'return' => array(
      'type'   => Variant,
      'desc'   => "TRUE if successful, FALSE otherwise.",
    ),
    'args'   => array(
      array(
        'name'   => "cmd",
        'type'   => 'DebuggerCommand',
        'desc'   => "The command to send.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "xend",
    'desc'   => "Exchanges command with proxy: sends a command to debugger and expects and receives a command from debugger.",
    'return' => array(
      'type'   => Variant,
      'desc'   => "The received command, and it is always the same type as what it sends, so the same command class can handle processing at both sending and receiving sides.",
    ),
    'args'   => array(
      array(
        'name'   => "cmd",
        'type'   => 'DebuggerCommand',
        'desc'   => "The command to send.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "getCurrentLocation",
    'desc'   => "Gets current source location.",
    'return' => array(
      'type'   => Variant,
      'desc'   => "An array in a format of array('file' => {source file name}, 'line' => {line number}, 'namespace' => {namespace code is in}, 'class' => {class code is in}, 'function' => {function code is in}, 'text' => {human readable description of current source location}).",
    ),
  ));

DefineFunction(
  array(
    'name'   => "getStackTrace",
    'desc'   => "Gets current stacktrace.",
    'return' => array(
      'type'   => Variant,
      'desc'   => "An array of stacktrace frames.",
    ),
  ));

DefineFunction(
  array(
    'name'   => "getFrame",
    'desc'   => "Returns current frame index.",
    'return' => array(
      'type'   => Int32,
      'desc'   => "An index indicating which frame end user has moved to for inspection.",
    ),
  ));

DefineFunction(
  array(
    'name'   => "printFrame",
    'desc'   => "Prints a stacktrace frame.",
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "index",
        'type'   => Int32,
        'desc'   => "Which frame to print.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "addCompletion",
    'desc'   => "Adds string(s) to auto-completion. This function is only effective inside DebuggerClient::onAutoComplete().",
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "list",
        'type'   => Variant,
        'desc'   => "A single string, an AUTO_COMPLETE_ constant or an array of strings.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__destruct",
    'desc'   => "Destructor of DebugerClient.",
    'return' => array(
      'type'   => Variant,
      'desc'   => "Always returns null.",
    ),
  ));

EndClass(
);
