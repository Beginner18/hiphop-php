<?php
/**
 * Automatically generated by running "php schema.php gettext".
 *
 * You may modify the file, but re-running schema.php against this file will
 * standardize the format without losing your schema changes. It does lose
 * any changes that are not part of schema. Use "note" field to comment on
 * schema itself, and "note" fields are not used in any code generation but
 * only staying within this file.
 */
///////////////////////////////////////////////////////////////////////////////
// Preamble: C++ code inserted at beginning of ext_{name}.h

DefinePreamble(<<<CPP

CPP
);

///////////////////////////////////////////////////////////////////////////////
// Constants
//
// array (
//   'name' => name of the constant
//   'type' => type of the constant
//   'note' => additional note about this constant's schema
// )


///////////////////////////////////////////////////////////////////////////////
// Functions
//
// array (
//   'name'   => name of the function
//   'desc'   => description of the function's purpose
//   'flags'  => attributes of the function, see base.php for possible values
//   'opt'    => optimization callback function's name for compiler
//   'note'   => additional note about this function's schema
//   'return' =>
//      array (
//        'type'  => return type, use Reference for ref return
//        'desc'  => description of the return value
//      )
//   'args'   => arguments
//      array (
//        'name'  => name of the argument
//        'type'  => type of the argument, use Reference for output parameter
//        'value' => default value of the argument
//        'desc'  => description of the argument
//      )
// )

DefineFunction(
  array(
    'name'   => "textdomain",
    'desc'   => "Change the textdomain.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns the current domain or false on error.",
    ),
    'args'   => array(
      array(
        'name'   => "domain",
        'type'   => String,
        'desc'   => "Textdomain to set.",
      ),
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "gettext",
    'desc'   => "Return the translation of msgid for the current domain, or
	msgid unaltered if a translation does not exist.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns the msgid translated or false on error.",
    ),
    'args'   => array(
      array(
        'name'   => "msgid",
        'type'   => String,
        'desc'   => "String to translate.",
      ),
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "_",
    'desc'   => "Alias for gettext.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns the msgid translated or false on error.",
    ),
    'args'   => array(
      array(
        'name'   => "msgid",
        'type'   => String,
        'desc'   => "String to translate.",
      ),
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "dgettext",
    'desc'   => "Return the translation of msgid for domain_name, or msgid
	unaltered if a translation does not exist.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns the msgid translated of false on error.",
    ),
    'args'   => array(
      array(
        'name'   => "domain_name",
        'type'   => String,
        'desc'   => "Domain of the translation.",
      ),
      array(
        'name'   => "msgid",
        'type'   => String,
        'desc'   => "String to translate.",
      ),
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "dcgettext",
    'desc'   => "Return the translation of msgid for domain_name and category,
	or msgid unaltered if a translation does not exist.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns the msgid translated or false on error.",
    ),
    'args'   => array(
      array(
        'name'   => "domain_name",
        'type'   => String,
        'desc'   => "Domain of the translation.",
      ),
      array(
        'name'   => "msgid",
        'type'   => String,
        'desc'   => "String to translate.",
      ),
      array(
        'name'   => "category",
        'type'   => Int64,
        'desc'   => "Category of the translation.",
      ),
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "bindtextdomain",
    'desc'   => "Bind to the text domain domain_name, looking for translations
	in dir. Returns the current domain.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns the current domain on success or false on error.",
    ),
    'args'   => array(
      array(
        'name'   => "domain_name",
        'type'   => String,
        'desc'   => "Domain of the translation.",
      ),
      array(
        'name'   => "dir",
        'type'   => String,
        'desc'   => "Directory to look for translations.",
      ),
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "ngettext",
    'desc'   => "Plural version of gettext",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns the appropriate translated plural of the msg or false
	  on error.",
    ),
    'args'   => array(
     array(
        'name'   => "msg",
        'type'   => String,
        'desc'   => "Message to translate.",
      ),
      array(
        'name'   => "msg_plural",
        'type'   => String,
        'desc'   => "Plural message to translate.",
      ),
      array(
        'name'   => "n",
        'type'   => Int64,
        'desc'   => "Plural chooser.",
      ),
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "dngettext",
    'desc'   => "Plural version of dgettext",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns the appropriate translated plural of the msg or false
	  on error.",
    ),
    'args'   => array(
      array(
        'name'   => "domain",
        'type'   => String,
        'desc'   => "Domain of the translation.",
      ),
      array(
        'name'   => "msg",
        'type'   => String,
        'desc'   => "Message to translate.",
      ),
      array(
        'name'   => "msg_plural",
        'type'   => String,
        'desc'   => "Plural message to translate.",
      ),
      array(
        'name'   => "n",
        'type'   => Int64,
        'desc'   => "Plural chooser.",
      ),
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "dcngettext",
    'desc'   => "Plural version of dcgettext",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns the appropriate translated plural of the msg or false
	  on error.",
    ),
    'args'   => array(
      array(
        'name'   => "domain",
        'type'   => String,
        'desc'   => "Domain of the translation.",
      ),
      array(
        'name'   => "msg",
        'type'   => String,
        'desc'   => "Message to translate.",
      ),
      array(
        'name'   => "msg_plural",
        'type'   => String,
        'desc'   => "Plural message to translate.",
      ),
      array(
        'name'   => "n",
        'type'   => Int64,
        'desc'   => "Plural chooser.",
      ),
      array(
        'name'   => "category",
        'type'   => Int64,
        'desc'   => "Category of the translation.",
      ),
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "bind_textdomain_codeset",
    'desc'   => "Specify the character encoding in which the messages from the
	DOMAIN message catalog will be returned.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns string on success and false otherwise.",
    ),
    'args'   => array(
     array(
        'name'   => "domain",
        'type'   => String,
        'desc'   => "Target domain",
      ),
      array(
        'name'   => "codeset",
        'type'   => String,
        'desc'   => "Character encoding to set.",
      ),
    ),
    'taint_observer' => false,
  ));

///////////////////////////////////////////////////////////////////////////////
// Classes
//
// BeginClass
// array (
//   'name'   => name of the class
//   'desc'   => description of the class's purpose
//   'flags'  => attributes of the class, see base.php for possible values
//   'note'   => additional note about this class's schema
//   'parent' => parent class name, if any
//   'ifaces' => array of interfaces tihs class implements
//   'bases'  => extra internal and special base classes this class requires
//   'footer' => extra C++ inserted at end of class declaration
// )
//
// DefineConstant(..)
// DefineConstant(..)
// ...
// DefineFunction(..)
// DefineFunction(..)
// ...
// DefineProperty
// DefineProperty
//
// array (
//   'name'  => name of the property
//   'type'  => type of the property
//   'flags' => attributes of the property
//   'desc'  => description of the property
//   'note'  => additional note about this property's schema
// )
//
// EndClass()

